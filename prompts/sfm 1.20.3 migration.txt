# Summary


## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\SetOperator.java

````java
package ca.teamdman.sfml.ast;

import java.util.List;
import java.util.Locale;
import java.util.function.BiPredicate;

public enum SetOperator implements ASTNode, BiPredicate<Boolean, List<Boolean>> {
    OVERALL((overall, __) -> overall),
    SOME((__, set) -> set.stream().anyMatch(Boolean::booleanValue)),
    EVERY((__, set) -> set.stream().allMatch(Boolean::booleanValue)),
    ONE((__, set) -> set.stream().filter(Boolean::booleanValue).count() == 1),
    LONE((__, set) -> set.stream().filter(Boolean::booleanValue).count() <= 1);

    private final BiPredicate<Boolean, List<Boolean>> PRED;

    SetOperator(BiPredicate<Boolean, List<Boolean>> pred) {
        this.PRED = pred;
    }

    public static SetOperator from(String text) {
        text = text.toUpperCase(Locale.ROOT);
        if (text.equals("EACH")) {
            text = "EVERY";
        }
        return SetOperator.valueOf(text);
    }

    @Override
    public boolean test(Boolean overall, List<Boolean> counts) {
        return PRED.test(overall, counts);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfml.ast;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\TimerTrigger.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.ProgramContext;

import java.util.List;

public record TimerTrigger(
        Interval interval,
        Block block
) implements Trigger {
    @Override
    public Block getBlock() {
        return block;
    }

    @Override
    public boolean shouldTick(ProgramContext context) {
        if (context.getExecutionPolicy() == ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES) return true;
        return context.getManager().getTick() % interval.getTicks() == 0;
    }

    @Override
    public void tick(ProgramContext context) {
        block.tick(context);
    }

    @Override
    public List<Statement> getStatements() {
        return List.of(block);
    }

    @Override
    public String toString() {
        String rtn = "EVERY " + interval + " DO\n"
                     + block.toString().indent(1).stripTrailing()
                     + "\nEND";
        return rtn;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\DiskItem.java

````java
package ca.teamdman.sfm.common.item;

import ca.teamdman.sfm.client.ClientStuff;
import ca.teamdman.sfm.client.ProgramSyntaxHighlightingHelper;
import ca.teamdman.sfm.client.registry.SFMKeyMappings;
import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.net.ServerboundDiskItemSetProgramPacket;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfm.common.util.SFMUtils;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.ChatFormatting;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.nbt.ListTag;
import net.minecraft.nbt.Tag;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.MutableComponent;
import net.minecraft.network.chat.contents.TranslatableContents;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResultHolder;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.level.Level;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.fml.DistExecutor;
import net.neoforged.fml.loading.FMLEnvironment;
import org.jetbrains.annotations.NotNull;

import javax.annotation.Nullable;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

public class DiskItem extends Item {
    public DiskItem() {
        super(new Item.Properties());
    }

    public static String getProgram(ItemStack stack) {
        return stack
                .getOrCreateTag()
                .getString("sfm:program");
    }

    public static Optional<Program> updateDetails(ItemStack stack, @Nullable ManagerBlockEntity manager) {
        AtomicReference<Program> rtn = new AtomicReference<>(null);
        Program.compile(
                getProgram(stack),
                (successProgram, builder) -> {
                    setProgramName(stack, successProgram.name());
                    setWarnings(stack, successProgram.gatherWarnings(stack, manager));
                    setErrors(stack, Collections.emptyList());
                    rtn.set(successProgram);
                },
                failure -> {
                    setWarnings(stack, Collections.emptyList());
                    setErrors(stack, failure);
                }
        );
        return Optional.ofNullable(rtn.get());
    }

    public static void setProgram(ItemStack stack, String program) {
        stack
                .getOrCreateTag()
                .putString("sfm:program", program.replaceAll("\r", ""));

    }

    @Override
    public @NotNull InteractionResultHolder<ItemStack> use(Level pLevel, Player pPlayer, InteractionHand pUsedHand) {
        var stack = pPlayer.getItemInHand(pUsedHand);
        if (pLevel.isClientSide) {
            ClientStuff.showProgramEditScreen(
                    stack,
                    programString -> SFMPackets.DISK_ITEM_CHANNEL.sendToServer(new ServerboundDiskItemSetProgramPacket(
                            programString,
                            pUsedHand
                    ))
            );
        }
        return InteractionResultHolder.sidedSuccess(stack, pLevel.isClientSide());
    }

    public static void setErrors(ItemStack stack, List<TranslatableContents> errors) {
        stack
                .getOrCreateTag()
                .put(
                        "sfm:errors",
                        errors
                                .stream()
                                .map(SFMUtils::serializeTranslation)
                                .collect(ListTag::new, ListTag::add, ListTag::addAll)
                );
    }


    public static void setWarnings(ItemStack stack, List<TranslatableContents> warnings) {
        stack
                .getOrCreateTag()
                .put(
                        "sfm:warnings",
                        warnings
                                .stream()
                                .map(SFMUtils::serializeTranslation)
                                .collect(ListTag::new, ListTag::add, ListTag::addAll)
                );
    }


    public static List<TranslatableContents> getErrors(ItemStack stack) {
        return stack
                .getOrCreateTag()
                .getList("sfm:errors", Tag.TAG_COMPOUND)
                .stream()
                .map(CompoundTag.class::cast)
                .map(SFMUtils::deserializeTranslation)
                .toList();
    }

    public static List<TranslatableContents> getWarnings(ItemStack stack) {
        return stack
                .getOrCreateTag()
                .getList("sfm:warnings", Tag.TAG_COMPOUND)
                .stream()
                .map(CompoundTag.class::cast)
                .map(SFMUtils::deserializeTranslation)
                .collect(
                        Collectors.toList());
    }

    public static String getProgramName(ItemStack stack) {
        return stack
                .getOrCreateTag()
                .getString("sfm:name");
    }

    public static void setProgramName(ItemStack stack, String name) {
        if (stack.getItem() instanceof DiskItem) {
            stack
                    .getOrCreateTag()
                    .putString("sfm:name", name);
        }
    }

    @Override
    public Component getName(ItemStack stack) {
        if (FMLEnvironment.dist == Dist.CLIENT) {
            if (ClientStuff.isMoreInfoKeyDown()) return super.getName(stack);
        }
        var name = getProgramName(stack);
        if (name.isEmpty()) return super.getName(stack);
        return Component.literal(name).withStyle(ChatFormatting.AQUA);
    }

    @Override
    public void appendHoverText(
            ItemStack stack, @Nullable Level level, List<Component> list, TooltipFlag detail
    ) {
        if (stack.hasTag()) {
            boolean showProgram = FMLEnvironment.dist.isClient() && ClientStuff.isMoreInfoKeyDown();
            if (!showProgram) {
                list.addAll(LabelPositionHolder.from(stack).asHoverText());
                getErrors(stack)
                        .stream()
                        .map(MutableComponent::create)
                        .map(line -> line.withStyle(ChatFormatting.RED))
                        .forEach(list::add);
                getWarnings(stack)
                        .stream()
                        .map(MutableComponent::create)
                        .map(line -> line.withStyle(ChatFormatting.YELLOW))
                        .forEach(list::add);
                list.add(Constants.LocalizationKeys.GUI_ADVANCED_TOOLTIP_HINT
                                 .getComponent(SFMKeyMappings.MORE_INFO_TOOLTIP_KEY.get().getTranslatedKeyMessage())
                                 .withStyle(ChatFormatting.AQUA));
            } else {
                var program = getProgram(stack);
                if (!program.isEmpty()) {
                    var start = Component.empty();
                    ChatFormatting[] rainbowColors = new ChatFormatting[]{
                            ChatFormatting.DARK_RED,
                            ChatFormatting.RED,
                            ChatFormatting.GOLD,
                            ChatFormatting.YELLOW,
                            ChatFormatting.DARK_GREEN,
                            ChatFormatting.GREEN,
                            ChatFormatting.DARK_AQUA,
                            ChatFormatting.AQUA,
                            ChatFormatting.DARK_BLUE,
                            ChatFormatting.BLUE,
                            ChatFormatting.DARK_PURPLE,
                            ChatFormatting.LIGHT_PURPLE
                    };
                    int rainbowColorsLength = rainbowColors.length;
                    int fullCycleLength = 2 * rainbowColorsLength - 2;
                    for (int i = 0; i < getName(stack).getString().length() - 2; i++) {
                        int cyclePosition = i % fullCycleLength;
                        int adjustedIndex = cyclePosition < rainbowColorsLength
                                            ? cyclePosition
                                            : fullCycleLength - cyclePosition;
                        ChatFormatting color = rainbowColors[adjustedIndex];
                        start = start.append(Component.literal("=").withStyle(color));
                    }
                    list.add(start);
                    list.addAll(ProgramSyntaxHighlightingHelper.withSyntaxHighlighting(program, false));
                }
            }
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\jei\FallingAnvilRecipe.java

````java
package ca.teamdman.sfm.client.jei;

public class FallingAnvilRecipe {

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMCreativeTabs.java

````java
package ca.teamdman.sfm.common.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.Constants;
import net.minecraft.core.registries.Registries;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.ItemStack;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.function.Supplier;

public class SFMCreativeTabs {
    private static final DeferredRegister<CreativeModeTab> CREATIVE_TABS = DeferredRegister.create(
            Registries.CREATIVE_MODE_TAB,
            SFM.MOD_ID
    );

    @SuppressWarnings("unused")
    public static final Supplier<CreativeModeTab> MAIN_TAB = CREATIVE_TABS.register(
            "main",
            () -> CreativeModeTab
                    .builder()
                    .title(Constants.LocalizationKeys.ITEM_GROUP.getComponent())
                    .icon(() -> new ItemStack(SFMBlocks.MANAGER_BLOCK.get()))
                    .displayItems(SFMItems::populateMainCreativeTab)
                    .build()
    );

    public static void register(IEventBus bus) {
        CREATIVE_TABS.register(bus);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java

````java
package ca.teamdman.sfm.common.recipe;

import ca.teamdman.sfm.common.registry.SFMRecipeSerializers;
import com.google.gson.JsonObject;
import net.minecraft.advancements.AdvancementHolder;
import net.minecraft.data.recipes.;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.item.crafting.RecipeSerializer;
import org.jetbrains.annotations.Nullable;

public class PrintingPressFinishedRecipe implements FinishedRecipe {
    private final ResourceLocation id;
    private final Ingredient form;
    private final Ingredient ink;
    private final Ingredient paper;

    public PrintingPressFinishedRecipe(
            ResourceLocation id,
            Ingredient form,
            Ingredient ink,
            Ingredient paper
    ) {
        this.id = id;
        this.form = form;
        this.ink = ink;
        this.paper = paper;
    }

    @Override
    public void serializeRecipeData(JsonObject json) {
        json.add("form", form.toJson(false));
        json.add("ink", ink.toJson(false));
        json.add("paper", paper.toJson(false));
    }

    @Override
    public ResourceLocation id() {
        return id;
    }

    @Override
    public RecipeSerializer<?> type() {
        return SFMRecipeSerializers.PRINTING_PRESS.get();
    }

    @Override
    public JsonObject serializeRecipe() {
        return FinishedRecipe.super.serializeRecipe();
    }

    @Nullable
    @Override
    public AdvancementHolder advancement() {
        return null;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\gui\screen\ProgramTemplatePickerScreen.java

````java
package ca.teamdman.sfm.client.gui.screen;

import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.registry.SFMResourceTypes;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.Button;
import net.minecraft.client.gui.screens.Screen;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.MutableComponent;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.packs.resources.Resource;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.stream.Collectors;

public class ProgramTemplatePickerScreen extends Screen {
    private final Consumer<String> CALLBACK;

    public ProgramTemplatePickerScreen(Consumer<String> callback) {
        super(Constants.LocalizationKeys.PROGRAM_TEMPLATE_PICKER_GUI_TITLE.getComponent());
        CALLBACK = callback;
    }

    @Override
    protected void init() {
        super.init();

        //discover template programs
        var irm = Minecraft.getInstance().getResourceManager();
        Map<ResourceLocation, Resource> found = irm.listResources(
                "template_programs",
                (path) -> path.getPath().endsWith(".sfml") || path.getPath().endsWith(".sfm")
        );
        Map<String, String> templatePrograms = new HashMap<>();
        for (var entry : found.entrySet()) {
            try (BufferedReader reader = entry.getValue().openAsReader()) {
                String program = reader.lines().collect(Collectors.joining("\n"));
                if (program.contains("$REPLACE_RESOURCE_TYPES_HERE$")) {
                    var replacement = SFMResourceTypes.DEFERRED_TYPES.keySet()
                            .stream()
                            .map(ResourceLocation::getPath)
                            .map(e -> "INPUT " + e + ":: FROM a")
                            .collect(Collectors.joining("\n    "));
                    program = program.replace("$REPLACE_RESOURCE_TYPES_HERE$", replacement);
                }
                String finalProgram = program;
                Program.compile(
                        program,
                        (successProgram, builder) -> templatePrograms.put(
                                successProgram.name().isBlank() ? entry.getKey().toString() : successProgram.name(),
                                finalProgram
                        ),
                        failure -> templatePrograms.put(entry.getKey().toString(), finalProgram)
                );
            } catch (IOException ignored) {
            }
        }

        // add picker buttons
        {
            int i = 0;
            int buttonWidth = templatePrograms.keySet()
                                      .stream()
                                      .mapToInt(this.font::width)
                                      .max().orElse(50) + 10;
            int buttonHeight = 20;
            int paddingX = 5;
            int paddingY = 5;
            int buttonsPerRow = this.width / (buttonWidth + paddingX);
            for (var entry : templatePrograms
                    .entrySet()
                    .stream()
                    .sorted((o1, o2) -> Comparator.<String>naturalOrder().compare(o1.getKey(), o2.getKey()))
                    .toList()) {
                int x = (this.width - (buttonWidth + paddingX) * Math.min(buttonsPerRow, templatePrograms.size())) / 2
                        + paddingX
                        + (i % buttonsPerRow) * (
                        buttonWidth
                        + paddingX
                );
                int y = 50 + (i / buttonsPerRow) * (buttonHeight + paddingY);
                addRenderableWidget(
                        Button.builder(
                                        Component.literal(entry.getKey()),
                                        btn -> {
                                            onClose();
                                            CALLBACK.accept(entry.getValue());
                                        }
                                )
                                .pos(x, y)
                                .size(buttonWidth, buttonHeight)
                                .build()
                );
                i++;
            }
        }
    }


    @Override
    public void render(GuiGraphics graphics, int pMouseX, int pMouseY, float pPartialTick) {
        this.renderTransparentBackground(graphics);
        this.renderTransparentBackground(graphics);
        this.renderTransparentBackground(graphics);
        super.render(graphics, pMouseX, pMouseY, pPartialTick);
        MutableComponent warning1 = Constants.LocalizationKeys.PROGRAM_TEMPLATE_PICKER_GUI_WARNING_1.getComponent();
        graphics.drawString(
                this.font,
                warning1,
                this.width / 2 - this.font.width(warning1) / 2,
                20,
                0xffffff,
                false
        );
        graphics.drawString(
                this.font,
                warning1,
                this.width / 2 - this.font.width(warning1) / 2,
                20,
                0xffffff,
                false
        );
        MutableComponent warning2 = Constants.LocalizationKeys.PROGRAM_TEMPLATE_PICKER_GUI_WARNING_2.getComponent();
        graphics.drawString(
                this.font,
                warning2,
                this.width / 2 - this.font.width(warning2) / 2,
                36,
                0xffffff,
                false
        );
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\RegexCache.java

````java
package ca.teamdman.sfm.common.program;

import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;

import java.util.Map;
import java.util.function.Predicate;
import java.util.regex.Pattern;

// Having this logic inside ResourceIdentifier.java causes classloading issues lol
public class RegexCache {
    private static final Map<String, Predicate<String>> patternCache = new Object2ObjectOpenHashMap<>();

    static {
        // we want to make common match-all patterns fast
        // resource names are lowercase alphanumeric with underscores
        String[] matchAny = new String[]{
                ".",
                "[a-z0-9/._-]",
                };
        String[] suffixes = new String[]{"+", "*"};
        for (String s : matchAny) {
            for (String suffix : suffixes) {
                patternCache.put(s + suffix, s1 -> true);
                patternCache.put("^" + s + suffix, s1 -> true);
                patternCache.put("^" + s + suffix + "$", s1 -> true);
                patternCache.put(s + suffix + "$", s1 -> true);
            }
        }
    }

    public static Predicate<String> buildPredicate(String possiblePattern) {
        return isRegexPattern(possiblePattern)
               ? patternCache.computeIfAbsent(possiblePattern, x -> Pattern.compile(x).asMatchPredicate())
               : possiblePattern::equals;
    }

    public static boolean isRegexPattern(String pattern) {
        String specialChars = ".?*+^$[](){}|\\";
        for (int i = 0; i < pattern.length(); i++) {
            if (specialChars.indexOf(pattern.charAt(i)) >= 0) {
                return true;
            }
        }
        return false;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\render\FormItemRenderer.java

````java
package ca.teamdman.sfm.client.render;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.client.ClientStuff;
import ca.teamdman.sfm.common.item.FormItem;
import com.mojang.blaze3d.vertex.PoseStack;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer;
import net.minecraft.client.renderer.ItemBlockRenderTypes;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.entity.ItemRenderer;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.ItemDisplayContext;
import net.minecraft.world.item.ItemStack;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.client.event.ModelEvent;

@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD, modid = SFM.MOD_ID, value = Dist.CLIENT)
public class FormItemRenderer extends BlockEntityWithoutLevelRenderer {

    private static final ResourceLocation BASE_MODEL = new ResourceLocation(SFM.MOD_ID, "item/form_base");

    public FormItemRenderer() {
        super(Minecraft.getInstance().getBlockEntityRenderDispatcher(), Minecraft.getInstance().getEntityModels());
    }

    @SubscribeEvent
    public static void registerModels(ModelEvent.RegisterAdditional event) {
        event.register(BASE_MODEL);
    }

    // Thanks Shadows
    // https://github.com/Shadows-of-Fire/Hostile-Neural-Networks/blob/1.18/src/main/java/shadows/hostilenetworks/client/DataModelItemStackRenderer.java#L71
    // https://discord.com/channels/313125603924639766/915304642668290119/1029330876208795758
    @Override
    public void renderByItem(
            ItemStack stack,
            ItemDisplayContext transformType,
            PoseStack poseStack,
            MultiBufferSource multiBuffer,
            int packedLight,
            int packedOverlay
    ) {
        if (!(stack.getItem() instanceof FormItem)) return;
        var renderer = Minecraft.getInstance().getItemRenderer();
        var baseModel = renderer.getItemModelShaper().getModelManager().getModel(BASE_MODEL);
        @SuppressWarnings("deprecation")
        var renderType = ItemBlockRenderTypes.getRenderType(stack, true);
        var buffer = ItemRenderer.getFoilBufferDirect(multiBuffer, renderType, true, stack.hasFoil());
        poseStack.pushPose();

        if (transformType != ItemDisplayContext.FIXED && transformType != ItemDisplayContext.GUI) {
            poseStack.scale(0.5F, 0.5F, 1F);
            poseStack.translate(0.5, 0.5, 0);
//            poseStack.mulPose(Vector3f.YP.rotationDegrees(-65));
        }

        if (ClientStuff.isMoreInfoKeyDown()) {
            poseStack.pushPose();
            poseStack.translate(0, 0.5f, 0.3f);
            poseStack.scale(0.5f, 0.5f, 0.5f);
            renderer.renderModelLists(baseModel, stack, packedLight, packedOverlay, poseStack, buffer);
            poseStack.popPose();

            var reference = FormItem.getReference(stack);
            if (!reference.isEmpty()) {
                var model = renderer.getItemModelShaper().getItemModel(reference.getItem());
                if (model != null) {
                    renderer.renderModelLists(model, stack, packedLight, packedOverlay, poseStack, buffer);
                }
            }
        } else {
            renderer.renderModelLists(baseModel, stack, packedLight, packedOverlay, poseStack, buffer);
        }

        poseStack.popPose();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMResourceTypes.java

````java
package ca.teamdman.sfm.common.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.compat.SFMCompat;
import ca.teamdman.sfm.common.resourcetype.FluidResourceType;
import ca.teamdman.sfm.common.resourcetype.ForgeEnergyResourceType;
import ca.teamdman.sfm.common.resourcetype.ItemResourceType;
import ca.teamdman.sfm.common.resourcetype.ResourceType;
import it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;
import net.minecraft.core.Registry;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.material.Fluid;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.energy.IEnergyStorage;
import net.neoforged.neoforge.fluids.FluidStack;
import net.neoforged.neoforge.fluids.capability.IFluidHandler;
import net.neoforged.neoforge.items.IItemHandler;
import net.neoforged.neoforge.registries.DeferredRegister;
import net.neoforged.neoforge.registries.RegistryBuilder;

import java.util.Objects;
import java.util.function.Supplier;

public class SFMResourceTypes {
    public static final ResourceKey<Registry<ResourceType<?, ?, ?>>> REGISTRY_ID = ResourceKey.createRegistryKey(new ResourceLocation(
            SFM.MOD_ID,
            "resource_type"
    ));

    private static final DeferredRegister<ResourceType<?, ?, ?>> RESOURCE_TYPES = DeferredRegister.create(
            REGISTRY_ID,
            SFM.MOD_ID
    );

    public static final Registry<ResourceType<?, ?, ?>> DEFERRED_TYPES = RESOURCE_TYPES.makeRegistry(
            registryBuilder->{});

    public static final Supplier<ResourceType<ItemStack, Item, IItemHandler>> ITEM = RESOURCE_TYPES.register(
            "item",
            ItemResourceType::new
    );
    public static final Supplier<ResourceType<FluidStack, Fluid, IFluidHandler>> FLUID = RESOURCE_TYPES.register(
            "fluid",
            FluidResourceType::new
    );
    public static final Supplier<ResourceType<Integer, Class<Integer>, IEnergyStorage>> FORGE_ENERGY = RESOURCE_TYPES.register(
            "forge_energy",
            ForgeEnergyResourceType::new
    );

    private static final Int2ObjectArrayMap<ResourceType<?, ?, ?>> DEFERRED_TYPES_BY_ID = new Int2ObjectArrayMap<>();

    public static ResourceType<?, ?, ?> fastLookup(String resourceTypeNamespace, String resourceTypeName) {
//        return DEFERRED_TYPES.get().getValue(new ResourceLocation(resourceTypeNamespace, resourceTypeName));
        return Objects.requireNonNull(DEFERRED_TYPES_BY_ID.computeIfAbsent(
                resourceTypeNamespace.hashCode() ^ resourceTypeName.hashCode(),
                i -> DEFERRED_TYPES.get(new ResourceLocation(resourceTypeNamespace, resourceTypeName))
        ));
    }

    static {
        if (SFMCompat.isMekanismLoaded()) {
//            ca.teamdman.sfm.common.compat.SFMMekanismCompat.register(RESOURCE_TYPES);
        }
    }

    public static void register(IEventBus bus) {
        RESOURCE_TYPES.register(bus);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\LimitedOutputSlotObjectPool.java

````java
package ca.teamdman.sfm.common.program;

import java.util.Arrays;
import java.util.List;

/**
 * A pool of {@link LimitedOutputSlot} objects to avoid the garbage collector
 * <p>
 * This assumes that the pool will be used in a single thread.
 */
public class LimitedOutputSlotObjectPool {
    public static final LimitedOutputSlotObjectPool INSTANCE = new LimitedOutputSlotObjectPool();
    @SuppressWarnings("rawtypes")
    private LimitedOutputSlot[] pool = new LimitedOutputSlot[1];
    private int index = -1;

    /**
     * Acquire a {@link LimitedOutputSlot} from the pool, or creates a new one if none available
     */
    public <STACK, ITEM, CAP> LimitedOutputSlot<STACK, ITEM, CAP> acquire(
            CAP handler,
            int slot,
            OutputResourceTracker<STACK, ITEM, CAP> tracker
    ) {
        if (index == -1) {
            return new LimitedOutputSlot<>(handler, slot, tracker);
        } else {
            @SuppressWarnings("unchecked") LimitedOutputSlot<STACK, ITEM, CAP> obj = pool[index];
            index--;
            obj.init(handler, slot, tracker);
            return obj;
        }
    }

    /**
     * Release a {@link LimitedOutputSlot} back into the pool for it to be reused instead of garbage collected
     */
    public void release(LimitedOutputSlot<?, ?, ?> obj) {
        if (index == pool.length - 1) {
            // we need to grow the array
            pool = Arrays.copyOf(pool, pool.length * 2);
        }
        pool[++index] = obj;
    }

    /**
     * Release a {@link LimitedOutputSlot} back into the pool for it to be reused instead of garbage collected
     */
    @SuppressWarnings("rawtypes")
    public void release(List<LimitedOutputSlot> slots) {
        // handle resizing
        if (index + slots.size() >= pool.length) {
            int slotsFree = pool.length - index - 1;
            int newLength = pool.length + slots.size() - slotsFree;
            pool = Arrays.copyOf(pool, newLength);
        }
        // add to pool
        for (LimitedOutputSlot<?, ?, ?> slot : slots) {
            index++;
            pool[index] = slot;
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ForgeEnergyResourceType.java

````java
package ca.teamdman.sfm.common.resourcetype;

import net.minecraft.core.Registry;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.neoforge.common.capabilities.Capabilities;
import net.neoforged.neoforge.energy.IEnergyStorage;
import org.apache.commons.lang3.NotImplementedException;

public class ForgeEnergyResourceType extends ResourceType<Integer, Class<Integer>, IEnergyStorage> {
    public ForgeEnergyResourceType() {
        super(Capabilities.ENERGY);
    }

    @Override
    public long getAmount(Integer integer) {
        return integer;
    }

    @Override
    public Integer getStackInSlot(IEnergyStorage iEnergyStorage, int slot) {
        return iEnergyStorage.getEnergyStored();
    }

    @Override
    public Integer extract(IEnergyStorage iEnergyStorage, int slot, long amount, boolean simulate) {
        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;
        return iEnergyStorage.extractEnergy(finalAmount, simulate);
    }

    @Override
    public int getSlots(IEnergyStorage handler) {
        return 1;
    }

    @Override
    public long getMaxStackSize(Integer integer) {
        return Long.MAX_VALUE;
    }

    @Override
    public long getMaxStackSize(IEnergyStorage iEnergyStorage, int slot) {
        return iEnergyStorage.getMaxEnergyStored();
    }

    @Override
    public Integer insert(IEnergyStorage iEnergyStorage, int slot, Integer integer, boolean simulate) {
        return integer - iEnergyStorage.receiveEnergy(integer, simulate);
    }

    @Override
    public boolean isEmpty(Integer integer) {
        return integer == 0;
    }

    @Override
    public boolean matchesStackType(Object o) {
        return o instanceof Integer;
    }

    @Override
    public boolean matchesCapabilityType(Object o) {
        return o instanceof IEnergyStorage;
    }

    @Override
    public Integer getEmptyStack() {
        return 0;
    }

    public static final ResourceLocation REGISTRY_KEY = new ResourceLocation("forge", "energy");

    @Override
    public ResourceLocation getRegistryKey(Integer integer) {
        return REGISTRY_KEY;
    }

    @Override
    public Registry<Class<Integer>> getRegistry() {
        throw new NotImplementedException();
    }

    @Override
    public boolean registryKeyExists(ResourceLocation location) {
        return location.equals(REGISTRY_KEY);
    }

    @Override
    public Class<Integer> getItem(Integer integer) {
        return Integer.class;
    }

    @Override
    public Integer copy(Integer integer) {
        return integer;
    }

    @Override
    protected Integer setCount(Integer integer, long amount) {
        return amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\exclude\InfuseResourceType.java

````java
package ca.teamdman.sfm.common.resourcetype.exclude;

import ca.teamdman.sfm.common.resourcetype.ResourceType;
import mekanism.api.Action;
import mekanism.api.MekanismAPI;
import mekanism.api.chemical.infuse.IInfusionHandler;
import mekanism.api.chemical.infuse.InfuseType;
import mekanism.api.chemical.infuse.InfusionStack;
import net.minecraft.core.Registry;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.capabilities.CapabilityManager;
import net.neoforged.neoforge.common.capabilities.CapabilityToken;
import org.apache.commons.lang3.NotImplementedException;

public class InfuseResourceType extends ResourceType<InfusionStack, InfuseType, IInfusionHandler> {
    public static final Capability<IInfusionHandler> CAP = CapabilityManager.get(new CapabilityToken<>() {
    });

    public InfuseResourceType() {
        super(CAP);
    }

    @Override
    public long getAmount(InfusionStack stack) {
        return stack.getAmount();
    }

    @Override
    public InfusionStack getStackInSlot(IInfusionHandler handler, int slot) {
        return handler.getChemicalInTank(slot);
    }

    @Override
    public InfusionStack extract(IInfusionHandler handler, int slot, long amount, boolean simulate) {
        return handler.extractChemical(slot, amount, simulate ? Action.SIMULATE : Action.EXECUTE);
    }

    @Override
    public int getSlots(IInfusionHandler handler) {
        return handler.getTanks();
    }

    @Override
    public long getMaxStackSize(InfusionStack stack) {
        return Long.MAX_VALUE;
    }

    @Override
    public long getMaxStackSize(IInfusionHandler handler, int slot) {
        return handler.getTankCapacity(slot);
    }

    @Override
    public InfusionStack insert(
            IInfusionHandler handler,
            int slot,
            InfusionStack stack,
            boolean simulate
    ) {
        return handler.insertChemical(slot, stack, simulate ? Action.SIMULATE : Action.EXECUTE);
    }

    @Override
    public boolean isEmpty(InfusionStack stack) {
        return stack.isEmpty();
    }

    @Override
    public InfusionStack getEmptyStack() {
        return InfusionStack.EMPTY;
    }

    @Override
    public boolean matchesStackType(Object o) {
        return o instanceof InfusionStack;
    }

    @Override
    public boolean matchesCapabilityType(Object o) {
        return o instanceof IInfusionHandler;
    }


    @Override
    public Registry<InfuseType> getRegistry() {
        throw new NotImplementedException();
//        return MekanismAPI.infuseTypeRegistry();
    }

    @Override
    public InfuseType getItem(InfusionStack stack) {
        return stack.getType();
    }

    @Override
    public InfusionStack copy(InfusionStack stack) {
        return stack.copy();
    }

    @Override
    protected InfusionStack setCount(InfusionStack stack, long amount) {
        stack.setAmount(amount);
        return stack;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ClientboundOutputInspectionResultsPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.client.ClientStuff;
import net.minecraft.network.FriendlyByteBuf;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ClientboundOutputInspectionResultsPacket(
        String results
) {
    public static final int MAX_RESULTS_LENGTH = 10240;

    public static void encode(
            ClientboundOutputInspectionResultsPacket msg, FriendlyByteBuf friendlyByteBuf
    ) {
        friendlyByteBuf.writeUtf(msg.results(), MAX_RESULTS_LENGTH);
    }

    public static ClientboundOutputInspectionResultsPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ClientboundOutputInspectionResultsPacket(
                friendlyByteBuf.readUtf(MAX_RESULTS_LENGTH)
        );
    }

    public static void handle(
            ClientboundOutputInspectionResultsPacket msg, NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> ClientStuff.showProgramEditScreen(msg.results, next -> {
        }));
        context.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Side.java

````java
package ca.teamdman.sfml.ast;

public enum Side implements ASTNode {
    TOP,
    BOTTOM,
    NORTH,
    SOUTH,
    EAST,
    WEST
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Number.java

````java
package ca.teamdman.sfml.ast;

public record Number(long value) implements ASTNode {
    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public Number add(Number number) {
        return new Number(value + number.value);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ResourceLimit.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.InputResourceTracker;
import ca.teamdman.sfm.common.program.OutputResourceTracker;

import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Consumer;
import java.util.function.Predicate;

import static ca.teamdman.sfml.ast.ResourceQuantity.IdExpansionBehaviour.EXPAND;
import static ca.teamdman.sfml.ast.ResourceQuantity.IdExpansionBehaviour.NO_EXPAND;

public record ResourceLimit<STACK, ITEM, CAP>(
        ResourceIdentifier<STACK, ITEM, CAP> resourceId,
        Limit limit
) implements ASTNode, Predicate<Object> {
    public static final ResourceLimit<?, ?, ?> TAKE_ALL_LEAVE_NONE = new ResourceLimit<>(
            ResourceIdentifier.MATCH_ALL, Limit.MAX_QUANTITY_NO_RETENTION
    );
    public static final ResourceLimit<?, ?, ?> ACCEPT_ALL_WITHOUT_RESTRAINT = new ResourceLimit<>(
            ResourceIdentifier.MATCH_ALL, Limit.MAX_QUANTITY_MAX_RETENTION
    );

    public ResourceLimit<STACK, ITEM, CAP> withDefaults(Limit defaults) {
        return new ResourceLimit<>(resourceId, limit.withDefaults(defaults));
    }

    public ResourceLimit<STACK, ITEM, CAP> withLimit(Limit limit) {
        return new ResourceLimit<>(resourceId, limit);
    }

    public void gatherInputTrackers(Consumer<InputResourceTracker<?, ?, ?>> gatherer, ResourceIdSet exclusions) {
        if (limit.quantity().idExpansionBehaviour() == NO_EXPAND) {
            if (limit.retention().idExpansionBehaviour() == NO_EXPAND) {
                // no sharing, single tracker
                gatherer.accept(new InputResourceTracker<>(
                        this,
                        exclusions,
                        new AtomicLong(0),
                        new AtomicLong(0)
                ));
            } else if (limit.retention().idExpansionBehaviour() == EXPAND) {
                // expand retention
                // share quantity
                AtomicLong quantity = new AtomicLong(0);
                resourceId
                        .expand()
                        .forEach(rid -> gatherer.accept(new InputResourceTracker<>(
                                new ResourceLimit<>(rid, limit),
                                exclusions,
                                quantity,
                                new AtomicLong(0)
                        )));
            }
        } else if (limit.quantity().idExpansionBehaviour() == EXPAND) {
            if (limit.retention().idExpansionBehaviour() == NO_EXPAND) {
                // expand quantity
                // share retention
                AtomicLong retention = new AtomicLong(0);
                resourceId
                        .expand()
                        .forEach(rid -> gatherer.accept(new InputResourceTracker<>(
                                new ResourceLimit<>(rid, limit),
                                exclusions,
                                new AtomicLong(0),
                                retention
                        )));
            } else if (limit.retention().idExpansionBehaviour() == EXPAND) {
                // no sharing, multiple trackers
                resourceId
                        .expand()
                        .forEach(rid -> gatherer.accept(new InputResourceTracker<>(
                                new ResourceLimit<>(rid, limit),
                                exclusions,
                                new AtomicLong(0),
                                new AtomicLong(0)
                        )));
            }
        }
    }

    public void gatherOutputTrackers(Consumer<OutputResourceTracker<?, ?, ?>> gatherer, ResourceIdSet exclusions) {
        if (limit.quantity().idExpansionBehaviour() == NO_EXPAND) {
            if (limit.retention().idExpansionBehaviour() == NO_EXPAND) {
                // single tracker
                gatherer.accept(new OutputResourceTracker<>(this, exclusions, new AtomicLong(0), new AtomicLong(0)));
            } else if (limit.retention().idExpansionBehaviour() == EXPAND) {
                // tracker for each retention, sharing quantity
                AtomicLong quantity = new AtomicLong(0);
                resourceId
                        .expand()
                        .forEach(rid -> gatherer.accept(new OutputResourceTracker<>(
                                new ResourceLimit<>(rid, limit),
                                exclusions,
                                quantity,
                                new AtomicLong(0)
                        )));
            }
        } else if (limit.quantity().idExpansionBehaviour() == EXPAND) {
            if (limit.retention().idExpansionBehaviour() == NO_EXPAND) {
                // tracker for each quantity, sharing retention
                AtomicLong retained = new AtomicLong(0);
                resourceId
                        .expand()
                        .forEach(rid -> gatherer.accept(new OutputResourceTracker<>(
                                new ResourceLimit<>(rid, limit),
                                exclusions,
                                new AtomicLong(0),
                                retained
                        )));
            } else if (limit.retention().idExpansionBehaviour() == EXPAND) {
                // expand both quantity and retention, no sharing
                resourceId
                        .expand()
                        .forEach(rid -> gatherer.accept(new OutputResourceTracker<>(
                                new ResourceLimit<>(rid, limit),
                                exclusions,
                                new AtomicLong(0),
                                new AtomicLong(0)
                        )));
            }
        }
    }

    public boolean test(Object stack) {
        return resourceId.test(stack);
    }

    @Override
    public String toString() {
        return limit + " " + resourceId;
    }

    public String toStringCondensed(Limit defaults) {
        return (limit.toStringCondensed(defaults) + " " + resourceId.toStringCondensed()).trim();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CableNetwork.java

````java
package ca.teamdman.sfm.common.cablenetwork;

import ca.teamdman.sfm.common.util.SFMUtils;
import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
import it.unimi.dsi.fastutil.longs.LongSet;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.world.level.Level;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.util.LazyOptional;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class CableNetwork {

    protected final Level LEVEL;
    protected final LongSet CABLE_POSITIONS = new LongOpenHashSet();
    protected final CapabilityCache CAPABILITY_CACHE = new CapabilityCache();

    public CableNetwork(Level level) {
        this.LEVEL = level;
    }

    /**
     * Only cable blocks are valid network members
     */
    public static boolean isCable(@Nullable Level world, BlockPos cablePos) {
        if (world == null) return false;
        return world
                .getBlockState(cablePos)
                .getBlock() instanceof ICableBlock;
    }

    public void rebuildNetwork(BlockPos start) {
        CABLE_POSITIONS.clear();
        CAPABILITY_CACHE.clear();
        discoverCables(start).forEach(this::addCable);
    }

    public void rebuildNetworkFromCache(BlockPos start, CableNetwork other) {
        CABLE_POSITIONS.clear();
        CAPABILITY_CACHE.clear();

        // discover connected cables
        var cables = SFMUtils.getRecursiveStream((current, next, results) -> {
            results.accept(current);
            for (Direction d : Direction.values()) {
                BlockPos offset = current.offset(d.getNormal());
                if (other.containsCablePosition(offset)) {
                    next.accept(offset);
                }
            }
        }, start).toList();
        for (BlockPos cablePos : cables) {
            CABLE_POSITIONS.add(cablePos.asLong());
        }

        // discover capabilities
        cables
                .stream()
                .flatMap(cablePos -> Arrays.stream(Direction.values()).map(Direction::getNormal).map(cablePos::offset))
                .distinct()
                .forEach(pos -> CAPABILITY_CACHE.overwriteFromOther(pos, other.CAPABILITY_CACHE));
    }

    public Stream<BlockPos> discoverCables(BlockPos startPos) {
        return SFMUtils.getRecursiveStream((current, next, results) -> {
            results.accept(current);
            for (Direction d : Direction.values()) {
                BlockPos offset = current.offset(d.getNormal());
                if (isCable(getLevel(), offset)) {
                    next.accept(offset);
                }
            }
        }, startPos);
    }

    public void addCable(BlockPos pos) {
        CABLE_POSITIONS.add(pos.asLong());
    }

    public Level getLevel() {
        return LEVEL;
    }

    @Override
    public String toString() {
        return "CableNetwork{level="
               + getLevel().dimension().location()
               + ", #cables="
               + getCableCount()
               + ", #cache="
               + CAPABILITY_CACHE.size()
               + "}";
    }

    /**
     * Cables should only join the network if they would be touching a cable already in the network
     *
     * @param pos Candidate cable position
     * @return {@code true} if adjacent to cable in network
     */
    public boolean isAdjacentToCable(BlockPos pos) {
        for (Direction direction : Direction.values()) {
            if (containsCablePosition(pos.offset(direction.getNormal()))) {
                return true;
            }
        }
        return false;
    }

    public boolean containsCablePosition(BlockPos pos) {
        return CABLE_POSITIONS.contains(pos.asLong());
    }

    public <CAP> @Nonnull LazyOptional<CAP> getCapability(
            Capability<CAP> cap,
            BlockPos pos,
            @Nullable Direction direction
    ) {
        return CAPABILITY_CACHE.getOrDiscoverCapability(LEVEL, pos, cap, direction);
    }

    public int getCableCount() {
        return CABLE_POSITIONS.size();
    }

    /**
     * Merges a network into this one, such as when a cable connects two networks
     *
     * @param other Foreign network
     */
    public void mergeNetwork(CableNetwork other) {
        CABLE_POSITIONS.addAll(other.CABLE_POSITIONS);
        CAPABILITY_CACHE.putAll(other.CAPABILITY_CACHE);
    }

    public boolean isEmpty() {
        return CABLE_POSITIONS.isEmpty();
    }

    public Stream<BlockPos> getCablePositions() {
        return CABLE_POSITIONS.longStream().mapToObj(BlockPos::of);
    }

    public Stream<BlockPos> getCapabilityProviderPositions() {
        return CAPABILITY_CACHE.getPositions();
    }

    /**
     * Discover what networks would exist if this network did not have a cable at {@code cablePos}.
     *
     * @param cablePos cable position to be removed
     * @return resulting networks to replace this network
     */
    protected List<CableNetwork> withoutCable(BlockPos cablePos) {
        CABLE_POSITIONS.remove(cablePos.asLong());
        List<CableNetwork> branches = new ArrayList<>();
        for (var direction : Direction.values()) {
            var offsetPos = cablePos.offset(direction.getNormal());
            if (!containsCablePosition(offsetPos)) continue;
            // make sure that a branch network doesn't already contain this cable
            if (branches.stream().anyMatch(n -> n.containsCablePosition(offsetPos))) continue;
            var branchNetwork = new CableNetwork(this.getLevel());
            branchNetwork.rebuildNetworkFromCache(offsetPos, this);
            branches.add(branchNetwork);
        }
        return branches;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\handler\LabelGunScrollSwitcher.java

````java
package ca.teamdman.sfm.client.handler;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.item.LabelGunItem;
import ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket;
import ca.teamdman.sfm.common.registry.SFMPackets;
import net.minecraft.client.Minecraft;
import net.minecraft.world.InteractionHand;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.client.event.InputEvent;

@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE, value = Dist.CLIENT)
public class LabelGunScrollSwitcher {
    @SubscribeEvent
    public static void onScroll(InputEvent.MouseScrollingEvent event) {
        var player = Minecraft.getInstance().player;
        if (player == null) return;
        if (!player.isShiftKeyDown()) return;
        var gun = player.getMainHandItem();
        var hand = InteractionHand.MAIN_HAND;
        if (!(gun.getItem() instanceof LabelGunItem)) {
            gun = player.getOffhandItem();
            hand = InteractionHand.OFF_HAND;
        }
        if (!(gun.getItem() instanceof LabelGunItem)) return;

        var next = LabelGunItem.getNextLabel(gun, event.getScrollDeltaY() < 0 ? -1 : 1);
        SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunUpdatePacket(
                next,
                hand
        ));

        event.setCanceled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\FluidResourceType.java

````java
package ca.teamdman.sfm.common.resourcetype;

import net.minecraft.core.Registry;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.level.material.Fluid;
import net.neoforged.neoforge.common.capabilities.Capabilities;
import net.neoforged.neoforge.fluids.FluidStack;
import net.neoforged.neoforge.fluids.capability.IFluidHandler;

public class FluidResourceType extends ResourceType<FluidStack, Fluid, IFluidHandler> {
    public FluidResourceType() {
        super(Capabilities.FLUID_HANDLER);
    }

    @Override
    public Registry<Fluid> getRegistry() {
        return BuiltInRegistries.FLUID;
    }

    @Override
    public Fluid getItem(FluidStack fluidStack) {
        return fluidStack.getFluid();
    }

    @Override
    public FluidStack copy(FluidStack fluidStack) {
        return fluidStack.copy();
    }

    @Override
    protected FluidStack setCount(FluidStack fluidStack, long amount) {
        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;
        fluidStack.setAmount(finalAmount);
        return fluidStack;
    }

    @Override
    public long getAmount(FluidStack stack) {
        return stack.getAmount();
    }

    @Override
    public FluidStack getStackInSlot(IFluidHandler cap, int slot) {
        return cap.getFluidInTank(slot);
    }

    @Override
    public FluidStack extract(IFluidHandler handler, int slot, long amount, boolean simulate) {
        var in          = getStackInSlot(handler, slot);
        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;
        var toExtract   = new FluidStack(in.getFluid(), Math.min(in.getAmount(), finalAmount));
        return handler.drain(
                toExtract,
                simulate ? IFluidHandler.FluidAction.SIMULATE : IFluidHandler.FluidAction.EXECUTE
        );
    }

    @Override
    public boolean matchesStackType(Object o) {
        return o instanceof FluidStack;
    }

    @Override
    public boolean matchesCapabilityType(Object o) {
        return o instanceof IFluidHandler;
    }

    @Override
    public int getSlots(IFluidHandler handler) {
        return handler.getTanks();
    }

    @Override
    public long getMaxStackSize(FluidStack fluidStack) {
        return Integer.MAX_VALUE;
    }

    @Override
    public long getMaxStackSize(IFluidHandler iFluidHandler, int slot) {
        return iFluidHandler.getTankCapacity(slot);
    }

    @Override
    public FluidStack insert(IFluidHandler handler, int slot, FluidStack stack, boolean simulate) {
        //todo: PR to forge to add a method that takes tank slot index
        var x = handler.fill(stack, simulate ? IFluidHandler.FluidAction.SIMULATE : IFluidHandler.FluidAction.EXECUTE);

        // convert units to find amount NOT inserted
        return new FluidStack(stack.getFluid(), stack.getAmount() - x);
    }

    @Override
    public boolean isEmpty(FluidStack stack) {
        return stack.isEmpty();
    }

    @Override
    public FluidStack getEmptyStack() {
        return FluidStack.EMPTY;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\containermenu\ManagerContainerMenu.java

````java
package ca.teamdman.sfm.common.containermenu;

import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.item.DiskItem;
import ca.teamdman.sfm.common.registry.SFMMenus;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.core.BlockPos;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.world.Container;
import net.minecraft.world.SimpleContainer;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.inventory.Slot;
import net.minecraft.world.item.ItemStack;

public class ManagerContainerMenu extends AbstractContainerMenu {
    public final Container CONTAINER;
    public final Inventory INVENTORY;
    public final BlockPos MANAGER_POSITION;
    public String program;
    public ManagerBlockEntity.State state;
    public long[] tickTimeNanos;


    public ManagerContainerMenu(
            int windowId,
            Inventory inv,
            Container container,
            BlockPos blockEntityPos,
            String program,
            ManagerBlockEntity.State state,
            long[] tickTimeNanos
    ) {
        super(SFMMenus.MANAGER_MENU.get(), windowId);
        checkContainerSize(container, 1);
        this.CONTAINER = container;
        this.INVENTORY = inv;
        this.MANAGER_POSITION = blockEntityPos;
        this.program = program;
        this.state = state;
        this.tickTimeNanos = tickTimeNanos;

        this.addSlot(new Slot(container, 0, 15, 47) {
            @Override
            public int getMaxStackSize() {
                return 1;
            }

            @Override
            public boolean mayPlace(ItemStack stack) {
                return stack.getItem() instanceof DiskItem;
            }
        });

        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 9; ++j) {
                this.addSlot(new Slot(inv, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
            }
        }

        for (int k = 0; k < 9; ++k) {
            this.addSlot(new Slot(inv, k, 8 + k * 18, 142));
        }
    }

    public ManagerContainerMenu(int windowId, Inventory inventory, FriendlyByteBuf buf) {
        this(
                windowId,
                inventory,
                new SimpleContainer(1),
                buf.readBlockPos(),
                buf.readUtf(Program.MAX_PROGRAM_LENGTH),
                buf.readEnum(ManagerBlockEntity.State.class),
                buf.readLongArray(null, ManagerBlockEntity.TICK_TIME_HISTORY_SIZE)
        );
    }

    public ManagerContainerMenu(int windowId, Inventory inventory, ManagerBlockEntity manager) {
        this(
                windowId,
                inventory,
                manager,
                manager.getBlockPos(),
                manager.getProgramString().orElse(""),
                manager.getState(),
                manager.getTickTimeNanos()
        );
    }

    public static void encode(ManagerBlockEntity manager, FriendlyByteBuf buf) {
        buf.writeBlockPos(manager.getBlockPos());
        buf.writeUtf(manager.getProgramString().orElse(""), Program.MAX_PROGRAM_LENGTH);
        buf.writeEnum(manager.getState());
        buf.writeLongArray(manager.getTickTimeNanos());
    }


    @Override
    public boolean stillValid(Player player) {
        return CONTAINER.stillValid(player);
    }

    @Override
    public ItemStack quickMoveStack(Player player, int slotIndex) {
        var slot = this.slots.get(slotIndex);
        if (!slot.hasItem()) return ItemStack.EMPTY;

        var containerEnd = CONTAINER.getContainerSize();
        var inventoryEnd = this.slots.size();

        var contents = slot.getItem();
        var result = contents.copy();

        if (slotIndex < containerEnd) {
            // clicked slot in container
            if (!this.moveItemStackTo(contents, containerEnd, inventoryEnd, true)) return ItemStack.EMPTY;
        } else {
            // clicked slot in inventory
            if (!this.moveItemStackTo(contents, 0, containerEnd, false)) return ItemStack.EMPTY;
        }

        if (contents.isEmpty()) {
            slot.set(ItemStack.EMPTY);
        } else {
            slot.setChanged();
        }
        return result;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\StringHolder.java

````java
package ca.teamdman.sfml.ast;

public record StringHolder(String value) implements ASTNode {
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\block\package-info.java

````java

@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.block;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\ExperienceGoop.java

````java
package ca.teamdman.sfm.common.item;

import net.minecraft.world.item.Item;

public class ExperienceGoop extends Item {
    public ExperienceGoop() {
        super(new Properties());
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\package-info.java

````java

@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.cablenetwork;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\package-info.java

````java
@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.client;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMMenus.java

````java
package ca.teamdman.sfm.common.registry;


import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.client.ClientStuff;
import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.inventory.MenuType;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.fml.loading.FMLEnvironment;
import net.neoforged.neoforge.common.extensions.IMenuTypeExtension;
import net.neoforged.neoforge.network.IContainerFactory;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.function.Supplier;

public class SFMMenus {
    private static final DeferredRegister<MenuType<?>> MENU_TYPES = DeferredRegister.create(
            BuiltInRegistries.MENU,
            SFM.MOD_ID
    );

    public static void register(IEventBus bus) {
        MENU_TYPES.register(bus);
    }

    public static final Supplier<MenuType<ManagerContainerMenu>> MANAGER_MENU = MENU_TYPES.register(
            "manager",
            () -> IMenuTypeExtension.create(
                    new IContainerFactory<>() {
                        @Override
                        public ManagerContainerMenu create(
                                int windowId,
                                Inventory inv,
                                FriendlyByteBuf data
                        ) {
                            return new ManagerContainerMenu(
                                    windowId,
                                    inv,
                                    data
                            );
                        }

                        @Override
                        public ManagerContainerMenu create(
                                int windowId,
                                Inventory inv
                        ) {
                            if (FMLEnvironment.dist.isClient()) {
                                BlockEntity be = ClientStuff.getLookBlockEntity();
                                if (!(be instanceof ManagerBlockEntity mbe)) {
                                    return IContainerFactory.super.create(windowId, inv);
                                }
                                return new ManagerContainerMenu(windowId, inv, mbe);
                            } else {
                                return IContainerFactory.super.create(
                                        windowId,
                                        inv
                                );
                            }
                        }
                    })
    );


}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\registry\SFMKeyMappings.java

````java
package ca.teamdman.sfm.client.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.Constants;
import com.mojang.blaze3d.platform.InputConstants;
import net.minecraft.client.KeyMapping;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.client.event.RegisterKeyMappingsEvent;
import net.neoforged.neoforge.client.settings.KeyConflictContext;
import net.neoforged.neoforge.client.settings.KeyModifier;
import net.neoforged.neoforge.common.util.Lazy;
import org.lwjgl.glfw.GLFW;


@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD, modid = SFM.MOD_ID, value = Dist.CLIENT)

public class SFMKeyMappings {
    public static final Lazy<KeyMapping> MORE_INFO_TOOLTIP_KEY = Lazy.of(() -> new KeyMapping(
            Constants.LocalizationKeys.MORE_HOVER_INFO_KEY.key().get(),
            KeyConflictContext.GUI,
            InputConstants.Type.KEYSYM,
            GLFW.GLFW_KEY_LEFT_SHIFT,
            Constants.LocalizationKeys.SFM_KEY_CATEGORY.key().get()
    ));

    public static final Lazy<KeyMapping> CONTAINER_INSPECTOR_KEY = Lazy.of(() -> new KeyMapping(
            Constants.LocalizationKeys.CONTAINER_INSPECTOR_TOGGLE_KEY.key().get(),
            KeyConflictContext.GUI,
            KeyModifier.CONTROL,
            InputConstants.Type.KEYSYM,
            GLFW.GLFW_KEY_I,
            Constants.LocalizationKeys.SFM_KEY_CATEGORY.key().get()
    ));

    @SubscribeEvent
    public static void registerBindings(RegisterKeyMappingsEvent event) {
        event.register(MORE_INFO_TOOLTIP_KEY.get());
        event.register(CONTAINER_INSPECTOR_KEY.get());
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\ProgramTokenContextActions.java

````java
package ca.teamdman.sfm.client;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.net.ServerboundInputInspectionRequestPacket;
import ca.teamdman.sfm.common.net.ServerboundLabelInspectionRequestPacket;
import ca.teamdman.sfm.common.net.ServerboundOutputInspectionRequestPacket;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfml.SFMLLexer;
import ca.teamdman.sfml.SFMLParser;
import ca.teamdman.sfml.ast.*;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.Token;

import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ProgramTokenContextActions {

    public static Optional<Runnable> getContextAction(String programString, int cursorPosition) {
        var lexer = new SFMLLexer(CharStreams.fromString(programString));
        var tokens = new CommonTokenStream(lexer);
        var parser = new SFMLParser(tokens);
        var builder = new ASTBuilder();
        try {
            builder.visitProgram(parser.program());
            SFM.LOGGER.info("Gathering context actions for cursor position " + cursorPosition);
            return Stream.concat(
                            builder
                                    .getNodesUnderCursor(cursorPosition)
                                    .stream(),
                            builder
                                    .getNodesUnderCursor(cursorPosition - 1)
                                    .stream()
                    )
                    .map(pair -> getContextAction(programString, builder, pair.a, pair.b, cursorPosition))
                    .filter(Optional::isPresent)
                    .map(Optional::get)
                    .findFirst();
        } catch (Throwable t) {
            return Optional.of(() -> ClientStuff.showProgramEditScreen("-- Encountered error, program parse failed:\n--"
                                                                       + t.getMessage(), next -> {
            }));
        }
    }

    public static Optional<Runnable> getContextAction(
            String programString,
            ASTBuilder builder,
            ASTNode node,
            ParserRuleContext parserRuleContext,
            int cursorPosition
    ) {
        SFM.LOGGER.info("Checking if context action exists for node {} {}", node.getClass(), node);
        if (node instanceof ResourceIdentifier<?, ?, ?> rid) {
            SFM.LOGGER.info("Found context action for resource identifier node");
            return Optional.of(() -> {
                String expansion = rid
                        .expand()
                        .stream()
                        .map(ResourceIdentifier::toStringCondensed)
                        .collect(Collectors.joining(",\n"));
                ClientStuff.showProgramEditScreen(expansion, next -> {
                });
            });
        } else if (node instanceof Label label) {
            SFM.LOGGER.info("Found context action for label node");
            return Optional.of(() -> SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundLabelInspectionRequestPacket(
                    label.name()
            )));
        } else if (node instanceof InputStatement) {
            if (cursorPosition > parserRuleContext.getStart().getStartIndex() + "INPUT".length()) {
                SFM.LOGGER.info("Found context action for input node, but the cursor isn't at the start of the node");
                return Optional.empty();
            }
            SFM.LOGGER.info("Found context action for input node");
            int nodeIndex = builder.getIndexForNode(node);
            return Optional.of(() -> SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundInputInspectionRequestPacket(
                    programString,
                    nodeIndex
            )));
        } else if (node instanceof OutputStatement) {
            if (cursorPosition > parserRuleContext.getStart().getStartIndex() + "OUTPUT".length()) {
                SFM.LOGGER.info("Found context action for output node, but the cursor isn't at the start of the node");
                return Optional.empty();
            }
            SFM.LOGGER.info("Found context action for output node");
            int nodeIndex = builder.getIndexForNode(node);
            return Optional.of(() -> SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundOutputInspectionRequestPacket(
                    programString,
                    nodeIndex
            )));
        }
        return Optional.empty();
    }

    public static boolean hasContextAction(Token token) {
        return switch (token.getType()) {
            case SFMLLexer.INPUT, SFMLLexer.OUTPUT, SFMLLexer.IDENTIFIER -> true;
            default -> false;
        };
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\jei\PrintingPressJEICategory.java

````java
package ca.teamdman.sfm.client.jei;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.item.FormItem;
import ca.teamdman.sfm.common.recipe.PrintingPressRecipe;
import ca.teamdman.sfm.common.registry.SFMBlocks;
import mezz.jei.api.gui.builder.IRecipeLayoutBuilder;
import mezz.jei.api.gui.drawable.IDrawable;
import mezz.jei.api.helpers.IJeiHelpers;
import mezz.jei.api.recipe.IFocusGroup;
import mezz.jei.api.recipe.RecipeIngredientRole;
import mezz.jei.api.recipe.RecipeType;
import mezz.jei.api.recipe.category.IRecipeCategory;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.ItemStack;

import java.util.Arrays;

public class PrintingPressJEICategory implements IRecipeCategory<PrintingPressRecipe> {

    public static final RecipeType<PrintingPressRecipe> RECIPE_TYPE = RecipeType.create(
            SFM.MOD_ID,
            "printing_press",
            PrintingPressRecipe.class
    );
    private final IDrawable background;
    private final IDrawable icon;
    private final IDrawable slot;

    public PrintingPressJEICategory(IJeiHelpers jeiHelpers) {
        background = jeiHelpers.getGuiHelper().createBlankDrawable(50, 54);
        icon = jeiHelpers.getGuiHelper().createDrawableItemStack(new ItemStack(SFMBlocks.PRINTING_PRESS_BLOCK.get()));
        slot = jeiHelpers.getGuiHelper().getSlotDrawable();
    }

    @Override
    public RecipeType<PrintingPressRecipe> getRecipeType() {
        return RECIPE_TYPE;
    }

    @Override
    public Component getTitle() {
        return Constants.LocalizationKeys.PRINTING_PRESS_JEI_CATEGORY_TITLE.getComponent();
    }

    @Override
    public IDrawable getBackground() {
        return background;
    }

    @Override
    public IDrawable getIcon() {
        return icon;
    }

    @Override
    public void setRecipe(IRecipeLayoutBuilder builder, PrintingPressRecipe recipe, IFocusGroup focuses) {
        builder
                .addSlot(RecipeIngredientRole.INPUT, 0, 0)
                .addItemStacks(Arrays.stream(recipe.FORM.getItems()).map(FormItem::getForm).toList())
                .setBackground(slot, -1, -1);
        builder.addSlot(RecipeIngredientRole.INPUT, 0, 18).addIngredients(recipe.INK).setBackground(slot, -1, -1);
        builder.addSlot(RecipeIngredientRole.INPUT, 0, 36).addIngredients(recipe.PAPER).setBackground(slot, -1, -1);
        builder.addSlot(RecipeIngredientRole.OUTPUT, 25, 18).addIngredients(recipe.FORM);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Label.java

````java
package ca.teamdman.sfml.ast;

public record Label(String name) implements ASTNode {
    @Override
    public String toString() {
        return name;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Statement.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.ProgramContext;

public interface Statement extends ASTNode {
    void tick(ProgramContext context);
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\IfStatement.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.ProgramContext;

import java.util.List;
import java.util.function.Predicate;

public record IfStatement(
        BoolExpr condition,
        Block trueBlock,
        Block falseBlock
) implements ASTNode, Statement {
    @Override
    public void tick(ProgramContext context) {
        Predicate<ProgramContext> condition = this.condition;
        if (context.getExecutionPolicy() == ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES) {
            condition = ctx -> {
                int conditionIndex = ctx.getProgram().getConditionIndex(this);
                return (ctx.getExplorationBranchIndex() & (1 << conditionIndex)) != 0;
            };
        }

        if (condition.test(context)) {
            context.pushPath(new ProgramContext.Branch(this, true));
            trueBlock.tick(context);
        } else {
            context.pushPath(new ProgramContext.Branch(this, false));
            falseBlock.tick(context);
        }

    }

    @Override
    public String toString() {
        var rtn = "IF " + condition + " THEN\n" + trueBlock.toString().strip().indent(1).stripTrailing();
        if (!falseBlock.getStatements().isEmpty()) {
            rtn += "\nELSE\n" + falseBlock.toString().strip().indent(1);
        }
        rtn += "\nEND";
//        var rtn = new StringBuilder();
//        rtn.append("IF ").append(condition).append(" THEN\n").append(trueBlock.toString().indent(1));
//        if (!falseBlock.getStatements().isEmpty()) {
//            rtn.append("\nELSE\n").append(falseBlock.toString().indent(1));
//        }
//        rtn.append("\nEND");
        return rtn.strip();
    }

    @Override
    public List<Statement> getStatements() {
        return List.of(trueBlock, falseBlock);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\block\ManagerBlock.java

````java
package ca.teamdman.sfm.common.block;

import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;
import ca.teamdman.sfm.common.cablenetwork.ICableBlock;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import com.mojang.serialization.MapCodec;
import net.minecraft.core.BlockPos;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.Container;
import net.minecraft.world.Containers;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.entity.BlockEntityTicker;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;
import net.minecraft.world.level.block.state.properties.BooleanProperty;
import net.minecraft.world.phys.BlockHitResult;
import net.neoforged.neoforge.network.NetworkHooks;
import org.apache.commons.lang3.NotImplementedException;

import javax.annotation.Nullable;

public class ManagerBlock extends BaseEntityBlock implements EntityBlock, ICableBlock {
    public static final BooleanProperty TRIGGERED = BlockStateProperties.TRIGGERED;

    public ManagerBlock() {
        super(BlockBehaviour.Properties.of()
                      .destroyTime(2)
                      .sound(SoundType.METAL));
        registerDefaultState(getStateDefinition().any().setValue(TRIGGERED, false));
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
        builder.add(TRIGGERED);
    }

    public RenderShape getRenderShape(BlockState state) {
        return RenderShape.MODEL;
    }

    @Override
    protected MapCodec<WaterTankBlock> codec() {
        throw new NotImplementedException("This isn't used until 1.20.5 apparently");
    }

    @Override
    @SuppressWarnings("deprecation")
    public void neighborChanged(
            BlockState state,
            Level level,
            BlockPos pos,
            Block block,
            BlockPos neighbourPos,
            boolean movedByPiston
    ) {
        if (!(level.getBlockEntity(pos) instanceof ManagerBlockEntity mgr)) return;
        if (!(level instanceof ServerLevel)) return;
        { // check redstone for triggers
            var isPowered = level.hasNeighborSignal(pos) || level.hasNeighborSignal(pos.above());
            var debounce  = state.getValue(TRIGGERED);
            if (isPowered && !debounce) {
                mgr.trackRedstonePulseUnprocessed();
                level.setBlock(pos, state.setValue(TRIGGERED, true), 4);
            } else if (!isPowered && debounce) {
                level.setBlock(pos, state.setValue(TRIGGERED, false), 4);
            }
        }
    }

    @Override
    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
        return SFMBlockEntities.MANAGER_BLOCK_ENTITY
                .get()
                .create(pos, state);
    }

    @Override
    @SuppressWarnings("deprecation")
    public InteractionResult use(
            BlockState state,
            Level level,
            BlockPos pos,
            Player player,
            InteractionHand hand,
            BlockHitResult hit
    ) {
        if (level.getBlockEntity(pos) instanceof ManagerBlockEntity manager && player instanceof ServerPlayer sp) {
            NetworkHooks.openScreen(sp, manager, buf -> ManagerContainerMenu.encode(manager, buf));
            return InteractionResult.CONSUME;
        }
        return InteractionResult.SUCCESS;
    }

    @Nullable
    @Override
    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(
            Level level,
            BlockState state,
            BlockEntityType<T> type
    ) {
        if (level.isClientSide()) return null;
        return createTickerHelper(type, SFMBlockEntities.MANAGER_BLOCK_ENTITY.get(), ManagerBlockEntity::serverTick);
    }

    @Override
    @SuppressWarnings("deprecation")
    public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean isMoving) {
        CableNetworkManager.getOrRegisterNetworkFromCablePosition(world, pos);
    }

    @Override
    @SuppressWarnings("deprecation")
    public void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean isMoving) {
        if (!state.is(newState.getBlock())) {
            if (level.getBlockEntity(pos) instanceof Container container) {
                Containers.dropContents(level, pos, container);
                level.updateNeighbourForOutputSignal(pos, this);
            }
            CableNetworkManager.removeCable(level, pos);
            super.onRemove(state, level, pos, newState, isMoving);
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\NetworkToolItem.java

````java
package ca.teamdman.sfm.common.item;

import ca.teamdman.sfm.client.registry.SFMKeyMappings;
import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;
import ca.teamdman.sfm.common.net.ServerboundNetworkToolUsePacket;
import ca.teamdman.sfm.common.registry.SFMPackets;
import net.minecraft.ChatFormatting;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.nbt.ListTag;
import net.minecraft.nbt.NbtUtils;
import net.minecraft.network.chat.Component;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.item.context.UseOnContext;
import net.minecraft.world.level.Level;

import javax.annotation.Nullable;
import java.util.List;

public class NetworkToolItem extends Item {
    public NetworkToolItem() {
        super(new Item.Properties().stacksTo(1));
    }

    @Override
    public InteractionResult onItemUseFirst(ItemStack stack, UseOnContext pContext) {
        if (pContext.getLevel().isClientSide) return InteractionResult.SUCCESS;

        SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundNetworkToolUsePacket(
                pContext.getClickedPos(),
                pContext.getClickedFace()
        ));
        return InteractionResult.CONSUME;
    }

    @Override
    public void appendHoverText(
            ItemStack stack, @Nullable Level level, List<Component> lines, TooltipFlag detail
    ) {
        lines.add(Constants.LocalizationKeys.NETWORK_TOOL_ITEM_TOOLTIP_1.getComponent().withStyle(ChatFormatting.GRAY));
        lines.add(Constants.LocalizationKeys.NETWORK_TOOL_ITEM_TOOLTIP_2.getComponent().withStyle(ChatFormatting.GRAY));
        lines.add(Constants.LocalizationKeys.NETWORK_TOOL_ITEM_TOOLTIP_3.getComponent(
                SFMKeyMappings.CONTAINER_INSPECTOR_KEY.get().getTranslatedKeyMessage()
        ).withStyle(ChatFormatting.AQUA));
    }

    @Override
    public void inventoryTick(ItemStack pStack, Level pLevel, Entity pEntity, int pSlotId, boolean pIsSelected) {
        if (pIsSelected && !pLevel.isClientSide && pEntity.tickCount % 20 == 0) {
            final long maxDistance = 128;
            CompoundTag tag = new CompoundTag();
            ListTag networks = new ListTag();
            CableNetworkManager
                    .getNetworksForLevel(pLevel)
                    .filter(net -> net
                            .getCablePositions()
                            .anyMatch(cablePos -> cablePos.distSqr(pEntity.blockPosition())
                                                  < maxDistance * maxDistance))
                    .forEach(net -> {
                        CompoundTag networkTag = new CompoundTag();
                        networkTag.put(
                                "cable_positions",
                                net
                                        .getCablePositions()
                                        .map(NbtUtils::writeBlockPos)
                                        .collect(ListTag::new, ListTag::add, ListTag::addAll)
                        );
                        networkTag.put(
                                "capability_provider_positions",
                                net
                                        .getCapabilityProviderPositions()
                                        .map(NbtUtils::writeBlockPos)
                                        .collect(ListTag::new, ListTag::add, ListTag::addAll)
                        );
                        networks.add(networkTag);
                    });
            tag.put("networks", networks);
            pStack.setTag(tag);
        }
    }


}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\SFMCompat.java

````java
package ca.teamdman.sfm.common.compat;

import net.neoforged.fml.ModList;
import net.neoforged.neoforge.capabilities.BlockCapability;
import net.neoforged.neoforge.capabilities.Capabilities;

import java.util.List;

public class SFMCompat {
    public static boolean isMekanismLoaded() {
        return ModList.get().getModContainerById("mekanism").isPresent();
    }

    public static List<BlockCapability<?,?>> getCapabilities() {
        return List.of(
                Capabilities.ItemHandler.BLOCK,
                Capabilities.FluidHandler.BLOCK,
                Capabilities.EnergyStorage.BLOCK
        );
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundLabelGunUsePacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.cablenetwork.CableNetwork;
import ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;
import ca.teamdman.sfm.common.item.LabelGunItem;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import ca.teamdman.sfm.common.util.SFMUtils;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.level.block.Block;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public record ServerboundLabelGunUsePacket(
        InteractionHand hand,
        BlockPos pos,
        boolean isCtrlKeyDown,
        boolean isShiftKeyDown
) {

    public static void encode(ServerboundLabelGunUsePacket msg, FriendlyByteBuf buf) {
        buf.writeEnum(msg.hand);
        buf.writeBlockPos(msg.pos);
        buf.writeBoolean(msg.isCtrlKeyDown);
        buf.writeBoolean(msg.isShiftKeyDown);
    }

    public static ServerboundLabelGunUsePacket decode(
            FriendlyByteBuf buf
    ) {
        return new ServerboundLabelGunUsePacket(
                buf.readEnum(InteractionHand.class),
                buf.readBlockPos(),
                buf.readBoolean(),
                buf.readBoolean()
        );
    }

    public static void handle(
            ServerboundLabelGunUsePacket msg, NetworkEvent.Context ctx
    ) {
        ctx.enqueueWork(() -> {
            var sender = ctx.getSender();
            if (sender == null) {
                return;
            }
            var stack = sender.getItemInHand(msg.hand);
            var level = sender.level();
            if (!(stack.getItem() instanceof LabelGunItem)) {
                return;
            }

            var gunLabels = LabelPositionHolder.from(stack);
            var pos = msg.pos;

            // target is a manager, perform push or pull action
            if (level.getBlockEntity(pos) instanceof ManagerBlockEntity manager) {
                manager.getDisk().ifPresent(disk -> {
                    if (msg.isShiftKeyDown) {
                        // start with labels from disk
                        var newLabels = LabelPositionHolder.from(disk);
                        // ensure script-referenced labels are included
                        manager.getReferencedLabels().forEach(newLabels::addReferencedLabel);
                        // save to gun
                        newLabels.save(stack);
                        // give feedback to player
                        sender.sendSystemMessage(Constants.LocalizationKeys.LABEL_GUN_CHAT_PULLED.getComponent());
                    } else {
                        // save gun labels to disk
                        gunLabels.save(disk);
                        // rebuild program
                        manager.rebuildProgramAndUpdateDisk();
                        // mark manager dirty
                        manager.setChanged();
                        // give feedback to player
                        sender.sendSystemMessage(Constants.LocalizationKeys.LABEL_GUN_CHAT_PUSHED.getComponent());
                    }
                });
                return;
            }

            // target is not a manager, we will perform label toggle
            var activeLabel = LabelGunItem.getActiveLabel(stack);
            if (activeLabel.isEmpty()) return;

            if (msg.isCtrlKeyDown) {
                // find all connected inventories of the same block type and toggle the label on all of them
                // if any of them don't have it, apply it, otherwise strip from all

                // find all cable positions so that we only include inventories adjacent to a cable
                Set<BlockPos> cablePositions = CableNetworkManager
                        .getNetworksForLevel(level)
                        .flatMap(CableNetwork::getCablePositions)
                        .collect(Collectors.toSet());

                // get positions of all connected blocks of the same type
                Block targetBlock = level.getBlockState(pos).getBlock();
                List<BlockPos> positions = SFMUtils.getRecursiveStream((current, nextQueue, results) -> {
                    results.accept(current);
                    for (var d : Direction.values()) {
                        var offset = current.offset(d.getNormal());
                        if (level.getBlockState(offset).getBlock() == targetBlock) {
                            // this is the block we are looking for
                            // ensure it is also adjacent to a cable
                            if (Arrays
                                    .stream(Direction.values())
                                    .anyMatch(d2 -> cablePositions.contains(offset.offset(d2.getNormal())))) {
                                nextQueue.accept(offset);
                            }
                        }
                    }
                }, pos).toList();

                // check if any of the positions are missing the label
                var existing = new HashSet<>(gunLabels.getPositions(activeLabel));
                boolean anyMissing = positions.stream().anyMatch(p -> !existing.contains(p));

                // apply or strip label from all positions
                if (anyMissing) {
                    gunLabels.addAll(activeLabel, positions);
                } else {
                    positions.forEach(p -> gunLabels.remove(activeLabel, p));
                }
            } else {
                // normal behaviour - operate on a single position
                if (msg.isShiftKeyDown) {
                    // clear all labels from this position
                    gunLabels.remove(pos);
                } else {
                    // toggle the active label for this position
                    gunLabels.toggle(activeLabel, pos);
                }
            }

            // write changes to label gun stack
            gunLabels.save(stack);
        });
        ctx.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundLabelGunUpdatePacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.item.LabelGunItem;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.world.InteractionHand;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ServerboundLabelGunUpdatePacket(
        String label,
        InteractionHand hand
) {
    public static final int MAX_LABEL_LENGTH = 80;

    public static void encode(ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket msg, FriendlyByteBuf buf) {
        buf.writeUtf(msg.label, MAX_LABEL_LENGTH);
        buf.writeEnum(msg.hand);
    }

    public static ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket decode(
            FriendlyByteBuf buf
    ) {
        return new ServerboundLabelGunUpdatePacket(buf.readUtf(MAX_LABEL_LENGTH), buf.readEnum(InteractionHand.class));
    }

    public static void handle(
            ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket msg, NetworkEvent.Context ctx
    ) {
        ctx.enqueueWork(() -> {
            var sender = ctx.getSender();
            if (sender == null) {
                return;
            }
            var stack = sender.getItemInHand(msg.hand);
            if (stack.getItem() instanceof LabelGunItem) {
                LabelGunItem.setActiveLabel(stack, msg.label);
            }
        });
        ctx.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\exclude\SlurryResourceType.java

````java
package ca.teamdman.sfm.common.resourcetype.exclude;

import ca.teamdman.sfm.common.resourcetype.ResourceType;
import mekanism.api.Action;
import mekanism.api.MekanismAPI;
import mekanism.api.chemical.slurry.ISlurryHandler;
import mekanism.api.chemical.slurry.Slurry;
import mekanism.api.chemical.slurry.SlurryStack;
import net.minecraft.core.Registry;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.capabilities.CapabilityManager;
import net.neoforged.neoforge.common.capabilities.CapabilityToken;
import org.apache.commons.lang3.NotImplementedException;

public class SlurryResourceType extends ResourceType<SlurryStack, Slurry, ISlurryHandler> {
    public static final Capability<ISlurryHandler> CAP = CapabilityManager.get(new CapabilityToken<>() {
    });

    public SlurryResourceType() {
        super(CAP);
    }

    @Override
    public long getAmount(SlurryStack stack) {
        return stack.getAmount();
    }

    @Override
    public SlurryStack getStackInSlot(ISlurryHandler handler, int slot) {
        return handler.getChemicalInTank(slot);
    }

    @Override
    public SlurryStack extract(ISlurryHandler handler, int slot, long amount, boolean simulate) {
        return handler.extractChemical(slot, amount, simulate ? Action.SIMULATE : Action.EXECUTE);
    }

    @Override
    public int getSlots(ISlurryHandler handler) {
        return handler.getTanks();
    }

    @Override
    public long getMaxStackSize(SlurryStack stack) {
        return Long.MAX_VALUE;
    }

    @Override
    public long getMaxStackSize(ISlurryHandler handler, int slot) {
        return handler.getTankCapacity(slot);
    }

    @Override
    public SlurryStack insert(
            ISlurryHandler handler,
            int slot,
            SlurryStack stack,
            boolean simulate
    ) {
        return handler.insertChemical(slot, stack, simulate ? Action.SIMULATE : Action.EXECUTE);
    }

    @Override
    public boolean isEmpty(SlurryStack stack) {
        return stack.isEmpty();
    }

    @Override
    public SlurryStack getEmptyStack() {
        return SlurryStack.EMPTY;
    }

    @Override
    public boolean matchesStackType(Object o) {
        return o instanceof SlurryStack;
    }

    @Override
    public boolean matchesCapabilityType(Object o) {
        return o instanceof ISlurryHandler;
    }


    @Override
    public Registry<Slurry> getRegistry() {
        throw new NotImplementedException();
//        return MekanismAPI.slurryRegistry();
    }

    @Override
    public Slurry getItem(SlurryStack stack) {
        return stack.getType();
    }

    @Override
    public SlurryStack copy(SlurryStack stack) {
        return stack.copy();
    }

    @Override
    protected SlurryStack setCount(SlurryStack stack, long amount) {
        stack.setAmount(amount);
        return stack;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Trigger.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.ProgramContext;

import java.util.List;

public interface Trigger extends Statement {
    boolean shouldTick(ProgramContext context);

    Block getBlock();

    @Override
    default List<Statement> getStatements() {
        return List.of(getBlock());
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\gui\screen\package-info.java

````java
@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.client.gui.screen;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMRecipeTypes.java

````java
package ca.teamdman.sfm.common.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.recipe.PrintingPressRecipe;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.crafting.RecipeType;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.function.Supplier;

public class SFMRecipeTypes {
    private static final DeferredRegister<RecipeType<?>> RECIPE_TYPES = DeferredRegister.create(
            BuiltInRegistries.RECIPE_TYPE,
            SFM.MOD_ID
    );

    public static final Supplier<RecipeType<PrintingPressRecipe>> PRINTING_PRESS = RECIPE_TYPES.register(
            "printing_press",
            () -> RecipeType.simple(new ResourceLocation(SFM.MOD_ID, "printing_press"))
    );

    public static void register(IEventBus bus) {
        RECIPE_TYPES.register(bus);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\package-info.java

````java

@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.blockentity;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundManagerResetPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.registry.SFMPackets;
import net.minecraft.core.BlockPos;
import net.minecraft.network.FriendlyByteBuf;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ServerboundManagerResetPacket(
        int windowId,
        BlockPos pos
) {
    public static void encode(ServerboundManagerResetPacket msg, FriendlyByteBuf friendlyByteBuf) {
        friendlyByteBuf.writeVarInt(msg.windowId());
        friendlyByteBuf.writeBlockPos(msg.pos());
    }

    public static ServerboundManagerResetPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ServerboundManagerResetPacket(
                friendlyByteBuf.readVarInt(),
                friendlyByteBuf.readBlockPos()
        );
    }

    public static void handle(ServerboundManagerResetPacket msg, NetworkEvent.Context context) {
        SFMPackets.handleServerboundContainerPacket(
                context,
                ManagerContainerMenu.class,
                ManagerBlockEntity.class,
                msg.pos,
                msg.windowId,
                (menu, manager) -> manager.reset()
        );
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundNetworkToolUsePacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;
import ca.teamdman.sfm.common.compat.SFMCompat;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfm.common.registry.SFMResourceTypes;
import ca.teamdman.sfm.common.util.SFMUtils;
import ca.teamdman.sfml.ast.DirectionQualifier;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceKey;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.neoforged.fml.loading.FMLEnvironment;
import net.neoforged.neoforge.network.NetworkEvent;
import net.neoforged.neoforge.network.PacketDistributor;

import java.util.function.Supplier;
import java.util.stream.Collectors;

public record ServerboundNetworkToolUsePacket(
        BlockPos blockPosition,
        Direction blockFace
) {
    public static void encode(ServerboundNetworkToolUsePacket msg, FriendlyByteBuf friendlyByteBuf) {
        friendlyByteBuf.writeBlockPos(msg.blockPosition);
        friendlyByteBuf.writeEnum(msg.blockFace);
    }

    public static ServerboundNetworkToolUsePacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ServerboundNetworkToolUsePacket(
                friendlyByteBuf.readBlockPos(),
                friendlyByteBuf.readEnum(Direction.class)
        );
    }

    public static void handle(
            ServerboundNetworkToolUsePacket msg, NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> {
            // we don't know if the player has the program edit screen open from a manager or a disk in hand
            ServerPlayer player = context.getSender();
            if (player == null) return;
            Level level = player.level();
            BlockPos pos = msg.blockPosition();
            if (!level.isLoaded(pos)) return;
            StringBuilder payload = new StringBuilder()
                    .append("---- block position ----\n")
                    .append(pos)
                    .append("\n---- block state ----\n");
            BlockState state = level.getBlockState(pos);
            payload.append(state).append("\n");

            CableNetworkManager.getNetworkFromPosition(level, pos).ifPresent(net -> {
                payload.append("---- cable network ----\n");
                payload.append(net).append("\n");
            });

            BlockEntity entity = level.getBlockEntity(pos);
            if (entity != null) {
                if (!FMLEnvironment.production) {
                    payload.append("---- (dev only) block entity ----\n");
                    payload.append(entity).append("\n");
                }
                payload.append("---- capability directions ----\n");
                for (var cap : SFMCompat.getCapabilities()) {
                    payload
                            .append(cap.getName())
                            .append(": ");
                    String directions = DirectionQualifier.EVERY_DIRECTION
                            .stream()
                            .filter(dir -> entity.getCapability(cap, dir).isPresent())
                            .map(dir -> dir == null ? "NULL DIRECTION" : DirectionQualifier.directionToString(dir))
                            .collect(Collectors.joining(", ", "[", "]"));
                    payload.append(directions).append("\n");
                }
            }


            payload.append("---- exports ----\n");
            int len = payload.length();
            //noinspection unchecked,rawtypes
            SFMResourceTypes.DEFERRED_TYPES
                    .entrySet()
                    .forEach(entry -> payload.append(ServerboundContainerExportsInspectionRequestPacket.buildInspectionResults(
                            (ResourceKey) entry.getKey(),
                            entry.getValue(),
                            level,
                            pos,
                            msg.blockFace
                    )));
            if (payload.length() == len) {
                payload.append("No exports found");
            }
            payload.append("\n");


            if (entity != null) {
                if (player.hasPermissions(2)) {
                    payload.append("---- (op only) nbt data ----\n");
                    payload.append(entity.serializeNBT()).append("\n");
                }
            }


            SFMPackets.INSPECTION_CHANNEL.send(
                    PacketDistributor.PLAYER.with(() -> player),
                    new ClientboundInputInspectionResultsPacket(
                            SFMUtils.truncate(
                                    payload.toString(),
                                    ClientboundInputInspectionResultsPacket.MAX_RESULTS_LENGTH
                            ))
            );
        });
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\handler\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.handler;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.program;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.resourcetype;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundLabelGunClearPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.item.LabelGunItem;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.world.InteractionHand;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ServerboundLabelGunClearPacket(
        InteractionHand hand
) {
    public static void encode(ServerboundLabelGunClearPacket msg, FriendlyByteBuf buf) {
        buf.writeEnum(msg.hand);
    }

    public static ServerboundLabelGunClearPacket decode(
            FriendlyByteBuf buf
    ) {
        return new ServerboundLabelGunClearPacket(buf.readEnum(InteractionHand.class));
    }

    public static void handle(
            ServerboundLabelGunClearPacket msg, NetworkEvent.Context ctx
    ) {
        ctx.enqueueWork(() -> {
            var sender = ctx.getSender();
            if (sender == null) {
                return;
            }
            var stack = sender.getItemInHand(msg.hand);
            if (stack.getItem() instanceof LabelGunItem) {
                LabelPositionHolder.empty().save(stack);
            }
        });
        ctx.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\jei\FallingAnvilExperienceShardRecipe.java

````java
package ca.teamdman.sfm.client.jei;

public class FallingAnvilExperienceShardRecipe extends FallingAnvilRecipe {

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ClientboundLabelInspectionResultsPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.client.ClientStuff;
import net.minecraft.network.FriendlyByteBuf;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ClientboundLabelInspectionResultsPacket(
        String results
) {
    public static final int MAX_RESULTS_LENGTH = 50_000;

    public static void encode(
            ClientboundLabelInspectionResultsPacket msg, FriendlyByteBuf friendlyByteBuf
    ) {
        friendlyByteBuf.writeUtf(msg.results(), MAX_RESULTS_LENGTH);
    }

    public static ClientboundLabelInspectionResultsPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ClientboundLabelInspectionResultsPacket(
                friendlyByteBuf.readUtf(MAX_RESULTS_LENGTH)
        );
    }

    public static void handle(
            ClientboundLabelInspectionResultsPacket msg, NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> ClientStuff.showProgramEditScreen(msg.results, next -> {
        }));
        context.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\RoundRobin.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.LabelPositionHolder;
import net.minecraft.core.BlockPos;

import java.util.Collection;
import java.util.List;
import java.util.stream.Stream;

public class RoundRobin implements ASTNode {
    private final Behaviour behaviour;
    private int index = 0;

    public RoundRobin(Behaviour behaviour) {
        this.behaviour = behaviour;
    }

    public static RoundRobin disabled() {
        return new RoundRobin(Behaviour.UNMODIFIED);
    }

    public Stream<BlockPos> gather(LabelAccess labelAccess, LabelPositionHolder labelPositions) {
        return switch (behaviour) {
            case BY_LABEL -> {
                int index = this.next(labelAccess.labels().size());
                yield labelPositions.getPositions(labelAccess.labels().get(index).name()).stream();
            }
            case BY_BLOCK -> {
                List<BlockPos> positions = labelAccess.labels().stream()
                        .map(Label::name)
                        .map(labelPositions::getPositions)
                        .flatMap(Collection::stream)
                        .distinct()
                        .toList();
                if (positions.isEmpty()) {
                    yield Stream.empty();
                }
                yield Stream.of(positions.get(this.next(positions.size())));
            }
            default -> labelAccess.labels().stream()
                    .map(Label::name)
                    .map(labelPositions::getPositions)
                    .flatMap(Collection::stream);
        };
    }

    public int next(int max) {
        return index++ % max;
    }

    @Override
    public String toString() {
        return switch (behaviour) {
            case UNMODIFIED -> "NOT ROUND ROBIN";
            case BY_BLOCK -> "ROUND ROBIN BY BLOCK";
            case BY_LABEL -> "ROUND ROBIN BY LABEL";
        };
    }

    public boolean isEnabled() {
        return behaviour != Behaviour.UNMODIFIED;
    }

    public enum Behaviour {
        UNMODIFIED,
        BY_BLOCK,
        BY_LABEL
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\gui\EditorUtils.java

````java
package ca.teamdman.sfm.client.gui;

public class EditorUtils {
    private static int findLineStart(String content, int cursorPos) {
        while (cursorPos > 0 && content.charAt(cursorPos - 1) != '\n') {
            cursorPos--;
        }
        return cursorPos;
    }

    private static int findLineEnd(String content, int cursorPos) {
        while (cursorPos < content.length() && content.charAt(cursorPos) != '\n') {
            cursorPos++;
        }
        return cursorPos;
    }

    /**
     * Indents the given content, and updates the cursor and selection.
     *
     * @param content            The content to indent
     * @param cursorPos          The index within the string of the cursor
     * @param selectionCursorPos The index within the string of the selection cursor. If equal to cursorPosition, no selection is present.
     * @return The indented content, and the new cursor and selection cursor positions
     */
    public static ManipulationResult indent(String content, int cursorPos, int selectionCursorPos) {
        StringBuilder sb = new StringBuilder(content);
        int lineStart = findLineStart(content, Math.min(cursorPos, selectionCursorPos));
        int lineEnd = findLineEnd(content, Math.max(cursorPos, selectionCursorPos));
        if (lineStart == lineEnd) {
            sb.insert(lineStart, "    ");
            if (lineStart <= cursorPos) {
                cursorPos += 4;
            }
            if (lineStart <= selectionCursorPos) {
                selectionCursorPos += 4;
            }
        } else {
            while (lineStart < lineEnd) {
                sb.insert(lineStart, "    ");
                lineEnd += 4;
                if (lineStart < cursorPos) {
                    cursorPos += 4;
                }
                if (lineStart < selectionCursorPos) {
                    selectionCursorPos += 4;
                }
                lineStart = findLineEnd(sb.toString(), lineStart) + 1;
            }
        }
        return new ManipulationResult(sb.toString(), cursorPos, selectionCursorPos);
    }

    /**
     * Deindents the given content, and updates the cursor and selection.
     *
     * @param content            The content to deindent
     * @param cursorPos          The index within the string of the cursor
     * @param selectionCursorPos The index within the string of the selection cursor. If equal to cursorPosition, no selection is present.
     * @return The deindented content, and the new cursor and selection cursor positions
     */
    public static ManipulationResult deindent(String content, int cursorPos, int selectionCursorPos) {
        StringBuilder sb = new StringBuilder(content);
        int lineStart = findLineStart(content, Math.min(cursorPos, selectionCursorPos));
        int lineEnd = findLineEnd(content, Math.max(cursorPos, selectionCursorPos));

        while (lineStart < lineEnd) {
            for (int i = 0; i < 4 && lineStart < sb.length() && sb.charAt(lineStart) == ' '; i++) {
                sb.deleteCharAt(lineStart);
                lineEnd--;
                if (lineStart < cursorPos) {
                    cursorPos--;
                }
                if (lineStart < selectionCursorPos) {
                    selectionCursorPos--;
                }
            }
            lineStart = findLineEnd(sb.toString(), lineStart) + 1;
        }
        return new ManipulationResult(sb.toString(), cursorPos, selectionCursorPos);
    }

    /**
     * Perform the operation for hitting Ctrl+/
     * If the selection contains a line not starting with "--", prepend each line with "--"
     * If all lines in the selection start with "--", trim "--" from the start of each line
     *
     * @param content The content in the buffer
     * @param cursorPos The index within the content for the cursor position
     * @param selectionCursorPos The index within the content for the selection cursor. If equal to cursorPosition, no selection is present.
     * @return The modified content, and the new cursor positions accommodating the shifting of said content
     */
    public static ManipulationResult toggleComments(String content, int cursorPos, int selectionCursorPos) {
        StringBuilder sb = new StringBuilder(content);
        int lineStart = findLineStart(content, Math.min(cursorPos, selectionCursorPos));
        int lineEnd = findLineEnd(content, Math.max(cursorPos, selectionCursorPos));

        boolean allLinesCommented = true;
        while (lineStart < lineEnd) {
            if (lineStart + 2 >= sb.length() || sb.charAt(lineStart) != '-' || sb.charAt(lineStart + 1) != '-') {
                allLinesCommented = false;
                break;
            }
            lineStart = findLineEnd(sb.toString(), lineStart) + 1;
        }

        lineStart = findLineStart(content, Math.min(cursorPos, selectionCursorPos));
        lineEnd = findLineEnd(content, Math.max(cursorPos, selectionCursorPos));

        if (allLinesCommented) {
            while (lineStart < lineEnd) {
                sb.delete(lineStart, lineStart + 2);
                lineEnd -= 2;
                if (lineStart < cursorPos) {
                    cursorPos -= 2;
                }
                if (lineStart < selectionCursorPos) {
                    selectionCursorPos -= 2;
                }
                lineStart = findLineEnd(sb.toString(), lineStart) + 1;
            }
        } else {
            while (lineStart < lineEnd) {
                sb.insert(lineStart, "--");
                lineEnd += 2;
                if (lineStart <= cursorPos) {
                    cursorPos += 2;
                }
                if (lineStart <= selectionCursorPos) {
                    selectionCursorPos += 2;
                }
                lineStart = findLineEnd(sb.toString(), lineStart) + 1;
            }
        }
        return new ManipulationResult(sb.toString(), cursorPos, selectionCursorPos);
    }

    public record ManipulationResult(
            String content,
            int cursorPosition,
            int selectionCursorPosition
    ) {
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\DirectionQualifier.java

````java
package ca.teamdman.sfml.ast;

import net.minecraft.core.Direction;

import javax.annotation.Nullable;
import java.util.EnumSet;
import java.util.stream.Stream;

public record DirectionQualifier(EnumSet<Direction> directions) implements ASTNode {

    public static DirectionQualifier NULL_DIRECTION = new DirectionQualifier(EnumSet.noneOf(Direction.class));
    public static DirectionQualifier EVERY_DIRECTION = new DirectionQualifier(EnumSet.allOf(Direction.class));

    public static Direction lookup(Side side) {
        return switch (side) {
            case TOP -> Direction.UP;
            case BOTTOM -> Direction.DOWN;
            case NORTH -> Direction.NORTH;
            case SOUTH -> Direction.SOUTH;
            case EAST -> Direction.EAST;
            case WEST -> Direction.WEST;
        };
    }

    public static String directionToString(@Nullable Direction direction) {
        if (direction == null) return "";
        return switch (direction) {
            case UP -> "TOP";
            case DOWN -> "BOTTOM";
            case NORTH -> "NORTH";
            case SOUTH -> "SOUTH";
            case EAST -> "EAST";
            case WEST -> "WEST";
        };
    }

    public Stream<Direction> stream() {
        if (this == EVERY_DIRECTION)
            return Stream.concat(directions.stream(), Stream.<Direction>builder().add(null).build());
        if (directions.isEmpty()) return Stream.<Direction>builder().add(null).build();
        return directions.stream();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ItemResourceType.java

````java
package ca.teamdman.sfm.common.resourcetype;

import net.minecraft.core.Registry;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.neoforged.neoforge.common.capabilities.Capabilities;
import net.neoforged.neoforge.items.IItemHandler;

public class ItemResourceType extends ResourceType<ItemStack, Item, IItemHandler> {
    public ItemResourceType() {
        super(Capabilities.ITEM_HANDLER);
    }

    @Override
    public Registry<Item> getRegistry() {
        return BuiltInRegistries.ITEM;
    }


    @Override
    public Item getItem(ItemStack itemStack) {
        return itemStack.getItem();
    }

    @Override
    public ItemStack copy(ItemStack stack) {
        return stack.copy();
    }

    @Override
    protected ItemStack setCount(ItemStack stack, long amount) {
        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;
        stack.setCount(finalAmount);
        return stack;
    }

    @Override
    public long getAmount(ItemStack stack) {
        return stack.getCount();
    }

    @Override
    public ItemStack getStackInSlot(IItemHandler cap, int slot) {
        return cap.getStackInSlot(slot);
    }

    @Override
    public ItemStack extract(IItemHandler handler, int slot, long amount, boolean simulate) {
        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;
        // Mekanism bin intentionally only returns 64x stacks without going past the max stack size
        // https://github.com/mekanism/Mekanism/blob/f92b48a49e0766cd3aa78e95c9c4a47ba90402f5/src/main/java/mekanism/common/inventory/slot/BasicInventorySlot.java#L174-L175
        return handler.extractItem(slot, finalAmount, simulate);
    }

    @Override
    public boolean matchesStackType(Object o) {
        return o instanceof ItemStack;
    }

    @Override
    public boolean matchesCapabilityType(Object o) {
        return o instanceof IItemHandler;
    }

    @Override
    public int getSlots(IItemHandler handler) {
        return handler.getSlots();
    }

    @Override
    public long getMaxStackSize(ItemStack itemStack) {
        return itemStack.getMaxStackSize();
    }

    @Override
    public long getMaxStackSize(IItemHandler handler, int slot) {
        return handler.getSlotLimit(slot);
    }

    /**
     * @return remaining stack that was not inserted
     */
    @Override
    public ItemStack insert(IItemHandler handler, int slot, ItemStack stack, boolean simulate) {
        return handler.insertItem(slot, stack, simulate);
    }

    @Override
    public boolean isEmpty(ItemStack stack) {
        return stack.isEmpty();
    }

    @Override
    public ItemStack getEmptyStack() {
        return ItemStack.EMPTY;
    }

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Limit.java

````java
package ca.teamdman.sfml.ast;

import static ca.teamdman.sfml.ast.ResourceQuantity.IdExpansionBehaviour.NO_EXPAND;

public record Limit(
        ResourceQuantity quantity,
        ResourceQuantity retention
) implements ASTNode {
    public static final Limit MAX_QUANTITY_NO_RETENTION = new Limit(
            new ResourceQuantity(new Number(Long.MAX_VALUE), NO_EXPAND),
            new ResourceQuantity(new Number(0), NO_EXPAND)
    );
    public static final Limit MAX_QUANTITY_MAX_RETENTION = new Limit(
            new ResourceQuantity(new Number(Long.MAX_VALUE), NO_EXPAND),
            new ResourceQuantity(new Number(Long.MAX_VALUE), NO_EXPAND)
    );

    public static final Limit UNSET = new Limit(
            ResourceQuantity.UNSET,
            ResourceQuantity.UNSET
    );

    public Limit withDefaults(Limit limit) {
        if (quantity() == ResourceQuantity.UNSET && retention() == ResourceQuantity.UNSET) {
            return limit;
        } else if (quantity() == ResourceQuantity.UNSET) {
            return new Limit(
                    limit.quantity(),
                    retention()
            );
        } else if (retention() == ResourceQuantity.UNSET) {
            return new Limit(
                    quantity(),
                    limit.retention()
            );
        }
        return this;
    }

    @Override
    public String toString() {
        return quantity + " RETAIN " + retention;
    }

    public String toStringCondensed(Limit defaults) {
        StringBuilder sb = new StringBuilder();
        if (!quantity.number().equals(defaults.quantity().number())) {
            sb.append(quantity);
        }
        if (!retention.number().equals(defaults.retention().number())) {
            if (!sb.isEmpty()) sb.append(" ");
            sb.append("RETAIN ").append(retention);
        }
        return sb.toString();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Interval.java

````java
package ca.teamdman.sfml.ast;

public record Interval(int ticks) implements ASTNode {
    public static Interval fromTicks(int ticks) {
        return new Interval(ticks);
    }

    public static Interval fromSeconds(int seconds) {
        return new Interval(seconds * 20);
    }

    @Override
    public String toString() {
        return ticks + " TICKS";
    }

    public int getTicks() {
        return ticks;
    }

    public int getSeconds() {
        return ticks / 20;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\LimitedOutputSlot.java

````java
package ca.teamdman.sfm.common.program;

import ca.teamdman.sfm.common.resourcetype.ResourceType;

import javax.annotation.Nullable;

public class LimitedOutputSlot<STACK, ITEM, CAP> {
    @SuppressWarnings("NotNullFieldNotInitialized") // done in init method in constructor
    public ResourceType<STACK, ITEM, CAP> type;
    @SuppressWarnings("NotNullFieldNotInitialized") // done in init method in constructor
    public CAP capability;
    public int slot;
    @SuppressWarnings("NotNullFieldNotInitialized") // done in init method in constructor
    public OutputResourceTracker<STACK, ITEM, CAP> tracker;
    private @Nullable STACK stackInSlotCache = null;

    public LimitedOutputSlot(
            CAP capability, int slot, OutputResourceTracker<STACK, ITEM, CAP> tracker
    ) {
        this.init(capability, slot, tracker);
    }

    public boolean isDone() {
        if (tracker.isDone()) {
            return true;
        }
        STACK stack = getStackInSlot();
        long count = type.getAmount(stack);
        if (count >= type.getMaxStackSize(capability, slot)) {
            // if the maxStackSize is different, that will be handled by moveTo
            // for the general case, it will be faster to just assume 64 is the max stack size
            return true;
        }
        return count != 0 && !tracker.test(stack);
    }

    public STACK getStackInSlot() {
        if (stackInSlotCache == null) {
            stackInSlotCache = type.getStackInSlot(capability, slot);
        }
        return stackInSlotCache;
    }

    public STACK insert(STACK stack, boolean simulate) {
        if (!simulate) stackInSlotCache = null;
        return type.insert(capability, slot, stack, simulate);
    }

    public void init(CAP handler, int slot, OutputResourceTracker<STACK, ITEM, CAP> tracker) {
        this.stackInSlotCache = null;
        this.capability = handler;
        this.tracker = tracker;
        this.slot = slot;
        //noinspection DataFlowIssue
        this.type = tracker.getLimit().resourceId().getResourceType();
        assert type != null;
        this.tracker.visit(this);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressRecipe.java

````java
package ca.teamdman.sfm.common.recipe;

import ca.teamdman.sfm.common.blockentity.PrintingPressBlockEntity;
import ca.teamdman.sfm.common.item.FormItem;
import ca.teamdman.sfm.common.registry.SFMRecipeSerializers;
import ca.teamdman.sfm.common.registry.SFMRecipeTypes;
import com.google.gson.JsonObject;
import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.minecraft.core.RegistryAccess;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.item.crafting.Recipe;
import net.minecraft.world.item.crafting.RecipeSerializer;
import net.minecraft.world.item.crafting.RecipeType;
import net.minecraft.world.level.Level;
import org.jetbrains.annotations.Nullable;

import java.util.Objects;

/**
 * Printing press copies a form using ink and paper.
 */
public class PrintingPressRecipe implements Recipe<PrintingPressBlockEntity> {
    public final Ingredient FORM;
    public final Ingredient INK;
    public final Ingredient PAPER;

    public PrintingPressRecipe(
            Ingredient form,
            Ingredient ink,
            Ingredient paper
    ) {
        this.FORM = form;
        this.INK = ink;
        this.PAPER = paper;
    }

    @Override
    public boolean matches(PrintingPressBlockEntity pContainer, Level pLevel) {
        return PAPER.test(pContainer.getPaper()) && INK.test(pContainer.getInk()) && FORM.test(FormItem.getReference(
                pContainer.getForm()));
    }

    @Override
    public ItemStack assemble(PrintingPressBlockEntity pContainer, RegistryAccess p_267165_) {
        ItemStack rtn = FormItem.getReference(pContainer.getForm());
        rtn.setCount(pContainer.getPaper().getCount());
        return rtn;
    }

    @Override
    public boolean canCraftInDimensions(int pWidth, int pHeight) {
        return true;
    }

    @Override
    public ItemStack getResultItem(RegistryAccess p_267052_) {
        return ItemStack.EMPTY;

    }

    @Override
    public RecipeSerializer<?> getSerializer() {
        return SFMRecipeSerializers.PRINTING_PRESS.get();
    }

    @Override
    public RecipeType<?> getType() {
        return SFMRecipeTypes.PRINTING_PRESS.get();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        var that = (PrintingPressRecipe) obj;
        return
                Objects.equals(this.FORM, that.FORM) &&
                Objects.equals(this.INK, that.INK) &&
                Objects.equals(this.PAPER, that.PAPER);
    }

    @Override
    public int hashCode() {
        return Objects.hash(FORM, INK, PAPER);
    }

    @Override
    public String toString() {
        return "PrintingPressRecipe[" +
               "form=" + FORM + ", " +
               "ink=" + INK + ", " +
               "paper=" + PAPER + ']';
    }

    public static class Serializer implements RecipeSerializer<PrintingPressRecipe> {
        private final Codec<PrintingPressRecipe> CODEC = RecordCodecBuilder.create(instance -> instance.group(
                Ingredient.CODEC.fieldOf("form").forGetter(recipe -> recipe.FORM),
                Ingredient.CODEC.fieldOf("ink").forGetter(recipe -> recipe.INK),
                Ingredient.CODEC.fieldOf("paper").forGetter(recipe -> recipe.PAPER)
        ).apply(instance, PrintingPressRecipe::new));

        @Override
        public Codec<PrintingPressRecipe> codec() {
            return CODEC;
        }

        @Override
        public PrintingPressRecipe fromNetwork(FriendlyByteBuf friendlyByteBuf) {
            Ingredient form = Ingredient.fromNetwork(friendlyByteBuf);
            Ingredient ink = Ingredient.fromNetwork(friendlyByteBuf);
            Ingredient paper = Ingredient.fromNetwork(friendlyByteBuf);
            return new PrintingPressRecipe(form, ink, paper);
        }

        @Override
        public void toNetwork(FriendlyByteBuf pBuffer, PrintingPressRecipe pRecipe) {
            pRecipe.FORM.toNetwork(pBuffer);
            pRecipe.INK.toNetwork(pBuffer);
            pRecipe.PAPER.toNetwork(pBuffer);
        }
    }

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\BatteryBlockEntity.java

````java
package ca.teamdman.sfm.common.blockentity;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import net.minecraft.core.BlockPos;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.capabilities.Capabilities;
import net.neoforged.neoforge.capabilities.RegisterCapabilitiesEvent;
import net.neoforged.neoforge.energy.EnergyStorage;
import net.neoforged.neoforge.energy.IEnergyStorage;

@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class BatteryBlockEntity extends BlockEntity {

    public final IEnergyStorage CONTAINER = new EnergyStorage(
            Integer.MAX_VALUE,
            Integer.MAX_VALUE,
            Integer.MAX_VALUE
    );

    public BatteryBlockEntity(
            BlockPos pPos,
            BlockState pBlockState
    ) {
        super(SFMBlockEntities.BATTERY_BLOCK_ENTITY.get(), pPos, pBlockState);
    }

    @SubscribeEvent
    private static void registerCapabilities(RegisterCapabilitiesEvent event) {
        event.registerBlockEntity(
                Capabilities.EnergyStorage.BLOCK,
                SFMBlockEntities.BATTERY_BLOCK_ENTITY.get(),
                (blockEntity, direction) -> blockEntity.CONTAINER
        );
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\WaterTankBlockEntity.java

````java
package ca.teamdman.sfm.common.blockentity;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.block.WaterTankBlock;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import net.minecraft.core.BlockPos;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.material.Fluids;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.capabilities.Capabilities;
import net.neoforged.neoforge.capabilities.RegisterCapabilitiesEvent;
import net.neoforged.neoforge.fluids.FluidStack;
import net.neoforged.neoforge.fluids.capability.templates.FluidTank;
import org.jetbrains.annotations.NotNull;

@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class WaterTankBlockEntity extends BlockEntity {
    public void setConnectedCount(int connectedCount) {
        TANK.setCapacity(connectedCount * 1000);
        TANK.getFluid().setAmount(TANK.getCapacity());
    }

    @Override
    public void onLoad() {
        super.onLoad();
        ((WaterTankBlock) getBlockState().getBlock()).recount(getLevel(), getBlockPos());
    }

    // can't fill, only extract
    public final FluidTank TANK = new FluidTank(1000, fluidStack -> false) {
        {
            setFluid(new FluidStack(Fluids.WATER, 1000));
        }

        @Override
        public @NotNull FluidStack drain(int maxDrain, FluidAction action) {
            if (!getLevel().getBlockState(getBlockPos()).getValue(WaterTankBlock.IN_WATER)) return FluidStack.EMPTY;
            int        drained = Math.min(maxDrain, TANK.getCapacity());
            FluidStack copy    = fluid.copy();
            copy.setAmount(drained);
            return copy;
        }
    };

    public WaterTankBlockEntity(
            BlockPos pos,
            BlockState state
    ) {
        super(SFMBlockEntities.WATER_TANK_BLOCK_ENTITY.get(), pos, state);
    }


    @SubscribeEvent
    private static void registerCapabilities(RegisterCapabilitiesEvent event) {
        event.registerBlockEntity(
                Capabilities.FluidHandler.BLOCK,
                SFMBlockEntities.WATER_TANK_BLOCK_ENTITY.get(),
                (blockEntity, direction) -> blockEntity.TANK
        );
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\package-info.java

````java

@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.compat;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\ExperienceShard.java

````java
package ca.teamdman.sfm.common.item;

import net.minecraft.world.item.Item;

public class ExperienceShard extends Item {
    public ExperienceShard() {
        super(new Item.Properties());
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\ProgramContext.java

````java
package ca.teamdman.sfm.common.program;

import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.cablenetwork.CableNetwork;
import ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;
import ca.teamdman.sfml.ast.IfStatement;
import ca.teamdman.sfml.ast.InputStatement;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.world.level.Level;

import java.util.ArrayList;
import java.util.List;

public class ProgramContext {
    private final Program PROGRAM;
    private final ManagerBlockEntity MANAGER;
    private final CableNetwork NETWORK;
    private final List<InputStatement> INPUTS = new ArrayList<>();
    private final Level LEVEL;
    private final ExecutionPolicy EXECUTION_POLICY;
    private final List<Branch> PATH_TAKEN = new ArrayList<>();
    private final int EXPLORATION_BRANCH_INDEX;
    private final int REDSTONE_PULSES;

    public ProgramContext(Program program, ManagerBlockEntity manager, ExecutionPolicy executionPolicy) {
        this(program, manager, executionPolicy, 0);
    }

    public ProgramContext(
            Program program,
            ManagerBlockEntity manager,
            ExecutionPolicy executionPolicy,
            int branchIndex
    ) {
        this.PROGRAM = program;
        this.MANAGER = manager;
        //noinspection OptionalGetWithoutIsPresent // program shouldn't be ticking if the network is bad
        NETWORK = CableNetworkManager
                .getOrRegisterNetworkFromManagerPosition(MANAGER)
                .get();
        assert MANAGER.getLevel() != null;
        LEVEL = MANAGER.getLevel();
        REDSTONE_PULSES = MANAGER.getUnprocessedRedstonePulseCount();
        EXECUTION_POLICY = executionPolicy;
        EXPLORATION_BRANCH_INDEX = branchIndex;
    }

    private ProgramContext(ProgramContext other) {
        PROGRAM = other.PROGRAM;
        MANAGER = other.MANAGER;
        NETWORK = other.NETWORK;
        LEVEL = other.LEVEL;
        REDSTONE_PULSES = other.REDSTONE_PULSES;
        EXECUTION_POLICY = other.EXECUTION_POLICY;
        EXPLORATION_BRANCH_INDEX = other.EXPLORATION_BRANCH_INDEX;
        INPUTS.addAll(other.INPUTS);
    }

    public ExecutionPolicy getExecutionPolicy() {
        return EXECUTION_POLICY;
    }

    public List<Branch> getExecutionPath() {
        return PATH_TAKEN;
    }

    public int getExplorationBranchIndex() {
        return EXPLORATION_BRANCH_INDEX;
    }

    public Program getProgram() {
        return PROGRAM;
    }

    public void pushPath(Branch branch) {
        this.PATH_TAKEN.add(branch);
    }

    public ProgramContext copy() {
        return new ProgramContext(this);
    }

    public int getRedstonePulses() {
        return REDSTONE_PULSES;
    }

    public enum ExecutionPolicy {
        EXPLORE_BRANCHES,
        UNRESTRICTED
    }

    public ManagerBlockEntity getManager() {
        return MANAGER;
    }

    public void addInput(InputStatement input) {
        INPUTS.add(input);
    }

    public List<InputStatement> getInputs() {
        return INPUTS;
    }


    public CableNetwork getNetwork() {
        return NETWORK;
    }

    public record Branch(
            IfStatement ifStatement,
            boolean wasTrue
    ) {
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\block\PrintingPressBlock.java

````java
package ca.teamdman.sfm.common.block;

import ca.teamdman.sfm.common.blockentity.PrintingPressBlockEntity;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import com.mojang.serialization.MapCodec;
import net.minecraft.core.BlockPos;
import net.minecraft.world.Containers;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.phys.BlockHitResult;
import org.apache.commons.lang3.NotImplementedException;

public class PrintingPressBlock extends BaseEntityBlock implements EntityBlock {

    public PrintingPressBlock() {
        super(BlockBehaviour.Properties.of().strength(5.0F, 6.0F).noOcclusion());
        this.registerDefaultState(this.defaultBlockState());
    }

    @Override
    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
        return SFMBlockEntities.PRINTING_PRESS_BLOCK_ENTITY
                .get()
                .create(pos, state);
    }

    public RenderShape getRenderShape(BlockState state) {
        return RenderShape.MODEL;
    }

    @Override
    @SuppressWarnings("deprecation")
    public void neighborChanged(
            BlockState pState,
            Level pLevel,
            BlockPos pPos,
            Block pBlock,
            BlockPos pFromPos,
            boolean pIsMoving
    ) {
        super.neighborChanged(pState, pLevel, pPos, pBlock, pFromPos, pIsMoving);
        if (!pLevel.isClientSide
            && pFromPos.getY() == pPos.getY() + 1
            && pLevel.getBlockState(pFromPos).getBlock() == Blocks.PISTON_HEAD
            && pLevel.getBlockEntity(pPos) instanceof PrintingPressBlockEntity blockEntity) {
            blockEntity.performPrint();
        }
    }

    @Override
    protected MapCodec<WaterTankBlock> codec() {
        throw new NotImplementedException("This isn't used until 1.20.5 apparently");
    }

    @Override
    @SuppressWarnings("deprecation")
    public InteractionResult use(
            BlockState state,
            Level level,
            BlockPos pos,
            Player player,
            InteractionHand hand,
            BlockHitResult hit
    ) {
        if (!level.isClientSide() && level.getBlockEntity(pos) instanceof PrintingPressBlockEntity blockEntity) {
            var stack = player.getItemInHand(hand);
            player.setItemInHand(hand, blockEntity.acceptStack(stack));
        }
        return InteractionResult.SUCCESS;
    }

    @SuppressWarnings("deprecation")
    public void onRemove(BlockState pState, Level pLevel, BlockPos pPos, BlockState pNewState, boolean pIsMoving) {
        if (!pState.is(pNewState.getBlock())) {
            BlockEntity blockentity = pLevel.getBlockEntity(pPos);
            if (blockentity instanceof PrintingPressBlockEntity blockEntity) {
                for (ItemStack itemStack : blockEntity.getStacksToDrop()) {
                    Containers.dropItemStack(pLevel, pPos.getX(), pPos.getY(), pPos.getZ(), itemStack);
                }
                pLevel.updateNeighbourForOutputSignal(pPos, this);
            }

            super.onRemove(pState, pLevel, pPos, pNewState, pIsMoving);
        }
    }


}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundLabelInspectionRequestPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import ca.teamdman.sfm.common.registry.SFMItems;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.core.BlockPos;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.server.level.ServerPlayer;
import net.neoforged.neoforge.network.NetworkEvent;
import net.neoforged.neoforge.network.PacketDistributor;

import java.util.Set;
import java.util.function.Supplier;

public record ServerboundLabelInspectionRequestPacket(
        String label
) {
    public static void encode(ServerboundLabelInspectionRequestPacket msg, FriendlyByteBuf friendlyByteBuf) {
        friendlyByteBuf.writeUtf(msg.label(), Program.MAX_LABEL_LENGTH);
    }

    public static ServerboundLabelInspectionRequestPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ServerboundLabelInspectionRequestPacket(
                friendlyByteBuf.readUtf(Program.MAX_LABEL_LENGTH)
        );
    }

    public static void handle(
            ServerboundLabelInspectionRequestPacket msg,
            NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> {
            // we don't know if the player has the program edit screen open from a manager or a disk in hand
            ServerPlayer player = context.getSender();
            if (player == null) return;
            SFM.LOGGER.info("Received label inspection request packet from player " + player.getStringUUID());
            LabelPositionHolder labelPositionHolder;
            if (player.containerMenu instanceof ManagerContainerMenu mcm) {
                SFM.LOGGER.info("Player is using a manager container menu - will append additional info to payload");
                labelPositionHolder = LabelPositionHolder.from(mcm.CONTAINER.getItem(0));
            } else {
                if (player.getMainHandItem().is(SFMItems.DISK_ITEM.get())) {
                    labelPositionHolder = LabelPositionHolder.from(player.getMainHandItem());
                } else if (player.getOffhandItem().is(SFMItems.DISK_ITEM.get())) {
                    labelPositionHolder = LabelPositionHolder.from(player.getOffhandItem());
                } else {
                    labelPositionHolder = null;
                }
            }
            if (labelPositionHolder == null) {
                SFM.LOGGER.info("Label holder wasn't found - aborting");
                return;
            }
            SFM.LOGGER.info("building payload");
            StringBuilder payload = new StringBuilder();
            payload.append("-- Positions for label \"").append(msg.label()).append("\" --\n");
            payload.append(labelPositionHolder.getPositions(msg.label()).size()).append(" assignments\n");
            payload.append("-- Summary --\n");
            labelPositionHolder.get().getOrDefault(msg.label(), Set.of()).forEach(pos -> {
                payload
                        .append(pos.getX())
                        .append(",")
                        .append(pos.getY())
                        .append(",")
                        .append(pos.getZ());
                if (player.level().isLoaded(pos)) {
                    payload
                            .append(" -- ")
                            .append(player.level().getBlockState(pos).getBlock().getName().getString());
                } else {
                    payload
                            .append(" -- chunk not loaded");
                }
                payload
                        .append("\n");
            });

            payload.append("\n\n\n-- Detailed --\n");
            for (BlockPos pos : labelPositionHolder.get().getOrDefault(msg.label(), Set.of())) {
                if (payload.length() > 20_000) {
                    payload.append("... (truncated)");
                    break;
                }
                payload
                        .append(pos.getX())
                        .append(",")
                        .append(pos.getY())
                        .append(",")
                        .append(pos.getZ());
                if (player.level().isLoaded(pos)) {
                    payload
                            .append(" -- ")
                            .append(player.level().getBlockState(pos).getBlock().getName().getString());

                    payload.append("\n").append(ServerboundContainerExportsInspectionRequestPacket
                                                        .buildInspectionResults(player.level(), pos)
                                                        .indent(1));
                } else {
                    payload
                            .append(" -- chunk not loaded");
                }
                payload
                        .append("\n");
            }
            SFM.LOGGER.info("Sending payload response length="
                            + payload.length()
                            + " to player "
                            + player.getStringUUID());
            SFMPackets.INSPECTION_CHANNEL.send(
                    PacketDistributor.PLAYER.with(() -> player),
                    new ClientboundLabelInspectionResultsPacket(
                            payload.toString()
                    )
            );
        });
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\ClientStuff.java

````java
package ca.teamdman.sfm.client;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.client.gui.screen.LabelGunScreen;
import ca.teamdman.sfm.client.gui.screen.ProgramEditScreen;
import ca.teamdman.sfm.client.registry.SFMKeyMappings;
import ca.teamdman.sfm.client.render.PrintingPressBlockEntityRenderer;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.item.DiskItem;
import ca.teamdman.sfm.common.net.ClientboundManagerGuiPacket;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import com.mojang.blaze3d.platform.InputConstants;
import net.minecraft.client.Minecraft;
import net.minecraft.client.multiplayer.ClientLevel;
import net.minecraft.client.player.LocalPlayer;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.phys.BlockHitResult;
import net.minecraft.world.phys.HitResult;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.loading.FMLEnvironment;
import net.neoforged.neoforge.client.event.EntityRenderersEvent;

import javax.annotation.Nullable;
import java.util.function.Consumer;

@Mod.EventBusSubscriber(modid = SFM.MOD_ID, value = Dist.CLIENT, bus = Mod.EventBusSubscriber.Bus.MOD)
public class ClientStuff {
    public static void showLabelGunScreen(ItemStack stack, InteractionHand hand) {
        Minecraft
                .getInstance()
                .setScreen(new LabelGunScreen(stack, hand));
    }

    public static void showProgramEditScreen(String initialContent, Consumer<String> callback) {
        ProgramEditScreen screen = new ProgramEditScreen(initialContent, callback);
        if (Minecraft.getInstance().screen == null) {
            Minecraft
                    .getInstance()
                    .setScreen(screen);
        } else {
            Minecraft
                    .getInstance()
                    .pushGuiLayer(screen);
        }
        screen.scrollToTop();
    }

    public static void showProgramEditScreen(ItemStack diskItem, Consumer<String> callback) {
        showProgramEditScreen(DiskItem.getProgram(diskItem), callback);
    }

    @SubscribeEvent
    public static void onRegisterRenderers(EntityRenderersEvent.RegisterRenderers event) {
        event.registerBlockEntityRenderer(
                SFMBlockEntities.PRINTING_PRESS_BLOCK_ENTITY.get(),
                PrintingPressBlockEntityRenderer::new
        );
    }

    public static boolean isMoreInfoKeyDown() {
        // special effort is needed to ensure this works properly when the manager screen is open
        // https://github.com/mekanism/Mekanism/blob/f92b48a49e0766cd3aa78e95c9c4a47ba90402f5/src/main/java/mekanism/client/key/MekKeyHandler.java
        long handle = Minecraft.getInstance().getWindow().getWindow();
        return InputConstants.isKeyDown(
                handle,
                SFMKeyMappings.MORE_INFO_TOOLTIP_KEY
                        .get()
                        .getKey()
                        .getValue()
        );
    }

    public static void updateMenu(ClientboundManagerGuiPacket msg) {
        LocalPlayer player = Minecraft.getInstance().player;
        if (player == null) return;
        var container = player.containerMenu;
        if (container instanceof ManagerContainerMenu menu && container.containerId == msg.windowId()) {
            menu.tickTimeNanos = msg.tickTimes();
            menu.state = msg.state();
            menu.program = msg.program();
        }
    }

    public static @Nullable BlockEntity getLookBlockEntity() {
        assert FMLEnvironment.dist.isClient();
        ClientLevel level = Minecraft.getInstance().level;
        if (level == null) return null;
        HitResult hr = Minecraft.getInstance().hitResult;
        if (hr == null) return null;
        if (hr.getType() != HitResult.Type.BLOCK) return null;
        var pos = ((BlockHitResult) hr).getBlockPos();
        return level.getBlockEntity(pos);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMPackets.java

````java
package ca.teamdman.sfm.common.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.net.*;
import net.minecraft.core.BlockPos;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.neoforged.neoforge.network.NetworkEvent;
import net.neoforged.neoforge.network.NetworkRegistry;
import net.neoforged.neoforge.network.simple.SimpleChannel;

import javax.annotation.Nullable;
import java.util.function.BiConsumer;
import java.util.function.Supplier;

public class SFMPackets {
    public static final String MANAGER_CHANNEL_VERSION = "1";
    public static final String LABEL_GUN_ITEM_CHANNEL_VERSION = "1";
    public static final String DISK_ITEM_CHANNEL_VERSION = "1";
    public static final String INSPECTION_CHANNEL_VERSION = "1";
    public static final SimpleChannel MANAGER_CHANNEL = NetworkRegistry.newSimpleChannel(
            new ResourceLocation(SFM.MOD_ID, "manager"),
            MANAGER_CHANNEL_VERSION::toString,
            MANAGER_CHANNEL_VERSION::equals,
            MANAGER_CHANNEL_VERSION::equals
    );
    public static final SimpleChannel LABEL_GUN_ITEM_CHANNEL = NetworkRegistry.newSimpleChannel(
            new ResourceLocation(SFM.MOD_ID, "labelgun"),
            LABEL_GUN_ITEM_CHANNEL_VERSION::toString,
            LABEL_GUN_ITEM_CHANNEL_VERSION::equals,
            LABEL_GUN_ITEM_CHANNEL_VERSION::equals
    );
    public static final SimpleChannel DISK_ITEM_CHANNEL = NetworkRegistry.newSimpleChannel(
            new ResourceLocation(SFM.MOD_ID, "disk"),
            DISK_ITEM_CHANNEL_VERSION::toString,
            DISK_ITEM_CHANNEL_VERSION::equals,
            DISK_ITEM_CHANNEL_VERSION::equals
    );

    public static final SimpleChannel INSPECTION_CHANNEL = NetworkRegistry.newSimpleChannel(
            new ResourceLocation(SFM.MOD_ID, "inspection"),
            INSPECTION_CHANNEL_VERSION::toString,
            INSPECTION_CHANNEL_VERSION::equals,
            INSPECTION_CHANNEL_VERSION::equals
    );

    public static void register() {
        MANAGER_CHANNEL.registerMessage(
                0,
                ServerboundManagerProgramPacket.class,
                ServerboundManagerProgramPacket::encode,
                ServerboundManagerProgramPacket::decode,
                ServerboundManagerProgramPacket::handle
        );
        MANAGER_CHANNEL.registerMessage(
                1,
                ServerboundManagerResetPacket.class,
                ServerboundManagerResetPacket::encode,
                ServerboundManagerResetPacket::decode,
                ServerboundManagerResetPacket::handle
        );
        MANAGER_CHANNEL.registerMessage(
                2,
                ServerboundManagerFixPacket.class,
                ServerboundManagerFixPacket::encode,
                ServerboundManagerFixPacket::decode,
                ServerboundManagerFixPacket::handle
        );
        MANAGER_CHANNEL.registerMessage(
                3,
                ClientboundManagerGuiPacket.class,
                ClientboundManagerGuiPacket::encode,
                ClientboundManagerGuiPacket::decode,
                ClientboundManagerGuiPacket::handle
        );


        LABEL_GUN_ITEM_CHANNEL.registerMessage(
                0,
                ServerboundLabelGunUpdatePacket.class,
                ServerboundLabelGunUpdatePacket::encode,
                ServerboundLabelGunUpdatePacket::decode,
                ServerboundLabelGunUpdatePacket::handle
        );
        LABEL_GUN_ITEM_CHANNEL.registerMessage(
                1,
                ServerboundLabelGunPrunePacket.class,
                ServerboundLabelGunPrunePacket::encode,
                ServerboundLabelGunPrunePacket::decode,
                ServerboundLabelGunPrunePacket::handle
        );
        LABEL_GUN_ITEM_CHANNEL.registerMessage(
                2,
                ServerboundLabelGunClearPacket.class,
                ServerboundLabelGunClearPacket::encode,
                ServerboundLabelGunClearPacket::decode,
                ServerboundLabelGunClearPacket::handle
        );
        LABEL_GUN_ITEM_CHANNEL.registerMessage(
                3,
                ServerboundLabelGunUsePacket.class,
                ServerboundLabelGunUsePacket::encode,
                ServerboundLabelGunUsePacket::decode,
                ServerboundLabelGunUsePacket::handle
        );

        DISK_ITEM_CHANNEL.registerMessage(
                0,
                ServerboundDiskItemSetProgramPacket.class,
                ServerboundDiskItemSetProgramPacket::encode,
                ServerboundDiskItemSetProgramPacket::decode,
                ServerboundDiskItemSetProgramPacket::handle
        );

        INSPECTION_CHANNEL.registerMessage(
                0,
                ServerboundContainerExportsInspectionRequestPacket.class,
                ServerboundContainerExportsInspectionRequestPacket::encode,
                ServerboundContainerExportsInspectionRequestPacket::decode,
                ServerboundContainerExportsInspectionRequestPacket::handle
        );
        INSPECTION_CHANNEL.registerMessage(
                1,
                ClientboundContainerExportsInspectionResultsPacket.class,
                ClientboundContainerExportsInspectionResultsPacket::encode,
                ClientboundContainerExportsInspectionResultsPacket::decode,
                ClientboundContainerExportsInspectionResultsPacket::handle
        );
        INSPECTION_CHANNEL.registerMessage(
                2,
                ServerboundLabelInspectionRequestPacket.class,
                ServerboundLabelInspectionRequestPacket::encode,
                ServerboundLabelInspectionRequestPacket::decode,
                ServerboundLabelInspectionRequestPacket::handle
        );
        INSPECTION_CHANNEL.registerMessage(
                3,
                ClientboundLabelInspectionResultsPacket.class,
                ClientboundLabelInspectionResultsPacket::encode,
                ClientboundLabelInspectionResultsPacket::decode,
                ClientboundLabelInspectionResultsPacket::handle
        );
        INSPECTION_CHANNEL.registerMessage(
                4,
                ServerboundInputInspectionRequestPacket.class,
                ServerboundInputInspectionRequestPacket::encode,
                ServerboundInputInspectionRequestPacket::decode,
                ServerboundInputInspectionRequestPacket::handle
        );
        INSPECTION_CHANNEL.registerMessage(
                5,
                ClientboundInputInspectionResultsPacket.class,
                ClientboundInputInspectionResultsPacket::encode,
                ClientboundInputInspectionResultsPacket::decode,
                ClientboundInputInspectionResultsPacket::handle
        );
        INSPECTION_CHANNEL.registerMessage(
                6,
                ServerboundOutputInspectionRequestPacket.class,
                ServerboundOutputInspectionRequestPacket::encode,
                ServerboundOutputInspectionRequestPacket::decode,
                ServerboundOutputInspectionRequestPacket::handle
        );
        INSPECTION_CHANNEL.registerMessage(
                7,
                ClientboundOutputInspectionResultsPacket.class,
                ClientboundOutputInspectionResultsPacket::encode,
                ClientboundOutputInspectionResultsPacket::decode,
                ClientboundOutputInspectionResultsPacket::handle
        );
        INSPECTION_CHANNEL.registerMessage(
                8,
                ServerboundNetworkToolUsePacket.class,
                ServerboundNetworkToolUsePacket::encode,
                ServerboundNetworkToolUsePacket::decode,
                ServerboundNetworkToolUsePacket::handle
        );
    }

    public static <MENU extends AbstractContainerMenu, BE extends BlockEntity> void handleServerboundContainerPacket(
            @Nullable NetworkEvent.Context context,
            Class<MENU> menuClass,
            Class<BE> blockEntityClass,
            BlockPos pos,
            int containerId,
            BiConsumer<MENU, BE> callback
    ) {
        if (context == null) return;
        context.enqueueWork(() -> {
            var sender = context.getSender();
            if (sender == null) return;
            if (sender.isSpectator()) return; // ignore packets from spectators

            var menu = sender.containerMenu;
            if (!menuClass.isInstance(menu)) return;
            if (menu.containerId != containerId) return;

            var level = sender.level();
            //noinspection ConstantValue
            if (level == null) return;
            if (!level.isLoaded(pos)) return;

            var blockEntity = level.getBlockEntity(pos);
            if (!blockEntityClass.isInstance(blockEntity)) return;
            //noinspection unchecked
            callback.accept((MENU) menu, (BE) blockEntity);
        });
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\block\WaterTankBlock.java

````java
package ca.teamdman.sfm.common.block;

import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.blockentity.WaterTankBlockEntity;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import ca.teamdman.sfm.common.util.SFMUtils;
import com.mojang.serialization.MapCodec;
import net.minecraft.ChatFormatting;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.network.chat.Component;
import net.minecraft.sounds.SoundEvent;
import net.minecraft.tags.FluidTags;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BooleanProperty;
import net.minecraft.world.level.material.Fluid;
import net.minecraft.world.level.material.FluidState;
import net.minecraft.world.level.material.Fluids;
import org.apache.commons.lang3.NotImplementedException;
import org.jetbrains.annotations.Nullable;

import java.util.List;
import java.util.Optional;

@SuppressWarnings("deprecation")

public class WaterTankBlock extends BaseEntityBlock implements EntityBlock, BucketPickup, LiquidBlockContainer {
    public static final BooleanProperty      IN_WATER = BooleanProperty.create("in_water");


    public WaterTankBlock() {
        super(BlockBehaviour.Properties.of().destroyTime(2).sound(SoundType.WOOD));
        registerDefaultState(getStateDefinition().any().setValue(IN_WATER, false));
    }


    @Override
    @SuppressWarnings("deprecation")
    public void onPlace(BlockState pState, Level pLevel, BlockPos pPos, BlockState pOldState, boolean pIsMoving) {
        super.onPlace(pState, pLevel, pPos, pOldState, pIsMoving);
        for (Direction direction : Direction.values()) {
            recount(pLevel, pPos.offset(direction.getNormal()));
        }
    }

    @Override
    @SuppressWarnings("deprecation")
    public void onRemove(BlockState pState, Level pLevel, BlockPos pPos, BlockState pNewState, boolean pIsMoving) {
        super.onRemove(pState, pLevel, pPos, pNewState, pIsMoving);
        for (Direction direction : Direction.values()) {
            recount(pLevel, pPos.offset(direction.getNormal()));
        }
    }

    @Override
    public void appendHoverText(
            ItemStack pStack,
            @Nullable BlockGetter pLevel,
            List<Component> pTooltip,
            TooltipFlag pFlag
    ) {
        pTooltip.add(Constants.LocalizationKeys.WATER_TANK_ITEM_TOOLTIP_1
                             .getComponent()
                             .withStyle(ChatFormatting.GRAY));
        pTooltip.add(Constants.LocalizationKeys.WATER_TANK_ITEM_TOOLTIP_2
                             .getComponent()
                             .withStyle(ChatFormatting.GRAY));
    }

    public void recount(Level level, BlockPos pos) {
        if (!(level.getBlockEntity(pos) instanceof WaterTankBlockEntity be)) return;
        var tanks = SFMUtils.getRecursiveStream((current, next, results) -> {
            results.accept(current);
            for (var d : Direction.values()) {
                var offset = current.getBlockPos().offset(d.getNormal());
                if (!(level.getBlockEntity(offset) instanceof WaterTankBlockEntity blockEntity)) continue;
                next.accept(blockEntity);
            }
        }, be).toList();
        tanks.forEach(t -> t.setConnectedCount(tanks.size()));
    }

    @Override
    protected MapCodec<WaterTankBlock> codec() {
        throw new NotImplementedException("This isn't used until 1.20.5 apparently");
    }

    @Override
    public RenderShape getRenderShape(BlockState state) {
        return RenderShape.MODEL;
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
        builder.add(IN_WATER);
    }

    @Nullable
    @Override
    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
        return SFMBlockEntities.WATER_TANK_BLOCK_ENTITY.get().create(pos, state);
    }

    @Nullable
    @Override
    public BlockState getStateForPlacement(BlockPlaceContext context) {
        return defaultBlockState().setValue(
                IN_WATER,
                isActive(context.getLevel(), context.getClickedPos())
        );
    }

    public boolean isActive(LevelAccessor level, BlockPos pos) {
        int neighbourWaterCount = 0;
        for (Direction direction : Direction.values()) {
            FluidState state = level.getFluidState(pos.relative(direction));
            if (state.isSource() && state.is(FluidTags.WATER)) {
                if (++neighbourWaterCount == 2) {
                    return true;
                }
            }
        }
        return false;
    }

    @Override
    @SuppressWarnings("deprecation")
    public void neighborChanged(
            BlockState state,
            Level level,
            BlockPos pos,
            Block blockIn,
            BlockPos fromPos,
            boolean isMoving
    ) {
        if (level.isClientSide) return;
        boolean isActive = isActive(level, pos);
        if (state.getValue(IN_WATER) != isActive) {
            BlockState newState = defaultBlockState().setValue(IN_WATER, isActive);
            level.setBlock(
                    pos,
                    newState,
                    1 | 2
            );
        }
    }

    @Override
    public ItemStack pickupBlock(
            @Nullable Player player,
            LevelAccessor levelAccessor,
            BlockPos blockPos,
            BlockState blockState
    ) {
        return blockState.getValue(IN_WATER) ? new ItemStack(Fluids.WATER.getBucket()) : ItemStack.EMPTY;
    }

    @Override
    public Optional<SoundEvent> getPickupSound() {
        return Fluids.WATER.getPickupSound();
    }

    @Override
    public boolean canPlaceLiquid(
            @Nullable Player player,
            BlockGetter blockGetter,
            BlockPos blockPos,
            BlockState blockState,
            Fluid fluid
    ) {
        return fluid.isSame(Fluids.WATER);
    }

    @Override
    public boolean placeLiquid(LevelAccessor level, BlockPos pos, BlockState state, FluidState fluid) {
        return fluid.getType().isSame(Fluids.WATER);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\block\TestBarrelBlock.java

````java
package ca.teamdman.sfm.common.block;

import net.minecraft.core.BlockPos;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.BarrelBlock;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;

public class TestBarrelBlock extends BarrelBlock {
    public TestBarrelBlock() {
        super(BlockBehaviour.Properties.of().strength(2.5F).sound(SoundType.WOOD));
    }

    @Override
    public void onRemove(BlockState pState, Level pLevel, BlockPos pPos, BlockState pNewState, boolean pIsMoving) {
//        var container = (Container) pLevel.getBlockEntity(pPos);
//        int stacks = IntStream.range(0, container.getContainerSize()).mapToObj(container::getItem).mapToInt(ItemStack::getCount).sum();
//        System.out.println("test barrel removed " + stacks/64);
        if (!pState.is(pNewState.getBlock())) {
            pLevel.removeBlockEntity(pPos);
            super.onRemove(pState, pLevel, pPos, pNewState, pIsMoving);
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\LimitedInputSlotObjectPool.java

````java
package ca.teamdman.sfm.common.program;

import java.util.Arrays;
import java.util.List;

/**
 * A pool of {@link LimitedInputSlot} objects to avoid the garbage collector
 * <p>
 * This assumes that the pool will be used in a single thread.
 */
public class LimitedInputSlotObjectPool {
    @SuppressWarnings("rawtypes")
    private LimitedInputSlot[] pool = new LimitedInputSlot[1];
    private int index = -1;

    /**
     * Acquire a {@link LimitedInputSlot} from the pool, or creates a new one if none available
     */
    public <STACK, ITEM, CAP> LimitedInputSlot<STACK, ITEM, CAP> acquire(
            CAP handler,
            int slot,
            InputResourceTracker<STACK, ITEM, CAP> tracker
    ) {
        if (index == -1) {
            return new LimitedInputSlot<>(handler, slot, tracker);
        } else {
            @SuppressWarnings("unchecked") LimitedInputSlot<STACK, ITEM, CAP> obj = pool[index];
            index--;
            obj.init(handler, slot, tracker);
            return obj;
        }
    }

    /**
     * Release a {@link LimitedInputSlot} back into the pool for it to be reused instead of garbage collected
     */
    public void release(LimitedInputSlot<?, ?, ?> obj) {
        if (index == pool.length - 1) {
            // we need to grow the array
            pool = Arrays.copyOf(pool, pool.length * 2);
        }
        pool[++index] = obj;
    }

    /**
     * Release a {@link LimitedInputSlot} back into the pool for it to be reused instead of garbage collected
     */
    @SuppressWarnings("rawtypes")
    public void release(List<LimitedInputSlot> slots) {
        // handle resizing
        if (index + slots.size() >= pool.length) {
            int slotsFree = pool.length - index - 1;
            int newLength = pool.length + slots.size() - slotsFree;
            pool = Arrays.copyOf(pool, newLength);
        }
        // add to pool
        for (LimitedInputSlot slot : slots) {
            index++;
            pool[index] = slot;
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\exclude\GasResourceType.java

````java
package ca.teamdman.sfm.common.resourcetype.exclude;

import ca.teamdman.sfm.common.resourcetype.ResourceType;
import mekanism.api.Action;
import mekanism.api.MekanismAPI;
import mekanism.api.chemical.gas.Gas;
import mekanism.api.chemical.gas.GasStack;
import mekanism.api.chemical.gas.IGasHandler;
import net.minecraft.core.Registry;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.capabilities.CapabilityManager;
import net.neoforged.neoforge.common.capabilities.CapabilityToken;
import org.apache.commons.lang3.NotImplementedException;

public class GasResourceType extends ResourceType<GasStack, Gas, IGasHandler> {
    public static final Capability<IGasHandler> CAP = CapabilityManager.get(new CapabilityToken<>() {
    });

    public GasResourceType() {
        super(CAP);
    }

    @Override
    public long getAmount(GasStack gasStack) {
        return gasStack.getAmount();
    }

    @Override
    public GasStack getStackInSlot(IGasHandler iGasHandler, int slot) {
        return iGasHandler.getChemicalInTank(slot);
    }

    @Override
    public GasStack extract(IGasHandler handler, int slot, long amount, boolean simulate) {
        return handler.extractChemical(slot, amount, simulate ? Action.SIMULATE : Action.EXECUTE);
    }

    @Override
    public int getSlots(IGasHandler handler) {
        return handler.getTanks();
    }

    @Override
    public long getMaxStackSize(GasStack gasStack) {
        return Long.MAX_VALUE;
    }

    @Override
    public long getMaxStackSize(IGasHandler handler, int slot) {
        return handler.getTankCapacity(slot);
    }

    @Override
    public GasStack insert(IGasHandler handler, int slot, GasStack gasStack, boolean simulate) {
        return handler.insertChemical(slot, gasStack, simulate ? Action.SIMULATE : Action.EXECUTE);
    }

    @Override
    public boolean isEmpty(GasStack gasStack) {
        return gasStack.isEmpty();
    }

    @Override
    public GasStack getEmptyStack() {
        return GasStack.EMPTY;
    }

    @Override
    public boolean matchesStackType(Object o) {
        return o instanceof GasStack;
    }

    @Override
    public boolean matchesCapabilityType(Object o) {
        return o instanceof IGasHandler;
    }


    @Override
    public Registry<Gas> getRegistry() {
        throw new NotImplementedException();
//        return MekanismAPI.gasRegistry();
    }

    @Override
    public Gas getItem(GasStack gasStack) {
        return gasStack.getType();
    }

    @Override
    public GasStack copy(GasStack gasStack) {
        return gasStack.copy();
    }

    @Override
    protected GasStack setCount(GasStack gasStack, long amount) {
        gasStack.setAmount(amount);
        return gasStack;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ClientboundInputInspectionResultsPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.client.ClientStuff;
import net.minecraft.network.FriendlyByteBuf;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ClientboundInputInspectionResultsPacket(
        String results
) {
    public static final int MAX_RESULTS_LENGTH = 20480;

    public static void encode(
            ClientboundInputInspectionResultsPacket msg, FriendlyByteBuf friendlyByteBuf
    ) {
        friendlyByteBuf.writeUtf(msg.results(), MAX_RESULTS_LENGTH);
    }

    public static ClientboundInputInspectionResultsPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ClientboundInputInspectionResultsPacket(
                friendlyByteBuf.readUtf(MAX_RESULTS_LENGTH)
        );
    }

    public static void handle(
            ClientboundInputInspectionResultsPacket msg, NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> ClientStuff.showProgramEditScreen(msg.results, next -> {
        }));
        context.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\block\BatteryBlock.java

````java
package ca.teamdman.sfm.common.block;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import net.minecraft.core.BlockPos;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.EntityBlock;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.IntegerProperty;
import net.minecraft.world.phys.BlockHitResult;
import net.neoforged.neoforge.capabilities.Capabilities;

public class BatteryBlock extends Block implements EntityBlock {
    public static final IntegerProperty LEVEL = IntegerProperty.create("level", 0, 10);

    public BatteryBlock() {
        super(BlockBehaviour.Properties.of().strength(5.0F, 6.0F));
        this.registerDefaultState(this.getStateDefinition().any().setValue(LEVEL, 0));
    }

    @Override
    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
        return SFMBlockEntities.BATTERY_BLOCK_ENTITY
                .get()
                .create(pos, state);
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
        builder.add(LEVEL);
    }

    @SuppressWarnings("deprecation")
    @Override
    public InteractionResult use(
            BlockState pState,
            Level pLevel,
            BlockPos pPos,
            Player pPlayer,
            InteractionHand pHand,
            BlockHitResult pHit
    ) {
        var cap = pLevel.getCapability(Capabilities.EnergyStorage.BLOCK, pPos, pHit.getDirection());
        if (cap != null) {
            if (pPlayer.isShiftKeyDown()) {
                cap.extractEnergy(1000, false);
            } else {
                cap.receiveEnergy(1000, false);
            }
            SFM.LOGGER.info("Energy stored: {}", cap.getEnergyStored());
        }
        return InteractionResult.SUCCESS;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\ICableBlock.java

````java
package ca.teamdman.sfm.common.cablenetwork;

public interface ICableBlock {
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ClientboundManagerGuiPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.client.ClientStuff;
import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.network.FriendlyByteBuf;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ClientboundManagerGuiPacket(
        int windowId,
        String program,
        ManagerBlockEntity.State state,
        long[] tickTimes
) {

    public static void encode(
            ClientboundManagerGuiPacket msg, FriendlyByteBuf friendlyByteBuf
    ) {
        friendlyByteBuf.writeVarInt(msg.windowId());
        friendlyByteBuf.writeUtf(msg.program(), Program.MAX_PROGRAM_LENGTH);
        friendlyByteBuf.writeEnum(msg.state());
        friendlyByteBuf.writeLongArray(msg.tickTimes());
    }

    public static ClientboundManagerGuiPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ClientboundManagerGuiPacket(
                friendlyByteBuf.readVarInt(),
                friendlyByteBuf.readUtf(Program.MAX_PROGRAM_LENGTH),
                friendlyByteBuf.readEnum(ManagerBlockEntity.State.class),
                friendlyByteBuf.readLongArray()
        );
    }

    public static void handle(
            ClientboundManagerGuiPacket msg, NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> ClientStuff.updateMenu(msg));
        context.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.net;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundManagerFixPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.registry.SFMPackets;
import net.minecraft.core.BlockPos;
import net.minecraft.network.FriendlyByteBuf;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ServerboundManagerFixPacket(
        int windowId,
        BlockPos pos
) {
    public static void encode(ServerboundManagerFixPacket msg, FriendlyByteBuf friendlyByteBuf) {
        friendlyByteBuf.writeVarInt(msg.windowId());
        friendlyByteBuf.writeBlockPos(msg.pos());
    }

    public static ServerboundManagerFixPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ServerboundManagerFixPacket(
                friendlyByteBuf.readVarInt(),
                friendlyByteBuf.readBlockPos()
        );
    }

    public static void handle(ServerboundManagerFixPacket msg, NetworkEvent.Context context) {
        SFMPackets.handleServerboundContainerPacket(
                context,
                ManagerContainerMenu.class,
                ManagerBlockEntity.class,
                msg.pos,
                msg.windowId,
                (menu, manager) -> manager
                        .getDisk()
                        .ifPresent(disk -> manager
                                .getProgram()
                                .ifPresent(program -> program.fixWarnings(disk, manager)))
        );
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.recipe;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\DiskResetRecipe.java

````java
package ca.teamdman.sfm.common.recipe;

import ca.teamdman.sfm.common.item.DiskItem;
import ca.teamdman.sfm.common.registry.SFMItems;
import ca.teamdman.sfm.common.registry.SFMRecipeSerializers;
import net.minecraft.core.RegistryAccess;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.inventory.CraftingContainer;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.crafting.CraftingBookCategory;
import net.minecraft.world.item.crafting.CustomRecipe;
import net.minecraft.world.item.crafting.RecipeSerializer;
import net.minecraft.world.level.Level;

/**
 * Printing press copies a form using ink and paper.
 */
public class DiskResetRecipe extends CustomRecipe {
    public DiskResetRecipe(CraftingBookCategory pGroup) {
        super(pGroup);
    }

    @Override
    public boolean matches(CraftingContainer pContainer, Level pLevel) {
        int foundDisks = 0;
        for (int i = 0; i < pContainer.getContainerSize(); i++) {
            ItemStack stack = pContainer.getItem(i);
            if (stack.getItem() instanceof DiskItem) {
                foundDisks++;
            } else if (!stack.isEmpty()) {
                return false;
            }
        }
        return foundDisks > 0;
    }

    @Override
    public ItemStack assemble(CraftingContainer pContainer, RegistryAccess registryAccess) {
        int foundDisks = 0;
        for (int i = 0; i < pContainer.getContainerSize(); i++) {
            ItemStack stack = pContainer.getItem(i);
            if (stack.getItem() instanceof DiskItem) {
                foundDisks++;
            } else if (!stack.isEmpty()) {
                return ItemStack.EMPTY;
            }
        }
        return foundDisks > 0 ? new ItemStack(SFMItems.DISK_ITEM.get(), foundDisks) : ItemStack.EMPTY;
    }

    @Override
    public boolean canCraftInDimensions(int pWidth, int pHeight) {
        return true;
    }

    @Override
    public RecipeSerializer<?> getSerializer() {
        return SFMRecipeSerializers.DISK_RESET.get();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\registry\SFMMenuScreens.java

````java
package ca.teamdman.sfm.client.registry;

import ca.teamdman.sfm.client.gui.screen.ManagerScreen;
import ca.teamdman.sfm.common.registry.SFMMenus;
import net.minecraft.client.gui.screens.MenuScreens;

public class SFMMenuScreens {
    public static void register() {
        MenuScreens.register(SFMMenus.MANAGER_MENU.get(), ManagerScreen::new);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\containermenu\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.containermenu;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ASTNode.java

````java
package ca.teamdman.sfml.ast;

import java.util.List;

public interface ASTNode {
    default List<Statement> getStatements() {
        return List.of();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\jei\package-info.java

````java
@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.client.jei;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\LabelGunItem.java

````java
package ca.teamdman.sfm.common.item;

import ca.teamdman.sfm.client.ClientStuff;
import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.net.ServerboundLabelGunUsePacket;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import ca.teamdman.sfm.common.registry.SFMItems;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfm.common.util.SFMUtils;
import net.minecraft.ChatFormatting;
import net.minecraft.client.gui.screens.Screen;
import net.minecraft.network.chat.Component;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.InteractionResultHolder;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.item.context.UseOnContext;
import net.minecraft.world.level.Level;

import javax.annotation.Nullable;
import java.util.Comparator;
import java.util.List;

public class LabelGunItem extends Item {
    public LabelGunItem() {
        super(new Properties().stacksTo(1));
    }

    public static void setActiveLabel(ItemStack gun, String label) {
        if (label.isEmpty()) return;
        LabelPositionHolder.from(gun).addReferencedLabel(label).save(gun);
        gun.getOrCreateTag().putString("sfm:active_label", label);
    }

    public static String getActiveLabel(ItemStack stack) {
        //noinspection DataFlowIssue
        return !stack.hasTag() ? "" : stack.getTag().getString("sfm:active_label");
    }

    public static String getNextLabel(ItemStack gun, int change) {
        var labels = LabelPositionHolder.from(gun).get().keySet().stream().sorted(Comparator.naturalOrder()).toList();
        if (labels.isEmpty()) return "";
        var currentLabel = getActiveLabel(gun);

        int currentLabelIndex = 0;
        for (int i = 0; i < labels.size(); i++) {
            if (labels.get(i).equals(currentLabel)) {
                currentLabelIndex = i;
                break;
            }
        }

        int nextLabelIndex = currentLabelIndex + change;
        // ensure going negative wraps around
        nextLabelIndex = ((nextLabelIndex % labels.size()) + labels.size()) % labels.size();

        return labels.get(nextLabelIndex);
    }

    @Override
    public InteractionResult onItemUseFirst(
            ItemStack gun, UseOnContext ctx
    ) {
        var level = ctx.getLevel();
        if (level.isClientSide && ctx.getPlayer() != null) {
            SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunUsePacket(
                    ctx.getHand(),
                    ctx.getClickedPos(),
                    Screen.hasControlDown(),
                    ctx.getPlayer().isShiftKeyDown()
            ));
            return InteractionResult.SUCCESS;
        }
        return InteractionResult.CONSUME;
    }

    @Override
    public void appendHoverText(
            ItemStack stack, @Nullable Level level, List<Component> lines, TooltipFlag detail
    ) {
        lines.add(Constants.LocalizationKeys.LABEL_GUN_ITEM_TOOLTIP_1.getComponent().withStyle(ChatFormatting.GRAY));
        lines.add(Constants.LocalizationKeys.LABEL_GUN_ITEM_TOOLTIP_2.getComponent().withStyle(ChatFormatting.GRAY));
        lines.add(Constants.LocalizationKeys.LABEL_GUN_ITEM_TOOLTIP_3.getComponent().withStyle(ChatFormatting.GRAY));
        lines.addAll(LabelPositionHolder.from(stack).asHoverText());
    }

    @Override
    public InteractionResultHolder<ItemStack> use(
            Level level,
            Player player,
            InteractionHand hand
    ) {
        var stack = player.getItemInHand(hand);
        if (level.isClientSide) {
            ClientStuff.showLabelGunScreen(stack, hand);
        }
        return InteractionResultHolder.sidedSuccess(stack, level.isClientSide());
    }

    @Override
    public Component getName(ItemStack stack) {
        var name = getActiveLabel(stack);
        if (name.isEmpty()) return super.getName(stack);
        return Constants.LocalizationKeys.LABEL_GUN_ITEM_NAME_WITH_LABEL
                .getComponent(name)
                .withStyle(ChatFormatting.AQUA);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\LimitedInputSlot.java

````java
package ca.teamdman.sfm.common.program;

import ca.teamdman.sfm.common.resourcetype.ResourceType;

import javax.annotation.Nullable;

public class LimitedInputSlot<STACK, ITEM, CAP> {

    @SuppressWarnings("NotNullFieldNotInitialized")
    public ResourceType<STACK, ITEM, CAP> type;
    @SuppressWarnings("NotNullFieldNotInitialized")
    public CAP handler;
    public int slot;
    @SuppressWarnings("NotNullFieldNotInitialized")
    public InputResourceTracker<STACK, ITEM, CAP> tracker;
    private boolean done = false;
    private @Nullable STACK extractSimulateCache = null;

    public LimitedInputSlot(
            CAP handler, int slot, InputResourceTracker<STACK, ITEM, CAP> tracker
    ) {
        this.init(handler, slot, tracker);
    }

    public boolean isDone() {
        if (done) return true;
        // we don't bother setting done because if this returns true it should be the last time this is called
        if (tracker.isDone()) {
            return true;
        }
        STACK stack = peekExtractPotential();
        if (type.isEmpty(stack)) {
            return true;
        }
        return !tracker.test(stack);
    }

    public void setDone() {
        this.done = true;
    }

    public STACK extract(long amount) {
        extractSimulateCache = null;
        return type.extract(handler, slot, amount, false);
    }

    /**
     * Checks how much could possibly be extracted from this slot.
     * We need to simulate since there are some types of slots we can't undo an extract from.
     * You can't put something back in the output slot of a furnace.
     * This value is cached for performance.
     */
    public STACK peekExtractPotential() {
        if (extractSimulateCache == null) {
            extractSimulateCache = type.extract(handler, slot, Long.MAX_VALUE, true);
        }
        return extractSimulateCache;
    }

    public void init(CAP handler, int slot, InputResourceTracker<STACK, ITEM, CAP> tracker) {
        this.done = false;
        this.extractSimulateCache = null;
        this.handler = handler;
        this.tracker = tracker;
        this.slot = slot;
        //noinspection DataFlowIssue
        this.type = tracker.getResourceLimit().resourceId().getResourceType();
        assert type != null;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMCapabilityProviderMappers.java

````java
package ca.teamdman.sfm.common.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.capabilityprovidermapper.BlockEntityCapabilityProviderMapper;
import ca.teamdman.sfm.common.capabilityprovidermapper.CapabilityProviderMapper;
import ca.teamdman.sfm.common.capabilityprovidermapper.CauldronCapabilityProviderMapper;
import net.minecraft.core.Registry;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredRegister;
import net.neoforged.neoforge.registries.RegistryBuilder;

import java.util.function.Supplier;

public class SFMCapabilityProviderMappers {
    public static final ResourceKey<Registry<CapabilityProviderMapper>> REGISTRY_ID = ResourceKey.createRegistryKey(new ResourceLocation(
            SFM.MOD_ID,
            "capability_provider_mappers"
    ));
    private static final DeferredRegister<CapabilityProviderMapper> MAPPERS = DeferredRegister.create(
            REGISTRY_ID,
            SFM.MOD_ID
    );
    public static final Registry<CapabilityProviderMapper> DEFERRED_MAPPERS = MAPPERS.makeRegistry(registryBuilder->{});

    public static final Supplier<BlockEntityCapabilityProviderMapper> BLOCK_ENTITY_MAPPER = MAPPERS.register(
            "block_entity",
            BlockEntityCapabilityProviderMapper::new
    );

    public static final Supplier<CauldronCapabilityProviderMapper> CAULDRON_MAPPER = MAPPERS.register(
            "cauldron",
            CauldronCapabilityProviderMapper::new
    );

    public static void register(IEventBus bus) {
        MAPPERS.register(bus);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\BoolExpr.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.ProgramContext;

import java.util.function.Predicate;

public record BoolExpr(
        Predicate<ProgramContext> pred,
        String sourceCode
) implements Predicate<ProgramContext>, ASTNode {

    @Override
    public boolean test(ProgramContext context) {
        return pred.test(context);
    }

    public BoolExpr negate() {
        return new BoolExpr(pred.negate(), "NOT " + sourceCode);
    }

    @Override
    public String toString() {
        return sourceCode;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\handler\package-info.java

````java
@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.client.handler;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\handler\ItemWorldRenderer.java

````java
package ca.teamdman.sfm.client.handler;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.item.LabelGunItem;
import ca.teamdman.sfm.common.item.NetworkToolItem;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import com.google.common.collect.HashMultimap;
import com.mojang.blaze3d.platform.GlStateManager;
import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.*;
import net.minecraft.client.Camera;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Font;
import net.minecraft.client.renderer.GameRenderer;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.RenderStateShard;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.renderer.texture.TextureAtlas;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.nbt.NbtUtils;
import net.minecraft.nbt.Tag;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.client.event.RenderLevelStageEvent;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE, value = Dist.CLIENT)
/*
 * This class uses code from tasgon's "observable" mod, also using MPLv2
 * https://github.com/tasgon/observable/blob/master/common/src/main/kotlin/observable/client/Overlay.kt
 */
public class ItemWorldRenderer {
    private static final int BUFFER_SIZE = 256;
    @SuppressWarnings("deprecation")
    private static final RenderType RENDER_TYPE = RenderType.create(
            "sfmlabels",
            DefaultVertexFormat.POSITION_COLOR,
            VertexFormat.Mode.QUADS,
            BUFFER_SIZE,
            false,
            false,
            RenderType.CompositeState
                    .builder()
                    .setTextureState(new RenderStateShard.TextureStateShard(TextureAtlas.LOCATION_BLOCKS, false, false))
                    .setDepthTestState(new RenderStateShard.DepthTestStateShard("always", 519))
                    .setTransparencyState(
                            new RenderStateShard.TransparencyStateShard(
                                    "src_to_one",
                                    () -> {
                                        RenderSystem.enableBlend();
                                        RenderSystem.blendFunc(
                                                GlStateManager.SourceFactor.SRC_ALPHA,
                                                GlStateManager.DestFactor.ONE
                                        );
                                    },
                                    () -> {
                                        RenderSystem.disableBlend();
                                        RenderSystem.defaultBlendFunc();
                                    }
                            )
                    )
                    .createCompositeState(true)
    );
    @Nullable
    private static VertexBuffer capabilityProviderVBO;
    @Nullable
    private static VertexBuffer cableVBO;

    @SubscribeEvent
    public static void renderLabelHighlights(RenderLevelStageEvent event) {
        if (event.getStage() != RenderLevelStageEvent.Stage.AFTER_TRANSLUCENT_BLOCKS) return;
        var player = Minecraft.getInstance().player;
        if (player == null) return;

        var labelGun = player.getMainHandItem();
        if (!(labelGun.getItem() instanceof LabelGunItem)) labelGun = player.getOffhandItem();
        if (labelGun.getItem() instanceof LabelGunItem) {
            var labels = LabelPositionHolder.from(labelGun);
            var labelPositions = HashMultimap.<BlockPos, String>create();
            labels.forEach((label, pos1) -> labelPositions.put(pos1, label));

            var poseStack = event.getPoseStack();
            var camera = Minecraft.getInstance().gameRenderer.getMainCamera();
            var bufferSource = Minecraft.getInstance().renderBuffers().bufferSource();

            RenderSystem.disableDepthTest();

            poseStack.pushPose();
            poseStack.translate(-camera.getPosition().x, -camera.getPosition().y, -camera.getPosition().z);

            { // draw labels
                for (var entry : labelPositions.asMap().entrySet()) {
                    drawLabel(poseStack, camera, entry.getKey(), bufferSource, entry.getValue());
                }
            }
            { // draw highlights
                RENDER_TYPE.setupRenderState();

                if (capabilityProviderVBO == null) {
                    capabilityProviderVBO = new VertexBuffer(VertexBuffer.Usage.STATIC);
                    capabilityProviderVBO.bind();
                    capabilityProviderVBO.upload(createCapabilityProviderVBO());
                } else {
                    capabilityProviderVBO.bind();
                }

                for (var pos : labelPositions.keySet()) {
                    poseStack.pushPose();
                    poseStack.translate(pos.getX(), pos.getY(), pos.getZ());

                    //noinspection DataFlowIssue
                    capabilityProviderVBO.drawWithShader(
                            poseStack.last().pose(),
                            event.getProjectionMatrix(),
                            GameRenderer.getPositionColorShader()
                    );
                    poseStack.popPose();
                }

                VertexBuffer.unbind();
                RENDER_TYPE.clearRenderState();
            }
            bufferSource.endBatch();
            poseStack.popPose();
            RenderSystem.enableDepthTest();
        }

        var networkTool = player.getMainHandItem();
        if (!(networkTool.getItem() instanceof NetworkToolItem)) networkTool = player.getOffhandItem();
        if (networkTool.getItem() instanceof NetworkToolItem) {
            List<BlockPos> cablePositions = new ArrayList<>();
            List<BlockPos> capabilityProviderPositions = new ArrayList<>();
            // gather network positions from item
            networkTool.getOrCreateTag().getList("networks", Tag.TAG_COMPOUND).forEach(networkTag -> {
                ((CompoundTag) networkTag).getList("cable_positions", Tag.TAG_COMPOUND)
                        .stream()
                        .map(CompoundTag.class::cast)
                        .map(NbtUtils::readBlockPos)
                        .forEach(cablePositions::add);
                ((CompoundTag) networkTag)
                        .getList("capability_provider_positions", Tag.TAG_COMPOUND)
                        .stream()
                        .map(CompoundTag.class::cast)
                        .map(NbtUtils::readBlockPos)
                        .forEach(capabilityProviderPositions::add);
            });

            var poseStack = event.getPoseStack();
            var camera = Minecraft.getInstance().gameRenderer.getMainCamera();
            var bufferSource = Minecraft.getInstance().renderBuffers().bufferSource();

            RenderSystem.disableDepthTest();

            poseStack.pushPose();
            poseStack.translate(
                    -camera.getPosition().x,
                    -camera.getPosition().y,
                    -camera.getPosition().z
            );

            { // draw highlights
                RENDER_TYPE.setupRenderState();

                if (capabilityProviderVBO == null) {
                    capabilityProviderVBO = new VertexBuffer(VertexBuffer.Usage.STATIC);
                    capabilityProviderVBO.bind();
                    capabilityProviderVBO.upload(createCapabilityProviderVBO());
                } else {
                    capabilityProviderVBO.bind();
                }

                for (var blockPos : capabilityProviderPositions) {
                    poseStack.pushPose();
                    poseStack.translate(blockPos.getX(), blockPos.getY(), blockPos.getZ());

                    //noinspection DataFlowIssue
                    capabilityProviderVBO.drawWithShader(
                            poseStack.last().pose(),
                            event.getProjectionMatrix(),
                            GameRenderer.getPositionColorShader()
                    );
                    poseStack.popPose();
                }


                if (cableVBO == null) {
                    cableVBO = new VertexBuffer(VertexBuffer.Usage.STATIC);
                    cableVBO.bind();
                    cableVBO.upload(createCableVBO());
                } else {
                    cableVBO.bind();
                }

                for (var blockPos : cablePositions) {
                    poseStack.pushPose();
                    poseStack.translate(blockPos.getX(), blockPos.getY(), blockPos.getZ());

                    //noinspection DataFlowIssue
                    cableVBO.drawWithShader(
                            poseStack.last().pose(),
                            event.getProjectionMatrix(),
                            GameRenderer.getPositionColorShader()
                    );
                    poseStack.popPose();
                }

                VertexBuffer.unbind();
                RENDER_TYPE.clearRenderState();
            }
            bufferSource.endBatch();
            poseStack.popPose();
            RenderSystem.enableDepthTest();
        }
    }

    private static void drawLabel(
            PoseStack poseStack,
            Camera camera,
            BlockPos pos,
            MultiBufferSource mbs,
            Collection<String> labels
    ) {
        poseStack.pushPose();
        poseStack.translate(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5);
        poseStack.mulPose(camera.rotation());
        poseStack.scale(-0.025f, -0.025f, 0.025f);
        Font font = Minecraft.getInstance().font;
        poseStack.translate(0, labels.size() * (font.lineHeight + 0.1) / -2f, 0);
        for (var label : labels) {
            font.drawInBatch(
                    label,
                    -font.width(label) / 2f,
                    0,
                    -0x1,
                    false,
                    poseStack.last().pose(),
                    mbs,
                    Font.DisplayMode.SEE_THROUGH,
                    0,
                    0xF000F0
            );
            poseStack.translate(0, font.lineHeight + 0.1, 0);
        }
        poseStack.popPose();
    }

    public static BufferBuilder.RenderedBuffer createCapabilityProviderVBO() {
        return createShape(100, 0, 255, 100);
    }

    public static BufferBuilder.RenderedBuffer createCableVBO() {
        return createShape(100, 255, 0, 100);
    }

    public static BufferBuilder.RenderedBuffer createShape(int r, int g, int b, int a) {
        var builder = new BufferBuilder(4 * 6 * 8);
        builder.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);

        builder.vertex(0F, 1F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 1F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 1F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 1F, 0F).color(r, g, b, a).endVertex();

        builder.vertex(0F, 1F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 1F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 0F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 0F, 0F).color(r, g, b, a).endVertex();

        builder.vertex(1F, 1F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 1F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 0F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 0F, 1F).color(r, g, b, a).endVertex();

        builder.vertex(0F, 1F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 1F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 0F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 0F, 1F).color(r, g, b, a).endVertex();

        builder.vertex(1F, 0F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 0F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 1F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 1F, 1F).color(r, g, b, a).endVertex();

        builder.vertex(1F, 0F, 0F).color(r, g, b, a).endVertex();
        builder.vertex(1F, 0F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 0F, 1F).color(r, g, b, a).endVertex();
        builder.vertex(0F, 0F, 0F).color(r, g, b, a).endVertex();

        return builder.end();
    }

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\PrintingPressBlockItem.java

````java
package ca.teamdman.sfm.common.item;

import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.registry.SFMBlocks;
import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.level.Level;
import org.jetbrains.annotations.Nullable;

import java.util.List;

public class PrintingPressBlockItem extends BlockItem {
    public PrintingPressBlockItem() {
        super(SFMBlocks.PRINTING_PRESS_BLOCK.get(), new Properties());
    }

    @Override
    public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltip, TooltipFlag pFlag) {
        super.appendHoverText(pStack, pLevel, pTooltip, pFlag);
        pTooltip.add(Constants.LocalizationKeys.PRINTING_PRESS_TOOLTIP.getComponent().withStyle(ChatFormatting.GRAY));
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CableNetworkManager.java

````java
package ca.teamdman.sfm.common.cablenetwork;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import net.minecraft.core.BlockPos;
import net.minecraft.world.level.Level;
import net.neoforged.fml.common.Mod;

import javax.annotation.Nullable;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Helper class to memorize the relevant chains of inventory cables.
 * <p>
 * Rather than looking up the connected cable blocks for each manager each tick,
 * this class aims to keep track of the chains instead.
 * Adding or removing cable blocks that invoke the relevant methods for this class
 * will help build the network.
 * <p>
 * Adding cables can do one of:
 * - append to existing network
 * - cause two existing networks to join
 * - create a new network
 * <p>
 * Removing cables can:
 * - Remove it from the network
 * - Remove the network if it was the only member
 * - Cause a network to split into other networks if it was a "bridge" block
 */
public class CableNetworkManager {

    private static final Map<Level, List<CableNetwork>> NETWORKS = new WeakHashMap<>();

    /**
     * Remove a block from any networks it is in. Then, prune any empty networks.
     */
    public static void removeCable(Level level, BlockPos cablePos) {
        getNetworkFromCablePosition(level, cablePos).ifPresent(network -> {
            removeNetwork(network);
            var newNetworks = network.withoutCable(cablePos);
            newNetworks.forEach(CableNetworkManager::addNetwork);
        });
    }

    public static Optional<CableNetwork> getOrRegisterNetworkFromManagerPosition(ManagerBlockEntity tile) {
        return getOrRegisterNetworkFromCablePosition(tile.getLevel(), tile.getBlockPos());
    }

    public static Optional<CableNetwork> getNetworkFromPosition(Level level, BlockPos pos) {
        return getNetworksForLevel(level)
                .filter(net -> net.CABLE_POSITIONS.contains(pos.asLong())
                               || net.getCapabilityProviderPositions().anyMatch(pos::equals))
                .findFirst();
    }

    public static Stream<CableNetwork> getNetworksForLevel(Level level) {
        return NETWORKS.getOrDefault(level, Collections.emptyList())
                .stream()
                .filter(net -> net.getLevel().isClientSide() == level.isClientSide());
    }

    private static Optional<CableNetwork> getNetworkFromCablePosition(Level level, BlockPos pos) {
        return getNetworksForLevel(level)
                .filter(net -> net.containsCablePosition(pos))
                .findFirst();
    }

    private static void removeNetwork(CableNetwork network) {
        NETWORKS.getOrDefault(network.getLevel(), Collections.emptyList()).remove(network);
    }

    private static void addNetwork(CableNetwork network) {
        NETWORKS.computeIfAbsent(network.getLevel(), k -> new ArrayList<>()).add(network);
    }

    /**
     * Finds the set of networks that contain the given position
     */
    private static Set<CableNetwork> getCandidateNetworks(Level level, BlockPos pos) {
        return getNetworksForLevel(level)
                .filter(net -> net.isAdjacentToCable(pos))
                .collect(Collectors.toSet());
    }


    private static Optional<CableNetwork> mergeNetworks(Set<CableNetwork> networks) {
        if (networks.isEmpty()) return Optional.empty();

        Iterator<CableNetwork> iterator = networks.iterator();
        CableNetwork main = iterator.next();

        // Merge the rest into the first
        iterator.forEachRemaining(other -> {
            main.mergeNetwork(other);
            removeNetwork(other);
        });

        return Optional.of(main);
    }

    public static void unregisterNetworkForTestingPurposes(CableNetwork network) {
        removeNetwork(network);
    }

    /**
     * Gets the cable network object. If none exists and one should, it will create and populate
     * one.
     * <p>
     * Networks should only exist on the server side.
     */
    public static Optional<CableNetwork> getOrRegisterNetworkFromCablePosition(@Nullable Level level, BlockPos pos) {
        if (level == null) return Optional.empty();
        if (level.isClientSide()) return Optional.empty();

        // only cables define the main spine of a network
        if (!CableNetwork.isCable(level, pos)) return Optional.empty();

        // discover existing network for this position
        Optional<CableNetwork> existing = getNetworkFromCablePosition(level, pos);
        if (existing.isPresent()) return existing;

        // find potential networks
        Set<CableNetwork> candidates = getCandidateNetworks(level, pos);

        // no candidates, create new network
        if (candidates.isEmpty()) {
            CableNetwork network = new CableNetwork(level);
            addNetwork(network);
            // rebuild network from world
            // might be first time used after loading from disk
            network.rebuildNetwork(pos);
            return Optional.of(network);
        }

        // one candidate exists, add the cable to it
        if (candidates.size() == 1) {
            // Only one network matches this cable, add cable as member
            CableNetwork network = candidates.iterator().next();
            network.addCable(pos);
            return Optional.of(network);
        }

        // more than one candidate network exists, merge them
        Optional<CableNetwork> result = mergeNetworks(candidates);
        result.ifPresent(net -> net.addCable(pos));
        return result;
    }


    public static List<BlockPos> getBadCableCachePositions(Level level) {
        return getNetworksForLevel(level)
                .flatMap(CableNetwork::getCablePositions)
                .filter(pos -> !(level.getBlockState(pos).getBlock() instanceof ICableBlock))
                .collect(Collectors.toList());
    }

    public static void clear() {
        NETWORKS.clear();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ResourceIdentifier.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.program.RegexCache;
import ca.teamdman.sfm.common.registry.SFMResourceTypes;
import ca.teamdman.sfm.common.resourcetype.ResourceType;
import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
import net.minecraft.ResourceLocationException;
import net.minecraft.resources.ResourceLocation;

import javax.annotation.Nullable;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

// resourceTypeName resourceNamespace, resourceTypeName name, resource resourceNamespace, resource name
// sfm:item:minecraft:stone
public class ResourceIdentifier<STACK, ITEM, CAP> implements ASTNode, Predicate<Object> {

    public static final ResourceIdentifier<?, ?, ?> MATCH_ALL = new ResourceIdentifier<>(
            ".*",
            ".*"
    );

    public final String resourceTypeNamespace;
    public final String resourceTypeName;
    public final String resourceNamespace;
    public final String resourceName;
    private @Nullable ResourceType<STACK, ITEM, CAP> resourceTypeCache = null;


    private final Predicate<String> resourceNamespacePredicate;
    private final Predicate<String> resourceNamePredicate;

    public ResourceIdentifier(
            String resourceTypeNamespace,
            String resourceTypeName,
            String resourceNamespace,
            String resourceName
    ) {
        this.resourceTypeNamespace = resourceTypeNamespace;
        this.resourceTypeName = resourceTypeName;
        this.resourceNamespace = resourceNamespace;
        this.resourceName = resourceName;
        this.resourceNamespacePredicate = RegexCache.buildPredicate(resourceNamespace);
        this.resourceNamePredicate = RegexCache.buildPredicate(resourceName);
    }

    public boolean matchesStack(ResourceLocation stackId) {
        return resourceNamePredicate.test(stackId.getPath()) && resourceNamespacePredicate.test(stackId.getNamespace());
    }

    public ResourceIdentifier(String value) {
        this(SFM.MOD_ID, "item", ".*", value);
    }

    public ResourceIdentifier(String namespace, String value) {
        this(SFM.MOD_ID, "item", namespace, value);
    }

    public ResourceIdentifier(String typeName, String resourceNamespace, String resourceName) {
        this(SFM.MOD_ID, typeName, resourceNamespace, resourceName);
    }

    public static <STACK, ITEM, CAP> ResourceIdentifier<STACK, ITEM, CAP> fromString(String string) {
        var parts = string.split(":");
        if (parts.length == 1) {
            return new ResourceIdentifier<>(parts[0]);
        } else if (parts.length == 2) {
            return new ResourceIdentifier<>(parts[0], parts[1]);
        } else if (parts.length == 3) {
            return new ResourceIdentifier<>(parts[0], parts[1], parts[2]);
        } else if (parts.length == 4) {
            return new ResourceIdentifier<>(parts[0], parts[1], parts[2], parts[3]);
        } else {
            throw new IllegalArgumentException("bad resource id: " + string);
        }
    }

    public void assertValid() throws IllegalArgumentException {
        try {
            if (RegexCache.isRegexPattern(this.resourceNamespace)) {
                Pattern.compile(this.resourceNamespace);
            }
            if (RegexCache.isRegexPattern(this.resourceName)) {
                Pattern.compile(this.resourceName);
            }
        } catch (PatternSyntaxException e) {
            throw new IllegalArgumentException("Invalid resource identifier pattern \""
                                               + this
                                               + "\" - "
                                               + e.getMessage());
        }
    }

    public Optional<ResourceLocation> getLocation() {
        try {
            return Optional.of(new ResourceLocation(resourceNamespace, resourceName));
        } catch (ResourceLocationException e) {
            return Optional.empty();
        }
    }

    private static final Map<ResourceIdentifier<?, ?, ?>, List<ResourceIdentifier<?, ?, ?>>> expansionCache = new Object2ObjectOpenHashMap<>();

    public boolean test(Object other) {
        ResourceType<STACK, ITEM, CAP> resourceType = getResourceType();
        return resourceType != null && resourceType.matchesStack(this, other);
    }

    public List<ResourceIdentifier<STACK, ITEM, CAP>> expand() {
        if (this.getResourceType() == SFMResourceTypes.FORGE_ENERGY.get())
            return List.of(new ResourceIdentifier<>(
                    this.resourceTypeNamespace,
                    this.resourceTypeName,
                    "forge",
                    "energy"
            ));
        if (expansionCache.containsKey(this)) {
            //noinspection unchecked,rawtypes
            return (List<ResourceIdentifier<STACK, ITEM, CAP>>) (List) expansionCache.get(this);
        }
        ResourceType<STACK, ITEM, CAP> resourceType = getResourceType();
        //noinspection DataFlowIssue // if we get here, it should have a registry
        List<ResourceIdentifier<STACK, ITEM, CAP>> rtn = resourceType.getRegistry().keySet()
                .stream()
                .filter(this::matchesStack)
                .map(key -> new ResourceIdentifier<STACK, ITEM, CAP>(
                        resourceTypeNamespace,
                        resourceTypeName,
                        key.getNamespace(),
                        key.getPath()
                )).toList();
        //noinspection unchecked,rawtypes
        expansionCache.put(this, (List) rtn);
        return rtn;
    }

    public void setResourceTypeCache(@Nullable ResourceType<STACK, ITEM, CAP> resourceTypeCache) {
        this.resourceTypeCache = resourceTypeCache;
    }

    public @Nullable ResourceType<STACK, ITEM, CAP> getResourceType() {
        if (resourceTypeCache == null) {
            //noinspection unchecked
            setResourceTypeCache((ResourceType<STACK, ITEM, CAP>) SFMResourceTypes.fastLookup(
                    resourceTypeNamespace,
                    resourceTypeName
            ));
        }
        return resourceTypeCache;
    }

    @Override
    public String toString() {
        return resourceTypeNamespace + ":" + resourceTypeName + ":" + resourceNamespace + ":" + resourceName;
    }

    public String toStringCondensed() {
        String rtn;
        if (resourceTypeNamespace.equals(SFM.MOD_ID) && resourceTypeName.equals("item")) {
            if (resourceNamespace.equals(".*")) {
                rtn = resourceName;
            } else {
                rtn = resourceNamespace + ":" + resourceName;
            }
        } else if (
                resourceTypeNamespace.equals(SFM.MOD_ID)
                && resourceTypeName.equals("forge_energy")
                && getLocation()
                        .filter(rl -> rl.equals(new ResourceLocation("forge", "energy")))
                        .isPresent()
        ) {
            rtn = "forge_energy::";
        } else if (resourceTypeNamespace.equals(SFM.MOD_ID)) {
            rtn = resourceTypeName + ":" + resourceNamespace + ":" + resourceName;
        } else {
            rtn = resourceTypeNamespace + ":" + resourceTypeName + ":" + resourceNamespace + ":" + resourceName;
        }
        return rtn;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ResourceIdentifier<?, ?, ?> that = (ResourceIdentifier<?, ?, ?>) o;
        return Objects.equals(resourceTypeNamespace, that.resourceTypeNamespace)
               && Objects.equals(resourceTypeName, that.resourceTypeName)
               && Objects.equals(resourceNamespace, that.resourceNamespace)
               && Objects.equals(resourceName, that.resourceName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(resourceTypeNamespace, resourceTypeName, resourceNamespace, resourceName);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMItems.java

````java
package ca.teamdman.sfm.common.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.item.*;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.block.Block;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.function.Supplier;

public class SFMItems {

    private static final DeferredRegister<Item> ITEMS = DeferredRegister.create(BuiltInRegistries.ITEM, SFM.MOD_ID);
    public static final Supplier<Item> MANAGER_ITEM = register("manager", SFMBlocks.MANAGER_BLOCK);
    public static final Supplier<Item> CABLE_ITEM = register("cable", SFMBlocks.CABLE_BLOCK);
    //    public static final  Supplier<Item>   BATTERY_ITEM    = register("battery", SFMBlocks.BATTERY_BLOCK);
    public static final Supplier<Item> WATER_TANK_ITEM = register("water_tank", SFMBlocks.WATER_TANK_BLOCK);
    public static final Supplier<Item> DISK_ITEM = ITEMS.register("disk", DiskItem::new);
    public static final Supplier<Item> LABEL_GUN_ITEM = ITEMS.register(
            "labelgun",
            LabelGunItem::new
    ); // TODO: rename on a major version update to label_gun
    public static final Supplier<Item> NETWORK_TOOL_ITEM = ITEMS.register("network_tool", NetworkToolItem::new);

    public static final Supplier<Item> PRINTING_PRESS_ITEM = ITEMS.register(
            "printing_press",
            PrintingPressBlockItem::new
    );

    public static final Supplier<Item> FORM_ITEM = ITEMS.register("form", FormItem::new);
    public static final Supplier<Item> EXPERIENCE_SHARD_ITEM = ITEMS.register("xp_shard", ExperienceShard::new);
    public static final Supplier<Item> EXPERIENCE_GOOP_ITEM = ITEMS.register("xp_goop", ExperienceGoop::new);

    public static void register(IEventBus bus) {
        ITEMS.register(bus);
    }

    private static Supplier<Item> register(String name, Supplier<Block> block) {
        return ITEMS.register(name, () -> new BlockItem(block.get(), new Item.Properties()));
    }

    public static void populateMainCreativeTab(
            @SuppressWarnings("unused") CreativeModeTab.ItemDisplayParameters params,
            CreativeModeTab.Output output
    ) {
        output.acceptAll(SFMItems.ITEMS
                                 .getEntries()
                                 .stream()
                                 .map(Supplier::get)
                                 .map(ItemStack::new)
                                 .toList());
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\InputResourceTracker.java

````java
package ca.teamdman.sfm.common.program;

import ca.teamdman.sfm.common.resourcetype.ResourceType;
import ca.teamdman.sfml.ast.ResourceIdSet;
import ca.teamdman.sfml.ast.ResourceLimit;
import it.unimi.dsi.fastutil.ints.Int2LongArrayMap;

import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Predicate;

public class InputResourceTracker<STACK, ITEM, CAP> implements Predicate<Object> {

    private final ResourceLimit<STACK, ITEM, CAP> RESOURCE_LIMIT;
    private final ResourceIdSet EXCLUSIONS;
    private final Int2LongArrayMap RETENTION_OBLIGATIONS = new Int2LongArrayMap();
    private final AtomicLong TRANSFERRED;
    private final AtomicLong RETENTION_OBLIGATION_PROGRESS;

    public InputResourceTracker(
            ResourceLimit<STACK, ITEM, CAP> limit,
            ResourceIdSet exclusions,
            AtomicLong transferred,
            AtomicLong retentionObligationProgress
    ) {
        this.RESOURCE_LIMIT = limit;
        this.EXCLUSIONS = exclusions;
        this.TRANSFERRED = transferred;
        this.RETENTION_OBLIGATION_PROGRESS = retentionObligationProgress;
    }

    public boolean isDone() {
        return TRANSFERRED.get() >= RESOURCE_LIMIT.limit().quantity().number().value();
    }

    public long getExistingRetentionObligation(int slot) {
        return RETENTION_OBLIGATIONS.getOrDefault(slot, 0);
    }

    public long getRemainingRetentionObligation() {
        return RESOURCE_LIMIT.limit().retention().number().value() - RETENTION_OBLIGATION_PROGRESS.get();
    }

    public void trackRetentionObligation(int slot, long promise) {
        this.RETENTION_OBLIGATION_PROGRESS.accumulateAndGet(promise, Long::sum);
        this.RETENTION_OBLIGATIONS.merge(slot, promise, Long::sum);
    }

    public ResourceLimit<STACK, ITEM, CAP> getResourceLimit() {
        return RESOURCE_LIMIT;
    }

    public long getMaxTransferable() {
        return RESOURCE_LIMIT.limit().quantity().number().value() - TRANSFERRED.get();
    }

    public void trackTransfer(long amount) {
        TRANSFERRED.accumulateAndGet(amount, Long::sum);
    }

    @Override
    public boolean test(Object stack) {
        return RESOURCE_LIMIT.test(stack) && !EXCLUSIONS.test(stack);
    }

    public boolean matchesCapabilityType(Object capability) {
        ResourceType<STACK, ITEM, CAP> resourceType = RESOURCE_LIMIT.resourceId().getResourceType();
        return resourceType != null && resourceType.matchesCapabilityType(capability);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundInputInspectionRequestPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.program.ProgramContext;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfm.common.util.SFMUtils;
import ca.teamdman.sfml.ast.InputStatement;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.server.level.ServerPlayer;
import net.neoforged.neoforge.network.NetworkEvent;
import net.neoforged.neoforge.network.PacketDistributor;

import java.util.function.Supplier;

public record ServerboundInputInspectionRequestPacket(
        String programString,
        int inputNodeIndex
) {
    public static void encode(ServerboundInputInspectionRequestPacket msg, FriendlyByteBuf friendlyByteBuf) {
        friendlyByteBuf.writeUtf(msg.programString, Program.MAX_PROGRAM_LENGTH);
        friendlyByteBuf.writeInt(msg.inputNodeIndex());
    }

    public static ServerboundInputInspectionRequestPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ServerboundInputInspectionRequestPacket(
                friendlyByteBuf.readUtf(Program.MAX_PROGRAM_LENGTH),
                friendlyByteBuf.readInt()
        );
    }

    public static void handle(
            ServerboundInputInspectionRequestPacket msg, NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> {
            // we don't know if the player has the program edit screen open from a manager or a disk in hand
            ServerPlayer player = context.getSender();
            if (player == null) return;
            ManagerBlockEntity manager;
            if (player.containerMenu instanceof ManagerContainerMenu mcm) {
                if (player.level().getBlockEntity(mcm.MANAGER_POSITION) instanceof ManagerBlockEntity mbe) {
                    manager = mbe;
                } else {
                    return;
                }
            } else {
                //todo: localize
                SFMPackets.INSPECTION_CHANNEL.send(
                        PacketDistributor.PLAYER.with(() -> player),
                        new ClientboundInputInspectionResultsPacket(
                                "This inspection is only available when editing inside a manager.")
                );
                return;
            }
            Program.compile(
                    msg.programString,
                    (successProgram, builder) -> builder
                            .getNodeAtIndex(msg.inputNodeIndex)
                            .filter(InputStatement.class::isInstance)
                            .map(InputStatement.class::cast)
                            .ifPresent(inputStatement -> {
                                StringBuilder payload = new StringBuilder();
                                payload
                                        .append(inputStatement.toStringPretty())
                                        .append("\n-- peek results --\n");

                                ProgramContext programContext = new ProgramContext(
                                        successProgram,
                                        manager,
                                        ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES
                                );
                                int preLen = payload.length();
                                inputStatement.gatherSlots(
                                        programContext,
                                        slot -> SFMUtils
                                                .getInputStatementForSlot(
                                                        slot,
                                                        inputStatement.labelAccess()
                                                )
                                                .ifPresent(is -> payload
                                                        .append(is.toStringPretty())
                                                        .append("\n"))
                                );
                                if (payload.length() == preLen) {
                                    payload.append("none");
                                }

                                SFMPackets.INSPECTION_CHANNEL.send(
                                        PacketDistributor.PLAYER.with(() -> player),
                                        new ClientboundInputInspectionResultsPacket(
                                                SFMUtils.truncate(
                                                        payload.toString(),
                                                        ClientboundInputInspectionResultsPacket.MAX_RESULTS_LENGTH
                                                ))
                                );
                            }),
                    failure -> {
                    }
            );
        });
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\LabelAccess.java

````java
package ca.teamdman.sfml.ast;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public record LabelAccess(
        List<Label> labels,
        DirectionQualifier directions,
        NumberRangeSet slots,
        RoundRobin roundRobin
) implements ASTNode {
    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append(labels.stream().map(Objects::toString).collect(Collectors.joining(", ")));
        if (roundRobin.isEnabled()) {
            builder.append(" ").append(roundRobin);
        }
        if (!directions.directions().isEmpty()) {
            builder.append(" ");
            builder
                    .append(directions
                                    .stream()
                                    .map(DirectionQualifier::directionToString)
                                    .collect(Collectors.joining(", ")))
                    .append(" SIDE");
        }
        if (slots.ranges().length > 0) {
            if (slots.ranges().length != 1 || !slots.ranges()[0].equals(NumberRange.MAX_RANGE)) {
                builder.append(" SLOTS");
                for (NumberRange range : slots.ranges()) {
                    builder.append(" ").append(range);
                }
            }
        }
        return builder.toString();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\InputStatement.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.InputResourceTracker;
import ca.teamdman.sfm.common.program.LimitedInputSlot;
import ca.teamdman.sfm.common.program.LimitedInputSlotObjectPool;
import ca.teamdman.sfm.common.program.ProgramContext;
import ca.teamdman.sfm.common.resourcetype.ResourceType;

import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public record InputStatement(
        LabelAccess labelAccess,
        ResourceLimits resourceLimits,
        boolean each
) implements Statement {

    @Override
    public void tick(ProgramContext context) {
        context.addInput(this);
    }

    private static final LimitedInputSlotObjectPool SLOT_POOL = new LimitedInputSlotObjectPool();

    @SuppressWarnings("rawtypes")
    public static void releaseSlots(List<LimitedInputSlot> slots) {
        SLOT_POOL.release(slots);
    }

    public static void releaseSlot(LimitedInputSlot<?, ?, ?> slot) {
        SLOT_POOL.release(slot);
    }

    @SuppressWarnings({"rawtypes", "unchecked"}) // basically impossible to make this method generic safe
    public void gatherSlots(ProgramContext context, Consumer<LimitedInputSlot<?, ?, ?>> acceptor) {
        Stream<ResourceType> types = resourceLimits
                .resourceLimits()
                .stream()
                .map(ResourceLimit::resourceId)
                .map((ResourceIdentifier x) -> x.getResourceType())
                .distinct();

        if (!each) {
            // create a single matcher to be shared by all capabilities
            List<InputResourceTracker<?, ?, ?>> inputMatchers = resourceLimits.createInputTrackers();
            for (var type : (Iterable<ResourceType>) types::iterator) {
                for (var capability : (Iterable) type.getCapabilities(context, labelAccess)::iterator) {
                    gatherSlots((ResourceType<Object, Object, Object>) type, capability, inputMatchers, acceptor);
                }
            }
        } else {
            for (ResourceType type : (Iterable<ResourceType>) types::iterator) {
                for (var cap : (Iterable<?>) type.getCapabilities(context, labelAccess)::iterator) {
                    List<InputResourceTracker<?, ?, ?>> inputTrackers = resourceLimits.createInputTrackers();
                    gatherSlots((ResourceType<Object, Object, Object>) type, cap, inputTrackers, acceptor);
                }
            }
        }
    }

    private <STACK, ITEM, CAP> void gatherSlots(
            ResourceType<STACK, ITEM, CAP> type,
            CAP capability,
            List<InputResourceTracker<?, ?, ?>> trackers,
            Consumer<LimitedInputSlot<?, ?, ?>> acceptor
    ) {
        for (int slot = 0; slot < type.getSlots(capability); slot++) {
            if (labelAccess.slots().contains(slot)) {
                STACK stack = type.getStackInSlot(capability, slot);
                if (!type.isEmpty(stack)) {
                    for (InputResourceTracker<?, ?, ?> tracker : trackers) {
                        if (tracker.matchesCapabilityType(capability) && tracker.test(stack)) {
                            //noinspection unchecked
                            acceptor.accept(SLOT_POOL.acquire(
                                    capability,
                                    slot,
                                    (InputResourceTracker<STACK, ITEM, CAP>) tracker
                            ));
                        }
                    }
                }
            }
        }
    }

    @Override
    public String toString() {
        return "INPUT " + resourceLimits + " FROM " + (each ? "EACH " : "") + labelAccess;
    }

    public String toStringPretty() {
        StringBuilder sb = new StringBuilder();
        sb.append("INPUT");
        String rls = resourceLimits.toStringPretty(Limit.MAX_QUANTITY_NO_RETENTION);
        if (rls.lines().count() > 1) {
            sb.append("\n");
            sb.append(rls.lines().map(s -> "  " + s).collect(Collectors.joining("\n")));
            sb.append("\n");
        } else {
            sb.append(" ");
            sb.append(rls);
            sb.append(" ");
        }
        sb.append("FROM ");
        sb.append(each ? "EACH " : "");
        sb.append(labelAccess);
        return sb.toString();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\util\SFMUtils.java

````java
package ca.teamdman.sfm.common.util;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.capabilityprovidermapper.CapabilityProviderMapper;
import ca.teamdman.sfm.common.program.LimitedInputSlot;
import ca.teamdman.sfm.common.registry.SFMCapabilityProviderMappers;
import ca.teamdman.sfm.common.registry.SFMResourceTypes;
import ca.teamdman.sfm.common.resourcetype.ResourceType;
import ca.teamdman.sfml.ast.Number;
import ca.teamdman.sfml.ast.*;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.nbt.ListTag;
import net.minecraft.nbt.StringTag;
import net.minecraft.nbt.Tag;
import net.minecraft.network.chat.contents.TranslatableContents;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.Level;
import net.neoforged.neoforge.common.capabilities.ICapabilityProvider;

import javax.annotation.Nullable;
import java.util.*;
import java.util.function.Consumer;
import java.util.stream.Stream;

public class SFMUtils {

    /**
     * Gets a stream using a self-feeding mapping function. Prevents the
     * re-traversal of elements that have been visited before.
     *
     * @param operator Consumes queue elements to build the result set and
     *                 append the next queue elements
     * @param first    Initial value, not checked against the filter
     * @param <T>      Type that the mapper consumes and produces
     * @return Stream result after termination of the recursive mapping process
     */
    public static <T> Stream<T> getRecursiveStream(
            RecursiveBuilder<T> operator, T first
    ) {
        Stream.Builder<T> builder = Stream.builder();
        Set<T> debounce = new HashSet<>();
        Deque<T> toVisit = new ArrayDeque<>();
        toVisit.add(first);
        debounce.add(first);
        while (!toVisit.isEmpty()) {
            T current = toVisit.pop();
            operator.accept(current, next -> {
                if (!debounce.contains(next)) {
                    debounce.add(next);
                    toVisit.add(next);
                }
            }, builder::add);
        }
        return builder.build();
    }

    public static TranslatableContents deserializeTranslation(CompoundTag tag) {
        var key = tag.getString("key");
        var args = tag
                .getList("args", Tag.TAG_STRING)
                .stream()
                .map(StringTag.class::cast)
                .map(StringTag::getAsString)
                .toArray();
        return getTranslatableContents(key, args);
    }

    public static CompoundTag serializeTranslation(TranslatableContents contents) {
        CompoundTag tag = new CompoundTag();
        tag.putString("key", contents.getKey());
        ListTag args = new ListTag();
        for (var arg : contents.getArgs()) {
            args.add(StringTag.valueOf(arg.toString()));
        }
        tag.put("args", args);
        return tag;
    }

    /**
     * Helper method to avoid noisy git merges between versions
     */
    public static TranslatableContents getTranslatableContents(String key, Object... args) {
        return new TranslatableContents(key, null, args);
    }

    /**
     * Helper method to avoid noisy git merges between versions
     */
    public static TranslatableContents getTranslatableContents(String key) {
        return getTranslatableContents(key, new Object[]{});
    }
    public static <STACK, ITEM, CAP> Optional<InputStatement> getInputStatementForSlot(
            LimitedInputSlot<STACK, ITEM, CAP> slot,
            LabelAccess labelAccess
    ) {
        STACK potential = slot.peekExtractPotential();
        if (slot.type.isEmpty(potential)) return Optional.empty();
        long toMove = slot.type.getAmount(potential);
        toMove = Long.min(toMove, slot.tracker.getResourceLimit().limit().quantity().number().value());
        long remainingObligation = slot.tracker.getRemainingRetentionObligation();
        toMove -= Long.min(toMove, remainingObligation);
        potential = slot.type.withCount(potential, toMove);
        STACK stack = potential;

        return SFMResourceTypes.DEFERRED_TYPES
                .getResourceKey(slot.type)
                .map(x -> {
                    //noinspection unchecked,rawtypes
                    return (ResourceKey<ResourceType<STACK, ITEM, CAP>>) (ResourceKey) x;
                })
                .map((ResourceKey<ResourceType<STACK, ITEM, CAP>> resourceTypeResourceKey) -> SFMUtils.getInputStatementForStack(
                        resourceTypeResourceKey,
                        slot.type,
                        stack,
                        "temp",
                        slot.slot,
                        false,
                        null
                ))
                // update the labels
                .map(inputStatement -> new InputStatement(new LabelAccess(
                        labelAccess.labels(),
                        labelAccess.directions(),
                        inputStatement.labelAccess()
                                .slots(),
                        RoundRobin.disabled()
                ), inputStatement.resourceLimits(), inputStatement.each()));
    }


    public interface RecursiveBuilder<T> {

        void accept(T current, Consumer<T> next, Consumer<T> results);
    }


    public static <STACK, ITEM, CAP> InputStatement getInputStatementForStack(
            ResourceKey<ResourceType<STACK, ITEM, CAP>> resourceTypeResourceKey,
            ResourceType<STACK, ITEM, CAP> resourceType,
            STACK stack,
            String label,
            int slot,
            boolean each,
            @Nullable Direction direction
    ) {
        LabelAccess labelAccess = new LabelAccess(
                List.of(new Label(label)),
                new DirectionQualifier(
                        direction == null
                        ? EnumSet.noneOf(Direction.class)
                        : EnumSet.of(direction)),
                new NumberRangeSet(
                        new NumberRange[]{new NumberRange(slot, slot)}
                ),
                RoundRobin.disabled()
        );
        Limit limit = new Limit(
                new ResourceQuantity(
                        new Number(resourceType.getAmount(stack)),
                        ResourceQuantity.IdExpansionBehaviour.NO_EXPAND
                ),
                new ResourceQuantity(
                        new Number(0),
                        ResourceQuantity.IdExpansionBehaviour.NO_EXPAND
                )
        );
        ResourceLocation stackId = resourceType.getRegistryKey(stack);
        ResourceIdentifier<STACK, ITEM, CAP> resourceIdentifier = new ResourceIdentifier<>(
                resourceTypeResourceKey.location().getNamespace(),
                resourceTypeResourceKey.location().getPath(),
                stackId.getNamespace(),
                stackId.getPath()
        );
        ResourceLimit<STACK, ITEM, CAP> resourceLimit = new ResourceLimit<>(
                resourceIdentifier, limit
        );
        ResourceLimits resourceLimits = new ResourceLimits(
                List.of(resourceLimit),
                ResourceIdSet.EMPTY
        );
        return new InputStatement(
                labelAccess,
                resourceLimits,
                each
        );
    }

    public static String truncate(String input, int maxLength) {
        if (input.length() > maxLength) {
            SFM.LOGGER.warn(
                    "input too big, truncation has occurred! (len={}, max={}, over={})",
                    input.length(),
                    maxLength,
                    maxLength - input.length()
            );
            String truncationWarning = "\n...truncated";
            return input.substring(0, maxLength - truncationWarning.length()) + truncationWarning;
        }
        return input;
    }

    /**
     * Find a {@link net.neoforged.neoforge.common.capabilities.CapabilityProvider} as provided by the registered capability provider mappers.
     * If multiple {@link CapabilityProviderMapper}s match, the first one is returned.
     */
    @SuppressWarnings("UnstableApiUsage") // for the javadoc lol
    public static Optional<ICapabilityProvider> discoverCapabilityProvider(Level level, BlockPos pos) {
        if (!level.isLoaded(pos)) return Optional.empty();
        return SFMCapabilityProviderMappers.DEFERRED_MAPPERS
                .stream()
                .map(mapper -> mapper.getProviderFor(level, pos))
                .filter(Optional::isPresent)
                .map(Optional::get)
                .findFirst();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\OutputStatement.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.program.*;
import ca.teamdman.sfm.common.resourcetype.ResourceType;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class OutputStatement implements Statement {
    private final LabelAccess labelAccess;
    private final ResourceLimits resourceLimits;
    private final boolean each;

    private int lastInputCapacity = 32;
    private int lastOutputCapacity = 32;

    public OutputStatement(
            LabelAccess labelAccess,
            ResourceLimits resourceLimits,
            boolean each
    ) {
        this.labelAccess = labelAccess;
        this.resourceLimits = resourceLimits;
        this.each = each;
    }

    /**
     * Juicy method function here.
     * Given two slots, move as much as possible from one to the other.
     *
     * @param source      The slot to pull from
     * @param destination the slot to push to
     * @param <STACK>     the stack type
     * @param <ITEM>      the item type
     * @param <CAP>       the capability type
     */
    public static <STACK, ITEM, CAP> void moveTo(
            LimitedInputSlot<STACK, ITEM, CAP> source, LimitedOutputSlot<STACK, ITEM, CAP> destination
    ) {
        // always ensure types match
        // items and fluids are incompatible, etc
        if (!source.type.equals(destination.type)) return;

        // find out what we can pull out
        // should never be empty by the time we get here
        STACK potential = source.peekExtractPotential();
        // ensure the output slot allows this item
        if (!destination.tracker.test(potential)) return;
        // find out how much we can fit
        STACK remainder = destination.insert(potential, true);

        // how many can we move before accounting for limits
        long toMove = source.type.getAmount(potential) - source.type.getAmount(remainder);
        if (toMove == 0) return;

        // how many have we promised to RETAIN in this slot
        toMove -= source.tracker.getExistingRetentionObligation(source.slot);
        // how many more need we are obligated to leave to satisfy the remainder of the RETAIN limit
        long remainingObligation = source.tracker.getRemainingRetentionObligation();
        remainingObligation = Long.min(toMove, remainingObligation);
        toMove -= remainingObligation;

        // update the obligation tracker
        source.tracker.trackRetentionObligation(source.slot, remainingObligation);

        // if we can't move anything after our retention obligations, we're done
        if (toMove == 0) {
            source.setDone();
            return;
        }

        // apply output constraints
        toMove = Math.min(toMove, destination.tracker.getMaxTransferable());

        // apply input constraints
        toMove = Math.min(toMove, source.tracker.getMaxTransferable());

        // apply resource constraints
        toMove = Math.min(toMove, source.type.getMaxStackSize(potential));
        if (toMove <= 0) return;

        // extract item for real
        STACK extracted = source.extract(toMove);
        // insert item for real
        remainder = destination.insert(extracted, false);
        var moved = source.type.getAmount(extracted) - source.type.getAmount(remainder);
        // track transfer amounts
        source.tracker.trackTransfer(moved);
        destination.tracker.trackTransfer(moved);

        // if remainder exists, someone lied.
        // this should never happen
        // will void items if it does
        if (!destination.type.isEmpty(remainder)) {
            SFM.LOGGER.error(
                    "Failed to move all promised items, took {} but had {} left over after insertion.",
                    extracted,
                    remainder
            );
        }
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    @Override
    public void tick(ProgramContext context) {
        if (context.getExecutionPolicy() == ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES) return;
        // gather the input slots from all the input statements, +27 to hopefully avoid resizing
        List<LimitedInputSlot> inputSlots = new ArrayList<>(lastInputCapacity + 27);
        for (var inputStatement : context.getInputs()) {
            inputStatement.gatherSlots(context, inputSlots::add);
        }
        if (inputSlots.isEmpty()) return; // stop if we have nothing to move
        lastInputCapacity = inputSlots.size();

        // collect the output slots, +27 to hopefully avoid resizing
        List<LimitedOutputSlot> outputSlots = new ArrayList<>(lastOutputCapacity + 27);
        gatherSlots(context, outputSlots::add);
        lastOutputCapacity = outputSlots.size();

        // try and move resources from input slots to output slots
        var inIt = inputSlots.iterator();
        while (inIt.hasNext()) {
            var in = inIt.next();
            if (in.isDone()) { // this slot is no longer useful
                inIt.remove(); // ensure we only release slots once
                InputStatement.releaseSlot(in); // release the slot to the object pool
                continue;
            }
            var outIt = outputSlots.iterator();
            while (outIt.hasNext()) {
                var out = outIt.next();
                if (out.isDone()) { // this slot is no longer useful
                    outIt.remove(); // ensure we only release slots once
                    LimitedOutputSlotObjectPool.INSTANCE.release(out); // release the slot to the object pool
                    continue;
                }
                moveTo(in, out); // move the contents from the "in" slot to the "out" slot
                if (in.isDone()) break; // stop processing output slots if we have nothing to move
            }
            if (outputSlots.isEmpty()) break; // stop processing input slots if we have no output slots
        }

        LimitedOutputSlotObjectPool.INSTANCE.release(outputSlots);
        InputStatement.releaseSlots(inputSlots);
    }

    /**
     * The output statement contains labels.
     * Each block in the world can have more than one programString.
     * Each block can have a block entity.
     * Each block entity can have 0 or more slots.
     * <p>
     * We want collect the slots from all the labelled blocks.
     */
    @SuppressWarnings({"rawtypes", "unchecked"}) // basically impossible to make this method generic safe
    public void gatherSlots(ProgramContext context, Consumer<LimitedOutputSlot<?, ?, ?>> acceptor) {
        // find all the types referenced in the output statement
        Stream<ResourceType> types = resourceLimits
                .resourceLimits()
                .stream()
                .map(ResourceLimit::resourceId)
                .map((ResourceIdentifier x) -> x.getResourceType())
                .distinct();

        if (!each) {
            // create a single matcher to be shared by all capabilities
            List<OutputResourceTracker<?, ?, ?>> outputTracker = resourceLimits.createOutputTrackers();
            for (var type : (Iterable<ResourceType>) types::iterator) {
                for (var cap : (Iterable<?>) type.getCapabilities(context, labelAccess)::iterator) {
                    gatherSlots((ResourceType<Object, Object, Object>) type, cap, outputTracker, acceptor);
                }
            }
        } else {
            for (var type : (Iterable<ResourceType>) types::iterator) {
                for (var cap : (Iterable<?>) type.getCapabilities(context, labelAccess)::iterator) {
                    List<OutputResourceTracker<?, ?, ?>> outputTracker = resourceLimits.createOutputTrackers();
                    gatherSlots((ResourceType<Object, Object, Object>) type, cap, outputTracker, acceptor);
                }
            }
        }
    }

    private <STACK, ITEM, CAP> void gatherSlots(
            ResourceType<STACK, ITEM, CAP> type,
            CAP capability,
            List<OutputResourceTracker<?, ?, ?>> trackers,
            Consumer<LimitedOutputSlot<?, ?, ?>> acceptor
    ) {
        for (int slot = 0; slot < type.getSlots(capability); slot++) {
            if (labelAccess.slots().contains(slot)) {
                for (OutputResourceTracker<?, ?, ?> tracker : trackers) {
                    if (tracker.matchesCapabilityType(capability)) {
                        //noinspection unchecked
                        acceptor.accept(LimitedOutputSlotObjectPool.INSTANCE.acquire(
                                capability,
                                slot,
                                (OutputResourceTracker<STACK, ITEM, CAP>) tracker
                        ));
                    }
                }
            }
        }
    }

    public LabelAccess labelAccess() {
        return labelAccess;
    }

    public ResourceLimits resourceLimits() {
        return resourceLimits;
    }

    public boolean each() {
        return each;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;
        if (obj == null || obj.getClass() != this.getClass()) return false;
        var that = (OutputStatement) obj;
        return Objects.equals(this.labelAccess, that.labelAccess) &&
               Objects.equals(this.resourceLimits, that.resourceLimits) &&
               this.each == that.each;
    }

    @Override
    public int hashCode() {
        return Objects.hash(labelAccess, resourceLimits, each);
    }

    @Override
    public String toString() {
        return "OUTPUT " + resourceLimits + " TO " + (each ? "EACH " : "") + labelAccess;
    }

    public String toStringPretty() {
        StringBuilder sb = new StringBuilder();
        sb.append("OUTPUT");
        String rls = resourceLimits.toStringPretty(Limit.MAX_QUANTITY_MAX_RETENTION);
        if (rls.lines().count() > 1) {
            sb.append("\n");
            sb.append(rls.lines().map(s -> "  " + s).collect(Collectors.joining("\n")));
            sb.append("\n");
        } else {
            sb.append(" ");
            sb.append(rls);
            sb.append(" ");
        }
        sb.append("TO ");
        sb.append(each ? "EACH " : "");
        sb.append(labelAccess);
        return sb.toString();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CapabilityProviderMapper.java

````java
package ca.teamdman.sfm.common.capabilityprovidermapper;

import net.minecraft.core.BlockPos;
import net.minecraft.world.level.LevelAccessor;
import net.neoforged.neoforge.common.capabilities.ICapabilityProvider;

import java.util.Optional;

public interface CapabilityProviderMapper {
    Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos);
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Block.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.ProgramContext;

import java.util.List;

public record Block(List<Statement> statements) implements Statement {
    @Override
    public void tick(ProgramContext context) {
        for (Statement statement : statements) {
            statement.tick(context);
        }
    }

    @Override
    public String toString() {
        var rtn = new StringBuilder();
        for (Statement statement : statements) {
            if (statement instanceof InputStatement ins) {
                rtn.append(ins.toStringPretty().strip());
            } else if (statement instanceof OutputStatement outs) {
                rtn.append(outs.toStringPretty().strip());
            } else {
                rtn.append(statement.toString().strip());
            }
            rtn.append("\n");
        }
        return rtn.toString().strip();
    }

    @Override
    public List<Statement> getStatements() {
        return statements;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\NumberRangeSet.java

````java
package ca.teamdman.sfml.ast;

public record NumberRangeSet(NumberRange[] ranges) implements ASTNode {
    public static NumberRangeSet MAX_RANGE = new NumberRangeSet(new NumberRange[]{NumberRange.MAX_RANGE});
    public boolean contains(int value) {
        for (NumberRange range : ranges) {
            if (range.contains(value)) {
                return true;
            }
        }
        return false;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\render\package-info.java

````java
@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.client.render;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java

````java
package ca.teamdman.sfm.common.capabilityprovidermapper;

import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.LayeredCauldronBlock;
import net.minecraft.world.level.material.Fluids;
import net.neoforged.neoforge.common.capabilities.Capabilities;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.capabilities.ICapabilityProvider;
import net.neoforged.neoforge.common.util.LazyOptional;
import net.neoforged.neoforge.fluids.FluidStack;
import net.neoforged.neoforge.fluids.capability.IFluidHandler;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.annotation.Nonnull;
import java.util.Optional;

public class CauldronCapabilityProviderMapper implements CapabilityProviderMapper {
    @Override
    public Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos) {
        var state = level.getBlockState(pos);
        if (state.getBlock() == Blocks.CAULDRON
            || state.getBlock() == Blocks.WATER_CAULDRON
            || state.getBlock() == Blocks.LAVA_CAULDRON) {
            return Optional.of(new CauldronCapabilityProvider(level, pos));
        }
        return Optional.empty();
    }

    private static class CauldronCapabilityProvider implements ICapabilityProvider {
        private final LazyOptional<IFluidHandler> fluidHandlerLazyOptional;


        public CauldronCapabilityProvider(LevelAccessor level, BlockPos pos) {
            this.fluidHandlerLazyOptional = LazyOptional.of(() -> new CauldronFluidHandler(level, pos));
        }

        @Nonnull
        @Override
        public @NotNull <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {
            if (cap == Capabilities.FLUID_HANDLER) {
                return fluidHandlerLazyOptional.cast();
            }
            return LazyOptional.empty();
        }
    }

    private record CauldronFluidHandler(
            LevelAccessor level,
            BlockPos pos
    ) implements IFluidHandler {

        @Override
        public int getTanks() {
            return 1;
        }

        @Override
        public @NotNull FluidStack getFluidInTank(int tank) {
            var state = level.getBlockState(pos);
            if (state.getBlock() == Blocks.WATER_CAULDRON) {
                int level = state.getValue(LayeredCauldronBlock.LEVEL);
                if (level == 0) {
                    return FluidStack.EMPTY;
                }
                return new FluidStack(Fluids.WATER, level * 250);
            } else if (state.getBlock() == Blocks.LAVA_CAULDRON) {
                return new FluidStack(Fluids.LAVA, 1000);
            }
            return FluidStack.EMPTY;
        }

        @Override
        public int getTankCapacity(int tank) {
            return 1000;
        }

        @Override
        public boolean isFluidValid(int tank, @NotNull FluidStack stack) {
            return stack.getFluid() == Fluids.WATER || stack.getFluid() == Fluids.LAVA;
        }

        @Override
        public int fill(FluidStack resource, FluidAction action) {
            var state = level.getBlockState(pos);
            if (state.getBlock() == Blocks.CAULDRON) { // if empty
                if (resource.getFluid() == Fluids.WATER) {
                    int layers = Math.min(3, resource.getAmount() / 250);
                    if (action.execute()) {
                        level.setBlock(
                                pos,
                                Blocks.WATER_CAULDRON.defaultBlockState().setValue(
                                        LayeredCauldronBlock.LEVEL,
                                        layers
                                ),
                                Block.UPDATE_ALL
                        );
                    }
                    return layers * 250;
                } else if (resource.getFluid() == Fluids.LAVA && resource.getAmount() >= 1000) {
                    if (action.execute()) {
                        level.setBlock(
                                pos,
                                Blocks.LAVA_CAULDRON.defaultBlockState(),
                                Block.UPDATE_ALL
                        );
                    }
                    return 1000;
                }
            } else if (state.getBlock() instanceof LayeredCauldronBlock) {
                int waterLevel = state.getValue(LayeredCauldronBlock.LEVEL);
                if (waterLevel >= 3) {
                    return 0;
                }
                int waterLevelIncrease = Math.min(3 - waterLevel, Math.min(3, resource.getAmount() / 250));
                if (action.execute()) {
                    level.setBlock(
                            pos,
                            state.setValue(LayeredCauldronBlock.LEVEL, waterLevel + waterLevelIncrease),
                            Block.UPDATE_ALL
                    );
                }
                return waterLevelIncrease * 250;
            }
            return 0;
        }

        @Override
        public @NotNull FluidStack drain(FluidStack resource, FluidAction action) {
            var state = level.getBlockState(pos);
            if (state.getBlock() instanceof LayeredCauldronBlock) {
                int waterLevel = state.getValue(LayeredCauldronBlock.LEVEL);
                if (waterLevel == 0) {
                    return FluidStack.EMPTY;
                }
                int waterLevelDrain = Math.min(waterLevel, resource.getAmount() / 250);
                if (action.execute()) {
                    int resultLevel = waterLevel - waterLevelDrain;
                    if (resultLevel == 0) {
                        level.setBlock(
                                pos,
                                Blocks.CAULDRON.defaultBlockState(),
                                Block.UPDATE_ALL
                        );
                    } else {
                        level.setBlock(
                                pos,
                                state.setValue(LayeredCauldronBlock.LEVEL, resultLevel),
                                Block.UPDATE_ALL
                        );
                    }
                }
                return new FluidStack(Fluids.WATER, waterLevelDrain * 250);
            } else if (state.getBlock() == Blocks.LAVA_CAULDRON && resource.getAmount() >= 1000) {
                if (action.execute()) {
                    level.setBlock(
                            pos,
                            Blocks.CAULDRON.defaultBlockState(),
                            Block.UPDATE_ALL
                    );
                }
                return new FluidStack(Fluids.LAVA, 1000);
            }
            return FluidStack.EMPTY;
        }

        @Override
        public @NotNull FluidStack drain(int maxDrain, FluidAction action) {
            var state = level.getBlockState(pos);
            if (state.getBlock() instanceof LayeredCauldronBlock) {
                int waterLevel = state.getValue(LayeredCauldronBlock.LEVEL);
                if (waterLevel == 0) {
                    return FluidStack.EMPTY;
                }
                int waterLevelDrain = Math.min(waterLevel, maxDrain / 250);
                if (action.execute()) {
                    level.setBlock(
                            pos,
                            state.setValue(LayeredCauldronBlock.LEVEL, waterLevel - waterLevelDrain),
                            Block.UPDATE_ALL
                    );
                }
                return new FluidStack(Fluids.WATER, waterLevelDrain * 250);
            } else if (state.getBlock() == Blocks.LAVA_CAULDRON && maxDrain >= 1000) {
                if (action.execute()) {
                    level.setBlock(
                            pos,
                            Blocks.CAULDRON.defaultBlockState(),
                            Block.UPDATE_ALL
                    );
                }
                return new FluidStack(Fluids.LAVA, 1000);
            }
            return FluidStack.EMPTY;
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\NotContainer.java

````java
package ca.teamdman.sfm.common.recipe;

import net.minecraft.world.Container;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;

import java.util.Set;
import java.util.function.Predicate;

/**
 * Recipe stuff wants your block entities to be Containers to do stuff.
 * I don't want to use a Container when the block has no GUI.
 * This is a hack to make the recipe stuff happy.
 */
@SuppressWarnings("RedundantMethodOverride")
public interface NotContainer extends Container {

    @Override
    default void clearContent() {
    }

    @Override
    default int getContainerSize() {
        return 0;
    }

    @Override
    default boolean isEmpty() {
        return true;
    }

    @Override
    default ItemStack getItem(int pSlot) {
        return ItemStack.EMPTY;
    }

    @Override
    default ItemStack removeItem(int pSlot, int pAmount) {
        return ItemStack.EMPTY;

    }

    @Override
    default ItemStack removeItemNoUpdate(int pSlot) {
        return ItemStack.EMPTY;
    }

    @Override
    default void setItem(int pSlot, ItemStack pStack) {
    }

    @Override
    default int getMaxStackSize() {
        return 0;
    }

    @Override
    default void setChanged() {
    }

    @Override
    default boolean stillValid(Player pPlayer) {
        return false;
    }

    @Override
    default void startOpen(Player pPlayer) {
    }

    @Override
    default void stopOpen(Player pPlayer) {
    }

    @Override
    default boolean canPlaceItem(int pIndex, ItemStack pStack) {
        return false;
    }

    @Override
    default int countItem(Item pItem) {
        return 0;
    }

    @Override
    default boolean hasAnyOf(Set<Item> pSet) {
        return false;
    }

    @Override
    default boolean hasAnyMatching(Predicate<ItemStack> p_216875_) {
        return false;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\jei\FallingAnvilJEICategory.java

````java
package ca.teamdman.sfm.client.jei;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.item.FormItem;
import ca.teamdman.sfm.common.registry.SFMItems;
import mezz.jei.api.gui.builder.IRecipeLayoutBuilder;
import mezz.jei.api.gui.drawable.IDrawable;
import mezz.jei.api.helpers.IJeiHelpers;
import mezz.jei.api.recipe.IFocusGroup;
import mezz.jei.api.recipe.RecipeIngredientRole;
import mezz.jei.api.recipe.RecipeType;
import mezz.jei.api.recipe.category.IRecipeCategory;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.core.registries.Registries;
import net.minecraft.nbt.ListTag;
import net.minecraft.nbt.StringTag;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.EnchantedBookItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.item.enchantment.Enchantment;
import net.minecraft.world.item.enchantment.EnchantmentInstance;
import net.minecraft.world.level.block.Blocks;
import net.neoforged.neoforge.registries.NeoForgeRegistries;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

public class FallingAnvilJEICategory implements IRecipeCategory<FallingAnvilRecipe> {

    public static final RecipeType<FallingAnvilRecipe> RECIPE_TYPE = RecipeType.create(
            SFM.MOD_ID,
            "falling_anvil",
            FallingAnvilRecipe.class
    );
    private final IDrawable background;
    private final IDrawable icon;

    public FallingAnvilJEICategory(IJeiHelpers jeiHelpers) {
        background = jeiHelpers.getGuiHelper().createBlankDrawable(80, 54);
        icon = jeiHelpers.getGuiHelper().createDrawableItemStack(new ItemStack(Blocks.ANVIL));
    }

    @Override
    public RecipeType<FallingAnvilRecipe> getRecipeType() {
        return RECIPE_TYPE;
    }

    @Override
    public Component getTitle() {
        return Constants.LocalizationKeys.FALLING_ANVIL_JEI_CATEGORY_TITLE.getComponent();
    }

    @Override
    public IDrawable getBackground() {
        return background;
    }

    @Override
    public IDrawable getIcon() {
        return icon;
    }

    @Override
    public void setRecipe(IRecipeLayoutBuilder builder, FallingAnvilRecipe recipe, IFocusGroup focuses) {
        var anvil = List.of(
                new ItemStack(Items.ANVIL),
                new ItemStack(Items.CHIPPED_ANVIL),
                new ItemStack(Items.DAMAGED_ANVIL)
        );
        if (recipe instanceof FallingAnvilFormRecipe formRecipe) {
            builder.addSlot(RecipeIngredientRole.CATALYST, 0, 0).addItemStacks(anvil);
            builder.addSlot(RecipeIngredientRole.INPUT, 0, 18).addIngredients(formRecipe.PARENT.FORM);
            ItemStack ironBlock = new ItemStack(Blocks.IRON_BLOCK);
            var displayTag = ironBlock.getOrCreateTag().getCompound("display");
            var lore = new ListTag();
            lore.add(StringTag.valueOf(Component.Serializer.toJson(Constants.LocalizationKeys.FALLING_ANVIL_JEI_CONSUMED.getComponent())));
            displayTag.put("Lore", lore);
            ironBlock.getOrCreateTag().put("display", displayTag);
            builder.addSlot(RecipeIngredientRole.INPUT, 0, 36).addItemStack(ironBlock);
            builder
                    .addSlot(RecipeIngredientRole.OUTPUT, 50, 18)
                    .addItemStacks(Arrays.stream(formRecipe.PARENT.FORM.getItems()).map(FormItem::getForm).toList());
        } else if (recipe instanceof FallingAnvilDisenchantRecipe) {
            var tools = List.of(
                    Items.DIAMOND_HELMET,
                    Items.DIAMOND_CHESTPLATE,
                    Items.DIAMOND_LEGGINGS,
                    Items.DIAMOND_BOOTS,
                    Items.DIAMOND_PICKAXE,
                    Items.DIAMOND_SHOVEL,
                    Items.DIAMOND_AXE,
                    Items.DIAMOND_HOE,
                    Items.DIAMOND_SWORD,
                    Items.GOLDEN_HELMET,
                    Items.GOLDEN_CHESTPLATE,
                    Items.GOLDEN_LEGGINGS,
                    Items.GOLDEN_BOOTS,
                    Items.GOLDEN_PICKAXE,
                    Items.GOLDEN_SHOVEL,
                    Items.GOLDEN_AXE,
                    Items.GOLDEN_HOE,
                    Items.GOLDEN_SWORD,
                    Items.IRON_HELMET,
                    Items.IRON_CHESTPLATE,
                    Items.IRON_LEGGINGS,
                    Items.IRON_BOOTS,
                    Items.IRON_PICKAXE,
                    Items.IRON_SHOVEL,
                    Items.IRON_AXE,
                    Items.IRON_HOE,
                    Items.IRON_SWORD,
                    Items.LEATHER_HELMET,
                    Items.LEATHER_CHESTPLATE,
                    Items.LEATHER_LEGGINGS,
                    Items.LEATHER_BOOTS,
                    Items.CHAINMAIL_HELMET,
                    Items.CHAINMAIL_CHESTPLATE,
                    Items.CHAINMAIL_LEGGINGS,
                    Items.CHAINMAIL_BOOTS,
                    Items.WOODEN_PICKAXE,
                    Items.WOODEN_SHOVEL,
                    Items.WOODEN_AXE,
                    Items.WOODEN_HOE,
                    Items.WOODEN_SWORD,
                    Items.BOW
            );
            var enchanted = new ArrayList<ItemStack>();
            var books = new ArrayList<ItemStack>();
            for (Enchantment enchant : BuiltInRegistries.ENCHANTMENT) {
                for (Item tool : tools) {
                    var stack = new ItemStack(tool);
                    if (enchant.canEnchant(stack)) {
                        stack.enchant(enchant, enchant.getMaxLevel());
                        enchanted.add(stack);
                        books.add(EnchantedBookItem.createForEnchantment(new EnchantmentInstance(
                                enchant,
                                enchant.getMaxLevel()
                        )));
                    }
                }
            }

            builder.addSlot(RecipeIngredientRole.CATALYST, 8, 0).addItemStacks(anvil);
            builder.addSlot(RecipeIngredientRole.INPUT, 0, 18).addItemStacks(enchanted);
            builder.addSlot(RecipeIngredientRole.INPUT, 18, 18).addItemStack(new ItemStack(Items.BOOK));
            ItemStack obsidian = new ItemStack(Blocks.OBSIDIAN);
            var displayTag = obsidian.getOrCreateTag().getCompound("display");
            var lore = new ListTag();
            lore.add(StringTag.valueOf(Component.Serializer.toJson(Constants.LocalizationKeys.FALLING_ANVIL_JEI_NOT_CONSUMED.getComponent())));
            displayTag.put("Lore", lore);
            obsidian.getOrCreateTag().put("display", displayTag);
            builder.addSlot(RecipeIngredientRole.INPUT, 8, 36).addItemStack(obsidian);
            builder.addSlot(RecipeIngredientRole.OUTPUT, 50, 18).addItemStacks(books);
        } else if (recipe instanceof FallingAnvilExperienceShardRecipe) {
            builder.addSlot(RecipeIngredientRole.CATALYST, 0, 0).addItemStacks(anvil);
            builder.addSlot(RecipeIngredientRole.INPUT, 0, 18).addIngredients(Ingredient.of(Items.ENCHANTED_BOOK));
            ItemStack obsidian = new ItemStack(Blocks.OBSIDIAN);
            var displayTag = obsidian.getOrCreateTag().getCompound("display");
            var lore = new ListTag();
            lore.add(StringTag.valueOf(Component.Serializer.toJson(Constants.LocalizationKeys.FALLING_ANVIL_JEI_NOT_CONSUMED.getComponent())));
            displayTag.put("Lore", lore);
            obsidian.getOrCreateTag().put("display", displayTag);
            builder.addSlot(RecipeIngredientRole.INPUT, 0, 36).addItemStack(obsidian);
            builder
                    .addSlot(RecipeIngredientRole.OUTPUT, 50, 18)
                    .addItemStack(new ItemStack(SFMItems.EXPERIENCE_SHARD_ITEM.get()));
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\BlockEntityCapabilityProviderMapper.java

````java
package ca.teamdman.sfm.common.capabilityprovidermapper;

import net.minecraft.core.BlockPos;
import net.minecraft.world.level.LevelAccessor;
import net.neoforged.neoforge.common.capabilities.ICapabilityProvider;

import java.util.Optional;

public class BlockEntityCapabilityProviderMapper implements CapabilityProviderMapper {
    @Override
    public Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos) {
        return Optional.ofNullable(level.getBlockEntity(pos));
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ResourceComparer.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.resourcetype.ResourceType;

import java.util.ArrayList;
import java.util.List;

public record ResourceComparer<STACK, ITEM, CAP>(
        ComparisonOperator op,
        ResourceQuantity quantity,
        ResourceIdentifier<STACK, ITEM, CAP> res
) implements ASTNode {
    public BoolExpr toBooleanExpression(SetOperator setOp, LabelAccess labelAccess, String sourceCode) {
        return new BoolExpr(
                context -> {
                    ResourceType<STACK, ITEM, CAP> type = res.getResourceType();
                    if (type == null) return false;
                    // get the inventories to check

                    var handlers = type.getCapabilities(context, labelAccess);

                    // track how many items seen
                    long overallCount = 0;
                    // track how many inventories satisfied the condition
                    List<Boolean> satisfiedSet = new ArrayList<>();

                    for (var cap : (Iterable<CAP>) handlers::iterator) {
                        long invCount = 0;
                        for (var stack : (Iterable<STACK>) type.collect(cap, labelAccess)::iterator) {
                            if (this.res.test(stack)) {
                                invCount += type.getAmount(stack);
                                overallCount += type.getAmount(stack);
                            }
                        }
                        satisfiedSet.add(this.op.test(invCount, this.quantity.number().value()));
                    }
                    var isOverallSatisfied = this.op.test(overallCount, this.quantity.number().value());
                    return setOp.test(isOverallSatisfied, satisfiedSet);
                },
                labelAccess + " HAS " + sourceCode
        );
    }

    @Override
    public String toString() {
        return op().getSourceCode() + " " + quantity() + " " + res().toStringCondensed();
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\util\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.util;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\gui\screen\ManagerScreen.java

````java
package ca.teamdman.sfm.client.gui.screen;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.client.ClientStuff;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.item.DiskItem;
import ca.teamdman.sfm.common.net.ServerboundManagerFixPacket;
import ca.teamdman.sfm.common.net.ServerboundManagerProgramPacket;
import ca.teamdman.sfm.common.net.ServerboundManagerResetPacket;
import ca.teamdman.sfm.common.registry.SFMPackets;
import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.BufferBuilder;
import com.mojang.blaze3d.vertex.DefaultVertexFormat;
import com.mojang.blaze3d.vertex.Tesselator;
import com.mojang.blaze3d.vertex.VertexFormat;
import net.minecraft.ChatFormatting;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.Tooltip;
import net.minecraft.client.gui.screens.Screen;
import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
import net.minecraft.client.player.LocalPlayer;
import net.minecraft.client.renderer.GameRenderer;
import net.minecraft.client.resources.language.I18n;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;
import net.neoforged.neoforge.client.gui.widget.ExtendedButton;
import org.joml.Matrix4f;
import org.lwjgl.glfw.GLFW;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;

import static ca.teamdman.sfm.common.Constants.LocalizationKeys.*;

public class ManagerScreen extends AbstractContainerScreen<ManagerContainerMenu> {
    private static final ResourceLocation BACKGROUND_TEXTURE_LOCATION = new ResourceLocation(
            SFM.MOD_ID,
            "textures/gui/container/manager.png"
    );
    private final float STATUS_DURATION = 40;
    private Component status = Component.empty();
    private float statusCountdown = 0;
    @SuppressWarnings("NotNullFieldNotInitialized")
    private ExtendedButton diagButton;
    @SuppressWarnings("NotNullFieldNotInitialized")
    private ExtendedButton clipboardPasteButton;
    @SuppressWarnings("NotNullFieldNotInitialized")
    private ExtendedButton clipboardCopyButton;
    @SuppressWarnings("NotNullFieldNotInitialized")
    private ExtendedButton resetButton;
    @SuppressWarnings("NotNullFieldNotInitialized")
    private ExtendedButton editButton;
    @SuppressWarnings("NotNullFieldNotInitialized")
    private ExtendedButton examplesButton;

    public List<ExtendedButton> getButtonsForJEIExclusionZones() {
        return List.of(
                clipboardPasteButton,
                editButton,
                examplesButton,
                clipboardCopyButton
        );
    }

    public ManagerScreen(ManagerContainerMenu menu, Inventory inv, Component title) {
        super(menu, inv, title);
    }

    public boolean isReadOnly() {
        LocalPlayer player = Minecraft.getInstance().player;
        return player == null || player.isSpectator();
    }

    public void updateVisibilities() {
        boolean diskPresent = menu.getSlot(0).hasItem();
        diagButton.visible = shouldShowDiagButton();
        clipboardCopyButton.visible = diskPresent;
        clipboardPasteButton.visible = diskPresent && !isReadOnly();
        resetButton.visible = diskPresent && !isReadOnly();
        editButton.visible = diskPresent && !isReadOnly();
    }

    private Tooltip buildTooltip(LocalizationEntry entry) {
        return Tooltip.create(entry.getComponent());
    }

    @Override
    protected void init() {
        super.init();
        int buttonWidth = 120;
        clipboardPasteButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(
                (this.width - this.imageWidth) / 2 - buttonWidth,
                (this.height - this.imageHeight) / 2 + 16,
                buttonWidth,
                16,
                MANAGER_GUI_PASTE_FROM_CLIPBOARD_BUTTON.getComponent(),
                button -> this.onLoadClipboard(),
                buildTooltip(MANAGER_GUI_PASTE_FROM_CLIPBOARD_BUTTON_TOOLTIP)
        ));
        editButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(
                (this.width - this.imageWidth) / 2 - buttonWidth,
                (this.height - this.imageHeight) / 2 + 16 + 50,
                buttonWidth,
                16,
                MANAGER_GUI_EDIT_BUTTON.getComponent(),
                button -> onEdit(),
                buildTooltip(MANAGER_GUI_EDIT_BUTTON_TOOLTIP)
        ));
        examplesButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(
                (this.width - this.imageWidth) / 2 - buttonWidth,
                (this.height - this.imageHeight) / 2 + 16 * 2 + 50,
                buttonWidth,
                16,
                MANAGER_GUI_VIEW_EXAMPLES_BUTTON.getComponent(),
                button -> onShowExamples(),
                buildTooltip(MANAGER_GUI_VIEW_EXAMPLES_BUTTON_TOOLTIP)
        ));
        clipboardCopyButton = this.addRenderableWidget(new ExtendedButton(
                (this.width - this.imageWidth) / 2 - buttonWidth,
                (this.height - this.imageHeight) / 2 + 128,
                buttonWidth,
                16,
                MANAGER_GUI_COPY_TO_CLIPBOARD_BUTTON.getComponent(),
                button -> this.onSaveClipboard()
        ));
        resetButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(
                (this.width - this.imageWidth) / 2 + 120,
                (this.height - this.imageHeight) / 2 + 10,
                50,
                12,
                MANAGER_GUI_RESET_BUTTON.getComponent(),
                button -> sendReset(),
                buildTooltip(MANAGER_GUI_RESET_BUTTON_TOOLTIP)
        ));
        diagButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(
                (this.width - this.imageWidth) / 2 + 35,
                (this.height - this.imageHeight) / 2 + 48,
                12,
                14,
                Component.literal("!"),
                button -> {
                    if (Screen.hasShiftDown() && !isReadOnly()) {
                        sendAttemptFix();
                    } else {
                        this.onSaveDiagClipboard();
                    }
                },
                buildTooltip(isReadOnly()
                             ? MANAGER_GUI_WARNING_BUTTON_TOOLTIP_READ_ONLY
                             : MANAGER_GUI_WARNING_BUTTON_TOOLTIP)
        ));
        updateVisibilities();
    }

    private void onEdit() {
        ClientStuff.showProgramEditScreen(menu.CONTAINER.getItem(0), this::sendProgram);
    }

    private void onShowExamples() {
        Minecraft
                .getInstance()
                .pushGuiLayer(new ProgramTemplatePickerScreen(template -> ClientStuff.showProgramEditScreen(
                        template,
                        this::sendProgram
                )));
    }

    private void sendReset() {
        SFMPackets.MANAGER_CHANNEL.sendToServer(new ServerboundManagerResetPacket(
                menu.containerId,
                menu.MANAGER_POSITION
        ));
        status = MANAGER_GUI_STATUS_RESET.getComponent();
        statusCountdown = STATUS_DURATION;
    }

    private void sendAttemptFix() {
        SFMPackets.MANAGER_CHANNEL.sendToServer(new ServerboundManagerFixPacket(
                menu.containerId,
                menu.MANAGER_POSITION
        ));
        status = MANAGER_GUI_STATUS_FIX.getComponent();
        statusCountdown = STATUS_DURATION;
    }

    private void sendProgram(String program) {
        SFMPackets.MANAGER_CHANNEL.sendToServer(new ServerboundManagerProgramPacket(
                menu.containerId,
                menu.MANAGER_POSITION,
                program
        ));
        menu.program = program;
        status = MANAGER_GUI_STATUS_LOADED_CLIPBOARD.getComponent();
        statusCountdown = STATUS_DURATION;
    }

    private void onSaveClipboard() {
        try {
            Minecraft.getInstance().keyboardHandler.setClipboard(menu.program);
            status = MANAGER_GUI_STATUS_SAVED_CLIPBOARD.getComponent();
            statusCountdown = STATUS_DURATION;
        } catch (Throwable t) {
            SFM.LOGGER.error("failed to save clipboard", t);
        }
    }

    private boolean shouldShowDiagButton() {
        var disk = menu.CONTAINER.getItem(0);
        if (!(disk.getItem() instanceof DiskItem)) return false;
        var errors = DiskItem.getErrors(disk);
        var warnings = DiskItem.getWarnings(disk);
        return !errors.isEmpty() || !warnings.isEmpty();
    }

    private void onSaveDiagClipboard() {
        try {
            var disk = menu.CONTAINER.getItem(0);
            if (!(disk.getItem() instanceof DiskItem)) return;
            StringBuilder content = new StringBuilder(menu.program);

            content
                    .append("\n\n-- Diagnostic info ")
                    .append(new SimpleDateFormat("yyyy-MM-dd HH:mm.ss").format(new java.util.Date()))
                    .append(" --");

            var errors = DiskItem.getErrors(disk);
            if (!errors.isEmpty()) {
                content.append("\n\n-- Errors\n");
                for (var error : errors) {
                    content.append("-- * ").append(I18n.get(error.getKey(), error.getArgs())).append("\n");
                }
            }

            var warnings = DiskItem.getWarnings(disk);
            if (!warnings.isEmpty()) {
                content.append("\n\n-- Warnings\n");
                for (var warning : warnings) {
                    content.append("-- * ").append(I18n.get(warning.getKey(), warning.getArgs())).append("\n");
                }
            }

            Minecraft.getInstance().keyboardHandler.setClipboard(content.toString());
            status = MANAGER_GUI_STATUS_SAVED_CLIPBOARD.getComponent();
            statusCountdown = STATUS_DURATION;
        } catch (Throwable t) {
            SFM.LOGGER.error("failed saving clipboard", t);
        }
    }

    private void onLoadClipboard() {
        try {
            String contents = Minecraft.getInstance().keyboardHandler.getClipboard();
            sendProgram(contents);
        } catch (Throwable t) {
            SFM.LOGGER.error("failed loading clipboard", t);
        }
    }

    @Override
    public boolean keyPressed(int pKeyCode, int pScanCode, int pModifiers) {
        if (Screen.isPaste(pKeyCode) && clipboardPasteButton.visible) {
            onLoadClipboard();
            return true;
        } else if (Screen.isCopy(pKeyCode) && clipboardCopyButton.visible) {
            onSaveClipboard();
            return true;
        } else if (pKeyCode == GLFW.GLFW_KEY_E
                   && Screen.hasControlDown()
                   && Screen.hasShiftDown()
                   && examplesButton.visible) {
            onShowExamples();
            return true;
        } else if (pKeyCode == GLFW.GLFW_KEY_E && Screen.hasControlDown() && editButton.visible) {
            onEdit();
            return true;
        }
        return super.keyPressed(pKeyCode, pScanCode, pModifiers);
    }

    @Override
    protected void renderLabels(GuiGraphics graphics, int mx, int my) {
        // draw title
        super.renderLabels(graphics, mx, my);

        // draw state string
        var state = menu.state;
        graphics.drawString(
                this.font,
                MANAGER_GUI_STATE.getComponent(state.LOC.getComponent().withStyle(state.COLOR)).withStyle(),
                titleLabelX,
                20,
                0,
                false
        );

        // draw status string
        if (statusCountdown > 0) {
            graphics.drawString(
                    this.font,
                    status,
                    inventoryLabelX + font.width(playerInventoryTitle.getString()) + 5,
                    inventoryLabelY,
                    0,
                    false
            );
        }

        // Find the maximum tick time for normalization
        long peakTickTimeNanoseconds = 0;
        for (int i = 0; i < menu.tickTimeNanos.length; i++) {
            peakTickTimeNanoseconds = Long.max(peakTickTimeNanoseconds, menu.tickTimeNanos[i]);
        }
        long yMax = Long.max(peakTickTimeNanoseconds, 50000000); // Start with max at 50ms but allow it to grow

        // Constants for the plot size and position
        final int plotX = titleLabelX + 45;
        final int plotY = 40;
        final int spaceBetweenPoints = 6;
        final int plotWidth = spaceBetweenPoints * (menu.tickTimeNanos.length - 1);
        final int plotHeight = 30;


        // Set up rendering
        RenderSystem.enableBlend();
        RenderSystem.defaultBlendFunc();
        RenderSystem.setShader(GameRenderer::getPositionColorShader);
        Tesselator tesselator = Tesselator.getInstance();
        Matrix4f pose = graphics.pose().last().pose();
        BufferBuilder bufferbuilder;

        // Draw the plot background
        bufferbuilder = tesselator.getBuilder();
        bufferbuilder.begin(VertexFormat.Mode.DEBUG_LINE_STRIP, DefaultVertexFormat.POSITION_COLOR);
        bufferbuilder.vertex(pose, plotX, plotY, 0).color(0, 0, 0, 0.5f).endVertex();
        bufferbuilder.vertex(pose, plotX + plotWidth, plotY, 0).color(0, 0, 0, 0.5f).endVertex();
        bufferbuilder.vertex(pose, plotX + plotWidth, plotY + plotHeight, 0).color(0, 0, 0, 0.5f).endVertex();
        bufferbuilder.vertex(pose, plotX, plotY + plotHeight, 0).color(0, 0, 0, 0.5f).endVertex();
        bufferbuilder.vertex(pose, plotX, plotY, 0).color(0, 0, 0, 0.5f).endVertex();
        tesselator.end();

        // Draw lines for each data point
        bufferbuilder = tesselator.getBuilder();
        bufferbuilder.begin(VertexFormat.Mode.DEBUG_LINE_STRIP, DefaultVertexFormat.POSITION_COLOR);
        int mouseTickTimeIndex = -1;
        for (int i = 0; i < menu.tickTimeNanos.length; i++) {
            long y = menu.tickTimeNanos[i];
            float normalizedTickTime = y == 0 ? 0 : (float) (Math.log10(y) / Math.log10(yMax));
            int plotPosY = plotY + plotHeight - (int) (normalizedTickTime * plotHeight);

            int plotPosX = plotX + spaceBetweenPoints * i;

            // Color the lines based on their tick times (green to red)
            var c = getMillisecondColour(y / 1_000_000f);
            //noinspection DataFlowIssue
            float red = ((c.getColor() >> 16) & 0xFF) / 255f;
            float green = ((c.getColor() >> 8) & 0xFF) / 255f;
            float blue = (c.getColor() & 0xFF) / 255f;

            bufferbuilder
                    .vertex(pose, (float) plotPosX, (float) plotPosY, 0f)
                    .color(red, green, blue, 1f)
                    .endVertex();

            // Check if the mouse is hovering over this line
            if (mx - leftPos >= plotPosX - spaceBetweenPoints / 2
                && mx - leftPos <= plotPosX + spaceBetweenPoints / 2
                && my - topPos >= plotY - 2
                && my - topPos <= plotY + plotHeight + 2) {
                mouseTickTimeIndex = i;
            }
        }
        tesselator.end();

        // Draw the tick time text
        var format = new DecimalFormat("0.000");
        if (mouseTickTimeIndex != -1) { // We are hovering over the plot
            // Draw the tick time text for the hovered point instead of peak
            long hoveredTickTimeNanoseconds = menu.tickTimeNanos[mouseTickTimeIndex];
            var hoveredTickTimeMilliseconds = hoveredTickTimeNanoseconds / 1_000_000f;

            graphics.drawString(
                    this.font,
                    MANAGER_GUI_HOVERED_TICK_TIME.getComponent(Component
                                                                       .literal(format.format(
                                                                               hoveredTickTimeMilliseconds))
                                                                       .withStyle(getMillisecondColour(
                                                                               hoveredTickTimeMilliseconds))),
                    titleLabelX,
                    20 + font.lineHeight,
                    0,
                    false
            );

            // draw a vertical line
            RenderSystem.setShader(GameRenderer::getPositionColorShader);
            tesselator = Tesselator.getInstance();
            bufferbuilder = tesselator.getBuilder();
            bufferbuilder.begin(VertexFormat.Mode.DEBUG_LINE_STRIP, DefaultVertexFormat.POSITION_COLOR);
            pose = graphics.pose().last().pose();

            int x = plotX + spaceBetweenPoints * mouseTickTimeIndex;
            bufferbuilder
                    .vertex(pose, (float) x, (float) plotY, 0f)
                    .color(1f, 1f, 1f, 1f)
                    .endVertex();
            bufferbuilder
                    .vertex(pose, (float) x, (float) plotY + plotHeight, 0f)
                    .color(1f, 1f, 1f, 1f)
                    .endVertex();
            tesselator.end();
        } else {
            // Draw the tick time text for peak value
            var peakTickTimeMilliseconds = peakTickTimeNanoseconds / 1_000_000f;
            graphics.drawString(
                    this.font,
                    MANAGER_GUI_PEAK_TICK_TIME.getComponent(Component
                                                                    .literal(format.format(peakTickTimeMilliseconds))
                                                                    .withStyle(getMillisecondColour(
                                                                            peakTickTimeMilliseconds))),
                    titleLabelX,
                    20 + font.lineHeight,
                    0,
                    false
            );
        }

        // Restore stuff
        RenderSystem.disableBlend();
    }

    public ChatFormatting getMillisecondColour(float ms) {
        if (ms <= 5) {
            return ChatFormatting.GREEN;
        } else if (ms <= 15) {
            return ChatFormatting.YELLOW;
        } else {
            return ChatFormatting.RED;
        }
    }

    @Override
    public void render(GuiGraphics graphics, int mx, int my, float partialTicks) {
        this.renderTransparentBackground(graphics);
        super.render(graphics, mx, my, partialTicks);
        this.renderTooltip(graphics, mx, my);

        updateVisibilities();

        // update status countdown
        statusCountdown -= partialTicks;
    }

    @Override
    protected void renderBg(GuiGraphics graphics, float partialTicks, int mx, int my) {
        int i = (this.width - this.imageWidth) / 2;
        int j = (this.height - this.imageHeight) / 2;
        graphics.blit(BACKGROUND_TEXTURE_LOCATION, i, j, 0, 0, this.imageWidth, this.imageHeight);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\handler\FallingAnvilHandler.java

````java
package ca.teamdman.sfm.common.handler;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.item.FormItem;
import ca.teamdman.sfm.common.recipe.PrintingPressRecipe;
import ca.teamdman.sfm.common.registry.SFMItems;
import ca.teamdman.sfm.common.registry.SFMRecipeTypes;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.item.FallingBlockEntity;
import net.minecraft.world.entity.item.ItemEntity;
import net.minecraft.world.item.EnchantedBookItem;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.RecipeHolder;
import net.minecraft.world.item.enchantment.Enchantment;
import net.minecraft.world.item.enchantment.EnchantmentHelper;
import net.minecraft.world.item.enchantment.EnchantmentInstance;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.AnvilBlock;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.phys.AABB;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.event.entity.EntityLeaveLevelEvent;

import java.util.List;
import java.util.Map;

@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class FallingAnvilHandler {
    @SubscribeEvent
    public static void onLeave(EntityLeaveLevelEvent event) {
        if (event.getEntity() instanceof FallingBlockEntity fbe) {
            if (fbe.getBlockState().getBlock() instanceof AnvilBlock) {
                var landPosition = fbe.blockPosition();
                Level level = event.getLevel();
                Block block = level.getBlockState(landPosition.below()).getBlock();
                if (block == Blocks.IRON_BLOCK) { // create a form
                    var recipes = level
                            .getRecipeManager()
                            .getAllRecipesFor(SFMRecipeTypes.PRINTING_PRESS.get());
                    var items = level
                            .getEntitiesOfClass(ItemEntity.class, new AABB(landPosition))
                            .stream()
                            .filter(Entity::isAlive)
                            .filter(e -> !e.getItem().isEmpty())
                            .toList();
                    boolean didForm = false;

                    for (ItemEntity item : items) {
                        for (RecipeHolder<PrintingPressRecipe> recipe : recipes) {
                            // check if the item can be turned into a form
                            if (recipe.value().FORM.test(item.getItem())) {
                                didForm = true;
                                item.setItem(FormItem.getForm(item.getItem()));
                                break;
                            }
                        }
                    }
                    if (didForm) {
                        level.setBlockAndUpdate(landPosition.below(), Blocks.AIR.defaultBlockState());
                    }
                } else if (block == Blocks.OBSIDIAN) { // crush and disenchant items
                    List<ItemEntity> items = level
                            .getEntitiesOfClass(ItemEntity.class, new AABB(landPosition))
                            .stream()
                            .filter(Entity::isAlive)
                            .filter(e -> !e.getItem().isEmpty())
                            .toList();
                    { // crush enchanted books into xp shards
                        items
                                .stream()
                                .filter(e -> e.getItem().is(Items.ENCHANTED_BOOK))
                                .forEach(e -> e.setItem(new ItemStack(
                                        SFMItems.EXPERIENCE_SHARD_ITEM.get(),
                                        e.getItem().getCount()
                                )));
                    }
                    { // remove enchantments from items
                        List<ItemEntity> bookEntities = items.stream().filter(e -> e.getItem().is(Items.BOOK)).toList();
                        int booksAvailable = bookEntities.stream().mapToInt(e -> e.getItem().getCount()).sum();
                        List<ItemEntity> enchanted = items
                                .stream()
                                .filter(e -> !e.getItem().getEnchantmentTags().isEmpty())
                                .toList();


                        for (ItemEntity enchItemEntity : enchanted) {
                            ItemStack enchStack = enchItemEntity.getItem();
                            int enchStackSize = enchStack.getCount();
                            Map<Enchantment, Integer> enchantments = EnchantmentHelper.getEnchantments(enchStack);
                            var enchIter = enchantments.entrySet().iterator();
                            while (enchIter.hasNext()) {
                                var entry = enchIter.next();
                                if (booksAvailable < enchStackSize) break;

                                // Create an enchanted book with the enchantment
                                ItemStack toSpawn = new ItemStack(Items.ENCHANTED_BOOK, enchStackSize);
                                EnchantedBookItem.addEnchantment(
                                        toSpawn,
                                        new EnchantmentInstance(entry.getKey(), entry.getValue())
                                );
                                level.addFreshEntity(new ItemEntity(
                                        level,
                                        landPosition.getX(),
                                        landPosition.getY(),
                                        landPosition.getZ(),
                                        toSpawn
                                ));

                                // Remove the enchantment from the item
                                enchIter.remove();
                                EnchantmentHelper.setEnchantments(enchantments, enchStack);
                                booksAvailable -= enchStackSize;
                                if (enchantments.isEmpty()) {
                                    break;
                                }
                            }
                        }

                        for (ItemEntity bookEntity : bookEntities) {
                            bookEntity.kill();
                        }
                        while (booksAvailable > 0) {
                            int toSpawn = Math.min(booksAvailable, 64);
                            level.addFreshEntity(new ItemEntity(
                                    level,
                                    landPosition.getX(),
                                    landPosition.getY(),
                                    landPosition.getZ(),
                                    new ItemStack(Items.BOOK, toSpawn)
                            ));
                            booksAvailable -= toSpawn;
                        }
                    }
                }
            }
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\ProgramSyntaxHighlightingHelper.java

````java
package ca.teamdman.sfm.client;

import ca.teamdman.sfml.SFMLLexer;
import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.MutableComponent;
import net.minecraft.network.chat.Style;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Token;

import java.util.ArrayList;
import java.util.List;

public class ProgramSyntaxHighlightingHelper {

    public static List<MutableComponent> withSyntaxHighlighting(String programString, boolean showContextActionHints) {
        SFMLLexer lexer = new SFMLLexer(CharStreams.fromString(programString));
        lexer.INCLUDE_UNUSED = true;
        CommonTokenStream tokens = new CommonTokenStream(lexer) {
            // This is a hack to make hidden tokens show up in the token stream
            @Override
            public List<Token> getHiddenTokensToRight(int tokenIndex, int channel) {
                if (channel == Token.DEFAULT_CHANNEL) {
                    return getHiddenTokensToRight(tokenIndex, Token.HIDDEN_CHANNEL);
                } else {
                    return super.getHiddenTokensToRight(tokenIndex, channel);
                }
            }

            @Override
            public List<Token> getHiddenTokensToLeft(int tokenIndex, int channel) {
                if (channel == Token.DEFAULT_CHANNEL) {
                    return getHiddenTokensToLeft(tokenIndex, Token.HIDDEN_CHANNEL);
                } else {
                    return super.getHiddenTokensToLeft(tokenIndex, channel);
                }
            }
        };
        List<MutableComponent> textComponents = new ArrayList<>();
        MutableComponent lineComponent = Component.empty();
        tokens.fill();
        for (Token token : tokens.getTokens()) {
            if (token.getType() == SFMLLexer.EOF) break;
            // the token may contain newlines in it, so we need to split it up
            String[] lines = token.getText().split("\n", -1);
            for (int i = 0; i < lines.length; i++) {
                if (i != 0) {
                    textComponents.add(lineComponent);
                    lineComponent = Component.empty();
                }
                String line = lines[i];
                if (!line.isEmpty()) {
                    var text = Component.literal(line).withStyle(getStyle(token, showContextActionHints));
                    lineComponent = lineComponent.append(text);
                }
            }
        }
        textComponents.add(lineComponent);

        return textComponents;
    }

    private static Style getStyle(Token token, boolean showContextActionHints) {
        Style style = Style.EMPTY;
        style = style.withColor(getColour(token));
        if (showContextActionHints && ProgramTokenContextActions.hasContextAction(token)) {
            style = style.withUnderlined(true);
        }
        return style;
    }

    private static ChatFormatting getColour(Token token) {
        //noinspection EnhancedSwitchMigration
        switch (token.getType()) {
            case SFMLLexer.SIDE:
            case SFMLLexer.TOP:
            case SFMLLexer.BOTTOM:
            case SFMLLexer.NORTH:
            case SFMLLexer.SOUTH:
            case SFMLLexer.EAST:
            case SFMLLexer.WEST:
            case SFMLLexer.EACH:
                return ChatFormatting.DARK_PURPLE;
            case SFMLLexer.LINE_COMMENT:
                return ChatFormatting.GRAY;
            case SFMLLexer.INPUT:
            case SFMLLexer.FROM:
            case SFMLLexer.TO:
            case SFMLLexer.OUTPUT:
            case SFMLLexer.FORGET:
                return ChatFormatting.LIGHT_PURPLE;
            case SFMLLexer.NAME:
            case SFMLLexer.EVERY:
            case SFMLLexer.END:
            case SFMLLexer.DO:
            case SFMLLexer.IF:
            case SFMLLexer.ELSE:
            case SFMLLexer.THEN:
            case SFMLLexer.HAS:
            case SFMLLexer.TRUE:
            case SFMLLexer.FALSE:
            case SFMLLexer.NOT:
                return ChatFormatting.BLUE;
            case SFMLLexer.IDENTIFIER:
            case SFMLLexer.STRING:
                return ChatFormatting.GREEN;
            case SFMLLexer.TICKS:
            case SFMLLexer.SLOTS:
            case SFMLLexer.EXCEPT:
            case SFMLLexer.RETAIN:
            case SFMLLexer.LONE:
            case SFMLLexer.ONE:
            case SFMLLexer.OVERALL:
            case SFMLLexer.SOME:
            case SFMLLexer.AND:
                return ChatFormatting.GOLD;
            case SFMLLexer.NUMBER:
            case SFMLLexer.GT:
            case SFMLLexer.LT:
            case SFMLLexer.EQ:
            case SFMLLexer.GE:
            case SFMLLexer.LE:
            case SFMLLexer.GT_SYMBOL:
            case SFMLLexer.LT_SYMBOL:
            case SFMLLexer.EQ_SYMBOL:
            case SFMLLexer.GE_SYMBOL:
            case SFMLLexer.LE_SYMBOL:
                return ChatFormatting.AQUA;
            case SFMLLexer.UNUSED:
            case SFMLLexer.REDSTONE:
            case SFMLLexer.PULSE:
                return ChatFormatting.RED;
            case SFMLLexer.ROUND:
            case SFMLLexer.ROBIN:
            case SFMLLexer.BY:
            case SFMLLexer.BLOCK:
            case SFMLLexer.LABEL:
                return ChatFormatting.YELLOW;
            default:
                return ChatFormatting.WHITE;
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java

````java
package ca.teamdman.sfm.common.blockentity;

import ca.teamdman.sfm.common.recipe.NotContainer;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import ca.teamdman.sfm.common.registry.SFMItems;
import ca.teamdman.sfm.common.registry.SFMRecipeTypes;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.Connection;
import net.minecraft.network.protocol.Packet;
import net.minecraft.network.protocol.game.ClientGamePacketListener;
import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.crafting.RecipeManager;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.neoforged.neoforge.common.capabilities.Capabilities;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.util.LazyOptional;
import net.neoforged.neoforge.items.IItemHandler;
import net.neoforged.neoforge.items.ItemStackHandler;
import net.neoforged.neoforge.items.wrapper.CombinedInvWrapper;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * Accepts a paper item and a form item.
 * When a piston is pressed on top of this block, it will print the form onto the paper.
 */
public class PrintingPressBlockEntity extends BlockEntity implements NotContainer {

    private final ItemStackHandler FORM = new ItemStackHandler(1) {
        @Override
        protected void onContentsChanged(int slot) {
            setChanged();
            if (level != null)
                level.sendBlockUpdated(worldPosition, getBlockState(), getBlockState(), Block.UPDATE_ALL);
        }

        @Override
        public int getSlotLimit(int slot) {
            return 1;
        }

        @Override
        public boolean isItemValid(int slot, ItemStack stack) {
            return stack.getItem() == SFMItems.FORM_ITEM.get();
        }
    };

    private final ItemStackHandler INK = new ItemStackHandler(1) {
        @Override
        protected void onContentsChanged(int slot) {
            setChanged();
            if (level != null)
                level.sendBlockUpdated(worldPosition, getBlockState(), getBlockState(), Block.UPDATE_ALL);
        }

        @Override
        public boolean isItemValid(int slot, ItemStack stack) {
            if (getLevel() == null) return false;
            return getLevel().getRecipeManager()
                    .getAllRecipesFor(SFMRecipeTypes.PRINTING_PRESS.get()).stream().anyMatch(r -> r.value().INK.test(stack));
        }
    };

    private final ItemStackHandler PAPER = new ItemStackHandler(1) {
        @Override
        protected void onContentsChanged(int slot) {
            setChanged();
            if (level != null)
                level.sendBlockUpdated(worldPosition, getBlockState(), getBlockState(), Block.UPDATE_ALL);
        }

        @Override
        public int getSlotLimit(int slot) {
            return 1;
        }

        @Override
        public boolean isItemValid(int slot, ItemStack stack) {
            if (getLevel() == null) return false;
            return getLevel().getRecipeManager()
                    .getAllRecipesFor(SFMRecipeTypes.PRINTING_PRESS.get()).stream().anyMatch(r -> r.value().PAPER.test(stack));
        }
    };
    private final LazyOptional<IItemHandler> ITEMS_CAPABILITY = LazyOptional.of(() -> new CombinedInvWrapper(
            FORM,
            INK,
            PAPER
    ));

    public PrintingPressBlockEntity(
            BlockPos pPos, BlockState pBlockState
    ) {
        super(SFMBlockEntities.PRINTING_PRESS_BLOCK_ENTITY.get(), pPos, pBlockState);
    }

    @Override
    public void load(CompoundTag tag) {
        super.load(tag);
        readItems(tag);
    }


    @Override
    protected void saveAdditional(CompoundTag tag) {
        super.saveAdditional(tag);
        writeItems(tag);
    }

    private void writeItems(CompoundTag tag) {
        tag.put("form", FORM.serializeNBT());
        tag.put("paper", PAPER.serializeNBT());
        tag.put("ink", INK.serializeNBT());
    }

    private void readItems(CompoundTag tag) {
        INK.deserializeNBT(tag.getCompound("ink"));
        PAPER.deserializeNBT(tag.getCompound("paper"));
        FORM.deserializeNBT(tag.getCompound("form"));
    }

    @Override
    public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {
        if (cap == Capabilities.ITEM_HANDLER) {
            return ITEMS_CAPABILITY.cast();
        }
        return super.getCapability(cap, side);
    }

    public ItemStack acceptStack(ItemStack stack) {
        ItemStack remainder;
        if (!stack.isEmpty()) {
            remainder = FORM.insertItem(0, stack.copy(), false);
            if (remainder.getCount() < stack.getCount()) {
                stack.shrink(stack.getCount() - remainder.getCount());
                return stack;
            }
            remainder = INK.insertItem(0, stack.copy(), false);
            if (remainder.getCount() < stack.getCount()) {
                stack.shrink(stack.getCount() - remainder.getCount());
                return stack;
            }
            remainder = PAPER.insertItem(0, stack.copy(), false);
            if (remainder.getCount() < stack.getCount()) {
                stack.shrink(stack.getCount() - remainder.getCount());
                return stack;
            }
        } else {
            ItemStack found;
            found = PAPER.extractItem(0, 64, false);
            if (!found.isEmpty()) {
                return found;
            }
            found = FORM.extractItem(0, 64, false);
            if (!found.isEmpty()) {
                return found;
            }
            found = INK.extractItem(0, 64, false);
            if (!found.isEmpty()) {
                return found;
            }
        }
        return stack;
    }

    @Override
    public CompoundTag getUpdateTag() {
        var tag = super.getUpdateTag();
        writeItems(tag);
        return tag;
    }

    @Nullable
    @Override
    public Packet<ClientGamePacketListener> getUpdatePacket() {
        return ClientboundBlockEntityDataPacket.create(this);
    }

    @Override
    public void onDataPacket(Connection net, ClientboundBlockEntityDataPacket pkt) {
        super.onDataPacket(net, pkt);
        CompoundTag tag = pkt.getTag();
        if (tag != null)
            readItems(tag);
    }

    public ItemStack getPaper() {
        return PAPER.getStackInSlot(0);
    }

    public ItemStack getInk() {
        return INK.getStackInSlot(0);
    }

    public ItemStack getForm() {
        return FORM.getStackInSlot(0);
    }

    public void performPrint() {
        if (getLevel() == null) return;
        RecipeManager recipeManager = getLevel().getRecipeManager();
        recipeManager.getRecipeFor(SFMRecipeTypes.PRINTING_PRESS.get(), this, getLevel()).ifPresent(recipe -> {
            ItemStack paper = getPaper();
            ItemStack ink = getInk();
            ItemStack form = getForm();
            if (paper.isEmpty() || ink.isEmpty() || form.isEmpty()) {
                return;
            }
            paper = recipe.value().assemble(this, getLevel().registryAccess());
            PAPER.setStackInSlot(0, paper);
            ink.shrink(1);
            INK.setStackInSlot(0, ink);
        });
    }

    public ItemStack[] getStacksToDrop() {
        return new ItemStack[]{getPaper(), getInk(), getForm()};
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\SFM.java

````java
package ca.teamdman.sfm;

import ca.teamdman.sfm.client.registry.SFMMenuScreens;
import ca.teamdman.sfm.common.registry.*;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.event.lifecycle.FMLClientSetupEvent;
import net.neoforged.fml.event.lifecycle.FMLCommonSetupEvent;
import net.neoforged.fml.javafmlmod.FMLJavaModLoadingContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@Mod("sfm")
public class SFM {
    public static final String MOD_ID = "sfm";
    public static final Logger LOGGER = LogManager.getLogger(SFM.MOD_ID);

    public SFM() {
        var bus = FMLJavaModLoadingContext
                .get()
                .getModEventBus();
        SFMBlocks.register(bus);
        SFMItems.register(bus);
        SFMCreativeTabs.register(bus);
        SFMResourceTypes.register(bus);
        SFMBlockEntities.register(bus);
        SFMCapabilityProviderMappers.register(bus);
        SFMMenus.register(bus);
        SFMRecipeTypes.register(bus);
        SFMRecipeSerializers.register(bus);
        bus.addListener((FMLClientSetupEvent e) -> SFMMenuScreens.register());
        bus.addListener((FMLCommonSetupEvent e) -> SFMPackets.register());
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\NumberRange.java

````java
package ca.teamdman.sfml.ast;

public record NumberRange(
        long start,
        long end
) implements ASTNode {
    public static final NumberRange MAX_RANGE = new NumberRange(Long.MIN_VALUE, Long.MAX_VALUE);

    /**
     * Inclusive
     */
    public boolean contains(int value) {
        return value >= start && value <= end;
    }

    @Override
    public String toString() {
        if (start == end) return String.valueOf(start);
        return start + "-" + end;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\RedstoneTrigger.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.ProgramContext;

public record RedstoneTrigger(
        Block block
) implements Trigger {
    @Override
    public Block getBlock() {
        return block;
    }

    @Override
    public void tick(ProgramContext context) {
        for (int i = 0; i < context.getRedstonePulses(); i++) {
            block.tick(context);
        }
    }

    @Override
    public boolean shouldTick(ProgramContext context) {
        if (context.getExecutionPolicy() == ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES) return true;
        return context.getManager().getUnprocessedRedstonePulseCount() > 0;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\block\CableBlock.java

````java
package ca.teamdman.sfm.common.block;

import ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;
import ca.teamdman.sfm.common.cablenetwork.ICableBlock;
import net.minecraft.core.BlockPos;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;

public class CableBlock extends Block implements ICableBlock {

    public CableBlock() {
        super(Block.Properties.of()
                      .instrument(NoteBlockInstrument.BASS)
                      .destroyTime(1f)
                      .sound(SoundType.METAL));
    }

    @SuppressWarnings("deprecation")
    @Override
    public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean isMoving) {
        CableNetworkManager.getOrRegisterNetworkFromCablePosition(world, pos);
    }

    @SuppressWarnings("deprecation")
    @Override
    public void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean isMoving) {
        CableNetworkManager.removeCable(level, pos);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.item;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\package-info.java

````java


@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.registry;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\gui\screen\ProgramEditScreen.java

````java
package ca.teamdman.sfm.client.gui.screen;

import ca.teamdman.sfm.client.ProgramSyntaxHighlightingHelper;
import ca.teamdman.sfm.client.ProgramTokenContextActions;
import ca.teamdman.sfm.client.gui.EditorUtils;
import ca.teamdman.sfm.common.Constants;
import com.mojang.blaze3d.vertex.PoseStack;
import ca.teamdman.sfm.common.item.DiskItem;
import com.mojang.blaze3d.vertex.Tesselator;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Font;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.MultiLineEditBox;
import net.minecraft.client.gui.components.MultilineTextField;
import net.minecraft.client.gui.components.Tooltip;
import net.minecraft.client.gui.screens.ConfirmScreen;
import net.minecraft.client.gui.components.Whence;
import net.minecraft.client.gui.screens.Screen;
import net.minecraft.client.renderer.LightTexture;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.network.chat.CommonComponents;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.MutableComponent;
import net.minecraft.network.chat.Style;
import org.joml.Matrix4f;
import org.lwjgl.glfw.GLFW;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;

import static ca.teamdman.sfm.common.Constants.LocalizationKeys.PROGRAM_EDIT_SCREEN_DONE_BUTTON_TOOLTIP;

public class ProgramEditScreen extends Screen {
    private final String INITIAL_CONTENT;
    private final Consumer<String> CALLBACK;
    @SuppressWarnings("NotNullFieldNotInitialized")
    private MyMultiLineEditBox textarea;
    private String lastProgram = "";
    private List<MutableComponent> lastProgramWithSyntaxHighlighting = Collections.emptyList();

    public ProgramEditScreen(String initialContent, Consumer<String> callback) {
        super(Constants.LocalizationKeys.PROGRAM_EDIT_SCREEN_TITLE.getComponent());
        this.INITIAL_CONTENT = initialContent;
        this.CALLBACK = callback;
    }

    public static MutableComponent substring(MutableComponent component, int start, int end) {
        var rtn = Component.empty();
        AtomicInteger seen = new AtomicInteger(0);
        component.visit((style, content) -> {
            int contentStart = Math.max(start - seen.get(), 0);
            int contentEnd = Math.min(end - seen.get(), content.length());

            if (contentStart < contentEnd) {
                rtn.append(Component.literal(content.substring(contentStart, contentEnd)).withStyle(style));
            }
            seen.addAndGet(content.length());
            return Optional.empty();
        }, Style.EMPTY);
        return rtn;
    }

    public void scrollToTop() {
        this.textarea.scrollToTop();
    }

    @Override
    protected void init() {
        super.init();
        assert this.minecraft != null;
        this.textarea = this.addRenderableWidget(new MyMultiLineEditBox());
        textarea.setValue(INITIAL_CONTENT);
        this.setInitialFocus(textarea);

        this.addRenderableWidget(new ExtendedButtonWithTooltip(
                this.width / 2 - 2 - 150,
                this.height / 2 - 100 + 195,
                300,
                20,
                CommonComponents.GUI_DONE,
                (p_97691_) -> this.onClosePerformCallback(),
                Tooltip.create(PROGRAM_EDIT_SCREEN_DONE_BUTTON_TOOLTIP.getComponent())
        ));
    }

    public void onClosePerformCallback() {
        CALLBACK.accept(textarea.getValue());

        assert this.minecraft != null;
        this.minecraft.popGuiLayer();
    }

    @Override
    public void onClose() {
        if (!INITIAL_CONTENT.equals(textarea.getValue())) {
            // if content changed => ask to save
            assert this.minecraft != null;
            // push confirm screen
            this.minecraft.pushGuiLayer(new ConfirmScreen(
                    doSave -> {
                        this.minecraft.popGuiLayer();
                        if (doSave) {
                            onClosePerformCallback();
                        } else {
                            this.minecraft.popGuiLayer();
                        }
                    },
                    Constants.LocalizationKeys.SAVE_CHANGES_CONFIRM_SCREEN_TITLE.getComponent(),
                    Constants.LocalizationKeys.SAVE_CHANGES_CONFIRM_SCREEN_MESSAGE.getComponent(),
                    Constants.LocalizationKeys.SAVE_CHANGES_CONFIRM_SCREEN_YES_BUTTON.getComponent(),
                    Constants.LocalizationKeys.SAVE_CHANGES_CONFIRM_SCREEN_NO_BUTTON.getComponent()
            ));
        } else {
            super.onClose();
        }
    }

    @Override
    public boolean keyReleased(int pKeyCode, int pScanCode, int pModifiers) {
        if (pKeyCode == GLFW.GLFW_KEY_LEFT_CONTROL || pKeyCode == GLFW.GLFW_KEY_RIGHT_CONTROL) {
            // if control released => update syntax highlighting
            textarea.rebuild(Screen.hasControlDown());
            return true;
        }
        return false;
    }

    @Override
    public boolean charTyped(char pCodePoint, int pModifiers) {
        if (Screen.hasControlDown() && pCodePoint == ' ') {
            return true;
        }
        return super.charTyped(pCodePoint, pModifiers);
    }

    @Override
    public boolean keyPressed(int pKeyCode, int pScanCode, int pModifiers) {
        if ((pKeyCode == GLFW.GLFW_KEY_ENTER || pKeyCode == GLFW.GLFW_KEY_KP_ENTER) && Screen.hasShiftDown()) {
            onClosePerformCallback();
            return true;
        }
        if (pKeyCode == GLFW.GLFW_KEY_TAB) {
            // if tab pressed with no selection and not holding shift => insert 4 spaces
            // if tab pressed with no selection and holding shift => de-indent current line
            // if tab pressed with selection and not holding shift => de-indent lines containing selection 4 spaces
            // if tab pressed with selection and holding shift => indent lines containing selection 4 spaces
            String content = textarea.getValue();
            int cursor = textarea.getCursorPosition();
            int selectionCursor = textarea.getSelectionCursorPosition();
            EditorUtils.ManipulationResult result;
            if (Screen.hasShiftDown()) { // de-indent
                result = EditorUtils.deindent(content, cursor, selectionCursor);
            } else { // indent
                result = EditorUtils.indent(content, cursor, selectionCursor);
            }
            textarea.setValue(result.content());
            textarea.setCursorPosition(result.cursorPosition());
            textarea.setSelectionCursorPosition(result.selectionCursorPosition());
            return true;
        }
        if (pKeyCode == GLFW.GLFW_KEY_LEFT_CONTROL || pKeyCode == GLFW.GLFW_KEY_RIGHT_CONTROL) {
            // if control pressed => update syntax highlighting
            textarea.rebuild(Screen.hasControlDown());
            return true;
        }
        if (pKeyCode == GLFW.GLFW_KEY_SLASH && Screen.hasControlDown()) {
            // toggle line comments for selected lines
            String content = textarea.getValue();
            int cursor = textarea.getCursorPosition();
            int selectionCursor = textarea.getSelectionCursorPosition();
            EditorUtils.ManipulationResult result = EditorUtils.toggleComments(content, cursor, selectionCursor);
            textarea.setValue(result.content());
            textarea.setCursorPosition(result.cursorPosition());
            textarea.setSelectionCursorPosition(result.selectionCursorPosition());
            return true;
        }
        if (pKeyCode == GLFW.GLFW_KEY_SPACE && Screen.hasControlDown()) {
            ProgramTokenContextActions.getContextAction(
                            textarea.getValue(),
                            textarea.getCursorPosition()
                    )
                    .ifPresent(Runnable::run);

            // disable the underline since it doesn't refresh when the context action closes
            textarea.rebuild(false);
            return true;
        }
        return super.keyPressed(pKeyCode, pScanCode, pModifiers);
    }

    @Override
    public void resize(Minecraft mc, int x, int y) {
        var prev = this.textarea.getValue();
        init(mc, x, y);
        super.resize(mc, x, y);
        this.textarea.setValue(prev);
    }

    @Override
    public void render(GuiGraphics graphics, int mx, int my, float partialTicks) {
        this.renderTransparentBackground(graphics);
        super.render(graphics, mx, my, partialTicks);
    }

    private class MyMultiLineEditBox extends MultiLineEditBox {
        private int frame = 0;
        public MyMultiLineEditBox() {
            super(
                    ProgramEditScreen.this.font,
                    ProgramEditScreen.this.width / 2 - 200,
                    ProgramEditScreen.this.height / 2 - 110,
                    400,
                    200,
                    Component.literal(""),
                    Component.literal("")
            );
        }

        public void scrollToTop() {
            this.setScrollAmount(0);
        }

        public int getCursorPosition() {
            return this.textField.cursor;
        }

        public void setCursorPosition(int cursor) {
            this.textField.cursor = cursor;
        }

        @Override
        public boolean mouseClicked(double pMouseX, double pMouseY, int pButton) {
            // we need to override the default behaviour because Mojang broke it
            // if it's not scrolling, it should return false for cursor click movement
            boolean rtn;
            if (!this.visible) {
                rtn = false;
            } else {
                //noinspection unused
                boolean flag = this.withinContentAreaPoint(pMouseX, pMouseY);
                boolean flag1 = this.scrollbarVisible()
                                && pMouseX >= (double) (this.getX() + this.width)
                                && pMouseX <= (double) (this.getX() + this.width + 8)
                                && pMouseY >= (double) this.getY()
                                && pMouseY < (double) (this.getY() + this.height);
                if (flag1 && pButton == 0) {
                    this.scrolling = true;
                    rtn = true;
                } else {
                    //1.19.4 behaviour:
                    //rtn=flag || flag1;
                    // instead, we want to return false if we're not scrolling
                    // (like how it was in 1.19.2)
                    // https://bugs.mojang.com/browse/MC-262754
                    rtn = false;
                }
            }

            if (rtn) {
                return true;
            } else if (this.withinContentAreaPoint(pMouseX, pMouseY) && pButton == 0) {
                this.textField.setSelecting(Screen.hasShiftDown());
                this.seekCursorScreen(pMouseX, pMouseY);
                return true;
            } else {
                return false;
            }
        }

        public int getSelectionCursorPosition() {
            return this.textField.selectCursor;
        }

        public void setSelectionCursorPosition(int cursor) {
            this.textField.selectCursor = cursor;
        }

        private void rebuild(boolean showContextActionHints) {
            lastProgram = this.textField.value();
            lastProgramWithSyntaxHighlighting = ProgramSyntaxHighlightingHelper.withSyntaxHighlighting(
                    lastProgram,
                    showContextActionHints
            );
        }

        @Override
        protected void renderContents(GuiGraphics graphics, int mx, int my, float partialTicks) {
            Matrix4f matrix4f = graphics.pose().last().pose();
            if (!lastProgram.equals(this.textField.value())) {
                rebuild(Screen.hasControlDown());
            }
            List<MutableComponent> lines = lastProgramWithSyntaxHighlighting;
            boolean isCursorVisible = this.isFocused() && this.frame++ / 60 % 2 == 0;
            boolean isCursorAtEndOfLine = false;
            int cursorIndex = textField.cursor();
            int lineX = this.getX() + this.innerPadding();
            int lineY = this.getY() + this.innerPadding();
            int charCount = 0;
            int cursorX = 0;
            int cursorY = 0;
            MultilineTextField.StringView selectedRange = this.textField.getSelected();
            int selectionStart = selectedRange.beginIndex();
            int selectionEnd = selectedRange.endIndex();

            for (int line = 0; line < lines.size(); ++line) {
                var componentColoured = lines.get(line);
                int lineLength = componentColoured.getString().length();
                int lineHeight = this.font.lineHeight + (line == 0 ? 2 : 0);
                boolean cursorOnThisLine = isCursorVisible
                                           && cursorIndex >= charCount
                                           && cursorIndex <= charCount + lineLength;
                var buffer = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());

                if (cursorOnThisLine) {
                    isCursorAtEndOfLine = cursorIndex == charCount + lineLength;
                    cursorY = lineY;
                    // we draw the raw before coloured in case of token recognition errors
                    // draw before cursor
                    cursorX = this.font.drawInBatch(
                            substring(componentColoured, 0, cursorIndex - charCount),
                            lineX,
                            lineY,
                            -1,
                            true,
                            matrix4f,
                            buffer,
                            Font.DisplayMode.NORMAL,
                            0,
                            LightTexture.FULL_BRIGHT
                    ) - 1;
                    this.font.drawInBatch(
                            substring(componentColoured, cursorIndex - charCount, lineLength),
                            cursorX,
                            lineY,
                            -1,
                            true,
                            matrix4f,
                            buffer,
                            Font.DisplayMode.NORMAL,
                            0,
                            LightTexture.FULL_BRIGHT
                    );
                } else {
                    this.font.drawInBatch(
                            componentColoured,
                            lineX,
                            lineY,
                            -1,
                            true,
                            matrix4f,
                            buffer,
                            Font.DisplayMode.NORMAL,
                            0,
                            LightTexture.FULL_BRIGHT
                    );
                }
                buffer.endBatch();

                // Check if the selection is within the current line
                if (selectionStart <= charCount + lineLength && selectionEnd > charCount) {
                    int lineSelectionStart = Math.max(selectionStart - charCount, 0);
                    int lineSelectionEnd = Math.min(selectionEnd - charCount, lineLength);

                    int highlightStartX = this.font.width(substring(componentColoured, 0, lineSelectionStart));
                    int highlightEndX = this.font.width(substring(componentColoured, 0, lineSelectionEnd));

                    this.renderHighlight(
                            graphics,
                            lineX + highlightStartX,
                            lineY,
                            lineX + highlightEndX,
                            lineY + lineHeight
                    );
                }

                lineY += lineHeight;
                charCount += lineLength + 1;
            }

            if (isCursorAtEndOfLine) {
                graphics.drawString(this.font, "_", cursorX, cursorY, -1);
            } else {
                graphics.fill(cursorX, cursorY - 1, cursorX + 1, cursorY + 1 + 9, -1);
            }
        }
    }
}


````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\handler\ContainerScreenInspectorHandler.java

````java
package ca.teamdman.sfm.client.handler;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.client.ClientStuff;
import ca.teamdman.sfm.client.registry.SFMKeyMappings;
import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.net.ServerboundContainerExportsInspectionRequestPacket;
import ca.teamdman.sfm.common.registry.SFMPackets;
import com.mojang.blaze3d.platform.InputConstants;
import com.mojang.blaze3d.vertex.PoseStack;
import net.minecraft.ChatFormatting;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
import net.minecraft.network.chat.Component;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.client.event.ScreenEvent;
import net.neoforged.neoforge.client.gui.widget.ExtendedButton;

import javax.annotation.Nullable;

@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE, value = Dist.CLIENT)
public class ContainerScreenInspectorHandler {
    private static boolean visible = false;
    @Nullable
    private static AbstractContainerScreen<?> lastScreen = null;
    private static final ExtendedButton exportInspectorButton = new ExtendedButton(
            5,
            50,
            100,
            20,
            Constants.LocalizationKeys.CONTAINER_INSPECTOR_SHOW_EXPORTS_BUTTON.getComponent(),
            (button) -> {
                BlockEntity lookBlockEntity = ClientStuff.getLookBlockEntity();
                if (lastScreen != null && lookBlockEntity != null) {
                    SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundContainerExportsInspectionRequestPacket(
                            lastScreen.getMenu().containerId,
                            lookBlockEntity.getBlockPos()
                    ));
                }
            }
    );

    @SubscribeEvent
    public static void onMouseClick(ScreenEvent.KeyPressed.MouseButtonPressed.Pre event) {
        boolean shouldCapture = Minecraft.getInstance().screen instanceof AbstractContainerScreen<?>;
        if (shouldCapture && visible && exportInspectorButton.clicked(event.getMouseX(), event.getMouseY())) {
            exportInspectorButton.playDownSound(Minecraft.getInstance().getSoundManager());
            exportInspectorButton.onClick(event.getMouseX(), event.getMouseY());
            event.setCanceled(true);
        }
    }

    @SubscribeEvent
    public static void onGuiRender(ScreenEvent.Render.Post event) {
        if (!visible) return;
        if (event.getScreen() instanceof AbstractContainerScreen<?> acs) {
            lastScreen = acs;
            AbstractContainerMenu menu = acs.getMenu();
            int containerSlotCount = 0;
            int inventorySlotCount = 0;
            GuiGraphics graphics = event.getGuiGraphics();
            PoseStack poseStack = graphics.pose();
            poseStack.pushPose();
            poseStack.translate(0, 0, 350); // render text over the items but under the tooltips

            // draw the button
            exportInspectorButton.render(graphics, event.getMouseX(), event.getMouseY(), event.getPartialTick());


            // draw index on each slot
            for (var slot : menu.slots) {
                int colour;
                if (slot.container instanceof Inventory) {
                    //noinspection DataFlowIssue
                    colour = ChatFormatting.YELLOW.getColor();
                    inventorySlotCount++;
                } else {
                    colour = 0xFFF;
                    containerSlotCount++;
                }
                graphics.drawString(
                        Minecraft.getInstance().font,
                        Component.literal(Integer.toString(slot.getSlotIndex())),
                        acs.getGuiLeft() + slot.x,
                        acs.getGuiTop() + slot.y,
                        colour,
                        false
                );
            }

            // draw text for slot totals
            graphics.drawString(
                    Minecraft.getInstance().font,
                    Constants.LocalizationKeys.CONTAINER_INSPECTOR_CONTAINER_SLOT_COUNT.getComponent(Component
                                                                                                             .literal(
                                                                                                                     String.valueOf(
                                                                                                                             containerSlotCount))
                                                                                                             .withStyle(
                                                                                                                     ChatFormatting.BLUE)),
                    5,
                    5,
                    0xFFFFFF,
                    true
            );
            graphics.drawString(
                    Minecraft.getInstance().font,
                    Constants.LocalizationKeys.CONTAINER_INSPECTOR_INVENTORY_SLOT_COUNT.getComponent(Component
                                                                                                             .literal(
                                                                                                                     String.valueOf(
                                                                                                                             inventorySlotCount))
                                                                                                             .withStyle(
                                                                                                                     ChatFormatting.YELLOW)),
                    5,
                    25,
                    0xFFFFFF,
                    true
            );
            poseStack.popPose();
        }
    }

    @SubscribeEvent
    public static void onKeyDown(ScreenEvent.KeyPressed.Pre event) {
        var toggleKey = SFMKeyMappings.CONTAINER_INSPECTOR_KEY.get();
        var toggleKeyPressed = toggleKey.isActiveAndMatches(InputConstants.Type.KEYSYM.getOrCreate(event.getKeyCode()));
        if (toggleKeyPressed) {
            visible = !visible;
            event.setCanceled(true);
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\render\PrintingPressBlockEntityRenderer.java

````java
package ca.teamdman.sfm.client.render;

import ca.teamdman.sfm.common.blockentity.PrintingPressBlockEntity;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.math.Axis;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;
import net.minecraft.world.item.ItemDisplayContext;
import net.minecraft.world.item.ItemStack;

public class PrintingPressBlockEntityRenderer implements BlockEntityRenderer<PrintingPressBlockEntity> {
    public PrintingPressBlockEntityRenderer(BlockEntityRendererProvider.Context pContext) {

    }

    @Override
    public void render(
            PrintingPressBlockEntity blockEntity,
            float partialTick,
            PoseStack poseStack,
            MultiBufferSource buf,
            int packedLight,
            int packedOverlay
    ) {
        var paper = blockEntity.getPaper();
        var dye = blockEntity.getInk();
        var form = blockEntity.getForm();
        var depthAxis = Axis.XP;
        poseStack.pushPose();
        poseStack.translate(0.5, 1, 0.6);
        poseStack.mulPose(depthAxis.rotationDegrees(-90));

        for (var stack : new ItemStack[]{form, paper, dye}) {
            if (!stack.isEmpty()) {
                Minecraft
                        .getInstance()
                        .getItemRenderer()
                        .renderStatic(
                                stack,
                                ItemDisplayContext.GROUND,
                                packedLight,
                                packedOverlay,
                                poseStack,
                                buf,
                                blockEntity.getLevel(),
                                (int) blockEntity.getBlockPos().asLong()
                        );
                poseStack.translate(0.01, 0.01, 0.03);
            }
        }
        poseStack.popPose();

    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundContainerExportsInspectionRequestPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.compat.SFMCompat;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfm.common.registry.SFMResourceTypes;
import ca.teamdman.sfm.common.resourcetype.ResourceType;
import ca.teamdman.sfm.common.util.SFMUtils;
import ca.teamdman.sfml.ast.*;
import it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.neoforged.neoforge.network.NetworkEvent;
import net.neoforged.neoforge.network.PacketDistributor;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.List;
import java.util.function.Supplier;

public record ServerboundContainerExportsInspectionRequestPacket(
        int windowId,
        BlockPos pos
) {
    public static void encode(ServerboundContainerExportsInspectionRequestPacket msg, FriendlyByteBuf friendlyByteBuf) {
        friendlyByteBuf.writeVarInt(msg.windowId());
        friendlyByteBuf.writeBlockPos(msg.pos());
    }

    public static ServerboundContainerExportsInspectionRequestPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ServerboundContainerExportsInspectionRequestPacket(
                friendlyByteBuf.readVarInt(),
                friendlyByteBuf.readBlockPos()
        );
    }

    public static void handle(
            ServerboundContainerExportsInspectionRequestPacket msg,
            NetworkEvent.Context context
    ) {
        SFMPackets.handleServerboundContainerPacket(
                context,
                AbstractContainerMenu.class,
                BlockEntity.class,
                msg.pos,
                msg.windowId,
                (menu, blockEntity) -> {
                    assert blockEntity.getLevel() != null;
                    String payload = buildInspectionResults(blockEntity.getLevel(), blockEntity.getBlockPos());
                    var player = context.getSender();

                    SFMPackets.INSPECTION_CHANNEL.send(
                            PacketDistributor.PLAYER.with(() -> player),
                            new ClientboundContainerExportsInspectionResultsPacket(
                                    msg.windowId,
                                    SFMUtils.truncate(
                                            payload,
                                            ClientboundContainerExportsInspectionResultsPacket.MAX_RESULTS_LENGTH
                                    )
                            )
                    );
                }
        );
    }


    public static String buildInspectionResults(Level level, BlockPos pos) {
        StringBuilder sb = new StringBuilder();
        Direction[] dirs = Arrays.copyOf(Direction.values(), Direction.values().length + 1);
        dirs[dirs.length - 1] = null;
        for (Direction direction : dirs) {
            sb.append("-- ").append(direction).append("\n");
            int len = sb.length();
            //noinspection unchecked,rawtypes
            SFMResourceTypes.DEFERRED_TYPES
                    .entrySet()
                    .forEach(entry -> sb.append(buildInspectionResults(
                            (ResourceKey) entry.getKey(),
                            entry.getValue(),
                            level,
                            pos,
                            direction
                    )));
            if (sb.length() == len) {
                sb.append("No exports found");
            }
            sb.append("\n");
        }

        if (SFMCompat.isMekanismLoaded()) {
            BlockEntity be = level.getBlockEntity(pos);
            if (be != null) {
//                sb.append(ca.teamdman.sfm.common.compat.SFMMekanismCompat.gatherInspectionResults(be)).append("\n");
            }
        }

        return sb.toString();
    }

    public static <STACK, ITEM, CAP> String buildInspectionResults(
            ResourceKey<ResourceType<STACK, ITEM, CAP>> resourceTypeResourceKey,
            ResourceType<STACK, ITEM, CAP> resourceType,
            Level level,
            BlockPos pos,
            @Nullable
            Direction direction
    ) {
        StringBuilder sb = new StringBuilder();
        SFMUtils
                .discoverCapabilityProvider(level, pos)
                .ifPresent(prov -> prov.getCapability(resourceType.CAPABILITY_KIND, direction).ifPresent(cap -> {
                    int slots = resourceType.getSlots(cap);
                    Int2ObjectMap<STACK> slotContents = new Int2ObjectArrayMap<>(slots);
                    for (int slot = 0; slot < slots; slot++) {
                        STACK stack = resourceType.getStackInSlot(cap, slot);
                        if (!resourceType.isEmpty(stack)) {
                            slotContents.put(slot, stack);
                        }
                    }

                    if (!slotContents.isEmpty()) {
                        slotContents.forEach((slot, stack) -> {
                            InputStatement inputStatement = SFMUtils.getInputStatementForStack(
                                    resourceTypeResourceKey,
                                    resourceType,
                                    stack,
                                    "target",
                                    slot,
                                    false,
                                    direction
                            );
                            sb.append(inputStatement.toStringPretty()).append("\n");
                        });

                        List<ResourceLimit<STACK, ITEM, CAP>> resourceLimitList = new ArrayList<>();
                        slotContents.forEach((slot, stack) -> {
                            ResourceLocation stackId = resourceType.getRegistryKey(stack);
                            ResourceIdentifier<STACK, ITEM, CAP> resourceIdentifier = new ResourceIdentifier<>(
                                    resourceTypeResourceKey.location().getNamespace(),
                                    resourceTypeResourceKey.location().getPath(),
                                    stackId.getNamespace(),
                                    stackId.getPath()
                            );
                            ResourceLimit<STACK, ITEM, CAP> resourceLimit = new ResourceLimit<>(
                                    resourceIdentifier,
                                    Limit.MAX_QUANTITY_NO_RETENTION
                            );
                            resourceLimitList.add(resourceLimit);
                        });
                        InputStatement inputStatement = new InputStatement(
                                new LabelAccess(
                                        List.of(new Label("target")),
                                        new DirectionQualifier(direction == null
                                                               ? EnumSet.noneOf(Direction.class)
                                                               : EnumSet.of(direction)),
                                        NumberRangeSet.MAX_RANGE,
                                        RoundRobin.disabled()
                                ),
                                new ResourceLimits(
                                        resourceLimitList.stream().distinct().toList(),
                                        ResourceIdSet.EMPTY
                                ),
                                false
                        );
                        sb.append(inputStatement.toStringPretty());
                    }
                }));
        String result = sb.toString();
        if (!result.isBlank()) {
            BlockEntity be = level.getBlockEntity(pos);
            //noinspection DataFlowIssue
            if (be != null && direction == null && BuiltInRegistries.BLOCK_ENTITY_TYPE
                    .getKey(be.getType())
                    .getNamespace()
                    .equals("mekanism")) {
                return "-- "
                       + Constants.LocalizationKeys.CONTAINER_INSPECTOR_MEKANISM_NULL_DIRECTION_WARNING.getString()
                       + "\n"
                       + result;
            }
        }
        return result;
    }

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ResourceIdSet.java

````java
package ca.teamdman.sfml.ast;

import java.util.Set;
import java.util.function.Predicate;

public record ResourceIdSet(
        Set<ResourceIdentifier<?, ?, ?>> resourceIds
) implements ASTNode, Predicate<Object> {
    public static final ResourceIdSet EMPTY = new ResourceIdSet(Set.of());

    public boolean test(Object stack) {
        for (ResourceIdentifier<?, ?, ?> exclude : resourceIds) {
            if (exclude.test(stack)) {
                return true;
            }
        }
        return false;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ResourceLimits.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.InputResourceTracker;
import ca.teamdman.sfm.common.program.OutputResourceTracker;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public record ResourceLimits(
        List<? extends ResourceLimit<?, ?, ?>> resourceLimits,
        ResourceIdSet exclusions
) implements ASTNode {
    public List<InputResourceTracker<?, ?, ?>> createInputTrackers() {
        List<InputResourceTracker<?, ?, ?>> rtn = new ArrayList<>();
        resourceLimits.forEach(rl -> rl.gatherInputTrackers(rtn::add, exclusions));
        return rtn;
    }

    public List<OutputResourceTracker<?, ?, ?>> createOutputTrackers() {
        List<OutputResourceTracker<?, ?, ?>> rtn = new ArrayList<>();
        resourceLimits.forEach(rl -> rl.gatherOutputTrackers(rtn::add, exclusions));
        return rtn;
    }

    public ResourceLimits withDefaults(Limit limit) {
        return new ResourceLimits(resourceLimits.stream().map(il -> il.withDefaults(limit)).toList(), exclusions);
    }

    public ResourceLimits withExclusions(ResourceIdSet exclusions) {
        return new ResourceLimits(resourceLimits, exclusions);
    }

    @Override
    public String toString() {
        String rtn = this.resourceLimits.stream()
                .map(ResourceLimit::toString)
                .collect(Collectors.joining(",\n"));
        if (!exclusions.resourceIds().isEmpty()) {
            rtn += "\nEXCEPT\n" + exclusions.resourceIds().stream()
                    .map(ResourceIdentifier::toString)
                    .collect(Collectors.joining(",\n"));
        }
        return rtn;
    }

    public String toStringPretty(Limit defaults) {
        String rtn = resourceLimits.stream()
                .map(rl -> rl.toStringCondensed(defaults))
                .map(x -> resourceLimits.size() == 1 ? x : x + ",")
                .collect(Collectors.joining("\n"));
        if (!exclusions.resourceIds().isEmpty()) {
            rtn += "\nEXCEPT\n" + exclusions.resourceIds().stream()
                    .map(ResourceIdentifier::toStringCondensed)
                    .collect(Collectors.joining(",\n"));
        }
        return rtn;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\FormItem.java

````java
package ca.teamdman.sfm.common.item;

import ca.teamdman.sfm.client.render.FormItemExtensions;
import ca.teamdman.sfm.common.registry.SFMItems;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.level.Level;
import net.neoforged.neoforge.client.extensions.common.IClientItemExtensions;
import org.jetbrains.annotations.Nullable;

import java.util.List;
import java.util.function.Consumer;

public class FormItem extends Item {
    public FormItem() {
        super(new Item.Properties());
    }

    public static ItemStack getForm(ItemStack stack) {
        var formStack = new ItemStack(SFMItems.FORM_ITEM.get());
        formStack.getOrCreateTag().put("reference", stack.serializeNBT());
        return formStack;
    }

    public static ItemStack getReference(ItemStack stack) {
        return ItemStack.of(stack.getOrCreateTag().getCompound("reference"));
    }

    @Override
    public void initializeClient(Consumer<IClientItemExtensions> consumer) {
        consumer.accept(new FormItemExtensions());
    }

    @Override
    public void appendHoverText(
            ItemStack pStack,
            @Nullable Level pLevel,
            List<Component> pTooltipComponents,
            TooltipFlag pIsAdvanced
    ) {
        if (pStack.hasTag()) {
            var reference = getReference(pStack);
            if (!reference.isEmpty()) {
                pTooltipComponents.add(reference.getHoverName());
                reference.getItem().appendHoverText(reference, pLevel, pTooltipComponents, pIsAdvanced);
            }
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\util\SFMContainerUtil.java

````java
package ca.teamdman.sfm.common.util;

import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.block.entity.BlockEntity;

public class SFMContainerUtil {
    public static boolean stillValid(BlockEntity blockEntity, Player player) {
        var level = blockEntity.getLevel();
        if (level == null) return false;
        var pos   = blockEntity.getBlockPos();
        if (level.getBlockEntity(pos) != blockEntity) return false;
        double dist = player.distanceToSqr(
                (double) pos.getX() + 0.5D,
                (double) pos.getY() + 0.5D,
                (double) pos.getZ() + 0.5D
        );
        return dist <= 64.0D;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\gui\screen\LabelGunScreen.java

````java
package ca.teamdman.sfm.client.gui.screen;

import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.net.ServerboundLabelGunClearPacket;
import ca.teamdman.sfm.common.net.ServerboundLabelGunPrunePacket;
import ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import ca.teamdman.sfm.common.registry.SFMPackets;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.Button;
import net.minecraft.client.gui.components.EditBox;
import net.minecraft.client.gui.screens.Screen;
import net.minecraft.network.chat.CommonComponents;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.item.ItemStack;
import org.lwjgl.glfw.GLFW;

import java.util.Comparator;

public class LabelGunScreen extends Screen {
    private final InteractionHand HAND;
    private final LabelPositionHolder LABEL_HOLDER;
    @SuppressWarnings("NotNullFieldNotInitialized")
    private EditBox labelField;
    private boolean shouldRebuildWidgets = false;

    public LabelGunScreen(ItemStack labelGunStack, InteractionHand hand) {
        super(Constants.LocalizationKeys.LABEL_GUN_GUI_TITLE.getComponent());
        LABEL_HOLDER = LabelPositionHolder.from(labelGunStack);
        HAND = hand;
    }

    @Override
    protected void init() {
        super.init();
        assert this.minecraft != null;
        this.labelField = addRenderableWidget(new EditBox(
                this.font,
                this.width / 2 - 150,
                50,
                300,
                20,
                Constants.LocalizationKeys.LABEL_GUN_GUI_LABEL_PLACEHOLDER.getComponent()
        ));
        this.setInitialFocus(labelField);
        this.setFocused(labelField);

        this.addRenderableWidget(new Button.Builder(
                                         Constants.LocalizationKeys.LABEL_GUN_GUI_CLEAR_BUTTON.getComponent(),
                                         __ -> {
                                             SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunClearPacket(HAND));
                                             LABEL_HOLDER.clear();
                                             shouldRebuildWidgets = true;
                                         }
                                 )
                                         .pos(this.width / 2 - 210, 50)
                                         .size(50, 20).build()
        );
        this.addRenderableWidget(new Button.Builder(
                Constants.LocalizationKeys.LABEL_GUN_GUI_PRUNE_BUTTON.getComponent(),
                (btn) -> {
                    SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunPrunePacket(HAND));
                    LABEL_HOLDER.prune();
                    shouldRebuildWidgets = true;
                }
        )
                                         .pos(this.width / 2 + 160, 50)
                                         .size(50, 20).build());
        this.addRenderableWidget(new Button.Builder(CommonComponents.GUI_DONE, __ -> this.onDone())
                                         .pos(this.width / 2 - 2 - 150, this.height - 50)
                                         .size(300, 20)
                                         .build());
        {
            var labels = LABEL_HOLDER.get().keySet().stream().sorted(Comparator.naturalOrder()).toList();
            int i = 0;
            int buttonWidth = LABEL_HOLDER.get()
                                      .entrySet()
                                      .stream()
                                      .map(entry -> Constants.LocalizationKeys.LABEL_GUN_GUI_LABEL_BUTTON.getComponent(
                                              entry.getKey(),
                                              entry.getValue().size()
                                      ).getString())
                                      .mapToInt(this.font::width)
                                      .max().orElse(50) + 10;
            int buttonHeight = 20;
            int paddingX = 5;
            int paddingY = 5;
            int buttonsPerRow = this.width / (buttonWidth + paddingX);
            for (var label : labels) {
                int x = (this.width - (buttonWidth + paddingX) * Math.min(buttonsPerRow, labels.size())) / 2
                        + paddingX
                        + (i % buttonsPerRow) * (
                        buttonWidth
                        + paddingX
                );
                int y = 80 + (i / buttonsPerRow) * (buttonHeight + paddingY);
                int count = LABEL_HOLDER.getPositions(label).size();
                this.addRenderableWidget(new Button.Builder(
                                                 Constants.LocalizationKeys.LABEL_GUN_GUI_LABEL_BUTTON.getComponent(label, count),
                                                 (btn) -> {
                                                     this.labelField.setValue(label);
                                                     this.onDone();
                                                 }
                                         )
                                                 .pos(x, y)
                                                 .size(buttonWidth, buttonHeight).build()
                );
                i++;
            }
        }
    }

    @Override
    public boolean keyPressed(int key, int mod1, int mod2) {
        if (super.keyPressed(key, mod1, mod2)) return true;
        if (key != GLFW.GLFW_KEY_ENTER && key != GLFW.GLFW_KEY_KP_ENTER) return false;
        onDone();
        return true;
    }

    public void onDone() {
        SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunUpdatePacket(
                labelField.getValue(),
                HAND
        ));
        onClose();
    }

    @Override
    public void resize(Minecraft mc, int x, int y) {
        var prev = this.labelField.getValue();
        init(mc, x, y);
        super.resize(mc, x, y);
        this.labelField.setValue(prev);
    }

    @Override
    public void render(GuiGraphics graphics, int mx, int my, float partialTicks) {
        if (shouldRebuildWidgets) {
            // we delay this because focus gets reset _after_ the button event handler
            // we want to end with the label input field focused
            shouldRebuildWidgets = false;
            rebuildWidgets();
        }
        this.renderTransparentBackground(graphics);
        super.render(graphics, mx, my, partialTicks);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\OutputResourceTracker.java

````java
package ca.teamdman.sfm.common.program;

import ca.teamdman.sfm.common.resourcetype.ResourceType;
import ca.teamdman.sfml.ast.ResourceIdSet;
import ca.teamdman.sfml.ast.ResourceLimit;

import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Predicate;

public class OutputResourceTracker<STACK, ITEM, CAP> implements Predicate<Object> {
    private final ResourceLimit<STACK, ITEM, CAP> LIMIT;
    private final ResourceIdSet EXCLUSIONS;
    private final AtomicLong TRANSFERRED;
    private final AtomicLong RETENTION_OBLIGATION_PROGRESS;

    public OutputResourceTracker(
            ResourceLimit<STACK, ITEM, CAP> resourceLimit,
            ResourceIdSet exclusions,
            AtomicLong transferred,
            AtomicLong retentionObligationProgress
    ) {
        this.LIMIT = resourceLimit;
        this.EXCLUSIONS = exclusions;
        this.TRANSFERRED = transferred;
        this.RETENTION_OBLIGATION_PROGRESS = retentionObligationProgress;
    }

    /**
     * Done when we have reached the transfer limit, or when the retention is satisfied
     */
    public boolean isDone() {
        return TRANSFERRED.get() >= LIMIT.limit().quantity().number().value()
               || RETENTION_OBLIGATION_PROGRESS.get() >= LIMIT.limit().retention().number().value();
    }

    /**
     * Update obligation progress as new limited slots are prepared
     */
    public void visit(LimitedOutputSlot<STACK, ITEM, CAP> slot) {
        var stack = slot.getStackInSlot();
        if (test(stack)) {
            RETENTION_OBLIGATION_PROGRESS.accumulateAndGet(slot.type.getAmount(stack), Long::sum);
        }
    }

    public void trackTransfer(long amount) {
        TRANSFERRED.accumulateAndGet(amount, Long::sum);
        RETENTION_OBLIGATION_PROGRESS.accumulateAndGet(amount, Long::sum);
    }

    /**
     * How much more are we allowed to move
     */
    public long getMaxTransferable() {
        long remainingRetentionRoom = LIMIT.limit().retention().number().value() - RETENTION_OBLIGATION_PROGRESS.get();
        long unusedQuantity = LIMIT.limit().quantity().number().value() - TRANSFERRED.get();
        return Math.min(unusedQuantity, remainingRetentionRoom);
    }

    public boolean matchesCapabilityType(Object capability) {
        ResourceType<STACK, ITEM, CAP> resourceType = LIMIT.resourceId().getResourceType();
        return resourceType != null && resourceType.matchesCapabilityType(capability);
    }

    @Override
    public boolean test(Object stack) {
        return LIMIT.test(stack) && !EXCLUSIONS.test(stack);
    }

    public ResourceLimit<STACK, ITEM, CAP> getLimit() {
        return LIMIT;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMRecipeSerializers.java

````java
package ca.teamdman.sfm.common.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.recipe.DiskResetRecipe;
import ca.teamdman.sfm.common.recipe.PrintingPressRecipe;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.item.crafting.RecipeSerializer;
import net.minecraft.world.item.crafting.SimpleCraftingRecipeSerializer;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.function.Supplier;

public class SFMRecipeSerializers {
    private static final DeferredRegister<RecipeSerializer<?>> RECIPE_SERIALIZERS = DeferredRegister.create(
            BuiltInRegistries.RECIPE_SERIALIZER,
            SFM.MOD_ID
    );

    public static final Supplier<RecipeSerializer<PrintingPressRecipe>> PRINTING_PRESS = RECIPE_SERIALIZERS.register(
            "printing_press",
            PrintingPressRecipe.Serializer::new
    );

    public static final Supplier<SimpleCraftingRecipeSerializer<DiskResetRecipe>> DISK_RESET = RECIPE_SERIALIZERS.register(
            "disk_reset",
            () -> new SimpleCraftingRecipeSerializer<>(DiskResetRecipe::new)
    );

    public static void register(IEventBus bus) {
        RECIPE_SERIALIZERS.register(bus);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundLabelGunPrunePacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.item.LabelGunItem;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.world.InteractionHand;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ServerboundLabelGunPrunePacket(
        InteractionHand hand
) {
    public static void encode(ServerboundLabelGunPrunePacket msg, FriendlyByteBuf buf) {
        buf.writeEnum(msg.hand);
    }

    public static ServerboundLabelGunPrunePacket decode(
            FriendlyByteBuf buf
    ) {
        return new ServerboundLabelGunPrunePacket(buf.readEnum(InteractionHand.class));
    }

    public static void handle(
            ServerboundLabelGunPrunePacket msg, NetworkEvent.Context ctx
    ) {
        ctx.enqueueWork(() -> {
            var sender = ctx.getSender();
            if (sender == null) {
                return;
            }
            var stack = sender.getItemInHand(msg.hand);
            if (stack.getItem() instanceof LabelGunItem) {
                LabelPositionHolder.from(stack).prune().save(stack);
            }
        });
        ctx.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ForgetStatement.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.common.program.ProgramContext;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public record ForgetStatement(
        List<Label> labels
) implements Statement {
    @Override
    public void tick(ProgramContext context) {
        // map-replace existing inputs with ones that exclude the union of the label access
        var newInputs = context.getInputs()
                .stream()
                .map(input -> new InputStatement(
                        new LabelAccess(
                                input.labelAccess().labels().stream()
                                        .filter(label -> !this.labels.contains(label))
                                        .collect(Collectors.toList()),
                                input.labelAccess().directions(),
                                input.labelAccess().slots(),
                                input.labelAccess().roundRobin()
                        ),
                        input.resourceLimits(),
                        input.each()
                ))
                .filter(input -> !input.labelAccess().labels().isEmpty())
                .toList();
        context.getInputs().clear();
        context.getInputs().addAll(newInputs);
    }

    @Override
    public String toString() {
        return "FORGET " + labels.stream().map(Objects::toString).collect(Collectors.joining(", "));
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ComparisonOperator.java

````java
package ca.teamdman.sfml.ast;

import java.util.Locale;
import java.util.function.BiPredicate;

public enum ComparisonOperator implements ASTNode, BiPredicate<Long, Long> {
    GREATER((a, b) -> a > b),
    LESSER((a, b) -> a < b),
    EQUALS(Long::equals),
    LESSER_OR_EQUAL((a, b) -> a <= b),
    GREATER_OR_EQUAL((a, b) -> a >= b);

    private final BiPredicate<Long, Long> PRED;

    ComparisonOperator(BiPredicate<Long, Long> pred) {
        this.PRED = pred;
    }

    public static ComparisonOperator from(String text) {
        return switch (text.toUpperCase(Locale.ROOT)) {
            case "GT", ">" -> GREATER;
            case "LT", "<" -> LESSER;
            case "EQ", "=" -> EQUALS;
            case "LE", "<=" -> LESSER_OR_EQUAL;
            case "GE", ">=" -> GREATER_OR_EQUAL;
            default -> throw new IllegalArgumentException("Invalid comparison operator: " + text);
        };
    }

    public String getSourceCode() {
        return switch (this) {
            case GREATER -> ">";
            case LESSER -> "<";
            case EQUALS -> "=";
            case LESSER_OR_EQUAL -> "<=";
            case GREATER_OR_EQUAL -> ">=";
        };
    }

    @Override
    public boolean test(Long a, Long b) {
        return PRED.test(a, b);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\util\OpenContainerTracker.java

````java
package ca.teamdman.sfm.common.util;

import ca.teamdman.sfm.SFM;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.event.entity.player.PlayerContainerEvent;

import java.util.Map;
import java.util.WeakHashMap;
import java.util.stream.Stream;

@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.FORGE, modid = SFM.MOD_ID)
public class OpenContainerTracker {
    private static final Map<ServerPlayer, AbstractContainerMenu> OPEN_CONTAINERS = new WeakHashMap<>();

    @SuppressWarnings("unchecked")
    public static <T extends AbstractContainerMenu> Stream<Map.Entry<ServerPlayer, T>> getPlayersWithOpenContainer(Class<T> menuClass) {
        return OPEN_CONTAINERS.entrySet().stream()
                .filter(e -> menuClass.isInstance(e.getValue()))
                .map(e -> (Map.Entry<ServerPlayer, T>) e);
    }

    @SubscribeEvent
    public static void onOpenContainer(PlayerContainerEvent.Open event) {
        if (event.getEntity() instanceof ServerPlayer serverPlayer) {
            OPEN_CONTAINERS.put(serverPlayer, event.getContainer());
        }
    }

    @SubscribeEvent
    public static void onCloseContainer(PlayerContainerEvent.Close event) {
        if (event.getEntity() instanceof ServerPlayer serverPlayer) {
            OPEN_CONTAINERS.remove(serverPlayer);
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java

````java
package ca.teamdman.sfm.common.cablenetwork;

import ca.teamdman.sfm.common.util.SFMUtils;
import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.world.level.Level;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.util.LazyOptional;

import javax.annotation.Nullable;
import java.util.stream.Stream;

public class CapabilityCache {
    private final Long2ObjectMap<Object2ObjectOpenHashMap<Capability<?>, Object2ObjectOpenHashMap<Direction, LazyOptional<?>>>> CACHE = new Long2ObjectOpenHashMap<>();

    public void clear() {
        CACHE.clear();
    }

    public int size() {
        return CACHE.values().stream().flatMap(x -> x.values().stream()).mapToInt(Object2ObjectOpenHashMap::size).sum();
    }

    public void overwriteFromOther(BlockPos pos, CapabilityCache other) {
        var found = other.CACHE.get(pos.asLong());
        if (found != null) {
            CACHE.put(pos.asLong(), new Object2ObjectOpenHashMap<>(found));
        }
    }

    public <CAP> @Nullable LazyOptional<CAP> getCapability(
            BlockPos pos,
            Capability<CAP> capKind,
            @Nullable Direction direction
    ) {
        if (CACHE.containsKey(pos.asLong())) {
            var capMap = CACHE.get(pos.asLong());
            if (capMap.containsKey(capKind)) {
                var dirMap = capMap.get(capKind);
                if (dirMap.containsKey(direction)) {
                    var found = dirMap.get(direction);
                    if (found == null) {
                        return null;
                    } else {
                        //noinspection unchecked
                        return (LazyOptional<CAP>) found;
                    }
                }

            }
        }
        return null;
    }

    @SuppressWarnings({"CodeBlock2Expr", "rawtypes", "unchecked"})
    public void putAll(CapabilityCache other) {
        other.CACHE.forEach((pos, capMap) -> {
            capMap.forEach((capKind, dirMap) -> {
                dirMap.forEach((direction, cap) -> {
                    putCapability(BlockPos.of(pos), (Capability) capKind, direction, cap);
                });
            });
        });
    }

    public Stream<BlockPos> getPositions() {
        return CACHE.keySet().longStream().mapToObj(BlockPos::of);
    }

    public <CAP> LazyOptional<CAP> getOrDiscoverCapability(
            Level level,
            BlockPos pos,
            Capability<CAP> capKind,
            @Nullable Direction direction
    ) {
        // Check cache
        var found = getCapability(pos, capKind, direction);
        if (found != null) {
            return found;
        }

        // No capability found, discover it
        var provider = SFMUtils.discoverCapabilityProvider(level, pos);
        if (provider.isPresent()) {
            var lazyOptional = provider.get().getCapability(capKind, direction);
            putCapability(pos, capKind, direction, lazyOptional);
            lazyOptional.addListener(x -> remove(pos, capKind, direction));
            return lazyOptional;
        }

        // Fallback to empty
        return LazyOptional.empty();
    }

    public void remove(
            BlockPos pos,
            Capability<?> capKind,
            @Nullable Direction direction
    ) {
        if (CACHE.containsKey(pos.asLong())) {
            var capMap = CACHE.get(pos.asLong());
            if (capMap.containsKey(capKind)) {
                var dirMap = capMap.get(capKind);
                dirMap.remove(direction);
                if (dirMap.isEmpty()) {
                    capMap.remove(capKind);
                    if (capMap.isEmpty()) {
                        CACHE.remove(pos.asLong());
                    }
                }
            }
        }
    }

    public <CAP> void putCapability(
            BlockPos pos,
            Capability<CAP> capKind,
            @Nullable Direction direction,
            LazyOptional<CAP> cap
    ) {
        var capMap = CACHE.computeIfAbsent(pos.asLong(), k -> new Object2ObjectOpenHashMap<>());
        var dirMap = capMap.computeIfAbsent(capKind, k -> new Object2ObjectOpenHashMap<>());
        dirMap.put(direction, cap);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\jei\FallingAnvilDisenchantRecipe.java

````java
package ca.teamdman.sfm.client.jei;

public class FallingAnvilDisenchantRecipe extends FallingAnvilRecipe {

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\Program.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;
import ca.teamdman.sfm.common.item.DiskItem;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import ca.teamdman.sfm.common.program.ProgramContext;
import ca.teamdman.sfm.common.resourcetype.ResourceType;
import ca.teamdman.sfm.common.util.SFMUtils;
import ca.teamdman.sfml.SFMLLexer;
import ca.teamdman.sfml.SFMLParser;
import net.minecraft.ResourceLocationException;
import net.minecraft.network.chat.contents.TranslatableContents;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.ItemStack;
import net.neoforged.fml.loading.FMLEnvironment;
import org.antlr.v4.runtime.*;

import javax.annotation.Nullable;
import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

public record Program(
        String name,
        List<Trigger> triggers,
        Set<String> referencedLabels,
        Set<ResourceIdentifier<?, ?, ?>> referencedResources
) implements Statement {
    public static final int MAX_PROGRAM_LENGTH = 80960;
    public static final int MAX_LABEL_LENGTH = 256;

    public static void compile(
            String programString,
            BiConsumer<Program, ASTBuilder> onSuccess,
            Consumer<List<TranslatableContents>> onFailure
    ) {
        SFMLLexer lexer = new SFMLLexer(CharStreams.fromString(programString));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        SFMLParser parser = new SFMLParser(tokens);
        ASTBuilder builder = new ASTBuilder();

        // set up error capturing
        lexer.removeErrorListeners();
        parser.removeErrorListeners();
        List<TranslatableContents> errors = new ArrayList<>();
        List<String> buildErrors = new ArrayList<>();
        ListErrorListener listener = new ListErrorListener(buildErrors);
        lexer.addErrorListener(listener);
        parser.addErrorListener(listener);

        // initial parse
        SFMLParser.ProgramContext context = parser.program();
        buildErrors.stream().map(Constants.LocalizationKeys.PROGRAM_ERROR_LITERAL::get).forEach(errors::add);

        // build AST
        Program program = null;
        try {
            program = builder.visitProgram(context);
            // make sure all referenced resources exist now during compilation instead of waiting for the program to tick

            for (ResourceIdentifier<?, ?, ?> referencedResource : program.referencedResources) {
                try {
                    ResourceType<?, ?, ?> resourceType = referencedResource.getResourceType();
                    if (resourceType == null) {
                        errors.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNKNOWN_RESOURCE_TYPE.get(
                                referencedResource));
                    }
                } catch (ResourceLocationException e) {
                    errors.add(Constants.LocalizationKeys.PROGRAM_ERROR_MALFORMED_RESOURCE_TYPE.get(referencedResource));
                }
            }
        } catch (ResourceLocationException | IllegalArgumentException | AssertionError e) {
            errors.add(Constants.LocalizationKeys.PROGRAM_ERROR_LITERAL.get(e.getMessage()));
        } catch (Throwable t) {
            errors.add(Constants.LocalizationKeys.PROGRAM_ERROR_COMPILE_FAILED.get());
            SFM.LOGGER.error("Encountered unhandled error while compiling program", t);
            if (!FMLEnvironment.production) {
                var message = t.getMessage();
                if (message != null) {
                    errors.add(SFMUtils.getTranslatableContents(t.getClass().getSimpleName() + ": " + message));
                } else {
                    errors.add(SFMUtils.getTranslatableContents(t.getClass().getSimpleName()));
                }
            }
        }


        if (errors.isEmpty()) {
            onSuccess.accept(program, builder);
        } else {
            onFailure.accept(errors);
        }
    }

    public ArrayList<TranslatableContents> gatherWarnings(ItemStack disk, @Nullable ManagerBlockEntity manager) {
        var warnings = new ArrayList<TranslatableContents>();
        var labels = LabelPositionHolder.from(disk);
        // labels in code but not in world
        for (String label : referencedLabels) {
            var isUsed = !labels.getPositions(label).isEmpty();
            if (!isUsed) {
                warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNUSED_LABEL.get(label));
            }
        }

        // labels used in world but not defined in code
        labels.get().keySet()
                .stream()
                .filter(x -> !referencedLabels.contains(x))
                .forEach(label -> warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNDEFINED_LABEL.get(label)));

        var level = manager != null ? manager.getLevel() : null;
        if (level != null) {
            // labels in world but not connected via cables
            CableNetworkManager
                    .getOrRegisterNetworkFromManagerPosition(manager)
                    .ifPresent(network -> labels.forEach((label, pos) -> {
                        var adjacent = network.isAdjacentToCable(pos);
                        if (!adjacent) {
                            warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_DISCONNECTED_LABEL.get(
                                    label,
                                    String.format(
                                            "[%d,%d,%d]",
                                            pos.getX(),
                                            pos.getY(),
                                            pos.getZ()
                                    )
                            ));
                        }
                        var viable = SFMUtils.discoverCapabilityProvider(level, pos).isPresent();
                        if (!viable && adjacent) {
                                warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_CONNECTED_BUT_NOT_VIABLE_LABEL.get(
                                        label,
                                        String.format(
                                                "[%d,%d,%d]",
                                                pos.getX(),
                                                pos.getY(),
                                                pos.getZ()
                                        )
                                ));
                        }
                    }));
        }

        // try and validate that references resources exist
        for (var resource : referencedResources) {
            // skip regex resources
            Optional<ResourceLocation> loc = resource.getLocation();
            if (loc.isEmpty()) continue;

            // make sure resource type is registered
            var type = resource.getResourceType();
            if (type == null) {
                warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNKNOWN_RESOURCE_TYPE.get(
                        resource.resourceTypeNamespace
                        + ":"
                        + resource.resourceTypeName,
                        resource
                ));
                continue;
            }

            // make sure resource exists in the registry
            if (!type.registryKeyExists(loc.get())) {
                warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNKNOWN_RESOURCE_ID.get(resource));
            }
        }
        return warnings;
    }

    public void fixWarnings(ItemStack disk, ManagerBlockEntity manager) {
        var labels = LabelPositionHolder.from(disk);
        // remove labels not defined in code
        labels.removeIf(label -> !referencedLabels.contains(label));

        // remove labels not connected via cables
        CableNetworkManager
                .getOrRegisterNetworkFromManagerPosition(manager)
                .ifPresent(network -> labels.removeIf((label, pos) -> !network.isAdjacentToCable(pos)));
        labels.save(disk);

        // update warnings
        DiskItem.setWarnings(disk, gatherWarnings(disk, manager));
    }

    public boolean tick(ManagerBlockEntity manager) {
        // update warnings on disk item every 20 seconds
        if (manager.getTick() % 20 == 0) {
            manager.getDisk().ifPresent(disk -> DiskItem.setWarnings(disk, gatherWarnings(disk, manager)));
        }

        // build the context and tick the program
        var context = new ProgramContext(this, manager, ProgramContext.ExecutionPolicy.UNRESTRICTED);
        tick(context);

        manager.clearRedstonePulseQueue();
        //noinspection UnnecessaryLocalVariable
        boolean didSomething = triggers.stream().anyMatch(t -> t.shouldTick(context));
        return didSomething;
    }

    @Override
    public List<Statement> getStatements() {
        return triggers.stream().map(x -> (Statement) x).toList();
    }

    @Override
    public void tick(ProgramContext context) {
        for (Trigger t : triggers) {
            if (t.shouldTick(context)) {
                t.tick(context.copy());
            }
        }
    }

    @Override
    public String toString() {
        var rtn = new StringBuilder();
        rtn.append("NAME \"").append(name).append("\"\n");
        for (Trigger trigger : triggers) {
            rtn.append(trigger).append("\n");
        }
        return rtn.toString();
    }

    public void replaceOutputStatement(OutputStatement oldStatement, OutputStatement newStatement) {
        Deque<Statement> toPatch = new ArrayDeque<>();
        toPatch.add(this);
        while (!toPatch.isEmpty()) {
            Statement statement = toPatch.pollFirst();
            List<Statement> children = statement.getStatements();
            for (int i = 0; i < children.size(); i++) {
                Statement child = children.get(i);
                if (child == oldStatement) {
                    children.set(i, newStatement);
                } else {
                    toPatch.add(child);
                }
            }
        }
    }

    public int getConditionIndex(IfStatement statement) {
        Deque<Statement> toVisit = new ArrayDeque<>();
        toVisit.add(this);
        int seen = 0;
        while (!toVisit.isEmpty()) {
            Statement current = toVisit.pollFirst();
            if (current instanceof IfStatement ifStatement) {
                if (ifStatement == statement) {
                    return seen;
                }
                seen++;
            }
            toVisit.addAll(current.getStatements());
        }
        return -1;
    }

    public int getConditionCount() {
        Deque<Statement> toVisit = new ArrayDeque<>();
        toVisit.add(this);
        int seen = 0;
        while (!toVisit.isEmpty()) {
            Statement current = toVisit.pollFirst();
            if (current instanceof IfStatement) {
                seen++;
            }
            toVisit.addAll(current.getStatements());
        }
        return seen;
    }

    public static class ListErrorListener extends BaseErrorListener {
        private final List<String> errors;

        public ListErrorListener(List<String> errors) {
            this.errors = errors;
        }

        @Override
        public void syntaxError(
                Recognizer<?, ?> recognizer,
                Object offendingSymbol,
                int line,
                int charPositionInLine,
                String msg,
                RecognitionException e
        ) {
            errors.add("line " + line + ":" + charPositionInLine + " " + msg);
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\render\FormItemExtensions.java

````java
package ca.teamdman.sfm.client.render;

import net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer;
import net.neoforged.neoforge.client.extensions.common.IClientItemExtensions;

public class FormItemExtensions implements IClientItemExtensions {
    private final BlockEntityWithoutLevelRenderer RENDERER = new FormItemRenderer();

    @Override
    public BlockEntityWithoutLevelRenderer getCustomRenderer() {
        return RENDERER;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ResourceType.java

````java
package ca.teamdman.sfm.common.resourcetype;

import ca.teamdman.sfm.common.cablenetwork.CableNetwork;
import ca.teamdman.sfm.common.program.LabelPositionHolder;
import ca.teamdman.sfm.common.program.ProgramContext;
import ca.teamdman.sfml.ast.LabelAccess;
import ca.teamdman.sfml.ast.ResourceIdentifier;
import com.mojang.datafixers.util.Pair;
import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.core.Registry;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.ItemStack;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.util.LazyOptional;

import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

public abstract class ResourceType<STACK, ITEM, CAP> {
    private final Map<ITEM, ResourceLocation> registryKeyCache = new Object2ObjectOpenHashMap<>();


    public final Capability<CAP> CAPABILITY_KIND;

    public ResourceType(Capability<CAP> CAPABILITY_KIND) {
        this.CAPABILITY_KIND = CAPABILITY_KIND;
    }


    public abstract long getAmount(STACK stack);

    public abstract STACK getStackInSlot(CAP cap, int slot);

    public abstract STACK extract(CAP cap, int slot, long amount, boolean simulate);

    public abstract int getSlots(CAP handler);

    public abstract long getMaxStackSize(STACK stack);

    public abstract long getMaxStackSize(CAP cap, int slot);


    public abstract STACK insert(CAP cap, int slot, STACK stack, boolean simulate);

    public abstract boolean isEmpty(STACK stack);

    @SuppressWarnings("unused")
    public abstract STACK getEmptyStack();

    public abstract boolean matchesStackType(Object o);

    public boolean matchesStack(ResourceIdentifier<STACK, ITEM, CAP> resourceId, Object stack) {
        if (!matchesStackType(stack)) return false;
        @SuppressWarnings("unchecked") STACK stack_ = (STACK) stack;
        if (isEmpty(stack_)) return false;
        var stackId = getRegistryKey(stack_);
        return resourceId.matchesStack(stackId);
    }

    public abstract boolean matchesCapabilityType(Object o);

    public Stream<CAP> getCapabilities(
            ProgramContext programContext, LabelAccess labelAccess
    ) {
        // Get labels from disk
        Optional<ItemStack> disk = programContext.getManager().getDisk();
        if (disk.isEmpty()) return Stream.empty();
        LabelPositionHolder labelPositions = LabelPositionHolder.from(disk.get());

        // Get positions
        Stream<BlockPos> positions = labelAccess.roundRobin().gather(labelAccess, labelPositions);

        // Expand positions to (pos,direction) pairs
        Stream<Pair<BlockPos, Direction>> position_direction_pairs = positions.flatMap(pos -> labelAccess
                .directions()
                .stream()
                .map(dir -> Pair.of(pos, dir)));

        // Get capability from the network
        CableNetwork network = programContext.getNetwork();
        Stream<LazyOptional<CAP>> caps = position_direction_pairs
                .map(pair -> {
                    BlockPos pos = pair.getFirst();
                    Direction dir = pair.getSecond();
                    return network.getCapability(CAPABILITY_KIND, pos, dir);
                });

        // Unwrap
        // We use isPresent check to detect validity
        // We use orElse with null to unwrap
        //noinspection ConstantValue,DataFlowIssue
        return caps
                .filter(LazyOptional::isPresent)
                .map(x -> x.orElse(null))
                .filter(Objects::nonNull);
    }

    public Stream<STACK> collect(CAP cap, LabelAccess labelAccess) {
        var rtn = Stream.<STACK>builder();
        for (int slot = 0; slot < getSlots(cap); slot++) {
            if (!labelAccess.slots().contains(slot)) continue;
            var stack = getStackInSlot(cap, slot);
            if (!isEmpty(stack)) {
                rtn.add(stack);
            }
        }
        return rtn.build();
    }

    public boolean registryKeyExists(ResourceLocation location) {
        return getRegistry().containsKey(location);
    }

    public ResourceLocation getRegistryKey(STACK stack) {
        ITEM item = getItem(stack);
        var found = registryKeyCache.get(item);
        if (found != null) return found;
        found = getRegistry().getKey(item);
        assert found != null;
        registryKeyCache.put(item, found);
        return found;
    }

    public abstract Registry<ITEM> getRegistry();

    public abstract ITEM getItem(STACK stack);

    public abstract STACK copy(STACK stack);

    protected abstract STACK setCount(STACK stack, long amount);

    @SuppressWarnings("unused")
    public STACK withCount(STACK stack, long count) {
        return setCount(copy(stack), count);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\program\LabelPositionHolder.java

````java
package ca.teamdman.sfm.common.program;

import ca.teamdman.sfm.common.Constants;
import net.minecraft.ChatFormatting;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.*;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.ItemStack;

import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.Predicate;
import java.util.stream.Collectors;

@SuppressWarnings("UnusedReturnValue")
public class LabelPositionHolder {
    private final Map<String, Set<BlockPos>> LABELS = new HashMap<>();

    private LabelPositionHolder() {

    }

    public static LabelPositionHolder empty() {
        return new LabelPositionHolder();
    }

    public static LabelPositionHolder from(ItemStack stack) {
        var labels = LabelPositionHolder.empty();
        var tag = stack.getOrCreateTag().getCompound("sfm:labels");
        for (var label : tag.getAllKeys()) {
            // old: storing BlockPos as long
            labels.addAll(label, tag.getList(label, Tag.TAG_LONG).stream()
                    .map(LongTag.class::cast)
                    .mapToLong(LongTag::getAsLong)
                    .mapToObj(BlockPos::of).collect(Collectors.toList()));

            // new: storing BlockPos as compound
            labels.addAll(label, tag.getList(label, Tag.TAG_COMPOUND).stream()
                    .map(CompoundTag.class::cast)
                    .map(NbtUtils::readBlockPos)
                    .collect(Collectors.toList()));
        }
        return labels;
    }

    public CompoundTag serialize() {
        var tag = new CompoundTag();
        for (var label : get().keySet()) {
            var list = new ListTag();
            list.addAll(LABELS.get(label)
                                .stream()
                                .map(NbtUtils::writeBlockPos)
                                .toList());
            tag.put(label, list);
        }
        return tag;
    }

    public boolean contains(String label, BlockPos pos) {
        return LABELS.getOrDefault(label, Collections.emptySet()).contains(pos);
    }

    public LabelPositionHolder toggle(String label, BlockPos pos) {
        if (contains(label, pos)) {
            remove(label, pos);
        } else {
            add(label, pos);
        }
        return this;
    }

    public Map<String, Set<BlockPos>> get() {
        return LABELS;
    }

    public Set<BlockPos> getPositions(String label) {
        return LABELS.computeIfAbsent(label, s -> new HashSet<>());
    }

    public LabelPositionHolder addAll(String label, Collection<BlockPos> positions) {
        getPositions(label).addAll(positions);
        return this;
    }

    public LabelPositionHolder addReferencedLabel(String label) {
        getPositions(label);
        return this;
    }

    public List<Component> asHoverText() {
        var rtn = new ArrayList<Component>();
        if (LABELS.isEmpty()) return rtn;
        rtn.add(Constants.LocalizationKeys.DISK_ITEM_TOOLTIP_LABEL_HEADER
                        .getComponent()
                        .withStyle(ChatFormatting.UNDERLINE));
        for (var entry : LABELS.entrySet()) {
            rtn.add(Constants.LocalizationKeys.DISK_ITEM_TOOLTIP_LABEL.getComponent(
                    entry.getKey(),
                    entry.getValue().size()
            ).withStyle(ChatFormatting.GRAY));
        }
        return rtn;
    }

    public LabelPositionHolder remove(BlockPos value) {
        LABELS.values().forEach(list -> list.remove(value));
        return this;
    }

    public LabelPositionHolder prune() {
        LABELS.entrySet().removeIf(entry -> entry.getValue().isEmpty());
        return this;
    }

    public LabelPositionHolder clear() {
        LABELS.clear();
        return this;
    }

    public LabelPositionHolder add(String label, BlockPos position) {
        getPositions(label).add(position);
        return this;
    }

    public LabelPositionHolder remove(String label, BlockPos pos) {
        getPositions(label).remove(pos);
        return this;
    }

    public LabelPositionHolder save(ItemStack stack) {
        stack.getOrCreateTag().put("sfm:labels", serialize());
        return this;
    }

    public LabelPositionHolder removeIf(BiPredicate<String, BlockPos> predicate) {
        LABELS.forEach((key, value) -> value.removeIf(pos -> predicate.test(key, pos)));
        return this;
    }

    public LabelPositionHolder removeIf(Predicate<String> predicate) {
        LABELS.keySet().removeIf(predicate);
        return this;
    }

    public LabelPositionHolder forEach(BiConsumer<String, BlockPos> consumer) {
        LABELS.forEach((key, value) -> value.forEach(pos -> consumer.accept(key, pos)));
        return this;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\ManagerBlockEntity.java

````java
package ca.teamdman.sfm.common.blockentity;

import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.item.DiskItem;
import ca.teamdman.sfm.common.net.ClientboundManagerGuiPacket;
import ca.teamdman.sfm.common.registry.SFMBlockEntities;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfm.common.util.OpenContainerTracker;
import ca.teamdman.sfm.common.util.SFMContainerUtil;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.ChatFormatting;
import net.minecraft.core.BlockPos;
import net.minecraft.core.NonNullList;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.chat.Component;
import net.minecraft.world.ContainerHelper;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BaseContainerBlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.neoforged.neoforge.network.PacketDistributor;

import javax.annotation.Nullable;
import java.util.Collections;
import java.util.Optional;
import java.util.Set;

public class ManagerBlockEntity extends BaseContainerBlockEntity {
    public static final int TICK_TIME_HISTORY_SIZE = 20;
    private final NonNullList<ItemStack> ITEMS = NonNullList.withSize(1, ItemStack.EMPTY);
    private final long[] tickTimeNanos = new long[TICK_TIME_HISTORY_SIZE];
    private @Nullable Program program = null;
    private int tick = 0;
    private int unprocessedRedstonePulses = 0; // used by redstone trigger
    private boolean shouldRebuildProgram = false;
    private int tickIndex = 0;

    public ManagerBlockEntity(BlockPos blockPos, BlockState blockState) {
        super(SFMBlockEntities.MANAGER_BLOCK_ENTITY.get(), blockPos, blockState);
    }

    public static void serverTick(
            @SuppressWarnings("unused") Level level,
            @SuppressWarnings("unused") BlockPos pos,
            @SuppressWarnings("unused") BlockState state,
            ManagerBlockEntity tile
    ) {
        long start = System.nanoTime();
        tile.tick++;
        if (tile.shouldRebuildProgram) {
            tile.rebuildProgramAndUpdateDisk();
            tile.shouldRebuildProgram = false;
        }
        if (tile.program != null) {
            boolean didSomething = tile.program.tick(tile);
            if (didSomething) {
                long nanoTimePassed = Long.min(System.nanoTime() - start, Integer.MAX_VALUE);
                tile.tickTimeNanos[tile.tickIndex] = (int) nanoTimePassed;
                tile.tickIndex = (tile.tickIndex + 1) % tile.tickTimeNanos.length;
                tile.sendUpdatePacket();
            }
        }
    }

    private void sendUpdatePacket() {
        OpenContainerTracker.getPlayersWithOpenContainer(ManagerContainerMenu.class)
                .filter(entry -> entry.getValue().MANAGER_POSITION.equals(getBlockPos()))
                .forEach(entry -> SFMPackets.MANAGER_CHANNEL.send(
                        PacketDistributor.PLAYER.with(entry::getKey),
                        new ClientboundManagerGuiPacket(
                                entry.getValue().containerId,
                                getProgramString().orElse(""),
                                getState(),
                                getTickTimeNanos()
                        )
                ));
    }

    public int getTick() {
        return tick;
    }

    public Optional<Program> getProgram() {
        return Optional.ofNullable(program);
    }

    public void setProgram(String program) {
        getDisk().ifPresent(disk -> {
            DiskItem.setProgram(disk, program);
            rebuildProgramAndUpdateDisk();
            setChanged();
        });
    }

    public void trackRedstonePulseUnprocessed() {
        unprocessedRedstonePulses++;
    }

    public void clearRedstonePulseQueue() {
        unprocessedRedstonePulses = 0;
    }

    public int getUnprocessedRedstonePulseCount() {
        return unprocessedRedstonePulses;
    }

    public State getState() {
        if (getDisk().isEmpty()) return State.NO_DISK;
        if (getProgramString().isEmpty()) return State.NO_PROGRAM;
        if (program == null) return State.INVALID_PROGRAM;
        return State.RUNNING;
    }

    public Optional<String> getProgramString() {
        return getDisk().map(DiskItem::getProgram).filter(prog -> !prog.isBlank());
    }

    public Set<String> getReferencedLabels() {
        if (program == null) return Collections.emptySet();
        return program.referencedLabels();
    }

    public Optional<ItemStack> getDisk() {
        var item = getItem(0);
        if (item.getItem() instanceof DiskItem) return Optional.of(item);
        return Optional.empty();
    }

    public void rebuildProgramAndUpdateDisk() {
        if (level != null && level.isClientSide()) return;
        this.program = getDisk()
                .flatMap(itemStack -> DiskItem.updateDetails(itemStack, this))
                .orElse(null);
        sendUpdatePacket();
    }

    @Override
    protected Component getDefaultName() {
        return Constants.LocalizationKeys.MANAGER_CONTAINER.getComponent();
    }

    @Override
    protected AbstractContainerMenu createMenu(int windowId, Inventory inv) {
        return new ManagerContainerMenu(windowId, inv, this);
    }

    @Override
    public int getContainerSize() {
        return ITEMS.size();
    }

    @Override
    public boolean isEmpty() {
        return ITEMS.isEmpty();
    }

    @Override
    public ItemStack getItem(int slot) {
        if (slot < 0 || slot >= ITEMS.size()) return ItemStack.EMPTY;
        return ITEMS.get(slot);
    }

    @Override
    public ItemStack removeItem(int slot, int amount) {
        var result = ContainerHelper.removeItem(ITEMS, slot, amount);
        if (slot == 0) rebuildProgramAndUpdateDisk();
        setChanged();
        return result;
    }

    @Override
    public ItemStack removeItemNoUpdate(int slot) {
        var result = ContainerHelper.takeItem(ITEMS, slot);
        if (slot == 0) rebuildProgramAndUpdateDisk();
        setChanged();
        return result;
    }

    @Override
    public void setItem(int slot, ItemStack stack) {
        if (slot < 0 || slot >= ITEMS.size()) return;
        ITEMS.set(slot, stack);
        if (slot == 0) rebuildProgramAndUpdateDisk();
        setChanged();
    }

    @Override
    public int getMaxStackSize() {
        return 1;
    }

    @Override
    public boolean canPlaceItem(int slot, ItemStack stack) {
        return stack.getItem() instanceof DiskItem;
    }

    @Override
    public boolean stillValid(Player player) {
        return SFMContainerUtil.stillValid(this, player);
    }

    @Override
    public void load(CompoundTag tag) {
        super.load(tag);
        ContainerHelper.loadAllItems(tag, ITEMS);
        this.shouldRebuildProgram = true;
    }

    @Override
    protected void saveAdditional(CompoundTag tag) {
        super.saveAdditional(tag);
        ContainerHelper.saveAllItems(tag, ITEMS);
    }


    @Override
    public void clearContent() {
        ITEMS.clear();
    }

    public void reset() {
        getDisk().ifPresent(disk -> {
            disk.setTag(null);
            setItem(0, disk);
            setChanged();
        });
    }

    public long[] getTickTimeNanos() {
        // tickTimeNanos is used as a cyclical buffer, transform it to have the first index be the most recent tick
        long[] result = new long[tickTimeNanos.length];
        System.arraycopy(tickTimeNanos, tickIndex, result, 0, tickTimeNanos.length - tickIndex);
        System.arraycopy(tickTimeNanos, 0, result, tickTimeNanos.length - tickIndex, tickIndex);
        return result;
    }

    public enum State {
        NO_PROGRAM(
                ChatFormatting.RED,
                Constants.LocalizationKeys.MANAGER_GUI_STATE_NO_PROGRAM
        ), NO_DISK(
                ChatFormatting.RED,
                Constants.LocalizationKeys.MANAGER_GUI_STATE_NO_DISK
        ), RUNNING(ChatFormatting.GREEN, Constants.LocalizationKeys.MANAGER_GUI_STATE_RUNNING), INVALID_PROGRAM(
                ChatFormatting.DARK_RED,
                Constants.LocalizationKeys.MANAGER_GUI_STATE_INVALID_PROGRAM
        );

        public final ChatFormatting COLOR;
        public final Constants.LocalizationKeys.LocalizationEntry LOC;

        State(ChatFormatting color, Constants.LocalizationKeys.LocalizationEntry loc) {
            COLOR = color;
            LOC = loc;
        }
    }

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundOutputInspectionRequestPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.program.LimitedInputSlot;
import ca.teamdman.sfm.common.program.ProgramContext;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfm.common.registry.SFMResourceTypes;
import ca.teamdman.sfm.common.resourcetype.ResourceType;
import ca.teamdman.sfm.common.util.SFMUtils;
import ca.teamdman.sfml.ast.Number;
import ca.teamdman.sfml.ast.*;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.neoforged.neoforge.network.NetworkEvent;
import net.neoforged.neoforge.network.PacketDistributor;
import org.antlr.v4.runtime.misc.Pair;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Optional;
import java.util.function.Supplier;

public record ServerboundOutputInspectionRequestPacket(
        String programString,
        int outputNodeIndex
) {
    public static void encode(ServerboundOutputInspectionRequestPacket msg, FriendlyByteBuf friendlyByteBuf) {
        friendlyByteBuf.writeUtf(msg.programString, Program.MAX_PROGRAM_LENGTH);
        friendlyByteBuf.writeInt(msg.outputNodeIndex());
    }

    public static ServerboundOutputInspectionRequestPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ServerboundOutputInspectionRequestPacket(
                friendlyByteBuf.readUtf(Program.MAX_PROGRAM_LENGTH),
                friendlyByteBuf.readInt()
        );
    }

    private static <STACK, ITEM, CAP> ResourceLimit<STACK, ITEM, CAP> getSlotResource(
            LimitedInputSlot<STACK, ITEM, CAP> limitedInputSlot
    ) {
        ResourceType<STACK, ITEM, CAP> resourceType = limitedInputSlot.type;
        //noinspection OptionalGetWithoutIsPresent
        ResourceKey<ResourceType<STACK, ITEM, CAP>> resourceTypeResourceKey = SFMResourceTypes.DEFERRED_TYPES
                .getResourceKey(limitedInputSlot.type)
                .map(x -> {
                    //noinspection unchecked,rawtypes
                    return (ResourceKey<ResourceType<STACK, ITEM, CAP>>) (ResourceKey) x;
                })
                .get();
        STACK stack = limitedInputSlot.peekExtractPotential();
        long amount = limitedInputSlot.type.getAmount(stack);
        amount = Long.min(amount, limitedInputSlot.tracker.getResourceLimit().limit().quantity().number().value());
        long remainingObligation = limitedInputSlot.tracker.getRemainingRetentionObligation();
        amount -= Long.min(amount, remainingObligation);
        Limit amountLimit = new Limit(
                new ResourceQuantity(new Number(amount), ResourceQuantity.IdExpansionBehaviour.NO_EXPAND),
                ResourceQuantity.MAX_QUANTITY
        );
        ResourceLocation stackId = resourceType.getRegistryKey(stack);
        ResourceIdentifier<STACK, ITEM, CAP> resourceIdentifier = new ResourceIdentifier<>(
                resourceTypeResourceKey.location().getNamespace(),
                resourceTypeResourceKey.location().getPath(),
                stackId.getNamespace(),
                stackId.getPath()
        );
        return new ResourceLimit<>(
                resourceIdentifier,
                amountLimit
        );
    }


    public static void handle(
            ServerboundOutputInspectionRequestPacket msg,
            NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> {
            // we don't know if the player has the program edit screen open from a manager or a disk in hand
            ServerPlayer player = context.getSender();
            if (player == null) return;
            ManagerBlockEntity manager;
            if (player.containerMenu instanceof ManagerContainerMenu mcm) {
                if (player.level().getBlockEntity(mcm.MANAGER_POSITION) instanceof ManagerBlockEntity mbe) {
                    manager = mbe;
                } else {
                    return;
                }
            } else {
                //todo: localize
                SFMPackets.INSPECTION_CHANNEL.send(
                        PacketDistributor.PLAYER.with(() -> player),
                        new ClientboundInputInspectionResultsPacket(
                                "This inspection is only available when editing inside a manager.")
                );
                return;
            }
            Program.compile(
                    msg.programString,
                    (successProgram, builder) -> builder
                            .getNodeAtIndex(msg.outputNodeIndex)
                            .filter(OutputStatement.class::isInstance)
                            .map(OutputStatement.class::cast)
                            .ifPresent(outputStatement -> {
                                StringBuilder payload = new StringBuilder();
                                payload.append(outputStatement.toStringPretty()).append("\n");
                                payload.append("-- predictions may differ from actual execution results\n");

                                successProgram.replaceOutputStatement(outputStatement, new OutputStatement(
                                        outputStatement.labelAccess(),
                                        outputStatement.resourceLimits(),
                                        outputStatement.each()
                                ) {
                                    @Override
                                    public void tick(ProgramContext context) {
                                        StringBuilder branchPayload = new StringBuilder();

                                        if (!context.getExecutionPath().isEmpty()) {
                                            payload
                                                    .append("-- POSSIBILITY ")
                                                    .append(context.getExplorationBranchIndex())
                                                    .append(" --\n");
                                            context.getExecutionPath().forEach(branch -> {
                                                if (branch.wasTrue()) {
                                                    payload
                                                            .append(branch.ifStatement().condition().sourceCode())
                                                            .append(" -- true");
                                                } else {
                                                    payload.append(branch
                                                                           .ifStatement()
                                                                           .condition()
                                                                           .negate()
                                                                           .sourceCode());
                                                }
                                                payload.append("\n");
                                            });
                                            payload.append("\n");
                                        }

                                        branchPayload.append("-- predicted inputs:\n");
                                        List<Pair<LimitedInputSlot<?, ?, ?>, LabelAccess>> inputSlots = new ArrayList<>();
                                        context
                                                .getInputs()
                                                .forEach(inputStatement -> inputStatement.gatherSlots(
                                                        context,
                                                        slot -> inputSlots.add(new Pair<>(
                                                                slot,
                                                                inputStatement.labelAccess()
                                                        ))
                                                ));
                                        List<InputStatement> inputStatements = inputSlots.stream()
                                                .map(slot -> SFMUtils.getInputStatementForSlot(slot.a, slot.b))
                                                .filter(Optional::isPresent)
                                                .map(Optional::get)
                                                .toList();
                                        if (inputStatements.isEmpty()) {
                                            branchPayload.append("none\n-- predicted outputs:\nnone");
                                        } else {
                                            inputStatements.stream()
                                                    .map(InputStatement::toStringPretty)
                                                    .map(x -> x + "\n")
                                                    .forEach(branchPayload::append);

                                            branchPayload.append(
                                                    "-- predicted outputs:\n");
                                            ResourceLimits condensedResourceLimits;
                                            {
                                                ResourceLimits resourceLimits = new ResourceLimits(
                                                        inputSlots
                                                                .stream()
                                                                .map(slot -> slot.a)
                                                                .map(ServerboundOutputInspectionRequestPacket::getSlotResource)
                                                                .toList(),
                                                        ResourceIdSet.EMPTY
                                                );
                                                List<ResourceLimit<?, ?, ?>> condensedResourceLimitList = new ArrayList<>();
                                                for (ResourceLimit<?, ?, ?> resourceLimit : resourceLimits.resourceLimits()) {
                                                    // check if an existing resource limit has the same resource identifier
                                                    condensedResourceLimitList
                                                            .stream()
                                                            .filter(x -> x
                                                                    .resourceId()
                                                                    .equals(resourceLimit.resourceId()))
                                                            .findFirst()
                                                            .ifPresentOrElse(found -> {
                                                                int i = condensedResourceLimitList.indexOf(found);
                                                                ResourceLimit<?, ?, ?> newLimit = found.withLimit(new Limit(
                                                                        found
                                                                                .limit()
                                                                                .quantity()
                                                                                .add(resourceLimit.limit().quantity()),
                                                                        ResourceQuantity.MAX_QUANTITY
                                                                ));
                                                                condensedResourceLimitList.set(i, newLimit);
                                                            }, () -> condensedResourceLimitList.add(resourceLimit));
                                                }
                                                {
                                                    // prune items not covered by the output resource limits
                                                    ListIterator<ResourceLimit<?, ?, ?>> iter = condensedResourceLimitList.listIterator();
                                                    while (iter.hasNext()) {
                                                        ResourceLimit<?, ?, ?> resourceLimit = iter.next();
                                                        // because these resource limits were generated from resource stacks
                                                        // they should always be valid resource locations (not patterns)
                                                        ResourceLocation resourceLimitLocation = new ResourceLocation(
                                                                resourceLimit.resourceId().resourceNamespace,
                                                                resourceLimit.resourceId().resourceName
                                                        );
                                                        long accept = outputStatement
                                                                .resourceLimits()
                                                                .resourceLimits()
                                                                .stream()
                                                                .filter(outputResourceLimit -> outputResourceLimit
                                                                                                       .resourceId()
                                                                                                       .matchesStack(
                                                                                                               resourceLimitLocation)
                                                                                               && outputStatement
                                                                                                       .resourceLimits()
                                                                                                       .exclusions()
                                                                                                       .resourceIds()
                                                                                                       .stream()
                                                                                                       .noneMatch(
                                                                                                               exclusion -> exclusion.matchesStack(
                                                                                                                       resourceLimitLocation)))
                                                                .mapToLong(rl -> rl.limit().quantity().number().value())
                                                                .max()
                                                                .orElse(0);
                                                        if (accept == 0) {
                                                            iter.remove();
                                                        } else {
                                                            iter.set(resourceLimit.withLimit(new Limit(
                                                                    new ResourceQuantity(new Number(Long.min(
                                                                            accept,
                                                                            resourceLimit
                                                                                    .limit()
                                                                                    .quantity()
                                                                                    .number()
                                                                                    .value()
                                                                    )), resourceLimit.limit().quantity()
                                                                                                 .idExpansionBehaviour()),
                                                                    ResourceQuantity.MAX_QUANTITY
                                                            )));
                                                        }
                                                    }
                                                }
                                                condensedResourceLimits = new ResourceLimits(
                                                        condensedResourceLimitList,
                                                        ResourceIdSet.EMPTY
                                                );
                                            }
                                            if (condensedResourceLimits.resourceLimits().isEmpty()) {
                                                branchPayload.append("none\n");
                                            } else {
                                                branchPayload
                                                        .append(new OutputStatement(
                                                                outputStatement.labelAccess(),
                                                                condensedResourceLimits,
                                                                outputStatement.each()
                                                        ).toStringPretty());
                                            }

                                        }
                                        branchPayload.append("\n");
                                        if (successProgram.getConditionCount() == 0) {
                                            payload.append(branchPayload);
                                        } else {
                                            payload.append(branchPayload.toString().indent(4));
                                        }
                                    }
                                });

                                // run the program down each possible if-branch combination
                                for (
                                        int branchIndex = 0;
                                        branchIndex < Math.pow(2, successProgram.getConditionCount());
                                        branchIndex++
                                ) {
                                    successProgram.tick(new ProgramContext(
                                            successProgram,
                                            manager,
                                            ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES,
                                            branchIndex
                                    ));
                                }


                                SFMPackets.INSPECTION_CHANNEL.send(
                                        PacketDistributor.PLAYER.with(() -> player),
                                        new ClientboundOutputInspectionResultsPacket(payload.toString().strip())
                                );
                            }),
                    failure -> {
                        //todo: translate
                        SFMPackets.INSPECTION_CHANNEL.send(
                                PacketDistributor.PLAYER.with(() -> player),
                                new ClientboundOutputInspectionResultsPacket("failed to compile program")
                        );
                    }
            );
        });
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ASTBuilder.java

````java
package ca.teamdman.sfml.ast;

import ca.teamdman.sfml.SFMLBaseVisitor;
import ca.teamdman.sfml.SFMLParser;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.misc.Pair;
import org.antlr.v4.runtime.tree.ParseTree;

import javax.annotation.Nullable;
import java.util.*;
import java.util.stream.Collectors;

public class ASTBuilder extends SFMLBaseVisitor<ASTNode> {
    private final Set<Label> USED_LABELS = new HashSet<>();
    private final Set<ResourceIdentifier<?, ?, ?>> USED_RESOURCES = new HashSet<>();
    private final List<Pair<ASTNode, ParserRuleContext>> AST_NODE_CONTEXTS = new LinkedList<>();

    public List<Pair<ASTNode, ParserRuleContext>> getNodesUnderCursor(int cursorPos) {
        return AST_NODE_CONTEXTS
                .stream()
                .filter(pair -> pair.b != null)
                .filter(pair -> pair.b.start.getStartIndex() <= cursorPos && pair.b.stop.getStopIndex() >= cursorPos)
                .collect(Collectors.toList());
    }

    public Optional<ASTNode> getNodeAtIndex(int index) {
        if (index < 0 || index >= AST_NODE_CONTEXTS.size()) return Optional.empty();
        return Optional.ofNullable(AST_NODE_CONTEXTS.get(index).a);
    }

    public int getIndexForNode(ASTNode node) {
        return AST_NODE_CONTEXTS
                .stream()
                .filter(pair -> pair.a == node)
                .map(AST_NODE_CONTEXTS::indexOf)
                .findFirst()
                .orElse(-1);
    }

    @Override
    public StringHolder visitName(@Nullable SFMLParser.NameContext ctx) {
        if (ctx == null) return new StringHolder("");
        StringHolder name = visitString(ctx.string());
        AST_NODE_CONTEXTS.add(new Pair<>(name, ctx));
        return name;
    }

    @Override
    public ASTNode visitResource(SFMLParser.ResourceContext ctx) {
        var str = ctx
                .children
                .stream()
                .map(ParseTree::getText)
                .collect(Collectors.joining())
                .replaceAll("::", ":*:")
                .replaceAll(":$", ":*")
                .replaceAll("\\*", ".*");
        var rtn = ResourceIdentifier.fromString(str);
        USED_RESOURCES.add(rtn);
        rtn.assertValid();
        AST_NODE_CONTEXTS.add(new Pair<>(rtn, ctx));
        return rtn;
    }

    @Override
    public ResourceIdentifier<?, ?, ?> visitStringResource(SFMLParser.StringResourceContext ctx) {
        var rtn = ResourceIdentifier.fromString(visitString(ctx.string()).value());
        USED_RESOURCES.add(rtn);
        rtn.assertValid();
        AST_NODE_CONTEXTS.add(new Pair<>(rtn, ctx));
        return rtn;
    }

    @Override
    public StringHolder visitString(SFMLParser.StringContext ctx) {
        var content = ctx.getText();
        StringHolder str = new StringHolder(content.substring(1, content.length() - 1));
        AST_NODE_CONTEXTS.add(new Pair<>(str, ctx));
        return str;
    }

    @Override
    public Label visitRawLabel(SFMLParser.RawLabelContext ctx) {
        var label = new Label(ctx.getText());
        if (label.name().length() > Program.MAX_LABEL_LENGTH) {
            throw new IllegalArgumentException("Label name cannot be longer than "
                                               + Program.MAX_LABEL_LENGTH
                                               + " characters.");
        }
        USED_LABELS.add(label);
        AST_NODE_CONTEXTS.add(new Pair<>(label, ctx));
        return label;
    }

    @Override
    public Label visitStringLabel(SFMLParser.StringLabelContext ctx) {
        var label = new Label(visitString(ctx.string()).value());
        if (label.name().length() > Program.MAX_LABEL_LENGTH) {
            throw new IllegalArgumentException("Label name cannot be longer than "
                                               + Program.MAX_LABEL_LENGTH
                                               + " characters.");
        }
        USED_LABELS.add(label);
        AST_NODE_CONTEXTS.add(new Pair<>(label, ctx));
        return label;
    }

    @Override
    public Program visitProgram(SFMLParser.ProgramContext ctx) {
        var name = visitName(ctx.name());
        var triggers = ctx
                .trigger()
                .stream()
                .map(this::visit)
                .map(Trigger.class::cast)
                .collect(Collectors.toList());
        var labels = USED_LABELS
                .stream()
                .map(Label::name)
                .collect(Collectors.toSet());
        Program program = new Program(name.value(), triggers, labels, USED_RESOURCES);
        AST_NODE_CONTEXTS.add(new Pair<>(program, ctx));
        return program;
    }

    @Override
    public ASTNode visitTimerTrigger(SFMLParser.TimerTriggerContext ctx) {
        var time = (Interval) visit(ctx.interval());
        if (time.getSeconds() < 1) throw new IllegalArgumentException("Minimum trigger interval is 1 second.");
        var block = visitBlock(ctx.block());
        TimerTrigger timerTrigger = new TimerTrigger(time, block);
        AST_NODE_CONTEXTS.add(new Pair<>(timerTrigger, ctx));
        return timerTrigger;
    }

    @Override
    public ASTNode visitBooleanRedstone(SFMLParser.BooleanRedstoneContext ctx) {
        ComparisonOperator comp = ComparisonOperator.GREATER_OR_EQUAL;
        Number num = new Number(0);
        if (ctx.comparisonOp() != null && ctx.number() != null) {
            comp = visitComparisonOp(ctx.comparisonOp());
            num = visitNumber(ctx.number());
        }

        ComparisonOperator finalComp = comp;
        assert num.value() <= Integer.MAX_VALUE;
        int finalNum = (int) num.value();
        //noinspection DataFlowIssue // if the program is ticking, level shouldn't be null
        BoolExpr boolExpr = new BoolExpr(
                programContext -> finalComp.test(
                        (long) programContext
                                .getManager()
                                .getLevel()
                                .getBestNeighborSignal(programContext
                                                               .getManager()
                                                               .getBlockPos()),
                        (long) finalNum
                ),
                ctx.getText()
        );
        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));
        return boolExpr;
    }

    @Override
    public ASTNode visitPulseTrigger(SFMLParser.PulseTriggerContext ctx) {
        var block = visitBlock(ctx.block());
        RedstoneTrigger redstoneTrigger = new RedstoneTrigger(block);
        AST_NODE_CONTEXTS.add(new Pair<>(redstoneTrigger, ctx));
        return redstoneTrigger;
    }

    @Override
    public Number visitNumber(SFMLParser.NumberContext ctx) {
        Number number = new Number(Long.parseLong(ctx.getText()));
        AST_NODE_CONTEXTS.add(new Pair<>(number, ctx));
        return number;
    }

    @Override
    public Interval visitTicks(SFMLParser.TicksContext ctx) {
        var num = visitNumber(ctx.number());
        assert num.value() <= Integer.MAX_VALUE;
        Interval interval = Interval.fromTicks((int) num.value());
        AST_NODE_CONTEXTS.add(new Pair<>(interval, ctx));
        return interval;
    }

    @Override
    public Interval visitSeconds(SFMLParser.SecondsContext ctx) {
        var num = visitNumber(ctx.number());
        assert num.value() <= Integer.MAX_VALUE;
        Interval interval = Interval.fromSeconds((int) num.value());
        AST_NODE_CONTEXTS.add(new Pair<>(interval, ctx));
        return interval;
    }

    @Override
    public InputStatement visitInputStatementStatement(SFMLParser.InputStatementStatementContext ctx) {
        InputStatement input = (InputStatement) visit(ctx.inputstatement());
        AST_NODE_CONTEXTS.add(new Pair<>(input, ctx));
        return input;
    }

    @Override
    public OutputStatement visitOutputStatementStatement(SFMLParser.OutputStatementStatementContext ctx) {
        OutputStatement output = (OutputStatement) visit(ctx.outputstatement());
        AST_NODE_CONTEXTS.add(new Pair<>(output, ctx));
        return output;
    }

    @Override
    public InputStatement visitInputstatement(SFMLParser.InputstatementContext ctx) {
        var labelAccess = visitLabelaccess(ctx.labelaccess());
        var matchers = visitInputmatchers(ctx.inputmatchers());
        var exclusions = visitResourceexclusion(ctx.resourceexclusion());
        var each = ctx.EACH() != null;
        InputStatement inputStatement = new InputStatement(labelAccess, matchers.withExclusions(exclusions), each);
        AST_NODE_CONTEXTS.add(new Pair<>(inputStatement, ctx));
        return inputStatement;
    }

    @Override
    public OutputStatement visitOutputstatement(SFMLParser.OutputstatementContext ctx) {
        var labelAccess = visitLabelaccess(ctx.labelaccess());
        var matchers = visitOutputmatchers(ctx.outputmatchers());
        var exclusions = visitResourceexclusion(ctx.resourceexclusion());
        var each = ctx.EACH() != null;
        OutputStatement outputStatement = new OutputStatement(labelAccess, matchers.withExclusions(exclusions), each);
        AST_NODE_CONTEXTS.add(new Pair<>(outputStatement, ctx));
        return outputStatement;
    }

    @Override
    public LabelAccess visitLabelaccess(SFMLParser.LabelaccessContext ctx) {
        LabelAccess labelAccess = new LabelAccess(
                ctx.label().stream().map(this::visit).map(Label.class::cast).collect(Collectors.toList()),
                visitSidequalifier(ctx.sidequalifier()),
                visitSlotqualifier(ctx.slotqualifier()),
                visitRoundrobin(ctx.roundrobin())
        );
        AST_NODE_CONTEXTS.add(new Pair<>(labelAccess, ctx));
        return labelAccess;
    }

    @Override
    public RoundRobin visitRoundrobin(@Nullable SFMLParser.RoundrobinContext ctx) {
        if (ctx == null) return RoundRobin.disabled();
        return ctx.BLOCK() != null
               ? new RoundRobin(RoundRobin.Behaviour.BY_BLOCK)
               : new RoundRobin(RoundRobin.Behaviour.BY_LABEL);
    }

    @Override
    public IfStatement visitIfstatement(SFMLParser.IfstatementContext ctx) {
        var conditions = ctx
                .boolexpr()
                .stream()
                .map(this::visit)
                .map(BoolExpr.class::cast)
                .collect(Collectors.toCollection(ArrayDeque::new));
        var blocks = ctx.block().stream()
                .map(this::visitBlock)
                .collect(Collectors.toCollection(ArrayDeque::new));

        IfStatement nestedStatement;
        if (conditions.size() < blocks.size()) {
            Block elseBlock = blocks.removeLast();
            Block ifBlock = blocks.removeLast();
            nestedStatement = new IfStatement(
                    conditions.removeLast(),
                    ifBlock,
                    elseBlock
            );
        } else {
            nestedStatement = new IfStatement(
                    conditions.removeLast(),
                    blocks.removeLast(),
                    new Block(List.of())
            );
        }
        while (!blocks.isEmpty()) {
            nestedStatement = new IfStatement(
                    conditions.removeLast(),
                    blocks.removeLast(),
                    new Block(List.of(nestedStatement))
            );
        }
        assert conditions.isEmpty();

        AST_NODE_CONTEXTS.add(new Pair<>(nestedStatement, ctx));
        return nestedStatement;
    }

    @Override
    public IfStatement visitIfStatementStatement(SFMLParser.IfStatementStatementContext ctx) {
        IfStatement ifStatement = visitIfstatement(ctx.ifstatement());
        AST_NODE_CONTEXTS.add(new Pair<>(ifStatement, ctx));
        return ifStatement;
    }

    @Override
    public BoolExpr visitBooleanTrue(SFMLParser.BooleanTrueContext ctx) {
        BoolExpr boolExpr = new BoolExpr(__ -> true, "TRUE");
        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));
        return boolExpr;
    }

    @Override
    public BoolExpr visitBooleanHas(SFMLParser.BooleanHasContext ctx) {
        var setOp = visitSetOp(ctx.setOp());
        var labelAccess = visitLabelaccess(ctx.labelaccess());
        var comparison = visitResourcecomparison(ctx.resourcecomparison());
        BoolExpr booleanExpression = comparison.toBooleanExpression(
                setOp,
                labelAccess,
                setOp.name().toUpperCase() + " " + labelAccess + " HAS " + comparison
        );
        AST_NODE_CONTEXTS.add(new Pair<>(booleanExpression, ctx));
        return booleanExpression;
    }

    @Override
    public SetOperator visitSetOp(@Nullable SFMLParser.SetOpContext ctx) {
        if (ctx == null) return SetOperator.OVERALL;
        SetOperator from = SetOperator.from(ctx.getText());
        AST_NODE_CONTEXTS.add(new Pair<>(from, ctx));
        return from;
    }

    @Override
    public ResourceComparer<?, ?, ?> visitResourcecomparison(SFMLParser.ResourcecomparisonContext ctx) {
        ComparisonOperator op = visitComparisonOp(ctx.comparisonOp());
        Number num = visitNumber(ctx.number());
        ResourceQuantity quantity = new ResourceQuantity(num, ResourceQuantity.IdExpansionBehaviour.NO_EXPAND);
        ResourceIdentifier<?, ?, ?> item = (ResourceIdentifier<?, ?, ?>) visit(ctx.resourceid());
        ResourceComparer<?, ?, ?> resourceComparer = new ResourceComparer<>(op, quantity, item);
        AST_NODE_CONTEXTS.add(new Pair<>(resourceComparer, ctx));
        return resourceComparer;
    }

    @Override
    public ComparisonOperator visitComparisonOp(SFMLParser.ComparisonOpContext ctx) {
        ComparisonOperator from = ComparisonOperator.from(ctx.getText());
        AST_NODE_CONTEXTS.add(new Pair<>(from, ctx));
        return from;
    }

    @Override
    public BoolExpr visitBooleanConjunction(SFMLParser.BooleanConjunctionContext ctx) {
        var left = (BoolExpr) visit(ctx.boolexpr(0));
        var right = (BoolExpr) visit(ctx.boolexpr(1));
        BoolExpr boolExpr = new BoolExpr(left.and(right), left.sourceCode() + " AND " + right.sourceCode());
        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));
        return boolExpr;
    }

    @Override
    public BoolExpr visitBooleanDisjunction(SFMLParser.BooleanDisjunctionContext ctx) {
        var left = (BoolExpr) visit(ctx.boolexpr(0));
        var right = (BoolExpr) visit(ctx.boolexpr(1));
        BoolExpr boolExpr = new BoolExpr(left.or(right), left.sourceCode() + " OR " + right.sourceCode());
        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));
        return boolExpr;
    }

    @Override
    public BoolExpr visitBooleanFalse(SFMLParser.BooleanFalseContext ctx) {
        BoolExpr boolExpr = new BoolExpr(__ -> false, "FALSE");
        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));
        return boolExpr;
    }

    @Override
    public BoolExpr visitBooleanParen(SFMLParser.BooleanParenContext ctx) {
        BoolExpr expr = (BoolExpr) visit(ctx.boolexpr());
        AST_NODE_CONTEXTS.add(new Pair<>(expr, ctx));
        return expr;
    }

    @Override
    public BoolExpr visitBooleanNegation(SFMLParser.BooleanNegationContext ctx) {
        var x = (BoolExpr) visit(ctx.boolexpr());
        BoolExpr boolExpr = new BoolExpr(x.negate(), "NOT " + x.sourceCode());
        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));
        return boolExpr;
    }

    @Override
    public Limit visitQuantityRetentionLimit(SFMLParser.QuantityRetentionLimitContext ctx) {
        var quantity = visitQuantity(ctx.quantity());
        var retain = visitRetention(ctx.retention());
        Limit limit = new Limit(quantity, retain);
        AST_NODE_CONTEXTS.add(new Pair<>(limit, ctx));
        return limit;
    }

    @Override
    public ResourceIdSet visitResourceexclusion(@Nullable SFMLParser.ResourceexclusionContext ctx) {
        if (ctx == null) return ResourceIdSet.EMPTY;
        ResourceIdSet resourceIdSet = new ResourceIdSet(ctx
                                                                .resourceid()
                                                                .stream()
                                                                .map(this::visit)
                                                                .map(ResourceIdentifier.class::cast)
                                                                .collect(HashSet::new, HashSet::add, HashSet::addAll));
        AST_NODE_CONTEXTS.add(new Pair<>(resourceIdSet, ctx));
        return resourceIdSet;
    }

    @Override
    public ResourceLimits visitInputmatchers(@Nullable SFMLParser.InputmatchersContext ctx) {
        if (ctx == null) {
            return new ResourceLimits(List.of(ResourceLimit.TAKE_ALL_LEAVE_NONE), ResourceIdSet.EMPTY);
        }
        ResourceLimits resourceLimits = ((ResourceLimits) visit(ctx.movement())).withDefaults(Limit.MAX_QUANTITY_NO_RETENTION);
        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimits, ctx));
        return resourceLimits;
    }


    @Override
    public ResourceLimits visitOutputmatchers(@Nullable SFMLParser.OutputmatchersContext ctx) {
        if (ctx == null) {
            return new ResourceLimits(List.of(ResourceLimit.ACCEPT_ALL_WITHOUT_RESTRAINT), ResourceIdSet.EMPTY);
        }
        ResourceLimits resourceLimits = ((ResourceLimits) visit(ctx.movement())).withDefaults(Limit.MAX_QUANTITY_MAX_RETENTION);
        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimits, ctx));
        return resourceLimits;
    }

    @Override
    public ASTNode visitResourceLimitMovement(SFMLParser.ResourceLimitMovementContext ctx) {
        ResourceLimits resourceLimits = new ResourceLimits(
                ctx.resourcelimit().stream()
                        .map(this::visitResourcelimit)
                        .collect(Collectors.toList()),
                ResourceIdSet.EMPTY
        );
        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimits, ctx));
        return resourceLimits;
    }

    @Override
    public ResourceLimits visitLimitMovement(SFMLParser.LimitMovementContext ctx) {
        ResourceLimits resourceLimits = new ResourceLimits(
                List.of(new ResourceLimit<>(
                        ResourceIdentifier.MATCH_ALL, (Limit) this.visit(ctx.limit())
                )),
                ResourceIdSet.EMPTY
        );
        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimits, ctx));
        return resourceLimits;
    }

    @Override
    public ResourceLimit<?, ?, ?> visitResourcelimit(SFMLParser.ResourcelimitContext ctx) {

        var res = (ResourceIdentifier<?, ?, ?>) visit(ctx.resourceid());

        if (ctx.limit() == null)
            return new ResourceLimit<>(res, Limit.UNSET);

        var limit = (Limit) visit(ctx.limit());
        ResourceLimit<?, ?, ?> resourceLimit = new ResourceLimit<>(res, limit);
        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimit, ctx));
        return resourceLimit;
    }

    @Override
    public NumberRangeSet visitSlotqualifier(@Nullable SFMLParser.SlotqualifierContext ctx) {
        NumberRangeSet numberRangeSet = visitRangeset(ctx == null ? null : ctx.rangeset());
        AST_NODE_CONTEXTS.add(new Pair<>(numberRangeSet, ctx));
        return numberRangeSet;
    }

    @Override
    public ASTNode visitForgetStatementStatement(SFMLParser.ForgetStatementStatementContext ctx) {
        ForgetStatement statement = (ForgetStatement) visit(ctx.forgetstatement());
        AST_NODE_CONTEXTS.add(new Pair<>(statement, ctx));
        return statement;
    }

    @Override
    public ForgetStatement visitForgetstatement(SFMLParser.ForgetstatementContext ctx) {
        List<Label> labels = ctx
                .label()
                .stream()
                .map(this::visit)
                .map(Label.class::cast)
                .collect(Collectors.toList());
        if (labels.isEmpty()) {
            labels = USED_LABELS.stream().toList();
        }
        return new ForgetStatement(labels);
    }

    @Override
    public NumberRangeSet visitRangeset(@Nullable SFMLParser.RangesetContext ctx) {
        if (ctx == null) return NumberRangeSet.MAX_RANGE;
        NumberRangeSet numberRangeSet = new NumberRangeSet(ctx
                                                                   .range()
                                                                   .stream()
                                                                   .map(this::visitRange)
                                                                   .toArray(NumberRange[]::new));
        AST_NODE_CONTEXTS.add(new Pair<>(numberRangeSet, ctx));
        return numberRangeSet;
    }

    @Override
    public NumberRange visitRange(SFMLParser.RangeContext ctx) {
        var iter = ctx.number().stream().map(this::visitNumber).mapToLong(Number::value).iterator();
        var start = iter.next();
        if (iter.hasNext()) {
            var end = iter.next();
            NumberRange numberRange = new NumberRange(start, end);
            AST_NODE_CONTEXTS.add(new Pair<>(numberRange, ctx));
            return numberRange;
        } else {
            NumberRange numberRange = new NumberRange(start, start);
            AST_NODE_CONTEXTS.add(new Pair<>(numberRange, ctx));
            return numberRange;
        }
    }


    @Override
    public Limit visitRetentionLimit(SFMLParser.RetentionLimitContext ctx) {
        var retain = visitRetention(ctx.retention());
        Limit limit = new Limit(ResourceQuantity.UNSET, retain);
        AST_NODE_CONTEXTS.add(new Pair<>(limit, ctx));
        return limit;
    }

    @Override
    public Limit visitQuantityLimit(SFMLParser.QuantityLimitContext ctx) {
        var quantity = visitQuantity(ctx.quantity());
        Limit limit = new Limit(quantity, ResourceQuantity.UNSET);
        AST_NODE_CONTEXTS.add(new Pair<>(limit, ctx));
        return limit;
    }

    @Override
    public ResourceQuantity visitRetention(@Nullable SFMLParser.RetentionContext ctx) {
        if (ctx == null)
            return ResourceQuantity.UNSET;
        ResourceQuantity quantity = new ResourceQuantity(
                visitNumber(ctx.number()),
                ctx.EACH() != null
                ? ResourceQuantity.IdExpansionBehaviour.EXPAND
                : ResourceQuantity.IdExpansionBehaviour.NO_EXPAND
        );
        AST_NODE_CONTEXTS.add(new Pair<>(quantity, ctx));
        return quantity;
    }

    @Override
    public ResourceQuantity visitQuantity(@Nullable SFMLParser.QuantityContext ctx) {
        if (ctx == null) return ResourceQuantity.MAX_QUANTITY;
        ResourceQuantity quantity = new ResourceQuantity(
                visitNumber(ctx.number()),
                ctx.EACH() != null
                ? ResourceQuantity.IdExpansionBehaviour.EXPAND
                : ResourceQuantity.IdExpansionBehaviour.NO_EXPAND
        );
        AST_NODE_CONTEXTS.add(new Pair<>(quantity, ctx));
        return quantity;
    }

    @Override
    public DirectionQualifier visitSidequalifier(@Nullable SFMLParser.SidequalifierContext ctx) {
        if (ctx == null) return DirectionQualifier.NULL_DIRECTION;
        DirectionQualifier directionQualifier = new DirectionQualifier(
                EnumSet.copyOf(ctx.side().stream()
                                       .map(this::visitSide)
                                       .map(DirectionQualifier::lookup)
                                       .toList())
        );
        AST_NODE_CONTEXTS.add(new Pair<>(directionQualifier, ctx));
        return directionQualifier;
    }

    @Override
    public Side visitSide(SFMLParser.SideContext ctx) {
        Side side = Side.valueOf(ctx.getText().toUpperCase(Locale.ROOT));
        AST_NODE_CONTEXTS.add(new Pair<>(side, ctx));
        return side;
    }

    @Override
    public Block visitBlock(@Nullable SFMLParser.BlockContext ctx) {
        if (ctx == null) return new Block(Collections.emptyList());
        var statements = ctx
                .statement()
                .stream()
                .map(this::visit)
                .map(Statement.class::cast)
                .collect(Collectors.toList());
        Block block = new Block(statements);
        AST_NODE_CONTEXTS.add(new Pair<>(block, ctx));
        return block;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfml\ast\ResourceQuantity.java

````java
package ca.teamdman.sfml.ast;

public record ResourceQuantity(
        Number number,
        IdExpansionBehaviour idExpansionBehaviour
) implements ASTNode {
    @SuppressWarnings("DataFlowIssue")
    public static ResourceQuantity UNSET = new ResourceQuantity(null, IdExpansionBehaviour.NO_EXPAND);
    public static ResourceQuantity MAX_QUANTITY = new ResourceQuantity(
            new Number(Long.MAX_VALUE),
            IdExpansionBehaviour.NO_EXPAND
    );

    public ResourceQuantity add(ResourceQuantity quantity) {
        return new ResourceQuantity(
                number.add(quantity.number),
                idExpansionBehaviour
        );
    }

    public enum IdExpansionBehaviour {
        EXPAND,
        NO_EXPAND
    }

    @Override
    public String toString() {
        return number + (idExpansionBehaviour == IdExpansionBehaviour.EXPAND ? " EACH" : "");
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\jei\SFMJEIPlugin.java

````java
package ca.teamdman.sfm.client.jei;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.client.gui.screen.ManagerScreen;
import ca.teamdman.sfm.common.recipe.PrintingPressRecipe;
import ca.teamdman.sfm.common.registry.SFMBlocks;
import ca.teamdman.sfm.common.registry.SFMRecipeTypes;
import mezz.jei.api.IModPlugin;
import mezz.jei.api.JeiPlugin;
import mezz.jei.api.gui.handlers.IGuiContainerHandler;
import mezz.jei.api.registration.IGuiHandlerRegistration;
import mezz.jei.api.registration.IRecipeCatalystRegistration;
import mezz.jei.api.registration.IRecipeCategoryRegistration;
import mezz.jei.api.registration.IRecipeRegistration;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.Rect2i;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.crafting.RecipeManager;
import net.minecraft.world.level.block.Blocks;

import java.util.ArrayList;
import java.util.List;

@JeiPlugin
public class SFMJEIPlugin implements IModPlugin {
    @Override
    public ResourceLocation getPluginUid() {
        return new ResourceLocation(SFM.MOD_ID, "sfm");
    }

    @Override
    public void registerCategories(IRecipeCategoryRegistration registration) {
        registration.addRecipeCategories(
                new PrintingPressJEICategory(registration.getJeiHelpers()),
                new FallingAnvilJEICategory(registration.getJeiHelpers())
        );
    }

    @Override
    public void registerRecipeCatalysts(IRecipeCatalystRegistration registration) {
        registration.addRecipeCatalyst(
                new ItemStack(SFMBlocks.PRINTING_PRESS_BLOCK.get()),
                PrintingPressJEICategory.RECIPE_TYPE
        );
        registration.addRecipeCatalyst(
                new ItemStack(Blocks.ANVIL),
                FallingAnvilJEICategory.RECIPE_TYPE
        );
    }

    @Override
    public void registerRecipes(IRecipeRegistration registration) {
        List<PrintingPressRecipe> printingPressRecipes = new ArrayList<>();
        List<FallingAnvilRecipe> fallingAnvilRecipes = new ArrayList<>();
        var level = Minecraft.getInstance().level;
        assert level != null;
        RecipeManager recipeManager = level.getRecipeManager();
        recipeManager.getAllRecipesFor(SFMRecipeTypes.PRINTING_PRESS.get()).forEach(r -> {
            printingPressRecipes.add(r.value());
            fallingAnvilRecipes.add(new FallingAnvilFormRecipe(r.value()));
        });
        fallingAnvilRecipes.add(new FallingAnvilDisenchantRecipe());
        fallingAnvilRecipes.add(new FallingAnvilExperienceShardRecipe());
        registration.addRecipes(PrintingPressJEICategory.RECIPE_TYPE, printingPressRecipes);
        registration.addRecipes(FallingAnvilJEICategory.RECIPE_TYPE, fallingAnvilRecipes);
    }

    @Override
    public void registerGuiHandlers(IGuiHandlerRegistration registration) {
        registration.addGuiContainerHandler(ManagerScreen.class, new IGuiContainerHandler<>() {
            @Override
            public List<Rect2i> getGuiExtraAreas(ManagerScreen screen) {
                var buttons = screen.getButtonsForJEIExclusionZones();
                return buttons
                        .stream()
                        .filter(b -> b.visible)
                        .map(b -> new Rect2i(b.getX(), b.getY(), b.getWidth(), b.getHeight()))
                        .toList();
            }
        });
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\command\SFMCommand.java

````java
package ca.teamdman.sfm.common.command;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;
import net.minecraft.commands.Commands;
import net.minecraft.commands.arguments.blocks.BlockInput;
import net.minecraft.commands.arguments.blocks.BlockStateArgument;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.level.block.Block;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.event.RegisterCommandsEvent;

import static com.mojang.brigadier.Command.SINGLE_SUCCESS;

@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.FORGE, modid = SFM.MOD_ID)
public class SFMCommand {
    @SubscribeEvent
    public static void onRegisterCommand(final RegisterCommandsEvent event) {
        var command = Commands.literal("sfm");
        command.then(Commands.literal("bust_cable_network_cache")
                             .requires(source -> source.hasPermission(2))
                             .executes(ctx -> {
                                 SFM.LOGGER.info("Busting cable networks");
                                 CableNetworkManager.clear();
                                 return SINGLE_SUCCESS;
                             }));
        command.then(Commands.literal("show_bad_cable_cache_entries")
                             .requires(source -> source.hasPermission(2))
                             .then(Commands.argument("block", BlockStateArgument.block(event.getBuildContext()))
                                           .executes(ctx -> {
                                               ServerLevel level = ctx.getSource().getLevel();
                                               CableNetworkManager.getBadCableCachePositions(level).forEach(pos -> {
                                                   BlockInput block = BlockStateArgument
                                                           .getBlock(
                                                                   ctx,
                                                                   "block"
                                                           );
                                                   block.place(
                                                           level,
                                                           pos,
                                                           Block.UPDATE_ALL
                                                   );
                                               });
                                               return SINGLE_SUCCESS;
                                           })));
        event.getDispatcher().register(command);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\jei\FallingAnvilFormRecipe.java

````java
package ca.teamdman.sfm.client.jei;

import ca.teamdman.sfm.common.recipe.PrintingPressRecipe;

public class FallingAnvilFormRecipe extends FallingAnvilRecipe {
    public final PrintingPressRecipe PARENT;

    public FallingAnvilFormRecipe(PrintingPressRecipe parent) {
        this.PARENT = parent;
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ClientboundContainerExportsInspectionResultsPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.client.ClientStuff;
import net.minecraft.client.Minecraft;
import net.minecraft.client.player.LocalPlayer;
import net.minecraft.network.FriendlyByteBuf;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ClientboundContainerExportsInspectionResultsPacket(
        int windowId,
        String results
) {
    public static final int MAX_RESULTS_LENGTH = 20480;

    public static void encode(
            ClientboundContainerExportsInspectionResultsPacket msg, FriendlyByteBuf friendlyByteBuf
    ) {
        friendlyByteBuf.writeVarInt(msg.windowId());
        friendlyByteBuf.writeUtf(msg.results(), MAX_RESULTS_LENGTH);
    }

    public static ClientboundContainerExportsInspectionResultsPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ClientboundContainerExportsInspectionResultsPacket(
                friendlyByteBuf.readVarInt(),
                friendlyByteBuf.readUtf(MAX_RESULTS_LENGTH)
        );
    }

    public static void handle(
            ClientboundContainerExportsInspectionResultsPacket msg, NetworkEvent.Context context
    ) {
        context.enqueueWork(() -> {
            LocalPlayer player = Minecraft.getInstance().player;
            if (player == null) return;
            var container = player.containerMenu;
            if (container.containerId != msg.windowId) return;
            ClientStuff.showProgramEditScreen(msg.results, next -> {
            });
        });
        context.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\Constants.java

````java
package ca.teamdman.sfm.common;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.registry.SFMBlocks;
import ca.teamdman.sfm.common.registry.SFMItems;
import ca.teamdman.sfm.common.util.SFMUtils;
import net.minecraft.ChatFormatting;
import net.minecraft.client.resources.language.I18n;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.MutableComponent;
import net.minecraft.network.chat.contents.TranslatableContents;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Supplier;

public class Constants {
    public static final class LocalizationKeys {
        public static final LocalizationEntry PROGRAM_EDIT_SCREEN_TITLE = new LocalizationEntry(
                "gui.sfm.text_editor.title",
                "Text Editor"
        );
        public static final LocalizationEntry PROGRAM_EDIT_SCREEN_DONE_BUTTON_TOOLTIP = new LocalizationEntry(
                "gui.sfm.text_editor.done_button.tooltip",
                "Shift+Enter to submit"
        );
        public static final LocalizationEntry SAVE_CHANGES_CONFIRM_SCREEN_TITLE = new LocalizationEntry(
                "gui.sfm.save_changes_confirm.title",
                "Save changes"
        );
        public static final LocalizationEntry SAVE_CHANGES_CONFIRM_SCREEN_MESSAGE = new LocalizationEntry(
                "gui.sfm.save_changes_confirm.message",
                "Do you want to save before exiting?"
        );
        public static final LocalizationEntry SAVE_CHANGES_CONFIRM_SCREEN_YES_BUTTON = new LocalizationEntry(
                "gui.sfm.save_changes_confirm.yes_button",
                "Save changes"
        );
        public static final LocalizationEntry SAVE_CHANGES_CONFIRM_SCREEN_NO_BUTTON = new LocalizationEntry(
                "gui.sfm.save_changes_confirm.no_button",
                "Don't save"
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry MOD_NAME = new LocalizationEntry(
                "mod.name",
                "Super Factory Manager"
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference


        public static LocalizationEntry ITEM_GROUP       = new LocalizationEntry(
                "item_group.sfm.main",
                "Super Factory Manager"
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry CABLE_BLOCK = new LocalizationEntry(
                () -> SFMBlocks.CABLE_BLOCK.get().getDescriptionId(),
                () -> "Inventory Cable"
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry MANAGER_BLOCK = new LocalizationEntry(
                () -> SFMBlocks.MANAGER_BLOCK.get().getDescriptionId(),
                () -> "Factory Manager"
        );
        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry PRINTING_PRESS_BLOCK = new LocalizationEntry(
                () -> SFMBlocks.PRINTING_PRESS_BLOCK.get().getDescriptionId(),
                () -> "Printing Press"
        );

        public static final LocalizationEntry PRINTING_PRESS_JEI_CATEGORY_TITLE = new LocalizationEntry(
                "gui.jei.category.sfm.printing_press",
                "Printing Press"
        );

        public static final LocalizationEntry FALLING_ANVIL_JEI_CATEGORY_TITLE = new LocalizationEntry(
                "gui.jei.category.sfm.falling_anvil",
                "Falling Anvil"
        );

        public static final LocalizationEntry FALLING_ANVIL_JEI_CONSUMED = new LocalizationEntry(
                "gui.jei.category.sfm.falling_anvil.consumed",
                "Gets consumed"
        );
        public static final LocalizationEntry FALLING_ANVIL_JEI_NOT_CONSUMED = new LocalizationEntry(
                "gui.jei.category.sfm.falling_anvil.not_consumed",
                "Not consumed"
        );

        public static final LocalizationEntry PRINTING_PRESS_TOOLTIP = new LocalizationEntry(
                () -> SFMItems.PRINTING_PRESS_ITEM.get().getDescriptionId() + ".tooltip",
                () -> "Place with an air gap below a downward facing piston. Extend the piston to use."
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry TEST_BARREL_BLOCK = new LocalizationEntry(
                () -> SFMBlocks.TEST_BARREL_BLOCK.get().getDescriptionId(),
                () -> "Test Barrel"
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry WATER_TANK_BLOCK = new LocalizationEntry(
                () -> SFMBlocks.WATER_TANK_BLOCK.get().getDescriptionId(),
                () -> "Water Tank"
        );
        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry BATTERY_BLOCK = new LocalizationEntry(
                () -> SFMBlocks.BATTERY_BLOCK.get().getDescriptionId(),
                () -> "Battery (WIP)"
        );
        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry DISK_ITEM = new LocalizationEntry(
                () -> SFMItems.DISK_ITEM.get().getDescriptionId(),
                () -> "Factory Manager Program Disk"
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry EXPERIENCE_GOOP_ITEM = new LocalizationEntry(
                () -> SFMItems.EXPERIENCE_GOOP_ITEM.get().getDescriptionId(),
                () -> "Experience Goop"
        );
        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry EXPERIENCE_SHARD_ITEM = new LocalizationEntry(
                () -> SFMItems.EXPERIENCE_SHARD_ITEM.get().getDescriptionId(),
                () -> "Experience Shard"
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry FORM_ITEM = new LocalizationEntry(
                () -> SFMItems.FORM_ITEM.get().getDescriptionId(),
                () -> "Printing Form"
        );

        public static final LocalizationEntry DISK_ITEM_TOOLTIP_LABEL_HEADER = new LocalizationEntry(
                () -> SFMItems.DISK_ITEM.get().getDescriptionId() + ".tooltip.label_section.header",
                () -> "Labels"
        );
        public static final LocalizationEntry DISK_ITEM_TOOLTIP_LABEL = new LocalizationEntry(
                () -> SFMItems.DISK_ITEM.get().getDescriptionId() + ".tooltip.label_section.entry",
                () -> " - %s: %d blocks"
        );
        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry LABEL_GUN_ITEM = new LocalizationEntry(
                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId(),
                () -> "Label Gun"
        );
        public static final LocalizationEntry LABEL_GUN_CHAT_PULLED = new LocalizationEntry(
                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + ".chat.pulled",
                () -> "Pulled labels from the manager."
        );
        public static final LocalizationEntry LABEL_GUN_CHAT_PUSHED = new LocalizationEntry(
                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + ".chat.pushed",
                () -> "Pushed labels to the manager."
        );

        @SuppressWarnings("unused") // used by minecraft without us having to directly reference
        public static LocalizationEntry NETWORK_TOOL_ITEM = new LocalizationEntry(
                () -> SFMItems.NETWORK_TOOL_ITEM.get().getDescriptionId(),
                () -> "Network Tool"
        );

        public static final LocalizationEntry NETWORK_TOOL_ITEM_TOOLTIP_1 = new LocalizationEntry(
                () -> SFMItems.NETWORK_TOOL_ITEM.get().getDescriptionId() + ".tooltip.1",
                () -> "Shows cables through walls when held."
        );
        public static final LocalizationEntry NETWORK_TOOL_ITEM_TOOLTIP_2 = new LocalizationEntry(
                () -> SFMItems.NETWORK_TOOL_ITEM.get().getDescriptionId() + ".tooltip.2",
                () -> "Right click a block face to view diagnostic info."
        );
        public static final LocalizationEntry NETWORK_TOOL_ITEM_TOOLTIP_3 = new LocalizationEntry(
                () -> SFMItems.NETWORK_TOOL_ITEM.get().getDescriptionId() + ".tooltip.3",
                () -> ChatFormatting.GRAY
                      + "You might not need this, don't forget you can press "
                      + ChatFormatting.AQUA
                      + "%s"
                      + ChatFormatting.GRAY
                      + " in an inventory to toggle the inspector."
        );
        public static final LocalizationEntry LABEL_GUN_ITEM_TOOLTIP_1 = new LocalizationEntry(
                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + ".tooltip.1",
                () -> "Right click a Factory Manager to push labels."
        );
        public static final LocalizationEntry LABEL_GUN_ITEM_TOOLTIP_2 = new LocalizationEntry(
                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + ".tooltip.2",
                () -> "Right click a Factory Manager while sneaking to pull labels."
        );
        public static final LocalizationEntry LABEL_GUN_ITEM_TOOLTIP_3 = new LocalizationEntry(
                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + ".tooltip.3",
                () -> "Hold control to apply labels to blocks of the same type adjacent to cables."
        );
        public static final LocalizationEntry LABEL_GUN_ITEM_NAME_WITH_LABEL = new LocalizationEntry(
                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + ".with_label",
                () -> "Label Gun: \"%s\""
        );
        public static final LocalizationEntry WATER_TANK_ITEM_TOOLTIP_1 = new LocalizationEntry(
                () -> SFMBlocks.WATER_TANK_BLOCK.get().getDescriptionId() + ".tooltip.1",
                () -> "Requires two adjacent water sources"
        );
        public static final LocalizationEntry WATER_TANK_ITEM_TOOLTIP_2 = new LocalizationEntry(
                () -> SFMBlocks.WATER_TANK_BLOCK.get().getDescriptionId() + ".tooltip.2",
                () -> "More effective when also adjacent to other water tanks"
        );
        public static final LocalizationEntry LABEL_GUN_GUI_TITLE = new LocalizationEntry(
                "gui.sfm.title.labelgun",
                "Label Gun"
        );
        public static final LocalizationEntry PROGRAM_TEMPLATE_PICKER_GUI_WARNING_1 = new LocalizationEntry(
                "gui.sfm.program_template_picker.warning1",
                "Hitting \"Done\" will on the next screen will overwrite your existing program!"
        );
        public static final LocalizationEntry PROGRAM_TEMPLATE_PICKER_GUI_WARNING_2 = new LocalizationEntry(
                "gui.sfm.program_template_picker.warning2",
                "Hit <esc> to cancel instead."
        );
        public static final LocalizationEntry PROGRAM_TEMPLATE_PICKER_GUI_TITLE = new LocalizationEntry(
                "gui.sfm.title.program_template_picker",
                "Program Template Picker"
        );
        public static final LocalizationEntry LABEL_GUN_GUI_LABEL_PLACEHOLDER = new LocalizationEntry(
                "gui.sfm.label_gun.placeholder",
                "Label"
        );
        public static final LocalizationEntry LABEL_GUN_GUI_LABEL_BUTTON = new LocalizationEntry(
                "gui.sfm.label_gun.label_button",
                "%s (%d)"
        );

        public static final LocalizationEntry LABEL_GUN_GUI_PRUNE_BUTTON = new LocalizationEntry(
                "gui.sfm.label_gun.prune_button",
                "Prune"
        );
        public static final LocalizationEntry LABEL_GUN_GUI_CLEAR_BUTTON = new LocalizationEntry(
                "gui.sfm.label_gun.clear_button",
                "Clear"
        );


        public static final LocalizationEntry MANAGER_GUI_PASTE_FROM_CLIPBOARD_BUTTON_TOOLTIP = new LocalizationEntry(
                "gui.sfm.manager.tooltip.paste",
                "Press Ctrl+V to paste."
        );
        public static final LocalizationEntry MANAGER_GUI_EDIT_BUTTON_TOOLTIP = new LocalizationEntry(
                "gui.sfm.manager.edit_button.tooltip",
                "Press Ctrl+E to edit."
        );
        public static final LocalizationEntry MANAGER_GUI_EDIT_BUTTON = new LocalizationEntry(
                "gui.sfm.manager.edit_button",
                "Edit"
        );
        public static final LocalizationEntry MANAGER_GUI_RESET_BUTTON_TOOLTIP = new LocalizationEntry(
                "gui.sfm.manager.tooltip.reset",
                "Wipes ALL disk data."
        );
        public static final LocalizationEntry MANAGER_CONTAINER = new LocalizationEntry(
                "container.sfm.manager",
                "Factory Manager"
        );

        public static final LocalizationEntry PROGRAM_WARNING_UNUSED_LABEL = new LocalizationEntry(
                "program.sfm.warnings.unused_label",
                "Label \"%s\" is used in code but not assigned in the world."
        );
        public static final LocalizationEntry PROGRAM_WARNING_UNKNOWN_RESOURCE_TYPE = new LocalizationEntry(
                "program.sfm.warnings.unknown_resource_type",
                "The resource type \"%s\" in \"%s\" is not supported."
        );
        public static final LocalizationEntry PROGRAM_WARNING_UNKNOWN_RESOURCE_ID = new LocalizationEntry(
                "program.sfm.warnings.unknown_resource_id",
                "Resource \"%s\" was not found."
        );
        public static final LocalizationEntry PROGRAM_WARNING_UNDEFINED_LABEL = new LocalizationEntry(
                "program.sfm.warnings.undefined_label",
                "Label \"%s\" is assigned in the world but not defined in code."
        );
        public static final LocalizationEntry PROGRAM_WARNING_DISCONNECTED_LABEL = new LocalizationEntry(
                "program.sfm.warnings.disconnected_label",
                "Label \"%s\" is assigned in the world at %s but not connected by cables."
        );
        public static final LocalizationEntry PROGRAM_WARNING_CONNECTED_BUT_NOT_VIABLE_LABEL = new LocalizationEntry(
                "program.sfm.warnings.adjacent_but_disconnected_label",
                "Label \"%s\" is assigned in the world at %s and is connected by cables but is not detected as a valid inventory."
        );
        public static final LocalizationEntry PROGRAM_ERROR_COMPILE_FAILED = new LocalizationEntry(
                "program.sfm.error.compile_failed",
                "Failed to compile."
        );
        public static final LocalizationEntry PROGRAM_ERROR_LITERAL = new LocalizationEntry(
                "program.sfm.error.literal",
                "%s"
        );
        public static final LocalizationEntry PROGRAM_ERROR_MALFORMED_RESOURCE_TYPE = new LocalizationEntry(
                "program.sfm.error.malformed_resource_type",
                "Program has a malformed resource type \"%s\".\nReminder: Resource types must be literals, not wildcards."
        );
        public static final LocalizationEntry MANAGER_GUI_STATE_NO_PROGRAM = new LocalizationEntry(
                "gui.sfm.manager.state.no_program",
                "no program"
        );
        public static final LocalizationEntry MANAGER_GUI_STATE = new LocalizationEntry(
                "gui.sfm.manager.state",
                "State: %s"
        );

        public static final LocalizationEntry CONTAINER_INSPECTOR_SHOW_EXPORTS_BUTTON = new LocalizationEntry(
                "gui.sfm.container_inspector.show_exports_button",
                "Export Inspector"
        );
        public static final LocalizationEntry CONTAINER_INSPECTOR_MEKANISM_NULL_DIRECTION_WARNING = new LocalizationEntry(
                "gui.sfm.container_inspector.mekanism_null_direction_warning",
                "MEKANISM BLOCKS ARE READ-ONLY FROM THE NULL DIRECTION!!!!!!"
        );
        public static final LocalizationEntry CONTAINER_INSPECTOR_MEKANISM_MACHINE_INPUTS = new LocalizationEntry(
                "gui.sfm.container_inspector.mekanism_machine_inputs",
                "The following are based on the MACHINE'S input config"
        );
        public static final LocalizationEntry CONTAINER_INSPECTOR_MEKANISM_MACHINE_OUTPUTS = new LocalizationEntry(
                "gui.sfm.container_inspector.mekanism_machine_outputs",
                "The following are based on the MACHINE'S output config"
        );

        public static final LocalizationEntry CONTAINER_INSPECTOR_CONTAINER_SLOT_COUNT = new LocalizationEntry(
                "gui.sfm.container_inspector.container_slot_count",
                "Container Slots: %d"
        );
        public static final LocalizationEntry CONTAINER_INSPECTOR_INVENTORY_SLOT_COUNT = new LocalizationEntry(
                "gui.sfm.container_inspector.inventory_slot_count",
                "Inventory Slots: %d"
        );


        public static final LocalizationEntry MANAGER_GUI_PEAK_TICK_TIME = new LocalizationEntry(
                "gui.sfm.manager.peak_tick_time",
                "Peak tick time: %s ms"
        );
        public static final LocalizationEntry MANAGER_GUI_HOVERED_TICK_TIME = new LocalizationEntry(
                "gui.sfm.manager.hovered_tick_time",
                "Hovered tick time: %s ms"
        );
        public static final LocalizationEntry MANAGER_GUI_STATE_NO_DISK = new LocalizationEntry(
                "gui.sfm.manager.state.no_disk",
                "missing disk"
        );
        public static final LocalizationEntry MANAGER_GUI_STATE_RUNNING = new LocalizationEntry(
                "gui.sfm.manager.state.running",
                "running"
        );
        public static final LocalizationEntry MANAGER_GUI_STATE_INVALID_PROGRAM = new LocalizationEntry(
                "gui.sfm.manager.state.invalid_program",
                "invalid program"
        );
        public static final LocalizationEntry MANAGER_GUI_PASTE_FROM_CLIPBOARD_BUTTON = new LocalizationEntry(
                "gui.sfm.manager.button.paste_clipboard",
                "Paste from clipboard"
        );
        public static final LocalizationEntry MANAGER_GUI_COPY_TO_CLIPBOARD_BUTTON = new LocalizationEntry(
                "gui.sfm.manager.button.copy_to_clipboard",
                "Copy to clipboard"
        );
        public static final LocalizationEntry MANAGER_GUI_VIEW_EXAMPLES_BUTTON = new LocalizationEntry(
                "gui.sfm.manager.button.view_examples",
                "View examples"
        );
        public static final LocalizationEntry MANAGER_GUI_VIEW_EXAMPLES_BUTTON_TOOLTIP = new LocalizationEntry(
                "gui.sfm.manager.button.view_examples.tooltip",
                "Press Ctrl+Shift+E to view examples."
        );
        public static final LocalizationEntry MANAGER_GUI_RESET_BUTTON = new LocalizationEntry(
                "gui.sfm.manager.button.reset",
                "Reset"
        );

        public static final LocalizationEntry MANAGER_GUI_WARNING_BUTTON_TOOLTIP = new LocalizationEntry(
                "gui.sfm.manager.button.warning.tooltip",
                "Click to copy code with warnings and errors.\nShift-click to attempt to fix warnings."
        );

        public static final LocalizationEntry MANAGER_GUI_WARNING_BUTTON_TOOLTIP_READ_ONLY = new LocalizationEntry(
                "gui.sfm.manager.button.warning.tooltip.read_only",
                "Click to copy code with warnings and errors."
        );

        public static final LocalizationEntry MANAGER_GUI_STATUS_LOADED_CLIPBOARD = new LocalizationEntry(
                "gui.sfm.manager.status.loaded_clipboard",
                "Loaded from clipboard!"
        );
        public static final LocalizationEntry MANAGER_GUI_STATUS_SAVED_CLIPBOARD = new LocalizationEntry(
                "gui.sfm.manager.status.saved_clipboard",
                "Saved to clipboard!"
        );
        public static final LocalizationEntry MANAGER_GUI_STATUS_RESET = new LocalizationEntry(
                "gui.sfm.manager.status.reset",
                "Reset program and labels!"
        );
        public static final LocalizationEntry MANAGER_GUI_STATUS_FIX = new LocalizationEntry(
                "gui.sfm.manager.status.fix",
                "Cleaning up labels!"
        );

        public static final LocalizationEntry GUI_ADVANCED_TOOLTIP_HINT = new LocalizationEntry(
                "gui.sfm.advanced.tooltip.hint",
                ChatFormatting.GRAY + "Hold " + ChatFormatting.AQUA + "%s" + ChatFormatting.GRAY + " for more info"
        );

        public static final LocalizationEntry MORE_HOVER_INFO_KEY = new LocalizationEntry(
                "key.sfm.more_info",
                "Show More Item Hover Info"
        );

        public static final LocalizationEntry CONTAINER_INSPECTOR_TOGGLE_KEY = new LocalizationEntry(
                "key.sfm.container_inspector.activation_key",
                "Toggle Container Inspector"
        );

        public static final LocalizationEntry SFM_KEY_CATEGORY = new LocalizationEntry(
                "key.categories.sfm",
                "Super Factory Manager"
        );

        public static List<LocalizationEntry> getEntries() {
            // use reflection to get all the public static LocalizationEntry fields
            var rtn = new ArrayList<LocalizationEntry>();
            for (var field : Constants.LocalizationKeys.class.getFields()) {
                if (field.getType() == LocalizationEntry.class) {
                    try {
                        rtn.add((LocalizationEntry) field.get(null));
                    } catch (IllegalAccessException e) {
                        SFM.LOGGER.error("Failed reading entry field", e);
                    }
                }
            }
            return rtn;
        }

        public record LocalizationEntry(
                Supplier<String> key,
                Supplier<String> value
        ) {
            public LocalizationEntry(String key, String value) {
                this(() -> key, () -> value);
            }

            public TranslatableContents get(Object... args) {
                return SFMUtils.getTranslatableContents(key.get(), args);
            }

            public TranslatableContents get() {
                return SFMUtils.getTranslatableContents(key.get());
            }

            public String getString() {
                return I18n.get(key.get());
            }

            public String getString(Object... args) {
                return I18n.get(key.get(), args);
            }

            public MutableComponent getComponent() {
                return Component.translatable(key.get());
            }

            public MutableComponent getComponent(Object... args) {
                return Component.translatable(key.get(), args);
            }
        }
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\registry\package-info.java

````java
@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.client.registry;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\SFMMekanismCompat.java

````java
package ca.teamdman.sfm.common.compat;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.Constants;
import ca.teamdman.sfm.common.registry.SFMResourceTypes;
import ca.teamdman.sfm.common.resourcetype.*;
import ca.teamdman.sfm.common.resourcetype.exclude.GasResourceType;
import ca.teamdman.sfm.common.resourcetype.exclude.InfuseResourceType;
import ca.teamdman.sfm.common.resourcetype.exclude.PigmentResourceType;
import ca.teamdman.sfm.common.resourcetype.exclude.SlurryResourceType;
import ca.teamdman.sfml.ast.DirectionQualifier;
import mekanism.api.RelativeSide;
import mekanism.common.lib.transmitter.TransmissionType;
import mekanism.common.tile.component.TileComponentConfig;
import mekanism.common.tile.component.config.ConfigInfo;
import mekanism.common.tile.component.config.DataType;
import mekanism.common.tile.interfaces.ISideConfiguration;
import net.minecraft.core.Direction;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

public class SFMMekanismCompat {
    @SuppressWarnings("DataFlowIssue")
    public static Optional<ResourceType<?, ?, ?>> getResourceType(TransmissionType trans) {
        return switch (trans) {
            case ITEM -> Optional.of(SFMResourceTypes.ITEM.get());
            case FLUID -> Optional.of(SFMResourceTypes.FLUID.get());
            case GAS -> Optional.of(SFMResourceTypes.DEFERRED_TYPES
                                            .get(new ResourceLocation(SFM.MOD_ID, "gas")));
            case INFUSION -> Optional.of(SFMResourceTypes.DEFERRED_TYPES
                                                 .get(new ResourceLocation(SFM.MOD_ID, "infusion")));
            case PIGMENT -> Optional.of(SFMResourceTypes.DEFERRED_TYPES
                                                .get(new ResourceLocation(SFM.MOD_ID, "pigment")));
            case SLURRY -> Optional.of(SFMResourceTypes.DEFERRED_TYPES
                                               .get(new ResourceLocation(SFM.MOD_ID, "slurry")));
            default -> Optional.empty();
        };
    }

    public static String gatherInspectionResults(BlockEntity blockEntity) {
        if (!(blockEntity instanceof ISideConfiguration sideConfiguration)) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        sb.append("-- Mekanism stuff\n");
        TileComponentConfig config = sideConfiguration.getConfig();
        for (TransmissionType type : TransmissionType.values()) {
            getResourceType(type)
                    .flatMap(SFMResourceTypes.DEFERRED_TYPES::getResourceKey)
                    .ifPresent(resourceTypeKey -> {
                        ConfigInfo info = config.getConfig(type);
                        if (info != null) {
                            Set<Direction> outputSides = info.getSides(DataType::canOutput);
                            if (!outputSides.isEmpty()) {
                                sb
                                        .append("-- ")
                                        .append(Constants.LocalizationKeys.CONTAINER_INSPECTOR_MEKANISM_MACHINE_OUTPUTS.getString())
                                        .append("\n");
                                sb.append("INPUT ").append(resourceTypeKey.location()).append(":: FROM target ");
                                sb.append(outputSides
                                                  .stream()
                                                  .map(DirectionQualifier::directionToString)
                                                  .collect(Collectors.joining(", ")));
                                sb.append(" SIDE\n");
                            }

                            Set<Direction> inputSides = new HashSet<>();
                            for (RelativeSide side : RelativeSide.values()) {
                                DataType dataType = info.getDataType(side);
                                if (dataType == DataType.INPUT
                                    || dataType == DataType.INPUT_1
                                    || dataType == DataType.INPUT_2
                                    || dataType == DataType.INPUT_OUTPUT) {
                                    inputSides.add(side.getDirection(sideConfiguration.getDirection()));
                                }
                            }
                            if (!inputSides.isEmpty()) {
                                sb
                                        .append("-- ")
                                        .append(Constants.LocalizationKeys.CONTAINER_INSPECTOR_MEKANISM_MACHINE_INPUTS.getString())
                                        .append("\n");
                                sb.append("OUTPUT ").append(resourceTypeKey.location()).append(":: TO target ");
                                sb.append(inputSides
                                                  .stream()
                                                  .map(DirectionQualifier::directionToString)
                                                  .collect(Collectors.joining(", ")));
                                sb.append(" SIDE\n");
                            }
                        }
                    });
        }
        return sb.toString();
    }

    public static void register(DeferredRegister<ResourceType<?, ?, ?>> types) {
        types.register(
                "gas",
                GasResourceType::new
        );
        types.register(
                "infusion",
                InfuseResourceType::new
        );

        types.register(
                "pigment",
                PigmentResourceType::new
        );
        types.register(
                "slurry",
                SlurryResourceType::new
        );
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\client\gui\screen\ExtendedButtonWithTooltip.java

````java
package ca.teamdman.sfm.client.gui.screen;

import net.minecraft.client.gui.components.Tooltip;
import net.minecraft.network.chat.Component;
import net.neoforged.neoforge.client.gui.widget.ExtendedButton;

public class ExtendedButtonWithTooltip extends ExtendedButton {
    public ExtendedButtonWithTooltip(
            int xPos,
            int yPos,
            int width,
            int height,
            Component displayString,
            OnPress handler,
            Tooltip tooltip
    ) {
        super(xPos, yPos, width, height, displayString, handler);
        setTooltip(tooltip);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundDiskItemSetProgramPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.item.DiskItem;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.world.InteractionHand;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ServerboundDiskItemSetProgramPacket(
        String programString,
        InteractionHand hand
) {

    public static void encode(ServerboundDiskItemSetProgramPacket msg, FriendlyByteBuf buf) {
        buf.writeUtf(msg.programString, Program.MAX_PROGRAM_LENGTH);
        buf.writeEnum(msg.hand);
    }

    public static ServerboundDiskItemSetProgramPacket decode(
            FriendlyByteBuf buf
    ) {
        return new ServerboundDiskItemSetProgramPacket(
                buf.readUtf(Program.MAX_PROGRAM_LENGTH),
                buf.readEnum(InteractionHand.class)
        );
    }

    public static void handle(
            ServerboundDiskItemSetProgramPacket msg, NetworkEvent.Context ctx
    ) {
        ctx.enqueueWork(() -> {
            var sender = ctx.getSender();
            if (sender == null) {
                return;
            }
            var stack = sender.getItemInHand(msg.hand);
            if (stack.getItem() instanceof DiskItem) {
                DiskItem.setProgram(stack, msg.programString);
                DiskItem.updateDetails(stack, null);
            }

        });
        ctx.setPacketHandled(true);
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMBlocks.java

````java
package ca.teamdman.sfm.common.registry;

import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.block.*;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.level.block.Block;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.function.Supplier;


public class SFMBlocks {
    private static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(BuiltInRegistries.BLOCK, SFM.MOD_ID);
    public static final Supplier<Block> MANAGER_BLOCK = BLOCKS.register("manager", ManagerBlock::new);
    public static final Supplier<Block> PRINTING_PRESS_BLOCK = BLOCKS.register(
            "printing_press",
            PrintingPressBlock::new
    );
    public static final Supplier<Block> WATER_TANK_BLOCK = BLOCKS.register("water_tank", WaterTankBlock::new);
    public static final Supplier<Block> CABLE_BLOCK = BLOCKS.register("cable", CableBlock::new);
    public static final Supplier<Block> BATTERY_BLOCK = BLOCKS.register("battery", BatteryBlock::new);
    public static final Supplier<Block> TEST_BARREL_BLOCK = BLOCKS.register("test_barrel", TestBarrelBlock::new);

    public static void register(IEventBus bus) {
        BLOCKS.register(bus);
    }

}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\command\package-info.java

````java

@ParametersAreNonnullByDefault
@MethodsReturnNonnullByDefault
@FieldsAreNonnullByDefault
package ca.teamdman.sfm.common.command;

import net.minecraft.FieldsAreNonnullByDefault;
import net.minecraft.MethodsReturnNonnullByDefault;

import javax.annotation.ParametersAreNonnullByDefault;
````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\registry\SFMBlockEntities.java

````java
package ca.teamdman.sfm.common.registry;


import ca.teamdman.sfm.SFM;
import ca.teamdman.sfm.common.blockentity.BatteryBlockEntity;
import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.blockentity.PrintingPressBlockEntity;
import ca.teamdman.sfm.common.blockentity.WaterTankBlockEntity;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.function.Supplier;

@SuppressWarnings("DataFlowIssue")
public final class SFMBlockEntities {

    private static final DeferredRegister<BlockEntityType<?>> BLOCK_ENTITY_TYPES = DeferredRegister.create(
            BuiltInRegistries.BLOCK_ENTITY_TYPE,
            SFM.MOD_ID
    );

    public static void register(IEventBus bus) {
        BLOCK_ENTITY_TYPES.register(bus);
    }

    public static final Supplier<BlockEntityType<ManagerBlockEntity>> MANAGER_BLOCK_ENTITY = BLOCK_ENTITY_TYPES.register(
            "manager",
            () -> BlockEntityType.Builder
                    .of(ManagerBlockEntity::new, SFMBlocks.MANAGER_BLOCK.get())
                    .build(null)
    );
    public static final Supplier<BlockEntityType<PrintingPressBlockEntity>> PRINTING_PRESS_BLOCK_ENTITY = BLOCK_ENTITY_TYPES.register(
            "printing_press",
            () -> BlockEntityType.Builder
                    .of(PrintingPressBlockEntity::new, SFMBlocks.PRINTING_PRESS_BLOCK.get())
                    .build(null)
    );

    public static final Supplier<BlockEntityType<WaterTankBlockEntity>> WATER_TANK_BLOCK_ENTITY = BLOCK_ENTITY_TYPES.register(
            "water_tank",
            () -> BlockEntityType.Builder
                    .of(WaterTankBlockEntity::new, SFMBlocks.WATER_TANK_BLOCK.get())
                    .build(null)
    );

    public static final Supplier<BlockEntityType<BatteryBlockEntity>> BATTERY_BLOCK_ENTITY = BLOCK_ENTITY_TYPES.register(
            "battery",
            () -> BlockEntityType.Builder
                    .of(BatteryBlockEntity::new, SFMBlocks.BATTERY_BLOCK.get())
                    .build(null)
    );


}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\net\ServerboundManagerProgramPacket.java

````java
package ca.teamdman.sfm.common.net;

import ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;
import ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;
import ca.teamdman.sfm.common.registry.SFMPackets;
import ca.teamdman.sfml.ast.Program;
import net.minecraft.core.BlockPos;
import net.minecraft.network.FriendlyByteBuf;
import net.neoforged.neoforge.network.NetworkEvent;

import java.util.function.Supplier;

public record ServerboundManagerProgramPacket(
        int windowId,
        BlockPos pos,
        String program
) {

    public static void encode(ServerboundManagerProgramPacket msg, FriendlyByteBuf friendlyByteBuf) {
        friendlyByteBuf.writeVarInt(msg.windowId());
        friendlyByteBuf.writeBlockPos(msg.pos());
        friendlyByteBuf.writeUtf(msg.program(), Program.MAX_PROGRAM_LENGTH);
    }

    public static ServerboundManagerProgramPacket decode(FriendlyByteBuf friendlyByteBuf) {
        return new ServerboundManagerProgramPacket(
                friendlyByteBuf.readVarInt(),
                friendlyByteBuf.readBlockPos(),
                friendlyByteBuf.readUtf(Program.MAX_PROGRAM_LENGTH)
        );
    }

    public static void handle(ServerboundManagerProgramPacket msg, NetworkEvent.Context context) {
        SFMPackets.handleServerboundContainerPacket(
                context,
                ManagerContainerMenu.class,
                ManagerBlockEntity.class,
                msg.pos,
                msg.windowId,
                (menu, manager) -> manager.setProgram(msg.program())
        );
    }
}

````



## D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\exclude\PigmentResourceType.java

````java
package ca.teamdman.sfm.common.resourcetype.exclude;

import ca.teamdman.sfm.common.resourcetype.ResourceType;
import mekanism.api.Action;
import mekanism.api.MekanismAPI;
import mekanism.api.chemical.pigment.IPigmentHandler;
import mekanism.api.chemical.pigment.Pigment;
import mekanism.api.chemical.pigment.PigmentStack;
import net.minecraft.core.Registry;
import net.neoforged.neoforge.common.capabilities.Capability;
import net.neoforged.neoforge.common.capabilities.CapabilityManager;
import net.neoforged.neoforge.common.capabilities.CapabilityToken;
import org.apache.commons.lang3.NotImplementedException;

public class PigmentResourceType extends ResourceType<PigmentStack, Pigment, IPigmentHandler> {
    public static final Capability<IPigmentHandler> CAP = CapabilityManager.get(new CapabilityToken<>() {
    });

    public PigmentResourceType() {
        super(CAP);
    }

    @Override
    public long getAmount(PigmentStack stack) {
        return stack.getAmount();
    }

    @Override
    public PigmentStack getStackInSlot(IPigmentHandler handler, int slot) {
        return handler.getChemicalInTank(slot);
    }

    @Override
    public PigmentStack extract(IPigmentHandler handler, int slot, long amount, boolean simulate) {
        return handler.extractChemical(slot, amount, simulate ? Action.SIMULATE : Action.EXECUTE);
    }

    @Override
    public int getSlots(IPigmentHandler handler) {
        return handler.getTanks();
    }

    @Override
    public long getMaxStackSize(PigmentStack stack) {
        return Long.MAX_VALUE;
    }

    @Override
    public long getMaxStackSize(IPigmentHandler handler, int slot) {
        return handler.getTankCapacity(slot);
    }

    @Override
    public PigmentStack insert(
            IPigmentHandler handler,
            int slot,
            PigmentStack stack,
            boolean simulate
    ) {
        return handler.insertChemical(slot, stack, simulate ? Action.SIMULATE : Action.EXECUTE);
    }

    @Override
    public boolean isEmpty(PigmentStack stack) {
        return stack.isEmpty();
    }

    @Override
    public PigmentStack getEmptyStack() {
        return PigmentStack.EMPTY;
    }

    @Override
    public boolean matchesStackType(Object o) {
        return o instanceof PigmentStack;
    }

    @Override
    public boolean matchesCapabilityType(Object o) {
        return o instanceof IPigmentHandler;
    }


    @Override
    public Registry<Pigment> getRegistry() {
        throw new NotImplementedException();
//        return MekanismAPI.pigmentRegistry();
    }

    @Override
    public Pigment getItem(PigmentStack stack) {
        return stack.getType();
    }

    @Override
    public PigmentStack copy(PigmentStack stack) {
        return stack.copy();
    }

    @Override
    protected PigmentStack setCount(PigmentStack stack, long amount) {
        stack.setAmount(amount);
        return stack;
    }
}

````


```https://neoforged.net/news/2023-retrospection/

2023: The Good, The Bad... and The Fork
NeoForged Team avatar NeoForged Team  January 01, 2024News
2023 was certainly an eventful year for the Forge community. 😅

Now that we’re entering 2024, it’s time we, the NeoForged team, do some retrospection on what’s happened in the past 6 months.

The Fork
Let’s begin with addressing the elephant in the room: who even are we?

NeoForge is a fork of the Minecraft Forge project. It was officially announced (ahead of schedule) on July 12, 2023, and nearly everyone from the original Forge team has joined NeoForged, with one obvious exception: LexManos.

There were many motivations and reasons which caused the fork; the most obvious ones were disagreements between the team (particularly the triage team) and the management. Some of the lesser reasons were the freedom to play around with and refactor much of the internal structure and surrounding infrastructure, from the modding API to the modloading system. These changes diverge drastically with Forge, which historically has held strict stances against changes to certain areas and against larger reworks in general, so starting with a “cleaner” slate was easier.

The Good
Our team has grown by 6 members, but we are still in search of more members such as maintainers of our repositories. (Interested? Apply by filling up our application form.)

Since the fork, we have worked on improving several areas of the codebase. For instance, we have rewritten our Gradle plugin and now provide support for Parchment by default.

And as a result, we have made various changes to the NeoForge API:

Our first refactors were suffered (in the good sense of the word) by EventBus (our fork of EventBus), improving its performance and internals, alongside some modder-facing benefits like preventing (accidentally) listening to abstract classes;
In 1.20.2, the first major overhaul landed: the registry system was significantly overhauled (#257), simplifying its internals and improving consistency with vanilla;
Since 1.20.2 we are shipping MixinExtras by default (#303) so that modders can write more compatible mixins;
Transitioning to 1.20.3, the Capabilities system has been reworked (#73) as our second major overhaul, splitting them into data attachments and API providers, and addressing some long-standing flaws of the old system (for example, the old system didn’t support Block capabilities. Yes, you can now use your favourite pipe mod to extract fluids from cauldrons);
1.20.4 was full of changes too:

A test framework (#291) was added, making the process of testing Neo features more straightforward, and integrating nicely with Mojang’s GameTest system, improving as such the long-term stability of the platform. This framework will be made available to mods in the future;
A way for mods to mark themselves as incompatible with other mods was also introduced (#397);
The chunk pre-generation command /neoforged generate (#364) was faced with various improvements, especially performance ones. (For those unaware, the command can be used by server owners to pre-generate chunks, so gameplay doesn’t cause worldgen between all players simultaneously.) We would like to thank Jasmine and Gegy for allowing us to use their mod as a basis for the new command;
We have set up a Crowdin project where you can submit translations for different languages (and request new languages to be translated to); and
Our third major overhaul: The Networking Refactor.
We have additionally made several performance improvements to ModLauncher and its sister projects, including work on reducing start-up times.

These changes are accompanied by some major infrastructure changes too:

We have also introduced a system for Publishing PRs to GitHub Packages that will make testing changes easier (for users and modders) before they’re merged properly into the version everyone uses.
Most (if not all, baring one exception) of our projects are now built with GitHub Actions.
We’re currently planning to overhaul our infrastructure to a new server setup in the somewhat-near future.
On the Discord server side, we relaxed our rules regarding coremods and older versions; you can now discuss and receive support for those freely. Additionally, discussion of other loaders is no longer banned—it’s encouraged even, as long as it is productive. After all, NeoForge doesn’t exist in a vacuum, and all APIs have their objective downsides and upsides.

Adoption
Even though it is too early to draw conclusions (as 1.20.1 is the de facto target for modpacks in the 1.20 lifecycle), we are seeing more and more mods using NeoForge starting with 1.20.4.

We are also happy to report that CurseForge, Modrinth, Prism and FTB have all added support for NeoForge in their launchers, which we’re grateful for!

Time for some stats - in classic Wrapped style
NeoForged has obviously not existed for a full year, but here are some stats on the 173 days since our public departure in 2023:

We have served an average of a terabyte’s (1000 gigabytes) worth of Maven artifacts every month, with 10 million requests just in December.
Over 200 PRs have been merged. That’s more than a PR per day!
Over 95 issues have been closed as completed. That’s one every two days!
The bad
The world, however, isn’t only pink and bright. We’ve made mistakes, and we own up to them.

We apologise for the sudden, disorganized and confusing rebranding of the Discord server. For reasons not worth going into (nor relevant in this post), we had to go public months before we anticipated, so we were caught off guard. It was a mess, and if we could turn back time and do it better, we would.

We also apologise for not providing the stable 1.20.1 environment we promised. After 1.20.2 was released, we neglected 1.20.1 and still are. Development efforts on 1.20.1 are better spent on Forge rather than NeoForge.

Documentation (or lack thereof) is something Forge has always had problems with, and we too suffer from a pressing lack of documentation all around the toolchain and the API too. We have made several changes in the past months, while letting our existing documentation slowly get outdated. In 2024, we’ll look at improving this sensitive yet important area of the project.

We had to find our pace one way or another, but in the end we’re sorry you all had to see us fight and argue. We hope to improve and learn from our mistakes in the year that comes.

So… what’s next?
We don’t have a lot of plans for 2024, but some of the more pressing matters include:

With all refactors taken care of, a stable 1.20.4 release can be expected within the first two weeks of 2024, if not sooner;
A rework of FML—a beast of complexity that we are trying to simplify—has been due for a long while. You can follow the progress and provide your ideas in the FML Clean-up Discord thread;
We are collaborating with Mumfrey to hopefully get Mixin out of its 2-year-long stagnation. If that doesn’t pan out, we will be open to alternative;
We are working on improving the caching of NeoGradle, to reduce build times;
1.21 is expected to unify the tag namespace between NeoForge and Fabric through TelepathicGrunt’s efforts via the unification PR;
As we’ve already mentioned: docs, docs, and more docs!
Some potential changes to the transfer (IItemHandler, IFluidHandler, IEnergyStorage) capabilities are also being discussed in the Transfer rework thread;
Replacing JavaScript coremods with Java-based coremods is also on the table, at the Coremod changes thread.
As always, we appreciate your input, and we’d be grateful if you would provide us with feedback or ideas in our Discord server or in a GitHub Discussion.

…and thanks for all the fish
Now, for the fun part you were all waiting for: the thanking!

NeoForge wouldn’t have been possible without the team members that left Forge with us, for which we thank them.

We thank all of our contributors to our many projects during the last 6 months, and we wholeheartedly thank YOU for your support - our achievements are thanks to the community feedback and the people who give us the chance to make errors and bounce back, only to grow stronger and stronger.

Happy 2024, everyone, and as always, happy porting! 🎉
```

```https://neoforged.net/news/20.3capability-rework/
The Capability rework
Technici4n avatar Technici4n  December 05, 2023News
Introduction
Our initial 20.3 release comes with a fundamental redesign of the capability system, with the goal of fixing all the issues that were found in the previous iteration after years of usage.

Most importantly, there are now two different systems to replace what was previously known as “capabilities”:

Data attachments allow adding arbitrary data to block entities, chunks, entities, and item stacks.
Capabilities allow querying behavior instances from blocks, entities, and item stacks.
Data attachments
The attachment system allows mods to attach arbitrary data objects to block entities, chunks, entities, and stacks.

To use the system, you need to register an AttachmentType. The attachment type contains:

a default value supplier to create the instance when the data is first accessed, or to compare stacks that have the data and stacks that don’t have it;
an optional serializer if the attachment should be persisted;
additional configuration options for the attachment, for example the copyOnDeath flag.
There are a few ways to provide an attachment serializer: directly implementing IAttachmentSerializer, implementing INBTSerializable and using the static AttachmentSerializer.serializable() method to create the builder, or providing a codec to the builder. (This latter option is not recommended for item stacks due to relatively slowness).

In any case, we recommend using a DeferredRegister for registration:

// Create the DeferredRegister for attachment types
private static final DeferredRegister<AttachmentType<?>> ATTACHMENT_TYPES = DeferredRegister.create(NeoForgeRegistries.Keys.ATTACHMENT_TYPES, MOD_ID);

// Serialization via INBTSerializable
private static final Supplier<AttachmentType<ItemStackHandler>> HANDLER = ATTACHMENT_TYPES.register(
        "handler", () -> AttachmentType.serializable(() -> new ItemStackHandler(1)).build());
// Serialization via codec
private static final Supplier<AttachmentType<Integer>> MANA = ATTACHMENT_TYPES.register(
        "mana", () -> AttachmentType.builder(() -> 0).serialize(Codec.INT).build());
// No serialization
private static final Supplier<AttachmentType<SomeCache>> SOME_CACHE = ATTACHMENT_TYPES.register(
        "some_cache", () -> AttachmentType.builder(() -> new SomeCache()).build()
);

// Don't forget to register the DeferredRegister to your mod bus:
ATTACHMENT_TYPES.register(modBus);
Once the attachment type is registered, it can be used on any holder object. Calling getData if no data is present will attach a new default instance.

// Get the ItemStackHandler if it already exists, else attach a new one:
ItemStackHandler stackHandler = stack.getData(HANDLER);
// Get the current player mana if it is available, else attach 0:
int playerMana = player.getData(MANA);
// And so on...
If attaching a default instance is not desired, a hasData check can be added:

// Check if the stack has the HANDLER attachment before doing anything.
if (stack.hasData(HANDLER)) {
    ItemStackHandler stackHandler = stack.getData(HANDLER);
    // Do something with stack.getData(HANDLER).
}
The data can also be updated with setData:

// Increment mana by 10.
player.setData(MANA, player.getData(MANA) + 10);
Usually, block entities and chunks need to be marked as dirty when they are modified (with setChanged and setUnsaved(true)). This is done automatically for calls to setData:

chunk.setData(MANA, chunk.getData(MANA) + 10); // will call setUnsaved automatically
but if you modify some data that you obtained from getData then you must mark block entities and chunks as dirty explicitly:

var mana = chunk.getData(MUTABLE_MANA);
mana.set(10);
chunk.setUnsaved(true); // must be done manually because we did not use setData
Before we move on to capabilities, here are a few points to take note of with respect to the data attachment system:

Level attachments were removed: please use SavedData instead.
Serializable item stack attachments are always synced with the client now.
Entity attachments are copied when a player is teleported back from the end. (Previously this was not the case).
Entity attachments that have copyOnDeath set in their builder will automatically be copied on player death (and on mob conversion).
Future work for attachments
We have plans to work on the following improvements to the attachment system over the coming weeks:

Attachments in recipe JSONs: Just like we add support for count and NBT to recipe results, we will add support to specify data attachments in recipe result JSONs.
Syncable data attachments: Currently, all serializable item stack attachments are synced automatically from the logical server to the logical client. We will look into opt-in syncing for block entity, chunk, and entity attachments in the future.
Custom copy handler: Currently, all data attachments are copied by serializing to NBT and then deserializing a new copy. This is a good default, but we want to allow modders to provide their own copy implementation for better performance.
We are open to other suggestions as well, don’t hesitate to get in touch!

Capabilities
Capabilities are designed to separate what a block, entity or item stack can do from how it does it. If you are wondering whether capabilities are the right tool for a job, ask yourself the following questions:

Do I only care about what a block, entity or item stack can do, but not about how it does it?
Is the what, the behavior, only available for some blocks, entities, or item stacks, but not all of them?
Is the how, the implementation of that behavior, dependent on the specific block, entity or item stack?
Here are a few examples of good capability usage:

“I want to count how many items are in some entity, but I do not know how the entity might store them.” - Yes, use the IItemHandler capability.
“I want to fill some item stack with power, but I do not know how the item stack might store it.” - Yes, use the IEnergyStorage capability.
“I want to apply some color to whatever block a player is currently targeting, but I do not know how the block will be transformed”. - Yes. NeoForge does not provide a capability to color blocks, but you can implement one yourself.
Here is an example of discouraged capability usage:

“I want to check if an entity is within the range of my machine.” - No, use a helper method instead.
NeoForge supports capabilities for blocks, entities, and item stacks.

Capabilities allow looking up implementations of some APIs with some dispatching logic. The following kinds of capabilities are implemented in NeoForge:

BlockCapability: capabilities for blocks and block entities; behavior depends on the specific Block.
EntityCapability: capabilities for entities: behavior dependends on the specific EntityType.
ItemCapability: capabilities for item stacks: behavior depends on the specific Item.
Creating capabilities
NeoForge already defines common capabilities, which we recommend for compatibility with other mods. For example:

// Standard item handler BlockCapability
Capabilities.ItemHandler.BLOCK
// Standard item handler ItemCapability
Capabilities.ItemHandler.ITEM

// See the `Capabilities` class for the full list.
If these are not sufficient, you can create your own capabilities. Creating a capability is a single function call, and the resulting object should be stored in a static final field. The following parameters must be provided:

The name of the capability. Creating a capability with the same name multiple times will always return the same object. Capabilities with different names are completely independent, and can be used for different purposes.
The behavior type that is being queried. This is the T type parameter.
The type for additional context in the query. This is the C type parameter.
For example, here is how a capability for side-aware block IItemHandlers might be declared:

public static final BlockCapability<IItemHandler, @Nullable Direction> ITEM_HANDLER_BLOCK =
    BlockCapability.create(
        // Provide a name to uniquely identify the capability.
        new ResourceLocation("mymod", "item_handler"),
        // Provide the queried type. Here, we want to look up `IItemHandler` instances.
        IItemHandler.class,
        // Provide the context type. We will allow the query to receive an extra `Direction side` parameter.
        Direction.class);
A @Nullable Direction is so common for blocks that there is a dedicated helper:

public static final BlockCapability<IItemHandler, @Nullable Direction> ITEM_HANDLER_BLOCK =
    BlockCapability.createSided(
        // Provide a name to uniquely identify the capability.
        new ResourceLocation("mymod", "item_handler"),
        // Provide the queried type. Here, we want to look up `IItemHandler` instances.
        IItemHandler.class);
If no context is required, Void should be used. There is also a dedicated helper for context-less capabilities:

public static final BlockCapability<IItemHandler, Void> ITEM_HANDLER_NO_CONTEXT =
    BlockCapability.createVoid(
        // Provide a name to uniquely identify the capability.
        new ResourceLocation("mymod", "item_handler_no_context"),
        // Provide the queried type. Here, we want to look up `IItemHandler` instances.
        IItemHandler.class);
For entities and item stacks, similar methods exist in EntityCapability and ItemCapability respectively.

Querying capabilities
Once we have our BlockCapability, EntityCapability, or ItemCapability object in a static field, we can query a capability.

Entities and item stacks have essentially the same API as before, but with a @Nullable T return type instead of LazyOptional<T>. Simply call getCapability with the capability object and the context:

var object = entity.getCapability(CAP, context);
if (object != null) {
    // Use object
}
var object = stack.getCapability(CAP, context);
if (object != null) {
    // Use object
}
Block capabilities are used differently, to accommodate for capabilities provided by blocks without block entities. The query is performed on a level:

var object = level.getCapability(CAP, pos, context);
if (object != null) {
    // Use object
}
If the block entity and/or the block state is known, they can be passed to save on query time:

var object = level.getCapability(CAP, pos, blockState, blockEntity, context);
if (object != null) {
    // Use object
}
To give a more concrete example, here is how one might query an IItemHandler capability for a block, from the Direction.NORTH side:

IItemHandler handler = level.getCapability(Capabilities.ItemHandler.BLOCK, pos, Direction.NORTH);
if (handler != null) {
    // Use the handler for some item-related operation.
}
Block capability caching
For efficient queries and automatic caching, use BlockCapabilityCache instead of directly calling level.getCapability. This is a more powerful replacement for the old LazyOptional invalidation system.

When a capability is looked up, the system will perform the following steps under the hood:

Fetch block entity and block state if they were not supplied.
Fetch registered capability providers. (More on this below).
Iterate the providers and ask them if they can provide the capability.
One of the providers will return a capability instance, potentially allocating a new object.
The implementation is rather efficient, but for queries that are performed frequently, for example every game tick, these steps can take a significant amount of server time. The BlockCapabilityCache system provides a dramatic speedup for capabilities that are frequently queried at a given position.

Generally, a BlockCapabilityCache will be created once and then stored in a field of the object performing frequent capability queries. When exactly you store the cache is up to you. The cache must be provided with the capability to query, the level, the position, and the query context.

// Declare the field:
private BlockCapabilityCache<IItemHandler, @Nullable Direction> capCache;

// Later, for example in `onLoad` for a block entity:
this.capCache = BlockCapabilityCache.create(
        Capabilities.ItemHandler.BLOCK, // capability to cache
        level, // level
        pos, // target position
        Direction.NORTH // context
);
Querying the cache is then done with getCapability():

IItemHandler handler = this.capCache.getCapability();
if (handler != null) {
    // Use the handler for some item-related operation.
}
The cache is automatically cleared by the garbage collector, there is no need to unregister it.

It is also possible to receive notifications when the capability object changes! This includes capabilities changing (oldHandler != newHandler), becoming unavailable (null) or becoming available again (not null anymore).

The cache then needs to be created with two additional parameters:

A validity check, that is used to determine if the cache is still valid. In the simplest usage as a block entity field, () -> !this.isRemoved() will do.
An invalidation listener, that is called when the capability changes. This is where you can react to capability changes, removals, or appearances.
// With optional invalidation listener:
this.capCache = BlockCapabilityCache.create(
        Capabilities.ItemHandler.BLOCK, // capability to cache
        level, // level
        pos, // target position
        Direction.NORTH, // context
        () -> !this.isRemoved(), // validity check (because the cache might outlive the object it belongs to)
        () -> onCapInvalidate() // invalidation listener
);
For this system to work, modders must call level.invalidateCapabilities(pos) whenever a capability changes, appears, or disappears.

// whenever a capability changes, appears, or disappears:
level.invalidateCapabilities(pos);
NeoForge already handles common cases such as chunk load/unloads and block entity creation/removal, but other cases need to be handled explicitly by modders. For example, modders must invalidate capabilities in the following cases:

If the configuration of a capability-providing block entity changes.
If a capability-providing block (without a block entity) is placed or changes state, by overriding onPlace.
If a capability-providing block (without a block entity) is removed, by overriding onRemove.
For a plain block example, refer to the ComposterBlock.java file.

For more information, refer to the javadoc of IBlockCapabilityProvider.

Registering capabilities
A capability provider is what ultimately supplies a capability. A capability provider is function that can either return a capability instance, or null if it cannot provide the capability. Providers are specific to:

the given capability that they are providing for, and
the block instance, block entity type, entity type, or item instance that they are providing for.
They need to be registered in the RegisterCapabilitiesEvent.

Block providers are registered with registerBlock. For example:

private static void registerCapabilities(RegisterCapabilitiesEvent event) {
    event.registerBlock(
        Capabilities.ItemHandler.BLOCK, // capability to register for
        (level, pos, state, be, side) -> <return the IItemHandler>,
        // blocks to register for
        MY_ITEM_HANDLER_BLOCK,
        MY_OTHER_ITEM_HANDLER_BLOCK);
}
In general, registration will be specific to some block entity types, so the registerBlockEntity helper method is provided as well:

    event.registerBlockEntity(
        Capabilities.ItemHandler.BLOCK, // capability to register for
        MY_BLOCK_ENTITY_TYPE, // block entity type to register for
        (myBlockEntity, side) -> <return the IItemHandler for myBlockEntity and side>);
Entity registration is similar, using registerEntity:

event.registerEntity(
    Capabilities.ItemHandler.ENTITY, // capability to register for
    MY_ENTITY_TYPE, // entity type to register for
    (myEntity, context) -> <return the IItemHandler for myEntity>);
Item registration is similar too. Note that the provider receives the stack:

event.registerItem(
    Capabilities.ItemHandler.ITEM, // capability to register for
    (itemStack, context) -> <return the IItemHandler for the itemStack>,
    // items to register for
    MY_ITEM,
    MY_OTHER_ITEM);
If for some reason you need to register a provider for all blocks, entities, or items, you will need to iterate the corresponding registry and register the provider for each object.

For example, NeoForge uses this system to register a fluid handler capability for all buckets:

// For reference, you can find this code in the `CapabilityHooks` class.
for (Item item : BuiltInRegistries.ITEM) {
    if (item.getClass() == BucketItem.class) {
        event.registerItem(Capabilities.FluidHandler.ITEM, (stack, ctx) -> new FluidBucketWrapper(stack), item);
    }
}
Providers are asked for a capability in the order that they are registered. Should you want to run before a provider that NeoForge already registers for one of your objects, register your RegisterCapabilitiesEvent handler with a higher priority. For example:

modBus.addListener(RegisterCapabilitiesEvent.class, event -> {
    event.registerItem(
        Capabilities.FluidHandler.ITEM,
        (stack, ctx) -> new MyCustomFluidBucketWrapper(stack),
        // blocks to register for
        MY_CUSTOM_BUCKET);
}, EventPriority.HIGH); // use HIGH priority to register before NeoForge!
See CapabilityHooks for a list of the providers registered by NeoForge itself.

Entities, IItemHandler and Direction
You can skip this section if you don’t use the item handler entity capability.

There are now two capabilities for item handlers on entities:

Capabilities.ItemHandler.ENTITY: exposes the full inventory of some entity.
Capabilities.ItemHandler.ENTITY_AUTOMATION: exposes the automation-accessible inventory. Hoppers and droppers are patched to support that capability.
Here is a migration guide from the old system that used a single capability, and distinguished using the Direction parameter:

Minecart and chest inventories
If you want to support automation-aware inventories:

Old Syntax	New Syntax
entity.getCapability(...)	entity.getCapability(Capabilities.ItemHandler.ENTITY_AUTOMATION)
Otherwise:

Old Syntax	New Syntax
entity.getCapability(...)	entity.getCapability(Capabilities.ItemHandler.ENTITY)
Horse inventory
Old Syntax	New Syntax
horse.getCapability(..., ...)	horse.getCapability(Capabilities.ItemHandler.ENTITY)
Living entities
Old Syntax	New Syntax
entity.getCapability(..., any vertical direction)	new EntityHandsInvWrapper(livingEntity)
entity.getCapability(..., any horizontal direction)	new EntityArmorInvWrapper(livingEntity)
entity.getCapability(..., null)	livingEntity.getCapability(Capabilities.ItemHandler.ENTITY)
Players
Old Syntax	New Syntax
player.getCapability(..., any vertical direction)	new PlayerMainInvWrapper(player.getInventory())
player.getCapability(..., any horizontal direction)	new CombinedInvWrapper(new PlayerArmorInvWrapper(player.getInventory()), new PlayerOffhandInvWrapper(player.getInventory()))
player.getCapability(..., null)	player.getCapability(Capabilities.ItemHandler.ENTITY)
Future plans for capabilities
Composters now support the item handler capability. However, cauldrons still do not support the fluid handler capability. This will be addressed in the coming weeks, and mods using the block fluid handler capability will work with cauldrons out of the box.

We have reviewed and tested this capability overhaul extensively. Nonetheless, we expect that issues will be discovered after the release. Please don’t hesitate to get in touch with us, be it on Discord or GitHub!

That’s all for now, happy porting!
```


```BUILD OUTPUT
12:52:12 p.m.: Executing ':gametestClasses :datagenClasses :classes :testClasses :generatedClasses'...

> Task :generateGrammarSource UP-TO-DATE
> Task :cacheLauncherMetadata UP-TO-DATE
> Task :cacheVersionManifest1.20.3 UP-TO-DATE
> Task :cacheVersionExecutableClient1.20.3 UP-TO-DATE
> Task :cacheVersionExecutableServer1.20.3 UP-TO-DATE
> Task :cacheVersionMappingsClient1.20.3 UP-TO-DATE
> Task :cacheVersionMappingsServer1.20.3 UP-TO-DATE
> Task :neoFormForgesAccessTransformerProvider_script_neoforge.cfg UP-TO-DATE
> Task :neoFormForgesAccessTransformerProvideraccesstransformer.cfg UP-TO-DATE
> Task :neoFormListLibraries UP-TO-DATE
> Task :neoFormStripClient UP-TO-DATE
> Task :neoFormExtractServer UP-TO-DATE
> Task :neoFormStripServer UP-TO-DATE
> Task :neoFormMerge UP-TO-DATE
> Task :neoFormMergeMappings UP-TO-DATE
> Task :neoFormRename UP-TO-DATE
> Task :neoFormApplyForgesAccessTransformer UP-TO-DATE
> Task :neoFormUserAccessTransformerProvideraccesstransformer.cfg UP-TO-DATE
> Task :neoFormApplyUserAccessTransformer UP-TO-DATE
> Task :neoFormDecompile UP-TO-DATE
> Task :neoFormInject UP-TO-DATE
> Task :neoFormPatch UP-TO-DATE
> Task :neoFormPatchUserDev UP-TO-DATE
> Task :neoFormDownloadForgesSources UP-TO-DATE
> Task :neoFormUnzipForgesSources UP-TO-DATE
> Task :neoFormInjectForgesSources UP-TO-DATE
> Task :neoFormDownloadForgeUniversal UP-TO-DATE
> Task :neoFormUnzipForgeUniversal UP-TO-DATE
> Task :neoFormInjectForgeResources UP-TO-DATE
> Task :neoFormApplyOfficialMappings UP-TO-DATE
> Task :create1.20.3ClientExtraJar UP-TO-DATE
> Task :selectRawArtifactNet.minecraft_client_1.20.3_client-extra UP-TO-DATE
> Task :neoFormRecompile UP-TO-DATE
> Task :supplyRawJarForneoFormJoined1.20.3-20231205.165107 UP-TO-DATE
> Task :neoFormSelectRawArtifactNet.neoforged_neoforge_20.3.8-beta_ UP-TO-DATE

> Task :compileJava FAILED
36 actionable tasks: 1 executed, 35 up-to-date
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ResourceType.java:15: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capability;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ResourceType.java:16: error: cannot find symbol
import net.neoforged.neoforge.common.util.LazyOptional;
                                         ^
  symbol:   class LazyOptional
  location: package net.neoforged.neoforge.common.util
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ResourceType.java:27: error: cannot find symbol
    public final Capability<CAP> CAPABILITY_KIND;
                 ^
  symbol:   class Capability
  location: class ResourceType<STACK,ITEM,CAP>
  where STACK,ITEM,CAP are type-variables:
    STACK extends Object declared in class ResourceType
    ITEM extends Object declared in class ResourceType
    CAP extends Object declared in class ResourceType
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ResourceType.java:29: error: cannot find symbol
    public ResourceType(Capability<CAP> CAPABILITY_KIND) {
                        ^
  symbol:   class Capability
  location: class ResourceType<STACK,ITEM,CAP>
  where STACK,ITEM,CAP are type-variables:
    STACK extends Object declared in class ResourceType
    ITEM extends Object declared in class ResourceType
    CAP extends Object declared in class ResourceType
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CableNetwork.java:9: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capability;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CableNetwork.java:10: error: cannot find symbol
import net.neoforged.neoforge.common.util.LazyOptional;
                                         ^
  symbol:   class LazyOptional
  location: package net.neoforged.neoforge.common.util
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:10: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capability;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:11: error: cannot find symbol
import net.neoforged.neoforge.common.util.LazyOptional;
                                         ^
  symbol:   class LazyOptional
  location: package net.neoforged.neoforge.common.util
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CableNetwork.java:122: error: cannot find symbol
            Capability<CAP> cap,
            ^
  symbol:   class Capability
  location: class CableNetwork
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CableNetwork.java:121: error: cannot find symbol
    public <CAP> @Nonnull LazyOptional<CAP> getCapability(
                          ^
  symbol:   class LazyOptional
  location: class CableNetwork
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:17: error: cannot find symbol
    private final Long2ObjectMap<Object2ObjectOpenHashMap<Capability<?>, Object2ObjectOpenHashMap<Direction, LazyOptional<?>>>> CACHE = new Long2ObjectOpenHashMap<>();
                                                          ^
  symbol:   class Capability
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:17: error: cannot find symbol
    private final Long2ObjectMap<Object2ObjectOpenHashMap<Capability<?>, Object2ObjectOpenHashMap<Direction, LazyOptional<?>>>> CACHE = new Long2ObjectOpenHashMap<>();
                                                                                                             ^
  symbol:   class LazyOptional
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:36: error: cannot find symbol
            Capability<CAP> capKind,
            ^
  symbol:   class Capability
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:34: error: cannot find symbol
    public <CAP> @Nullable LazyOptional<CAP> getCapability(
                           ^
  symbol:   class LazyOptional
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:76: error: cannot find symbol
            Capability<CAP> capKind,
            ^
  symbol:   class Capability
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:73: error: cannot find symbol
    public <CAP> LazyOptional<CAP> getOrDiscoverCapability(
                 ^
  symbol:   class LazyOptional
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:100: error: cannot find symbol
            Capability<?> capKind,
            ^
  symbol:   class Capability
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:120: error: cannot find symbol
            Capability<CAP> capKind,
            ^
  symbol:   class Capability
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:122: error: cannot find symbol
            LazyOptional<CAP> cap
            ^
  symbol:   class LazyOptional
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:19: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capabilities;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:20: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capability;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:21: error: cannot find symbol
import net.neoforged.neoforge.common.util.LazyOptional;
                                         ^
  symbol:   class LazyOptional
  location: package net.neoforged.neoforge.common.util
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:89: error: cannot find symbol
    private final LazyOptional<IItemHandler> ITEMS_CAPABILITY = LazyOptional.of(() -> new CombinedInvWrapper(
                  ^
  symbol:   class LazyOptional
  location: class PrintingPressBlockEntity
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:127: error: cannot find symbol
    public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {
                                                               ^
  symbol:   class Capability
  location: class PrintingPressBlockEntity
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:127: error: cannot find symbol
    public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {
                        ^
  symbol:   class LazyOptional
  location: class PrintingPressBlockEntity
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\BlockEntityCapabilityProviderMapper.java:5: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.ICapabilityProvider;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CapabilityProviderMapper.java:5: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.ICapabilityProvider;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\BlockEntityCapabilityProviderMapper.java:11: error: cannot find symbol
    public Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos) {
                    ^
  symbol:   class ICapabilityProvider
  location: class BlockEntityCapabilityProviderMapper
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CapabilityProviderMapper.java:10: error: cannot find symbol
    Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos);
             ^
  symbol:   class ICapabilityProvider
  location: interface CapabilityProviderMapper
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:10: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capabilities;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:11: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capability;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:12: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.ICapabilityProvider;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:13: error: cannot find symbol
import net.neoforged.neoforge.common.util.LazyOptional;
                                         ^
  symbol:   class LazyOptional
  location: package net.neoforged.neoforge.common.util
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:24: error: cannot find symbol
    public Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos) {
                    ^
  symbol:   class ICapabilityProvider
  location: class CauldronCapabilityProviderMapper
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:34: error: cannot find symbol
    private static class CauldronCapabilityProvider implements ICapabilityProvider {
                                                               ^
  symbol:   class ICapabilityProvider
  location: class CauldronCapabilityProviderMapper
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:35: error: cannot find symbol
        private final LazyOptional<IFluidHandler> fluidHandlerLazyOptional;
                      ^
  symbol:   class LazyOptional
  location: class CauldronCapabilityProvider
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:44: error: cannot find symbol
        public @NotNull <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {
                                                                   ^
  symbol:   class Capability
  location: class CauldronCapabilityProvider
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:44: error: cannot find symbol
        public @NotNull <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {
                            ^
  symbol:   class LazyOptional
  location: class CauldronCapabilityProvider
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\SFMCompat.java:4: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capabilities;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\SFMCompat.java:5: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capability;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\SFMCompat.java:14: error: cannot find symbol
    public static List<Capability<?>> getCapabilities() {
                       ^
  symbol:   class Capability
  location: class SFMCompat
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:6: error: cannot find symbol
import net.minecraft.data.recipes.FinishedRecipe;
                                 ^
  symbol:   class FinishedRecipe
  location: package net.minecraft.data.recipes
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:12: error: cannot find symbol
public class PrintingPressFinishedRecipe implements FinishedRecipe {
                                                    ^
  symbol: class FinishedRecipe
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\FluidResourceType.java:6: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capabilities;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ForgeEnergyResourceType.java:5: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capabilities;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ItemResourceType.java:7: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.Capabilities;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\util\SFMUtils.java:21: error: package net.neoforged.neoforge.common.capabilities does not exist
import net.neoforged.neoforge.common.capabilities.ICapabilityProvider;
                                                 ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\util\SFMUtils.java:210: error: cannot find symbol
    public static Optional<ICapabilityProvider> discoverCapabilityProvider(Level level, BlockPos pos) {
                           ^
  symbol:   class ICapabilityProvider
  location: class SFMUtils
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ResourceType.java:85: error: cannot find symbol
        Stream<LazyOptional<CAP>> caps = position_direction_pairs
               ^
  symbol:   class LazyOptional
  location: class ResourceType<STACK,ITEM,CAP>
  where STACK,ITEM,CAP are type-variables:
    STACK extends Object declared in class ResourceType
    ITEM extends Object declared in class ResourceType
    CAP extends Object declared in class ResourceType
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ResourceType.java:97: error: cannot find symbol
                .filter(LazyOptional::isPresent)
                        ^
  symbol:   variable LazyOptional
  location: class ResourceType<STACK,ITEM,CAP>
  where STACK,ITEM,CAP are type-variables:
    STACK extends Object declared in class ResourceType
    ITEM extends Object declared in class ResourceType
    CAP extends Object declared in class ResourceType
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:24: error: incompatible types: invalid method reference
        return CACHE.values().stream().flatMap(x -> x.values().stream()).mapToInt(Object2ObjectOpenHashMap::size).sum();
                                                                                  ^
    method size in class Object2ObjectOpenHashMap<K,V> cannot be applied to given types
      required: no arguments
      found:    Object
      reason: actual and formal argument lists differ in length
  where K,V are type-variables:
    K extends Object declared in class Object2ObjectOpenHashMap
    V extends Object declared in class Object2ObjectOpenHashMap
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:49: error: cannot find symbol
                        return (LazyOptional<CAP>) found;
                                ^
  symbol:   class LazyOptional
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:63: error: cannot find symbol
                    putCapability(BlockPos.of(pos), (Capability) capKind, direction, cap);
                                                     ^
  symbol:   class Capability
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\cablenetwork\CapabilityCache.java:95: error: cannot find symbol
        return LazyOptional.empty();
               ^
  symbol:   variable LazyOptional
  location: class CapabilityCache
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:89: error: cannot find symbol
    private final LazyOptional<IItemHandler> ITEMS_CAPABILITY = LazyOptional.of(() -> new CombinedInvWrapper(
                                                                ^
  symbol:   variable LazyOptional
  location: class PrintingPressBlockEntity
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:126: error: method does not override or implement a method from a supertype
    @Override
    ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\blockentity\PrintingPressBlockEntity.java:128: error: cannot find symbol
        if (cap == Capabilities.ITEM_HANDLER) {
                   ^
  symbol:   variable Capabilities
  location: class PrintingPressBlockEntity
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:39: error: cannot find symbol
            this.fluidHandlerLazyOptional = LazyOptional.of(() -> new CauldronFluidHandler(level, pos));
                                            ^
  symbol:   variable LazyOptional
  location: class CauldronCapabilityProvider
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:43: error: method does not override or implement a method from a supertype
        @Override
        ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:45: error: cannot find symbol
            if (cap == Capabilities.FLUID_HANDLER) {
                       ^
  symbol:   variable Capabilities
  location: class CauldronCapabilityProvider
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\capabilityprovidermapper\CauldronCapabilityProviderMapper.java:48: error: cannot find symbol
            return LazyOptional.empty();
                   ^
  symbol:   variable LazyOptional
  location: class CauldronCapabilityProvider
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\SFMCompat.java:16: error: cannot find symbol
                Capabilities.ITEM_HANDLER,
                ^
  symbol:   variable Capabilities
  location: class SFMCompat
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\SFMCompat.java:17: error: cannot find symbol
                Capabilities.FLUID_HANDLER,
                ^
  symbol:   variable Capabilities
  location: class SFMCompat
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\compat\SFMCompat.java:18: error: cannot find symbol
                Capabilities.ENERGY
                ^
  symbol:   variable Capabilities
  location: class SFMCompat
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\item\FormItem.java:23: error: cannot find symbol
        formStack.getOrCreateTag().put("reference", stack.serializeNBT());
                                                         ^
  symbol:   method serializeNBT()
  location: variable stack of type ItemStack
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:30: error: method does not override or implement a method from a supertype
    @Override
    ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:32: error: cannot find symbol
        json.add("form", form.toJson(false));
                             ^
  symbol:   method toJson(boolean)
  location: variable form of type Ingredient
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:33: error: cannot find symbol
        json.add("ink", ink.toJson(false));
                           ^
  symbol:   method toJson(boolean)
  location: variable ink of type Ingredient
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:34: error: cannot find symbol
        json.add("paper", paper.toJson(false));
                               ^
  symbol:   method toJson(boolean)
  location: variable paper of type Ingredient
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:37: error: method does not override or implement a method from a supertype
    @Override
    ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:42: error: method does not override or implement a method from a supertype
    @Override
    ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:47: error: method does not override or implement a method from a supertype
    @Override
    ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:49: error: cannot find symbol
        return FinishedRecipe.super.serializeRecipe();
               ^
  symbol:   class FinishedRecipe
  location: class PrintingPressFinishedRecipe
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\recipe\PrintingPressFinishedRecipe.java:53: error: method does not override or implement a method from a supertype
    @Override
    ^
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\FluidResourceType.java:12: error: cannot find symbol
        super(Capabilities.FLUID_HANDLER);
              ^
  symbol:   variable Capabilities
  location: class FluidResourceType
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ForgeEnergyResourceType.java:11: error: cannot find symbol
        super(Capabilities.ENERGY);
              ^
  symbol:   variable Capabilities
  location: class ForgeEnergyResourceType
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\resourcetype\ItemResourceType.java:12: error: cannot find symbol
        super(Capabilities.ITEM_HANDLER);
              ^
  symbol:   variable Capabilities
  location: class ItemResourceType
D:\Repos\Minecraft\Forge\SuperFactoryManager\src\main\java\ca\teamdman\sfm\common\util\SFMUtils.java:215: error: incompatible types: invalid method reference
                .filter(Optional::isPresent)
                        ^
    method isPresent in class Optional<T> cannot be applied to given types
      required: no arguments
      found:    Object
      reason: actual and formal argument lists differ in length
  where T is a type-variable:
    T extends Object declared in class Optional
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
78 errors

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 6s
12:52:19 p.m.: Execution finished ':gametestClasses :datagenClasses :classes :testClasses :generatedClasses'.
```

Here is a tree view of the libraries

```
com
mcp
net
com\mojang
com\mojang\blaze3d
com\mojang\math
com\mojang\realmsclient
com\mojang\blaze3d\audio
com\mojang\blaze3d\font
com\mojang\blaze3d\pipeline
com\mojang\blaze3d\platform
com\mojang\blaze3d\preprocessor
com\mojang\blaze3d\shaders
com\mojang\blaze3d\systems
com\mojang\blaze3d\vertex
com\mojang\blaze3d\Blaze3D.java
com\mojang\blaze3d\DontObfuscate.java
com\mojang\blaze3d\FieldsAreNonnullByDefault.java
com\mojang\blaze3d\MethodsReturnNonnullByDefault.java
com\mojang\blaze3d\package-info.java
com\mojang\blaze3d\audio\Channel.java
com\mojang\blaze3d\audio\Library.java
com\mojang\blaze3d\audio\Listener.java
com\mojang\blaze3d\audio\ListenerTransform.java
com\mojang\blaze3d\audio\OggAudioStream.java
com\mojang\blaze3d\audio\OpenAlUtil.java
com\mojang\blaze3d\audio\package-info.java
com\mojang\blaze3d\audio\SoundBuffer.java
com\mojang\blaze3d\font\GlyphInfo.java
com\mojang\blaze3d\font\GlyphProvider.java
com\mojang\blaze3d\font\package-info.java
com\mojang\blaze3d\font\SheetGlyphInfo.java
com\mojang\blaze3d\font\SpaceProvider.java
com\mojang\blaze3d\font\TrueTypeGlyphProvider.java
com\mojang\blaze3d\pipeline\MainTarget.java
com\mojang\blaze3d\pipeline\package-info.java
com\mojang\blaze3d\pipeline\RenderCall.java
com\mojang\blaze3d\pipeline\RenderPipeline.java
com\mojang\blaze3d\pipeline\RenderTarget.java
com\mojang\blaze3d\pipeline\TextureTarget.java
com\mojang\blaze3d\platform\ClipboardManager.java
com\mojang\blaze3d\platform\DebugMemoryUntracker.java
com\mojang\blaze3d\platform\DisplayData.java
com\mojang\blaze3d\platform\GlConst.java
com\mojang\blaze3d\platform\GlDebug.java
com\mojang\blaze3d\platform\GlStateManager.java
com\mojang\blaze3d\platform\GlUtil.java
com\mojang\blaze3d\platform\GLX.java
com\mojang\blaze3d\platform\IconSet.java
com\mojang\blaze3d\platform\InputConstants.java
com\mojang\blaze3d\platform\Lighting.java
com\mojang\blaze3d\platform\MacosUtil.java
com\mojang\blaze3d\platform\MemoryTracker.java
com\mojang\blaze3d\platform\Monitor.java
com\mojang\blaze3d\platform\MonitorCreator.java
com\mojang\blaze3d\platform\NativeImage.java
com\mojang\blaze3d\platform\package-info.java
com\mojang\blaze3d\platform\ScreenManager.java
com\mojang\blaze3d\platform\TextureUtil.java
com\mojang\blaze3d\platform\VideoMode.java
com\mojang\blaze3d\platform\Window.java
com\mojang\blaze3d\platform\WindowEventHandler.java
com\mojang\blaze3d\preprocessor\GlslPreprocessor.java
com\mojang\blaze3d\preprocessor\package-info.java
com\mojang\blaze3d\shaders\AbstractUniform.java
com\mojang\blaze3d\shaders\BlendMode.java
com\mojang\blaze3d\shaders\Effect.java
com\mojang\blaze3d\shaders\EffectProgram.java
com\mojang\blaze3d\shaders\FogShape.java
com\mojang\blaze3d\shaders\package-info.java
com\mojang\blaze3d\shaders\Program.java
com\mojang\blaze3d\shaders\ProgramManager.java
com\mojang\blaze3d\shaders\Shader.java
com\mojang\blaze3d\shaders\Uniform.java
com\mojang\blaze3d\systems\package-info.java
com\mojang\blaze3d\systems\RenderSystem.java
com\mojang\blaze3d\systems\TimerQuery.java
com\mojang\blaze3d\vertex\BufferBuilder.java
com\mojang\blaze3d\vertex\BufferUploader.java
com\mojang\blaze3d\vertex\BufferVertexConsumer.java
com\mojang\blaze3d\vertex\DefaultedVertexConsumer.java
com\mojang\blaze3d\vertex\DefaultVertexFormat.java
com\mojang\blaze3d\vertex\package-info.java
com\mojang\blaze3d\vertex\PoseStack.java
com\mojang\blaze3d\vertex\SheetedDecalTextureGenerator.java
com\mojang\blaze3d\vertex\Tesselator.java
com\mojang\blaze3d\vertex\VertexBuffer.java
com\mojang\blaze3d\vertex\VertexConsumer.java
com\mojang\blaze3d\vertex\VertexFormat.java
com\mojang\blaze3d\vertex\VertexFormatElement.java
com\mojang\blaze3d\vertex\VertexMultiConsumer.java
com\mojang\blaze3d\vertex\VertexSorting.java
com\mojang\math\Axis.java
com\mojang\math\Constants.java
com\mojang\math\Divisor.java
com\mojang\math\FieldsAreNonnullByDefault.java
com\mojang\math\GivensParameters.java
com\mojang\math\MatrixUtil.java
com\mojang\math\MethodsReturnNonnullByDefault.java
com\mojang\math\OctahedralGroup.java
com\mojang\math\package-info.java
com\mojang\math\SymmetricGroup3.java
com\mojang\math\Transformation.java
com\mojang\realmsclient\client
com\mojang\realmsclient\dto
com\mojang\realmsclient\exception
com\mojang\realmsclient\gui
com\mojang\realmsclient\util
com\mojang\realmsclient\package-info.java
com\mojang\realmsclient\RealmsAvailability.java
com\mojang\realmsclient\RealmsMainScreen.java
com\mojang\realmsclient\Unit.java
com\mojang\realmsclient\client\FileDownload.java
com\mojang\realmsclient\client\FileUpload.java
com\mojang\realmsclient\client\package-info.java
com\mojang\realmsclient\client\Ping.java
com\mojang\realmsclient\client\RealmsClient.java
com\mojang\realmsclient\client\RealmsClientConfig.java
com\mojang\realmsclient\client\RealmsError.java
com\mojang\realmsclient\client\Request.java
com\mojang\realmsclient\client\UploadStatus.java
com\mojang\realmsclient\dto\Backup.java
com\mojang\realmsclient\dto\BackupList.java
com\mojang\realmsclient\dto\GuardedSerializer.java
com\mojang\realmsclient\dto\Ops.java
com\mojang\realmsclient\dto\package-info.java
com\mojang\realmsclient\dto\PendingInvite.java
com\mojang\realmsclient\dto\PendingInvitesList.java
com\mojang\realmsclient\dto\PingResult.java
com\mojang\realmsclient\dto\PlayerInfo.java
com\mojang\realmsclient\dto\RealmsDescriptionDto.java
com\mojang\realmsclient\dto\RealmsNews.java
com\mojang\realmsclient\dto\RealmsNotification.java
com\mojang\realmsclient\dto\RealmsServer.java
com\mojang\realmsclient\dto\RealmsServerAddress.java
com\mojang\realmsclient\dto\RealmsServerList.java
com\mojang\realmsclient\dto\RealmsServerPing.java
com\mojang\realmsclient\dto\RealmsServerPlayerList.java
com\mojang\realmsclient\dto\RealmsServerPlayerLists.java
com\mojang\realmsclient\dto\RealmsText.java
com\mojang\realmsclient\dto\RealmsWorldOptions.java
com\mojang\realmsclient\dto\RealmsWorldResetDto.java
com\mojang\realmsclient\dto\ReflectionBasedSerialization.java
com\mojang\realmsclient\dto\RegionPingResult.java
com\mojang\realmsclient\dto\ServerActivity.java
com\mojang\realmsclient\dto\ServerActivityList.java
com\mojang\realmsclient\dto\Subscription.java
com\mojang\realmsclient\dto\UploadInfo.java
com\mojang\realmsclient\dto\ValueObject.java
com\mojang\realmsclient\dto\WorldDownload.java
com\mojang\realmsclient\dto\WorldTemplate.java
com\mojang\realmsclient\dto\WorldTemplatePaginatedList.java
com\mojang\realmsclient\exception\package-info.java
com\mojang\realmsclient\exception\RealmsDefaultUncaughtExceptionHandler.java
com\mojang\realmsclient\exception\RealmsHttpException.java
com\mojang\realmsclient\exception\RealmsServiceException.java
com\mojang\realmsclient\exception\RetryCallException.java
com\mojang\realmsclient\gui\screens
com\mojang\realmsclient\gui\task
com\mojang\realmsclient\gui\package-info.java
com\mojang\realmsclient\gui\RealmsDataFetcher.java
com\mojang\realmsclient\gui\RealmsNewsManager.java
com\mojang\realmsclient\gui\RealmsServerList.java
com\mojang\realmsclient\gui\RealmsWorldSlotButton.java
com\mojang\realmsclient\gui\RowButton.java
com\mojang\realmsclient\gui\screens\package-info.java
com\mojang\realmsclient\gui\screens\RealmsBackupInfoScreen.java
com\mojang\realmsclient\gui\screens\RealmsBackupScreen.java
com\mojang\realmsclient\gui\screens\RealmsBrokenWorldScreen.java
com\mojang\realmsclient\gui\screens\RealmsClientOutdatedScreen.java
com\mojang\realmsclient\gui\screens\RealmsConfigureWorldScreen.java
com\mojang\realmsclient\gui\screens\RealmsConfirmScreen.java
com\mojang\realmsclient\gui\screens\RealmsCreateRealmScreen.java
com\mojang\realmsclient\gui\screens\RealmsDownloadLatestWorldScreen.java
com\mojang\realmsclient\gui\screens\RealmsGenericErrorScreen.java
com\mojang\realmsclient\gui\screens\RealmsInviteScreen.java
com\mojang\realmsclient\gui\screens\RealmsLongConfirmationScreen.java
com\mojang\realmsclient\gui\screens\RealmsLongRunningMcoTaskScreen.java
com\mojang\realmsclient\gui\screens\RealmsLongRunningMcoTickTaskScreen.java
com\mojang\realmsclient\gui\screens\RealmsNotificationsScreen.java
com\mojang\realmsclient\gui\screens\RealmsParentalConsentScreen.java
com\mojang\realmsclient\gui\screens\RealmsPendingInvitesScreen.java
com\mojang\realmsclient\gui\screens\RealmsPlayerScreen.java
com\mojang\realmsclient\gui\screens\RealmsPopupScreen.java
com\mojang\realmsclient\gui\screens\RealmsResetNormalWorldScreen.java
com\mojang\realmsclient\gui\screens\RealmsResetWorldScreen.java
com\mojang\realmsclient\gui\screens\RealmsSelectFileToUploadScreen.java
com\mojang\realmsclient\gui\screens\RealmsSelectWorldTemplateScreen.java
com\mojang\realmsclient\gui\screens\RealmsSettingsScreen.java
com\mojang\realmsclient\gui\screens\RealmsSlotOptionsScreen.java
com\mojang\realmsclient\gui\screens\RealmsSubscriptionInfoScreen.java
com\mojang\realmsclient\gui\screens\RealmsTermsScreen.java
com\mojang\realmsclient\gui\screens\RealmsUploadScreen.java
com\mojang\realmsclient\gui\screens\UploadResult.java
com\mojang\realmsclient\gui\task\DataFetcher.java
com\mojang\realmsclient\gui\task\package-info.java
com\mojang\realmsclient\gui\task\RepeatedDelayStrategy.java
com\mojang\realmsclient\util\task
com\mojang\realmsclient\util\JsonUtils.java
com\mojang\realmsclient\util\LevelType.java
com\mojang\realmsclient\util\package-info.java
com\mojang\realmsclient\util\RealmsPersistence.java
com\mojang\realmsclient\util\RealmsTextureManager.java
com\mojang\realmsclient\util\RealmsUtil.java
com\mojang\realmsclient\util\TextRenderingUtils.java
com\mojang\realmsclient\util\UploadTokenCache.java
com\mojang\realmsclient\util\WorldGenerationInfo.java
com\mojang\realmsclient\util\task\CloseServerTask.java
com\mojang\realmsclient\util\task\ConnectTask.java
com\mojang\realmsclient\util\task\CreateSnapshotRealmTask.java
com\mojang\realmsclient\util\task\DownloadTask.java
com\mojang\realmsclient\util\task\GetServerDetailsTask.java
com\mojang\realmsclient\util\task\LongRunningTask.java
com\mojang\realmsclient\util\task\OpenServerTask.java
com\mojang\realmsclient\util\task\package-info.java
com\mojang\realmsclient\util\task\ResettingGeneratedWorldTask.java
com\mojang\realmsclient\util\task\ResettingTemplateWorldTask.java
com\mojang\realmsclient\util\task\ResettingWorldTask.java
com\mojang\realmsclient\util\task\RestoreTask.java
com\mojang\realmsclient\util\task\SwitchMinigameTask.java
com\mojang\realmsclient\util\task\SwitchSlotTask.java
com\mojang\realmsclient\util\task\WorldCreationTask.java
mcp\client
mcp\client\Start.java
net\minecraft
net\neoforged
net\minecraft\advancements
net\minecraft\client
net\minecraft\commands
net\minecraft\core
net\minecraft\data
net\minecraft\gametest
net\minecraft\locale
net\minecraft\nbt
net\minecraft\network
net\minecraft\obfuscate
net\minecraft\realms
net\minecraft\recipebook
net\minecraft\references
net\minecraft\resources
net\minecraft\server
net\minecraft\sounds
net\minecraft\stats
net\minecraft\tags
net\minecraft\util
net\minecraft\world
net\minecraft\BlockUtil.java
net\minecraft\CharPredicate.java
net\minecraft\ChatFormatting.java
net\minecraft\CrashReport.java
net\minecraft\CrashReportCategory.java
net\minecraft\CrashReportDetail.java
net\minecraft\DefaultUncaughtExceptionHandler.java
net\minecraft\DefaultUncaughtExceptionHandlerWithName.java
net\minecraft\DetectedVersion.java
net\minecraft\FieldsAreNonnullByDefault.java
net\minecraft\FileUtil.java
net\minecraft\MethodsReturnNonnullByDefault.java
net\minecraft\Optionull.java
net\minecraft\package-info.java
net\minecraft\ReportedException.java
net\minecraft\ResourceLocationException.java
net\minecraft\SharedConstants.java
net\minecraft\SystemReport.java
net\minecraft\Util.java
net\minecraft\WorldVersion.java
net\minecraft\advancements\critereon
net\minecraft\advancements\Advancement.java
net\minecraft\advancements\AdvancementHolder.java
net\minecraft\advancements\AdvancementNode.java
net\minecraft\advancements\AdvancementProgress.java
net\minecraft\advancements\AdvancementRequirements.java
net\minecraft\advancements\AdvancementRewards.java
net\minecraft\advancements\AdvancementTree.java
net\minecraft\advancements\AdvancementType.java
net\minecraft\advancements\CriteriaTriggers.java
net\minecraft\advancements\Criterion.java
net\minecraft\advancements\CriterionProgress.java
net\minecraft\advancements\CriterionTrigger.java
net\minecraft\advancements\CriterionTriggerInstance.java
net\minecraft\advancements\DisplayInfo.java
net\minecraft\advancements\package-info.java
net\minecraft\advancements\TreeNodePosition.java
net\minecraft\advancements\critereon\BeeNestDestroyedTrigger.java
net\minecraft\advancements\critereon\BlockPredicate.java
net\minecraft\advancements\critereon\BredAnimalsTrigger.java
net\minecraft\advancements\critereon\BrewedPotionTrigger.java
net\minecraft\advancements\critereon\ChangeDimensionTrigger.java
net\minecraft\advancements\critereon\ChanneledLightningTrigger.java
net\minecraft\advancements\critereon\ConstructBeaconTrigger.java
net\minecraft\advancements\critereon\ConsumeItemTrigger.java
net\minecraft\advancements\critereon\ContextAwarePredicate.java
net\minecraft\advancements\critereon\CriterionValidator.java
net\minecraft\advancements\critereon\CuredZombieVillagerTrigger.java
net\minecraft\advancements\critereon\DamagePredicate.java
net\minecraft\advancements\critereon\DamageSourcePredicate.java
net\minecraft\advancements\critereon\DistancePredicate.java
net\minecraft\advancements\critereon\DistanceTrigger.java
net\minecraft\advancements\critereon\EffectsChangedTrigger.java
net\minecraft\advancements\critereon\EnchantedItemTrigger.java
net\minecraft\advancements\critereon\EnchantmentPredicate.java
net\minecraft\advancements\critereon\EnterBlockTrigger.java
net\minecraft\advancements\critereon\EntityEquipmentPredicate.java
net\minecraft\advancements\critereon\EntityFlagsPredicate.java
net\minecraft\advancements\critereon\EntityHurtPlayerTrigger.java
net\minecraft\advancements\critereon\EntityPredicate.java
net\minecraft\advancements\critereon\EntitySubPredicate.java
net\minecraft\advancements\critereon\EntityTypePredicate.java
net\minecraft\advancements\critereon\EntityVariantPredicate.java
net\minecraft\advancements\critereon\FilledBucketTrigger.java
net\minecraft\advancements\critereon\FishingHookPredicate.java
net\minecraft\advancements\critereon\FishingRodHookedTrigger.java
net\minecraft\advancements\critereon\FluidPredicate.java
net\minecraft\advancements\critereon\ImpossibleTrigger.java
net\minecraft\advancements\critereon\InventoryChangeTrigger.java
net\minecraft\advancements\critereon\ItemDurabilityTrigger.java
net\minecraft\advancements\critereon\ItemPredicate.java
net\minecraft\advancements\critereon\ItemUsedOnLocationTrigger.java
net\minecraft\advancements\critereon\KilledByCrossbowTrigger.java
net\minecraft\advancements\critereon\KilledTrigger.java
net\minecraft\advancements\critereon\LevitationTrigger.java
net\minecraft\advancements\critereon\LightningBoltPredicate.java
net\minecraft\advancements\critereon\LightningStrikeTrigger.java
net\minecraft\advancements\critereon\LightPredicate.java
net\minecraft\advancements\critereon\LocationPredicate.java
net\minecraft\advancements\critereon\LootTableTrigger.java
net\minecraft\advancements\critereon\MinMaxBounds.java
net\minecraft\advancements\critereon\MobEffectsPredicate.java
net\minecraft\advancements\critereon\NbtPredicate.java
net\minecraft\advancements\critereon\package-info.java
net\minecraft\advancements\critereon\PickedUpItemTrigger.java
net\minecraft\advancements\critereon\PlayerHurtEntityTrigger.java
net\minecraft\advancements\critereon\PlayerInteractTrigger.java
net\minecraft\advancements\critereon\PlayerPredicate.java
net\minecraft\advancements\critereon\PlayerTrigger.java
net\minecraft\advancements\critereon\RecipeCraftedTrigger.java
net\minecraft\advancements\critereon\RecipeUnlockedTrigger.java
net\minecraft\advancements\critereon\ShotCrossbowTrigger.java
net\minecraft\advancements\critereon\SimpleCriterionTrigger.java
net\minecraft\advancements\critereon\SlideDownBlockTrigger.java
net\minecraft\advancements\critereon\SlimePredicate.java
net\minecraft\advancements\critereon\StartRidingTrigger.java
net\minecraft\advancements\critereon\StatePropertiesPredicate.java
net\minecraft\advancements\critereon\SummonedEntityTrigger.java
net\minecraft\advancements\critereon\TagPredicate.java
net\minecraft\advancements\critereon\TameAnimalTrigger.java
net\minecraft\advancements\critereon\TargetBlockTrigger.java
net\minecraft\advancements\critereon\TradeTrigger.java
net\minecraft\advancements\critereon\UsedEnderEyeTrigger.java
net\minecraft\advancements\critereon\UsedTotemTrigger.java
net\minecraft\advancements\critereon\UsingItemTrigger.java
net\minecraft\advancements\critereon\WrappedMinMaxBounds.java
net\minecraft\client\animation
net\minecraft\client\color
net\minecraft\client\gui
net\minecraft\client\main
net\minecraft\client\model
net\minecraft\client\multiplayer
net\minecraft\client\particle
net\minecraft\client\player
net\minecraft\client\profiling
net\minecraft\client\quickplay
net\minecraft\client\renderer
net\minecraft\client\resources
net\minecraft\client\searchtree
net\minecraft\client\server
net\minecraft\client\sounds
net\minecraft\client\telemetry
net\minecraft\client\tutorial
net\minecraft\client\AttackIndicatorStatus.java
net\minecraft\client\Camera.java
net\minecraft\client\CameraType.java
net\minecraft\client\ClientBrandRetriever.java
net\minecraft\client\ClientRecipeBook.java
net\minecraft\client\CloudStatus.java
net\minecraft\client\CommandHistory.java
net\minecraft\client\ComponentCollector.java
net\minecraft\client\DebugQueryHandler.java
net\minecraft\client\GameNarrator.java
net\minecraft\client\GraphicsStatus.java
net\minecraft\client\GuiMessage.java
net\minecraft\client\GuiMessageTag.java
net\minecraft\client\HotbarManager.java
net\minecraft\client\InputType.java
net\minecraft\client\KeyboardHandler.java
net\minecraft\client\KeyMapping.java
net\minecraft\client\Minecraft.java
net\minecraft\client\MouseHandler.java
net\minecraft\client\NarratorStatus.java
net\minecraft\client\OptionInstance.java
net\minecraft\client\Options.java
net\minecraft\client\package-info.java
net\minecraft\client\ParticleStatus.java
net\minecraft\client\PeriodicNotificationManager.java
net\minecraft\client\PrioritizeChunkUpdates.java
net\minecraft\client\Realms32BitWarningStatus.java
net\minecraft\client\RecipeBookCategories.java
net\minecraft\client\ResourceLoadStateTracker.java
net\minecraft\client\Screenshot.java
net\minecraft\client\StringSplitter.java
net\minecraft\client\Timer.java
net\minecraft\client\ToggleKeyMapping.java
net\minecraft\client\User.java
net\minecraft\client\animation\definitions
net\minecraft\client\animation\AnimationChannel.java
net\minecraft\client\animation\AnimationDefinition.java
net\minecraft\client\animation\Keyframe.java
net\minecraft\client\animation\KeyframeAnimations.java
net\minecraft\client\animation\package-info.java
net\minecraft\client\animation\definitions\BatAnimation.java
net\minecraft\client\animation\definitions\BreezeAnimation.java
net\minecraft\client\animation\definitions\CamelAnimation.java
net\minecraft\client\animation\definitions\FrogAnimation.java
net\minecraft\client\animation\definitions\package-info.java
net\minecraft\client\animation\definitions\SnifferAnimation.java
net\minecraft\client\animation\definitions\WardenAnimation.java
net\minecraft\client\color\block
net\minecraft\client\color\item
net\minecraft\client\color\block\BlockColor.java
net\minecraft\client\color\block\BlockColors.java
net\minecraft\client\color\block\BlockTintCache.java
net\minecraft\client\color\block\package-info.java
net\minecraft\client\color\item\ItemColor.java
net\minecraft\client\color\item\ItemColors.java
net\minecraft\client\color\item\package-info.java
net\minecraft\client\gui\components
net\minecraft\client\gui\font
net\minecraft\client\gui\layouts
net\minecraft\client\gui\narration
net\minecraft\client\gui\navigation
net\minecraft\client\gui\screens
net\minecraft\client\gui\spectator
net\minecraft\client\gui\ComponentPath.java
net\minecraft\client\gui\Font.java
net\minecraft\client\gui\Gui.java
net\minecraft\client\gui\GuiGraphics.java
net\minecraft\client\gui\GuiSpriteManager.java
net\minecraft\client\gui\MapRenderer.java
net\minecraft\client\gui\package-info.java
net\minecraft\client\gui\components\debugchart
net\minecraft\client\gui\components\events
net\minecraft\client\gui\components\spectator
net\minecraft\client\gui\components\tabs
net\minecraft\client\gui\components\toasts
net\minecraft\client\gui\components\AbstractButton.java
net\minecraft\client\gui\components\AbstractContainerWidget.java
net\minecraft\client\gui\components\AbstractOptionSliderButton.java
net\minecraft\client\gui\components\AbstractScrollWidget.java
net\minecraft\client\gui\components\AbstractSelectionList.java
net\minecraft\client\gui\components\AbstractSliderButton.java
net\minecraft\client\gui\components\AbstractStringWidget.java
net\minecraft\client\gui\components\AbstractWidget.java
net\minecraft\client\gui\components\BossHealthOverlay.java
net\minecraft\client\gui\components\Button.java
net\minecraft\client\gui\components\ChatComponent.java
net\minecraft\client\gui\components\Checkbox.java
net\minecraft\client\gui\components\CommandSuggestions.java
net\minecraft\client\gui\components\CommonButtons.java
net\minecraft\client\gui\components\ComponentRenderUtils.java
net\minecraft\client\gui\components\ContainerObjectSelectionList.java
net\minecraft\client\gui\components\CycleButton.java
net\minecraft\client\gui\components\DebugScreenOverlay.java
net\minecraft\client\gui\components\EditBox.java
net\minecraft\client\gui\components\FittingMultiLineTextWidget.java
net\minecraft\client\gui\components\FocusableTextWidget.java
net\minecraft\client\gui\components\ImageButton.java
net\minecraft\client\gui\components\ImageWidget.java
net\minecraft\client\gui\components\LerpingBossEvent.java
net\minecraft\client\gui\components\LoadingDotsWidget.java
net\minecraft\client\gui\components\LockIconButton.java
net\minecraft\client\gui\components\LogoRenderer.java
net\minecraft\client\gui\components\MultiLineEditBox.java
net\minecraft\client\gui\components\MultiLineLabel.java
net\minecraft\client\gui\components\MultilineTextField.java
net\minecraft\client\gui\components\MultiLineTextWidget.java
net\minecraft\client\gui\components\ObjectSelectionList.java
net\minecraft\client\gui\components\OptionsList.java
net\minecraft\client\gui\components\package-info.java
net\minecraft\client\gui\components\PlainTextButton.java
net\minecraft\client\gui\components\PlayerFaceRenderer.java
net\minecraft\client\gui\components\PlayerSkinWidget.java
net\minecraft\client\gui\components\PlayerTabOverlay.java
net\minecraft\client\gui\components\PopupScreen.java
net\minecraft\client\gui\components\Renderable.java
net\minecraft\client\gui\components\SplashRenderer.java
net\minecraft\client\gui\components\SpriteIconButton.java
net\minecraft\client\gui\components\StateSwitchingButton.java
net\minecraft\client\gui\components\StringWidget.java
net\minecraft\client\gui\components\SubtitleOverlay.java
net\minecraft\client\gui\components\TabButton.java
net\minecraft\client\gui\components\TabOrderedElement.java
net\minecraft\client\gui\components\Tooltip.java
net\minecraft\client\gui\components\Whence.java
net\minecraft\client\gui\components\WidgetSprites.java
net\minecraft\client\gui\components\debugchart\AbstractDebugChart.java
net\minecraft\client\gui\components\debugchart\BandwidthDebugChart.java
net\minecraft\client\gui\components\debugchart\FpsDebugChart.java
net\minecraft\client\gui\components\debugchart\PingDebugChart.java
net\minecraft\client\gui\components\debugchart\TpsDebugChart.java
net\minecraft\client\gui\components\events\AbstractContainerEventHandler.java
net\minecraft\client\gui\components\events\ContainerEventHandler.java
net\minecraft\client\gui\components\events\GuiEventListener.java
net\minecraft\client\gui\components\events\package-info.java
net\minecraft\client\gui\components\spectator\package-info.java
net\minecraft\client\gui\components\spectator\SpectatorGui.java
net\minecraft\client\gui\components\tabs\GridLayoutTab.java
net\minecraft\client\gui\components\tabs\package-info.java
net\minecraft\client\gui\components\tabs\Tab.java
net\minecraft\client\gui\components\tabs\TabManager.java
net\minecraft\client\gui\components\tabs\TabNavigationBar.java
net\minecraft\client\gui\components\toasts\AdvancementToast.java
net\minecraft\client\gui\components\toasts\package-info.java
net\minecraft\client\gui\components\toasts\RecipeToast.java
net\minecraft\client\gui\components\toasts\SystemToast.java
net\minecraft\client\gui\components\toasts\Toast.java
net\minecraft\client\gui\components\toasts\ToastComponent.java
net\minecraft\client\gui\components\toasts\TutorialToast.java
net\minecraft\client\gui\font\glyphs
net\minecraft\client\gui\font\providers
net\minecraft\client\gui\font\AllMissingGlyphProvider.java
net\minecraft\client\gui\font\CodepointMap.java
net\minecraft\client\gui\font\FontManager.java
net\minecraft\client\gui\font\FontSet.java
net\minecraft\client\gui\font\FontTexture.java
net\minecraft\client\gui\font\GlyphRenderTypes.java
net\minecraft\client\gui\font\package-info.java
net\minecraft\client\gui\font\TextFieldHelper.java
net\minecraft\client\gui\font\glyphs\BakedGlyph.java
net\minecraft\client\gui\font\glyphs\EmptyGlyph.java
net\minecraft\client\gui\font\glyphs\package-info.java
net\minecraft\client\gui\font\glyphs\SpecialGlyphs.java
net\minecraft\client\gui\font\providers\BitmapProvider.java
net\minecraft\client\gui\font\providers\GlyphProviderDefinition.java
net\minecraft\client\gui\font\providers\GlyphProviderType.java
net\minecraft\client\gui\font\providers\package-info.java
net\minecraft\client\gui\font\providers\ProviderReferenceDefinition.java
net\minecraft\client\gui\font\providers\TrueTypeGlyphProviderDefinition.java
net\minecraft\client\gui\font\providers\UnihexProvider.java
net\minecraft\client\gui\layouts\AbstractLayout.java
net\minecraft\client\gui\layouts\CommonLayouts.java
net\minecraft\client\gui\layouts\EqualSpacingLayout.java
net\minecraft\client\gui\layouts\FrameLayout.java
net\minecraft\client\gui\layouts\GridLayout.java
net\minecraft\client\gui\layouts\HeaderAndFooterLayout.java
net\minecraft\client\gui\layouts\Layout.java
net\minecraft\client\gui\layouts\LayoutElement.java
net\minecraft\client\gui\layouts\LayoutSettings.java
net\minecraft\client\gui\layouts\LinearLayout.java
net\minecraft\client\gui\layouts\package-info.java
net\minecraft\client\gui\layouts\SpacerElement.java
net\minecraft\client\gui\narration\NarratableEntry.java
net\minecraft\client\gui\narration\NarratedElementType.java
net\minecraft\client\gui\narration\NarrationElementOutput.java
net\minecraft\client\gui\narration\NarrationSupplier.java
net\minecraft\client\gui\narration\NarrationThunk.java
net\minecraft\client\gui\narration\package-info.java
net\minecraft\client\gui\narration\ScreenNarrationCollector.java
net\minecraft\client\gui\navigation\CommonInputs.java
net\minecraft\client\gui\navigation\FocusNavigationEvent.java
net\minecraft\client\gui\navigation\package-info.java
net\minecraft\client\gui\navigation\ScreenAxis.java
net\minecraft\client\gui\navigation\ScreenDirection.java
net\minecraft\client\gui\navigation\ScreenPosition.java
net\minecraft\client\gui\navigation\ScreenRectangle.java
net\minecraft\client\gui\screens\achievement
net\minecraft\client\gui\screens\advancements
net\minecraft\client\gui\screens\controls
net\minecraft\client\gui\screens\debug
net\minecraft\client\gui\screens\inventory
net\minecraft\client\gui\screens\multiplayer
net\minecraft\client\gui\screens\packs
net\minecraft\client\gui\screens\recipebook
net\minecraft\client\gui\screens\reporting
net\minecraft\client\gui\screens\social
net\minecraft\client\gui\screens\telemetry
net\minecraft\client\gui\screens\worldselection
net\minecraft\client\gui\screens\AccessibilityOnboardingScreen.java
net\minecraft\client\gui\screens\AccessibilityOptionsScreen.java
net\minecraft\client\gui\screens\AlertScreen.java
net\minecraft\client\gui\screens\BackupConfirmScreen.java
net\minecraft\client\gui\screens\BanNoticeScreens.java
net\minecraft\client\gui\screens\ChatOptionsScreen.java
net\minecraft\client\gui\screens\ChatScreen.java
net\minecraft\client\gui\screens\ConfirmLinkScreen.java
net\minecraft\client\gui\screens\ConfirmScreen.java
net\minecraft\client\gui\screens\ConnectScreen.java
net\minecraft\client\gui\screens\CreateBuffetWorldScreen.java
net\minecraft\client\gui\screens\CreateFlatWorldScreen.java
net\minecraft\client\gui\screens\CreditsAndAttributionScreen.java
net\minecraft\client\gui\screens\DatapackLoadFailureScreen.java
net\minecraft\client\gui\screens\DeathScreen.java
net\minecraft\client\gui\screens\DemoIntroScreen.java
net\minecraft\client\gui\screens\DirectJoinServerScreen.java
net\minecraft\client\gui\screens\DisconnectedScreen.java
net\minecraft\client\gui\screens\EditServerScreen.java
net\minecraft\client\gui\screens\ErrorScreen.java
net\minecraft\client\gui\screens\FaviconTexture.java
net\minecraft\client\gui\screens\GenericDirtMessageScreen.java
net\minecraft\client\gui\screens\GenericWaitingScreen.java
net\minecraft\client\gui\screens\InBedChatScreen.java
net\minecraft\client\gui\screens\LanguageSelectScreen.java
net\minecraft\client\gui\screens\LevelLoadingScreen.java
net\minecraft\client\gui\screens\LoadingDotsText.java
net\minecraft\client\gui\screens\LoadingOverlay.java
net\minecraft\client\gui\screens\MenuScreens.java
net\minecraft\client\gui\screens\MouseSettingsScreen.java
net\minecraft\client\gui\screens\NoticeWithLinkScreen.java
net\minecraft\client\gui\screens\OnlineOptionsScreen.java
net\minecraft\client\gui\screens\OptionsScreen.java
net\minecraft\client\gui\screens\OptionsSubScreen.java
net\minecraft\client\gui\screens\OutOfMemoryScreen.java
net\minecraft\client\gui\screens\Overlay.java
net\minecraft\client\gui\screens\package-info.java
net\minecraft\client\gui\screens\PauseScreen.java
net\minecraft\client\gui\screens\PresetFlatWorldScreen.java
net\minecraft\client\gui\screens\ProgressScreen.java
net\minecraft\client\gui\screens\ReceivingLevelScreen.java
net\minecraft\client\gui\screens\RecoverWorldDataScreen.java
net\minecraft\client\gui\screens\Screen.java
net\minecraft\client\gui\screens\ShareToLanScreen.java
net\minecraft\client\gui\screens\SimpleOptionsSubScreen.java
net\minecraft\client\gui\screens\SkinCustomizationScreen.java
net\minecraft\client\gui\screens\SoundOptionsScreen.java
net\minecraft\client\gui\screens\TitleScreen.java
net\minecraft\client\gui\screens\UnsupportedGraphicsWarningScreen.java
net\minecraft\client\gui\screens\VideoSettingsScreen.java
net\minecraft\client\gui\screens\WinScreen.java
net\minecraft\client\gui\screens\achievement\package-info.java
net\minecraft\client\gui\screens\achievement\StatsScreen.java
net\minecraft\client\gui\screens\achievement\StatsUpdateListener.java
net\minecraft\client\gui\screens\advancements\AdvancementsScreen.java
net\minecraft\client\gui\screens\advancements\AdvancementTab.java
net\minecraft\client\gui\screens\advancements\AdvancementTabType.java
net\minecraft\client\gui\screens\advancements\AdvancementWidget.java
net\minecraft\client\gui\screens\advancements\AdvancementWidgetType.java
net\minecraft\client\gui\screens\advancements\package-info.java
net\minecraft\client\gui\screens\controls\ControlsScreen.java
net\minecraft\client\gui\screens\controls\KeyBindsList.java
net\minecraft\client\gui\screens\controls\KeyBindsScreen.java
net\minecraft\client\gui\screens\controls\package-info.java
net\minecraft\client\gui\screens\debug\GameModeSwitcherScreen.java
net\minecraft\client\gui\screens\debug\package-info.java
net\minecraft\client\gui\screens\inventory\tooltip
net\minecraft\client\gui\screens\inventory\AbstractCommandBlockEditScreen.java
net\minecraft\client\gui\screens\inventory\AbstractContainerScreen.java
net\minecraft\client\gui\screens\inventory\AbstractFurnaceScreen.java
net\minecraft\client\gui\screens\inventory\AbstractSignEditScreen.java
net\minecraft\client\gui\screens\inventory\AnvilScreen.java
net\minecraft\client\gui\screens\inventory\BeaconScreen.java
net\minecraft\client\gui\screens\inventory\BlastFurnaceScreen.java
net\minecraft\client\gui\screens\inventory\BookEditScreen.java
net\minecraft\client\gui\screens\inventory\BookViewScreen.java
net\minecraft\client\gui\screens\inventory\BrewingStandScreen.java
net\minecraft\client\gui\screens\inventory\CartographyTableScreen.java
net\minecraft\client\gui\screens\inventory\CommandBlockEditScreen.java
net\minecraft\client\gui\screens\inventory\ContainerScreen.java
net\minecraft\client\gui\screens\inventory\CrafterScreen.java
net\minecraft\client\gui\screens\inventory\CraftingScreen.java
net\minecraft\client\gui\screens\inventory\CreativeInventoryListener.java
net\minecraft\client\gui\screens\inventory\CreativeModeInventoryScreen.java
net\minecraft\client\gui\screens\inventory\CyclingSlotBackground.java
net\minecraft\client\gui\screens\inventory\DispenserScreen.java
net\minecraft\client\gui\screens\inventory\EffectRenderingInventoryScreen.java
net\minecraft\client\gui\screens\inventory\EnchantmentNames.java
net\minecraft\client\gui\screens\inventory\EnchantmentScreen.java
net\minecraft\client\gui\screens\inventory\FurnaceScreen.java
net\minecraft\client\gui\screens\inventory\GrindstoneScreen.java
net\minecraft\client\gui\screens\inventory\HangingSignEditScreen.java
net\minecraft\client\gui\screens\inventory\HopperScreen.java
net\minecraft\client\gui\screens\inventory\HorseInventoryScreen.java
net\minecraft\client\gui\screens\inventory\InventoryScreen.java
net\minecraft\client\gui\screens\inventory\ItemCombinerScreen.java
net\minecraft\client\gui\screens\inventory\JigsawBlockEditScreen.java
net\minecraft\client\gui\screens\inventory\LecternScreen.java
net\minecraft\client\gui\screens\inventory\LoomScreen.java
net\minecraft\client\gui\screens\inventory\MenuAccess.java
net\minecraft\client\gui\screens\inventory\MerchantScreen.java
net\minecraft\client\gui\screens\inventory\MinecartCommandBlockEditScreen.java
net\minecraft\client\gui\screens\inventory\package-info.java
net\minecraft\client\gui\screens\inventory\PageButton.java
net\minecraft\client\gui\screens\inventory\ShulkerBoxScreen.java
net\minecraft\client\gui\screens\inventory\SignEditScreen.java
net\minecraft\client\gui\screens\inventory\SmithingScreen.java
net\minecraft\client\gui\screens\inventory\SmokerScreen.java
net\minecraft\client\gui\screens\inventory\StonecutterScreen.java
net\minecraft\client\gui\screens\inventory\StructureBlockEditScreen.java
net\minecraft\client\gui\screens\inventory\tooltip\BelowOrAboveWidgetTooltipPositioner.java
net\minecraft\client\gui\screens\inventory\tooltip\ClientBundleTooltip.java
net\minecraft\client\gui\screens\inventory\tooltip\ClientTextTooltip.java
net\minecraft\client\gui\screens\inventory\tooltip\ClientTooltipComponent.java
net\minecraft\client\gui\screens\inventory\tooltip\ClientTooltipPositioner.java
net\minecraft\client\gui\screens\inventory\tooltip\DefaultTooltipPositioner.java
net\minecraft\client\gui\screens\inventory\tooltip\MenuTooltipPositioner.java
net\minecraft\client\gui\screens\inventory\tooltip\package-info.java
net\minecraft\client\gui\screens\inventory\tooltip\TooltipRenderUtil.java
net\minecraft\client\gui\screens\multiplayer\JoinMultiplayerScreen.java
net\minecraft\client\gui\screens\multiplayer\package-info.java
net\minecraft\client\gui\screens\multiplayer\Realms32bitWarningScreen.java
net\minecraft\client\gui\screens\multiplayer\SafetyScreen.java
net\minecraft\client\gui\screens\multiplayer\ServerReconfigScreen.java
net\minecraft\client\gui\screens\multiplayer\ServerSelectionList.java
net\minecraft\client\gui\screens\multiplayer\WarningScreen.java
net\minecraft\client\gui\screens\packs\package-info.java
net\minecraft\client\gui\screens\packs\PackSelectionModel.java
net\minecraft\client\gui\screens\packs\PackSelectionScreen.java
net\minecraft\client\gui\screens\packs\TransferableSelectionList.java
net\minecraft\client\gui\screens\recipebook\AbstractFurnaceRecipeBookComponent.java
net\minecraft\client\gui\screens\recipebook\BlastingRecipeBookComponent.java
net\minecraft\client\gui\screens\recipebook\GhostRecipe.java
net\minecraft\client\gui\screens\recipebook\OverlayRecipeComponent.java
net\minecraft\client\gui\screens\recipebook\package-info.java
net\minecraft\client\gui\screens\recipebook\RecipeBookComponent.java
net\minecraft\client\gui\screens\recipebook\RecipeBookPage.java
net\minecraft\client\gui\screens\recipebook\RecipeBookTabButton.java
net\minecraft\client\gui\screens\recipebook\RecipeButton.java
net\minecraft\client\gui\screens\recipebook\RecipeCollection.java
net\minecraft\client\gui\screens\recipebook\RecipeShownListener.java
net\minecraft\client\gui\screens\recipebook\RecipeUpdateListener.java
net\minecraft\client\gui\screens\recipebook\SmeltingRecipeBookComponent.java
net\minecraft\client\gui\screens\recipebook\SmokingRecipeBookComponent.java
net\minecraft\client\gui\screens\reporting\AbstractReportScreen.java
net\minecraft\client\gui\screens\reporting\ChatReportScreen.java
net\minecraft\client\gui\screens\reporting\ChatSelectionLogFiller.java
net\minecraft\client\gui\screens\reporting\ChatSelectionScreen.java
net\minecraft\client\gui\screens\reporting\NameReportScreen.java
net\minecraft\client\gui\screens\reporting\package-info.java
net\minecraft\client\gui\screens\reporting\ReportPlayerScreen.java
net\minecraft\client\gui\screens\reporting\ReportReasonSelectionScreen.java
net\minecraft\client\gui\screens\reporting\SkinReportScreen.java
net\minecraft\client\gui\screens\social\package-info.java
net\minecraft\client\gui\screens\social\PlayerEntry.java
net\minecraft\client\gui\screens\social\PlayerSocialManager.java
net\minecraft\client\gui\screens\social\SocialInteractionsPlayerList.java
net\minecraft\client\gui\screens\social\SocialInteractionsScreen.java
net\minecraft\client\gui\screens\telemetry\package-info.java
net\minecraft\client\gui\screens\telemetry\TelemetryEventWidget.java
net\minecraft\client\gui\screens\telemetry\TelemetryInfoScreen.java
net\minecraft\client\gui\screens\worldselection\ConfirmExperimentalFeaturesScreen.java
net\minecraft\client\gui\screens\worldselection\CreateWorldScreen.java
net\minecraft\client\gui\screens\worldselection\EditGameRulesScreen.java
net\minecraft\client\gui\screens\worldselection\EditWorldScreen.java
net\minecraft\client\gui\screens\worldselection\ExperimentsScreen.java
net\minecraft\client\gui\screens\worldselection\OptimizeWorldScreen.java
net\minecraft\client\gui\screens\worldselection\package-info.java
net\minecraft\client\gui\screens\worldselection\PresetEditor.java
net\minecraft\client\gui\screens\worldselection\SelectWorldScreen.java
net\minecraft\client\gui\screens\worldselection\SwitchGrid.java
net\minecraft\client\gui\screens\worldselection\WorldCreationContext.java
net\minecraft\client\gui\screens\worldselection\WorldCreationUiState.java
net\minecraft\client\gui\screens\worldselection\WorldOpenFlows.java
net\minecraft\client\gui\screens\worldselection\WorldSelectionList.java
net\minecraft\client\gui\spectator\categories
net\minecraft\client\gui\spectator\package-info.java
net\minecraft\client\gui\spectator\PlayerMenuItem.java
net\minecraft\client\gui\spectator\RootSpectatorMenuCategory.java
net\minecraft\client\gui\spectator\SpectatorMenu.java
net\minecraft\client\gui\spectator\SpectatorMenuCategory.java
net\minecraft\client\gui\spectator\SpectatorMenuItem.java
net\minecraft\client\gui\spectator\SpectatorMenuListener.java
net\minecraft\client\gui\spectator\categories\package-info.java
net\minecraft\client\gui\spectator\categories\SpectatorPage.java
net\minecraft\client\gui\spectator\categories\TeleportToPlayerMenuCategory.java
net\minecraft\client\gui\spectator\categories\TeleportToTeamMenuCategory.java
net\minecraft\client\main\GameConfig.java
net\minecraft\client\main\Main.java
net\minecraft\client\main\package-info.java
net\minecraft\client\main\SilentInitException.java
net\minecraft\client\model\dragon
net\minecraft\client\model\geom
net\minecraft\client\model\AbstractZombieModel.java
net\minecraft\client\model\AgeableHierarchicalModel.java
net\minecraft\client\model\AgeableListModel.java
net\minecraft\client\model\AllayModel.java
net\minecraft\client\model\AnimationUtils.java
net\minecraft\client\model\ArmedModel.java
net\minecraft\client\model\ArmorStandArmorModel.java
net\minecraft\client\model\ArmorStandModel.java
net\minecraft\client\model\AxolotlModel.java
net\minecraft\client\model\BatModel.java
net\minecraft\client\model\BeeModel.java
net\minecraft\client\model\BlazeModel.java
net\minecraft\client\model\BoatModel.java
net\minecraft\client\model\BookModel.java
net\minecraft\client\model\BreezeModel.java
net\minecraft\client\model\CamelModel.java
net\minecraft\client\model\CatModel.java
net\minecraft\client\model\ChestBoatModel.java
net\minecraft\client\model\ChestedHorseModel.java
net\minecraft\client\model\ChestRaftModel.java
net\minecraft\client\model\ChickenModel.java
net\minecraft\client\model\CodModel.java
net\minecraft\client\model\ColorableAgeableListModel.java
net\minecraft\client\model\ColorableHierarchicalModel.java
net\minecraft\client\model\CowModel.java
net\minecraft\client\model\CreeperModel.java
net\minecraft\client\model\DolphinModel.java
net\minecraft\client\model\DrownedModel.java
net\minecraft\client\model\ElytraModel.java
net\minecraft\client\model\EndermanModel.java
net\minecraft\client\model\EndermiteModel.java
net\minecraft\client\model\EntityModel.java
net\minecraft\client\model\EvokerFangsModel.java
net\minecraft\client\model\FoxModel.java
net\minecraft\client\model\FrogModel.java
net\minecraft\client\model\GhastModel.java
net\minecraft\client\model\GiantZombieModel.java
net\minecraft\client\model\GoatModel.java
net\minecraft\client\model\GuardianModel.java
net\minecraft\client\model\HeadedModel.java
net\minecraft\client\model\HierarchicalModel.java
net\minecraft\client\model\HoglinModel.java
net\minecraft\client\model\HorseModel.java
net\minecraft\client\model\HumanoidArmorModel.java
net\minecraft\client\model\HumanoidModel.java
net\minecraft\client\model\IllagerModel.java
net\minecraft\client\model\IronGolemModel.java
net\minecraft\client\model\LavaSlimeModel.java
net\minecraft\client\model\LeashKnotModel.java
net\minecraft\client\model\ListModel.java
net\minecraft\client\model\LlamaModel.java
net\minecraft\client\model\LlamaSpitModel.java
net\minecraft\client\model\MinecartModel.java
net\minecraft\client\model\Model.java
net\minecraft\client\model\ModelUtils.java
net\minecraft\client\model\OcelotModel.java
net\minecraft\client\model\package-info.java
net\minecraft\client\model\PandaModel.java
net\minecraft\client\model\ParrotModel.java
net\minecraft\client\model\PhantomModel.java
net\minecraft\client\model\PiglinHeadModel.java
net\minecraft\client\model\PiglinModel.java
net\minecraft\client\model\PigModel.java
net\minecraft\client\model\PlayerModel.java
net\minecraft\client\model\PolarBearModel.java
net\minecraft\client\model\PufferfishBigModel.java
net\minecraft\client\model\PufferfishMidModel.java
net\minecraft\client\model\PufferfishSmallModel.java
net\minecraft\client\model\QuadrupedModel.java
net\minecraft\client\model\RabbitModel.java
net\minecraft\client\model\RaftModel.java
net\minecraft\client\model\RavagerModel.java
net\minecraft\client\model\SalmonModel.java
net\minecraft\client\model\SheepFurModel.java
net\minecraft\client\model\SheepModel.java
net\minecraft\client\model\ShieldModel.java
net\minecraft\client\model\ShulkerBulletModel.java
net\minecraft\client\model\ShulkerModel.java
net\minecraft\client\model\SilverfishModel.java
net\minecraft\client\model\SkeletonModel.java
net\minecraft\client\model\SkullModel.java
net\minecraft\client\model\SkullModelBase.java
net\minecraft\client\model\SlimeModel.java
net\minecraft\client\model\SnifferModel.java
net\minecraft\client\model\SnowGolemModel.java
net\minecraft\client\model\SpiderModel.java
net\minecraft\client\model\SquidModel.java
net\minecraft\client\model\StriderModel.java
net\minecraft\client\model\TadpoleModel.java
net\minecraft\client\model\TridentModel.java
net\minecraft\client\model\TropicalFishModelA.java
net\minecraft\client\model\TropicalFishModelB.java
net\minecraft\client\model\TurtleModel.java
net\minecraft\client\model\VexModel.java
net\minecraft\client\model\VillagerHeadModel.java
net\minecraft\client\model\VillagerModel.java
net\minecraft\client\model\WardenModel.java
net\minecraft\client\model\WaterPatchModel.java
net\minecraft\client\model\WindChargeModel.java
net\minecraft\client\model\WitchModel.java
net\minecraft\client\model\WitherBossModel.java
net\minecraft\client\model\WolfModel.java
net\minecraft\client\model\ZombieModel.java
net\minecraft\client\model\ZombieVillagerModel.java
net\minecraft\client\model\dragon\DragonHeadModel.java
net\minecraft\client\model\dragon\package-info.java
net\minecraft\client\model\geom\builders
net\minecraft\client\model\geom\EntityModelSet.java
net\minecraft\client\model\geom\LayerDefinitions.java
net\minecraft\client\model\geom\ModelLayerLocation.java
net\minecraft\client\model\geom\ModelLayers.java
net\minecraft\client\model\geom\ModelPart.java
net\minecraft\client\model\geom\package-info.java
net\minecraft\client\model\geom\PartNames.java
net\minecraft\client\model\geom\PartPose.java
net\minecraft\client\model\geom\builders\CubeDefinition.java
net\minecraft\client\model\geom\builders\CubeDeformation.java
net\minecraft\client\model\geom\builders\CubeListBuilder.java
net\minecraft\client\model\geom\builders\LayerDefinition.java
net\minecraft\client\model\geom\builders\MaterialDefinition.java
net\minecraft\client\model\geom\builders\MeshDefinition.java
net\minecraft\client\model\geom\builders\package-info.java
net\minecraft\client\model\geom\builders\PartDefinition.java
net\minecraft\client\model\geom\builders\UVPair.java
net\minecraft\client\multiplayer\chat
net\minecraft\client\multiplayer\prediction
net\minecraft\client\multiplayer\resolver
net\minecraft\client\multiplayer\AccountProfileKeyPairManager.java
net\minecraft\client\multiplayer\ChunkBatchSizeCalculator.java
net\minecraft\client\multiplayer\ClientAdvancements.java
net\minecraft\client\multiplayer\ClientChunkCache.java
net\minecraft\client\multiplayer\ClientCommonPacketListenerImpl.java
net\minecraft\client\multiplayer\ClientConfigurationPacketListenerImpl.java
net\minecraft\client\multiplayer\ClientHandshakePacketListenerImpl.java
net\minecraft\client\multiplayer\ClientLevel.java
net\minecraft\client\multiplayer\ClientPacketListener.java
net\minecraft\client\multiplayer\ClientRegistryLayer.java
net\minecraft\client\multiplayer\ClientSuggestionProvider.java
net\minecraft\client\multiplayer\CommonListenerCookie.java
net\minecraft\client\multiplayer\LegacyServerPinger.java
net\minecraft\client\multiplayer\LevelLoadStatusManager.java
net\minecraft\client\multiplayer\MultiPlayerGameMode.java
net\minecraft\client\multiplayer\package-info.java
net\minecraft\client\multiplayer\PingDebugMonitor.java
net\minecraft\client\multiplayer\PlayerInfo.java
net\minecraft\client\multiplayer\ProfileKeyPairManager.java
net\minecraft\client\multiplayer\ServerData.java
net\minecraft\client\multiplayer\ServerList.java
net\minecraft\client\multiplayer\ServerStatusPinger.java
net\minecraft\client\multiplayer\chat\report
net\minecraft\client\multiplayer\chat\ChatListener.java
net\minecraft\client\multiplayer\chat\ChatLog.java
net\minecraft\client\multiplayer\chat\ChatTrustLevel.java
net\minecraft\client\multiplayer\chat\LoggedChatEvent.java
net\minecraft\client\multiplayer\chat\LoggedChatMessage.java
net\minecraft\client\multiplayer\chat\package-info.java
net\minecraft\client\multiplayer\chat\report\AbuseReportSender.java
net\minecraft\client\multiplayer\chat\report\BanReason.java
net\minecraft\client\multiplayer\chat\report\ChatReport.java
net\minecraft\client\multiplayer\chat\report\ChatReportContextBuilder.java
net\minecraft\client\multiplayer\chat\report\NameReport.java
net\minecraft\client\multiplayer\chat\report\package-info.java
net\minecraft\client\multiplayer\chat\report\Report.java
net\minecraft\client\multiplayer\chat\report\ReportEnvironment.java
net\minecraft\client\multiplayer\chat\report\ReportingContext.java
net\minecraft\client\multiplayer\chat\report\ReportReason.java
net\minecraft\client\multiplayer\chat\report\ReportType.java
net\minecraft\client\multiplayer\chat\report\SkinReport.java
net\minecraft\client\multiplayer\prediction\BlockStatePredictionHandler.java
net\minecraft\client\multiplayer\prediction\package-info.java
net\minecraft\client\multiplayer\prediction\PredictiveAction.java
net\minecraft\client\multiplayer\resolver\AddressCheck.java
net\minecraft\client\multiplayer\resolver\package-info.java
net\minecraft\client\multiplayer\resolver\ResolvedServerAddress.java
net\minecraft\client\multiplayer\resolver\ServerAddress.java
net\minecraft\client\multiplayer\resolver\ServerAddressResolver.java
net\minecraft\client\multiplayer\resolver\ServerNameResolver.java
net\minecraft\client\multiplayer\resolver\ServerRedirectHandler.java
net\minecraft\client\particle\AshParticle.java
net\minecraft\client\particle\AttackSweepParticle.java
net\minecraft\client\particle\BaseAshSmokeParticle.java
net\minecraft\client\particle\BlockMarker.java
net\minecraft\client\particle\BreakingItemParticle.java
net\minecraft\client\particle\BubbleColumnUpParticle.java
net\minecraft\client\particle\BubbleParticle.java
net\minecraft\client\particle\BubblePopParticle.java
net\minecraft\client\particle\CampfireSmokeParticle.java
net\minecraft\client\particle\CherryParticle.java
net\minecraft\client\particle\CritParticle.java
net\minecraft\client\particle\DragonBreathParticle.java
net\minecraft\client\particle\DripParticle.java
net\minecraft\client\particle\DustColorTransitionParticle.java
net\minecraft\client\particle\DustParticle.java
net\minecraft\client\particle\DustParticleBase.java
net\minecraft\client\particle\DustPlumeParticle.java
net\minecraft\client\particle\EnchantmentTableParticle.java
net\minecraft\client\particle\EndRodParticle.java
net\minecraft\client\particle\ExplodeParticle.java
net\minecraft\client\particle\FallingDustParticle.java
net\minecraft\client\particle\FireworkParticles.java
net\minecraft\client\particle\FlameParticle.java
net\minecraft\client\particle\GlowParticle.java
net\minecraft\client\particle\GustDustParticle.java
net\minecraft\client\particle\GustParticle.java
net\minecraft\client\particle\GustSeedParticle.java
net\minecraft\client\particle\HeartParticle.java
net\minecraft\client\particle\HugeExplosionParticle.java
net\minecraft\client\particle\HugeExplosionSeedParticle.java
net\minecraft\client\particle\ItemPickupParticle.java
net\minecraft\client\particle\LargeSmokeParticle.java
net\minecraft\client\particle\LavaParticle.java
net\minecraft\client\particle\MobAppearanceParticle.java
net\minecraft\client\particle\NoRenderParticle.java
net\minecraft\client\particle\NoteParticle.java
net\minecraft\client\particle\package-info.java
net\minecraft\client\particle\Particle.java
net\minecraft\client\particle\ParticleDescription.java
net\minecraft\client\particle\ParticleEngine.java
net\minecraft\client\particle\ParticleProvider.java
net\minecraft\client\particle\ParticleRenderType.java
net\minecraft\client\particle\PlayerCloudParticle.java
net\minecraft\client\particle\PortalParticle.java
net\minecraft\client\particle\ReversePortalParticle.java
net\minecraft\client\particle\RisingParticle.java
net\minecraft\client\particle\SculkChargeParticle.java
net\minecraft\client\particle\SculkChargePopParticle.java
net\minecraft\client\particle\ShriekParticle.java
net\minecraft\client\particle\SimpleAnimatedParticle.java
net\minecraft\client\particle\SingleQuadParticle.java
net\minecraft\client\particle\SmokeParticle.java
net\minecraft\client\particle\SnowflakeParticle.java
net\minecraft\client\particle\SonicBoomParticle.java
net\minecraft\client\particle\SoulParticle.java
net\minecraft\client\particle\SpellParticle.java
net\minecraft\client\particle\SpitParticle.java
net\minecraft\client\particle\SplashParticle.java
net\minecraft\client\particle\SpriteSet.java
net\minecraft\client\particle\SquidInkParticle.java
net\minecraft\client\particle\SuspendedParticle.java
net\minecraft\client\particle\SuspendedTownParticle.java
net\minecraft\client\particle\TerrainParticle.java
net\minecraft\client\particle\TextureSheetParticle.java
net\minecraft\client\particle\TotemParticle.java
net\minecraft\client\particle\TrackingEmitter.java
net\minecraft\client\particle\TrialSpawnerDetectionParticle.java
net\minecraft\client\particle\VibrationSignalParticle.java
net\minecraft\client\particle\WakeParticle.java
net\minecraft\client\particle\WaterCurrentDownParticle.java
net\minecraft\client\particle\WaterDropParticle.java
net\minecraft\client\particle\WhiteAshParticle.java
net\minecraft\client\particle\WhiteSmokeParticle.java
net\minecraft\client\player\inventory
net\minecraft\client\player\AbstractClientPlayer.java
net\minecraft\client\player\Input.java
net\minecraft\client\player\KeyboardInput.java
net\minecraft\client\player\LocalPlayer.java
net\minecraft\client\player\package-info.java
net\minecraft\client\player\RemotePlayer.java
net\minecraft\client\player\inventory\Hotbar.java
net\minecraft\client\player\inventory\package-info.java
net\minecraft\client\profiling\ClientMetricsSamplersProvider.java
net\minecraft\client\profiling\package-info.java
net\minecraft\client\quickplay\package-info.java
net\minecraft\client\quickplay\QuickPlay.java
net\minecraft\client\quickplay\QuickPlayLog.java
net\minecraft\client\renderer\block
net\minecraft\client\renderer\blockentity
net\minecraft\client\renderer\chunk
net\minecraft\client\renderer\culling
net\minecraft\client\renderer\debug
net\minecraft\client\renderer\entity
net\minecraft\client\renderer\item
net\minecraft\client\renderer\texture
net\minecraft\client\renderer\BiomeColors.java
net\minecraft\client\renderer\BlockEntityWithoutLevelRenderer.java
net\minecraft\client\renderer\CubeMap.java
net\minecraft\client\renderer\DimensionSpecialEffects.java
net\minecraft\client\renderer\EffectInstance.java
net\minecraft\client\renderer\FaceInfo.java
net\minecraft\client\renderer\FogRenderer.java
net\minecraft\client\renderer\GameRenderer.java
net\minecraft\client\renderer\GpuWarnlistManager.java
net\minecraft\client\renderer\ItemBlockRenderTypes.java
net\minecraft\client\renderer\ItemInHandRenderer.java
net\minecraft\client\renderer\ItemModelShaper.java
net\minecraft\client\renderer\LevelRenderer.java
net\minecraft\client\renderer\LightTexture.java
net\minecraft\client\renderer\MultiBufferSource.java
net\minecraft\client\renderer\OutlineBufferSource.java
net\minecraft\client\renderer\package-info.java
net\minecraft\client\renderer\PanoramaRenderer.java
net\minecraft\client\renderer\PostChain.java
net\minecraft\client\renderer\PostPass.java
net\minecraft\client\renderer\Rect2i.java
net\minecraft\client\renderer\RenderBuffers.java
net\minecraft\client\renderer\RenderStateShard.java
net\minecraft\client\renderer\RenderType.java
net\minecraft\client\renderer\RunningTrimmedMean.java
net\minecraft\client\renderer\ScreenEffectRenderer.java
net\minecraft\client\renderer\SectionBufferBuilderPack.java
net\minecraft\client\renderer\SectionBufferBuilderPool.java
net\minecraft\client\renderer\SectionOcclusionGraph.java
net\minecraft\client\renderer\ShaderInstance.java
net\minecraft\client\renderer\Sheets.java
net\minecraft\client\renderer\SpriteCoordinateExpander.java
net\minecraft\client\renderer\ViewArea.java
net\minecraft\client\renderer\VirtualScreen.java
net\minecraft\client\renderer\block\model
net\minecraft\client\renderer\block\BlockModelShaper.java
net\minecraft\client\renderer\block\BlockRenderDispatcher.java
net\minecraft\client\renderer\block\LiquidBlockRenderer.java
net\minecraft\client\renderer\block\ModelBlockRenderer.java
net\minecraft\client\renderer\block\package-info.java
net\minecraft\client\renderer\block\model\multipart
net\minecraft\client\renderer\block\model\BakedQuad.java
net\minecraft\client\renderer\block\model\BlockElement.java
net\minecraft\client\renderer\block\model\BlockElementFace.java
net\minecraft\client\renderer\block\model\BlockElementRotation.java
net\minecraft\client\renderer\block\model\BlockFaceUV.java
net\minecraft\client\renderer\block\model\BlockModel.java
net\minecraft\client\renderer\block\model\BlockModelDefinition.java
net\minecraft\client\renderer\block\model\FaceBakery.java
net\minecraft\client\renderer\block\model\ItemModelGenerator.java
net\minecraft\client\renderer\block\model\ItemOverride.java
net\minecraft\client\renderer\block\model\ItemOverrides.java
net\minecraft\client\renderer\block\model\ItemTransform.java
net\minecraft\client\renderer\block\model\ItemTransforms.java
net\minecraft\client\renderer\block\model\MultiVariant.java
net\minecraft\client\renderer\block\model\package-info.java
net\minecraft\client\renderer\block\model\Variant.java
net\minecraft\client\renderer\block\model\multipart\AndCondition.java
net\minecraft\client\renderer\block\model\multipart\Condition.java
net\minecraft\client\renderer\block\model\multipart\KeyValueCondition.java
net\minecraft\client\renderer\block\model\multipart\MultiPart.java
net\minecraft\client\renderer\block\model\multipart\OrCondition.java
net\minecraft\client\renderer\block\model\multipart\package-info.java
net\minecraft\client\renderer\block\model\multipart\Selector.java
net\minecraft\client\renderer\blockentity\BannerRenderer.java
net\minecraft\client\renderer\blockentity\BeaconRenderer.java
net\minecraft\client\renderer\blockentity\BedRenderer.java
net\minecraft\client\renderer\blockentity\BellRenderer.java
net\minecraft\client\renderer\blockentity\BlockEntityRenderDispatcher.java
net\minecraft\client\renderer\blockentity\BlockEntityRenderer.java
net\minecraft\client\renderer\blockentity\BlockEntityRendererProvider.java
net\minecraft\client\renderer\blockentity\BlockEntityRenderers.java
net\minecraft\client\renderer\blockentity\BrightnessCombiner.java
net\minecraft\client\renderer\blockentity\BrushableBlockRenderer.java
net\minecraft\client\renderer\blockentity\CampfireRenderer.java
net\minecraft\client\renderer\blockentity\ChestRenderer.java
net\minecraft\client\renderer\blockentity\ConduitRenderer.java
net\minecraft\client\renderer\blockentity\DecoratedPotRenderer.java
net\minecraft\client\renderer\blockentity\EnchantTableRenderer.java
net\minecraft\client\renderer\blockentity\HangingSignRenderer.java
net\minecraft\client\renderer\blockentity\LecternRenderer.java
net\minecraft\client\renderer\blockentity\package-info.java
net\minecraft\client\renderer\blockentity\PistonHeadRenderer.java
net\minecraft\client\renderer\blockentity\ShulkerBoxRenderer.java
net\minecraft\client\renderer\blockentity\SignRenderer.java
net\minecraft\client\renderer\blockentity\SkullBlockRenderer.java
net\minecraft\client\renderer\blockentity\SpawnerRenderer.java
net\minecraft\client\renderer\blockentity\StructureBlockRenderer.java
net\minecraft\client\renderer\blockentity\TheEndGatewayRenderer.java
net\minecraft\client\renderer\blockentity\TheEndPortalRenderer.java
net\minecraft\client\renderer\blockentity\TrialSpawnerRenderer.java
net\minecraft\client\renderer\chunk\package-info.java
net\minecraft\client\renderer\chunk\RenderChunk.java
net\minecraft\client\renderer\chunk\RenderChunkRegion.java
net\minecraft\client\renderer\chunk\RenderRegionCache.java
net\minecraft\client\renderer\chunk\SectionRenderDispatcher.java
net\minecraft\client\renderer\chunk\VisGraph.java
net\minecraft\client\renderer\chunk\VisibilitySet.java
net\minecraft\client\renderer\culling\Frustum.java
net\minecraft\client\renderer\culling\package-info.java
net\minecraft\client\renderer\debug\BeeDebugRenderer.java
net\minecraft\client\renderer\debug\BrainDebugRenderer.java
net\minecraft\client\renderer\debug\BreezeDebugRenderer.java
net\minecraft\client\renderer\debug\ChunkBorderRenderer.java
net\minecraft\client\renderer\debug\ChunkDebugRenderer.java
net\minecraft\client\renderer\debug\CollisionBoxRenderer.java
net\minecraft\client\renderer\debug\DebugRenderer.java
net\minecraft\client\renderer\debug\GameEventListenerRenderer.java
net\minecraft\client\renderer\debug\GameTestDebugRenderer.java
net\minecraft\client\renderer\debug\GoalSelectorDebugRenderer.java
net\minecraft\client\renderer\debug\HeightMapRenderer.java
net\minecraft\client\renderer\debug\LightDebugRenderer.java
net\minecraft\client\renderer\debug\LightSectionDebugRenderer.java
net\minecraft\client\renderer\debug\NeighborsUpdateRenderer.java
net\minecraft\client\renderer\debug\package-info.java
net\minecraft\client\renderer\debug\PathfindingRenderer.java
net\minecraft\client\renderer\debug\RaidDebugRenderer.java
net\minecraft\client\renderer\debug\SolidFaceRenderer.java
net\minecraft\client\renderer\debug\StructureRenderer.java
net\minecraft\client\renderer\debug\SupportBlockRenderer.java
net\minecraft\client\renderer\debug\VillageSectionsDebugRenderer.java
net\minecraft\client\renderer\debug\WaterDebugRenderer.java
net\minecraft\client\renderer\debug\WorldGenAttemptRenderer.java
net\minecraft\client\renderer\entity\layers
net\minecraft\client\renderer\entity\player
net\minecraft\client\renderer\entity\AbstractHorseRenderer.java
net\minecraft\client\renderer\entity\AbstractZombieRenderer.java
net\minecraft\client\renderer\entity\AllayRenderer.java
net\minecraft\client\renderer\entity\ArmorStandRenderer.java
net\minecraft\client\renderer\entity\ArrowRenderer.java
net\minecraft\client\renderer\entity\AxolotlRenderer.java
net\minecraft\client\renderer\entity\BatRenderer.java
net\minecraft\client\renderer\entity\BeeRenderer.java
net\minecraft\client\renderer\entity\BlazeRenderer.java
net\minecraft\client\renderer\entity\BoatRenderer.java
net\minecraft\client\renderer\entity\BreezeRenderer.java
net\minecraft\client\renderer\entity\CamelRenderer.java
net\minecraft\client\renderer\entity\CatRenderer.java
net\minecraft\client\renderer\entity\CaveSpiderRenderer.java
net\minecraft\client\renderer\entity\ChestedHorseRenderer.java
net\minecraft\client\renderer\entity\ChickenRenderer.java
net\minecraft\client\renderer\entity\CodRenderer.java
net\minecraft\client\renderer\entity\CowRenderer.java
net\minecraft\client\renderer\entity\CreeperRenderer.java
net\minecraft\client\renderer\entity\DisplayRenderer.java
net\minecraft\client\renderer\entity\DolphinRenderer.java
net\minecraft\client\renderer\entity\DragonFireballRenderer.java
net\minecraft\client\renderer\entity\DrownedRenderer.java
net\minecraft\client\renderer\entity\ElderGuardianRenderer.java
net\minecraft\client\renderer\entity\EndCrystalRenderer.java
net\minecraft\client\renderer\entity\EnderDragonRenderer.java
net\minecraft\client\renderer\entity\EndermanRenderer.java
net\minecraft\client\renderer\entity\EndermiteRenderer.java
net\minecraft\client\renderer\entity\EntityRenderDispatcher.java
net\minecraft\client\renderer\entity\EntityRenderer.java
net\minecraft\client\renderer\entity\EntityRendererProvider.java
net\minecraft\client\renderer\entity\EntityRenderers.java
net\minecraft\client\renderer\entity\EvokerFangsRenderer.java
net\minecraft\client\renderer\entity\EvokerRenderer.java
net\minecraft\client\renderer\entity\ExperienceOrbRenderer.java
net\minecraft\client\renderer\entity\FallingBlockRenderer.java
net\minecraft\client\renderer\entity\FireworkEntityRenderer.java
net\minecraft\client\renderer\entity\FishingHookRenderer.java
net\minecraft\client\renderer\entity\FoxRenderer.java
net\minecraft\client\renderer\entity\FrogRenderer.java
net\minecraft\client\renderer\entity\GhastRenderer.java
net\minecraft\client\renderer\entity\GiantMobRenderer.java
net\minecraft\client\renderer\entity\GlowSquidRenderer.java
net\minecraft\client\renderer\entity\GoatRenderer.java
net\minecraft\client\renderer\entity\GuardianRenderer.java
net\minecraft\client\renderer\entity\HoglinRenderer.java
net\minecraft\client\renderer\entity\HorseRenderer.java
net\minecraft\client\renderer\entity\HumanoidMobRenderer.java
net\minecraft\client\renderer\entity\HuskRenderer.java
net\minecraft\client\renderer\entity\IllagerRenderer.java
net\minecraft\client\renderer\entity\IllusionerRenderer.java
net\minecraft\client\renderer\entity\IronGolemRenderer.java
net\minecraft\client\renderer\entity\ItemEntityRenderer.java
net\minecraft\client\renderer\entity\ItemFrameRenderer.java
net\minecraft\client\renderer\entity\ItemRenderer.java
net\minecraft\client\renderer\entity\LeashKnotRenderer.java
net\minecraft\client\renderer\entity\LightningBoltRenderer.java
net\minecraft\client\renderer\entity\LivingEntityRenderer.java
net\minecraft\client\renderer\entity\LlamaRenderer.java
net\minecraft\client\renderer\entity\LlamaSpitRenderer.java
net\minecraft\client\renderer\entity\MagmaCubeRenderer.java
net\minecraft\client\renderer\entity\MinecartRenderer.java
net\minecraft\client\renderer\entity\MobRenderer.java
net\minecraft\client\renderer\entity\MushroomCowRenderer.java
net\minecraft\client\renderer\entity\NoopRenderer.java
net\minecraft\client\renderer\entity\OcelotRenderer.java
net\minecraft\client\renderer\entity\package-info.java
net\minecraft\client\renderer\entity\PaintingRenderer.java
net\minecraft\client\renderer\entity\PandaRenderer.java
net\minecraft\client\renderer\entity\ParrotRenderer.java
net\minecraft\client\renderer\entity\PhantomRenderer.java
net\minecraft\client\renderer\entity\PiglinRenderer.java
net\minecraft\client\renderer\entity\PigRenderer.java
net\minecraft\client\renderer\entity\PillagerRenderer.java
net\minecraft\client\renderer\entity\PolarBearRenderer.java
net\minecraft\client\renderer\entity\PufferfishRenderer.java
net\minecraft\client\renderer\entity\RabbitRenderer.java
net\minecraft\client\renderer\entity\RavagerRenderer.java
net\minecraft\client\renderer\entity\RenderLayerParent.java
net\minecraft\client\renderer\entity\SalmonRenderer.java
net\minecraft\client\renderer\entity\SheepRenderer.java
net\minecraft\client\renderer\entity\ShulkerBulletRenderer.java
net\minecraft\client\renderer\entity\ShulkerRenderer.java
net\minecraft\client\renderer\entity\SilverfishRenderer.java
net\minecraft\client\renderer\entity\SkeletonRenderer.java
net\minecraft\client\renderer\entity\SlimeRenderer.java
net\minecraft\client\renderer\entity\SnifferRenderer.java
net\minecraft\client\renderer\entity\SnowGolemRenderer.java
net\minecraft\client\renderer\entity\SpectralArrowRenderer.java
net\minecraft\client\renderer\entity\SpiderRenderer.java
net\minecraft\client\renderer\entity\SquidRenderer.java
net\minecraft\client\renderer\entity\StrayRenderer.java
net\minecraft\client\renderer\entity\StriderRenderer.java
net\minecraft\client\renderer\entity\TadpoleRenderer.java
net\minecraft\client\renderer\entity\ThrownItemRenderer.java
net\minecraft\client\renderer\entity\ThrownTridentRenderer.java
net\minecraft\client\renderer\entity\TippableArrowRenderer.java
net\minecraft\client\renderer\entity\TntMinecartRenderer.java
net\minecraft\client\renderer\entity\TntRenderer.java
net\minecraft\client\renderer\entity\TropicalFishRenderer.java
net\minecraft\client\renderer\entity\TurtleRenderer.java
net\minecraft\client\renderer\entity\UndeadHorseRenderer.java
net\minecraft\client\renderer\entity\VexRenderer.java
net\minecraft\client\renderer\entity\VillagerRenderer.java
net\minecraft\client\renderer\entity\VindicatorRenderer.java
net\minecraft\client\renderer\entity\WanderingTraderRenderer.java
net\minecraft\client\renderer\entity\WardenRenderer.java
net\minecraft\client\renderer\entity\WindChargeRenderer.java
net\minecraft\client\renderer\entity\WitchRenderer.java
net\minecraft\client\renderer\entity\WitherBossRenderer.java
net\minecraft\client\renderer\entity\WitherSkeletonRenderer.java
net\minecraft\client\renderer\entity\WitherSkullRenderer.java
net\minecraft\client\renderer\entity\WolfRenderer.java
net\minecraft\client\renderer\entity\ZoglinRenderer.java
net\minecraft\client\renderer\entity\ZombieRenderer.java
net\minecraft\client\renderer\entity\ZombieVillagerRenderer.java
net\minecraft\client\renderer\entity\layers\ArrowLayer.java
net\minecraft\client\renderer\entity\layers\BeeStingerLayer.java
net\minecraft\client\renderer\entity\layers\BreezeEyesLayer.java
net\minecraft\client\renderer\entity\layers\BreezeWindLayer.java
net\minecraft\client\renderer\entity\layers\CapeLayer.java
net\minecraft\client\renderer\entity\layers\CarriedBlockLayer.java
net\minecraft\client\renderer\entity\layers\CatCollarLayer.java
net\minecraft\client\renderer\entity\layers\CreeperPowerLayer.java
net\minecraft\client\renderer\entity\layers\CrossedArmsItemLayer.java
net\minecraft\client\renderer\entity\layers\CustomHeadLayer.java
net\minecraft\client\renderer\entity\layers\Deadmau5EarsLayer.java
net\minecraft\client\renderer\entity\layers\DolphinCarryingItemLayer.java
net\minecraft\client\renderer\entity\layers\DrownedOuterLayer.java
net\minecraft\client\renderer\entity\layers\ElytraLayer.java
net\minecraft\client\renderer\entity\layers\EnderEyesLayer.java
net\minecraft\client\renderer\entity\layers\EnergySwirlLayer.java
net\minecraft\client\renderer\entity\layers\EyesLayer.java
net\minecraft\client\renderer\entity\layers\FoxHeldItemLayer.java
net\minecraft\client\renderer\entity\layers\HorseArmorLayer.java
net\minecraft\client\renderer\entity\layers\HorseMarkingLayer.java
net\minecraft\client\renderer\entity\layers\HumanoidArmorLayer.java
net\minecraft\client\renderer\entity\layers\IronGolemCrackinessLayer.java
net\minecraft\client\renderer\entity\layers\IronGolemFlowerLayer.java
net\minecraft\client\renderer\entity\layers\ItemInHandLayer.java
net\minecraft\client\renderer\entity\layers\LlamaDecorLayer.java
net\minecraft\client\renderer\entity\layers\MushroomCowMushroomLayer.java
net\minecraft\client\renderer\entity\layers\package-info.java
net\minecraft\client\renderer\entity\layers\PandaHoldsItemLayer.java
net\minecraft\client\renderer\entity\layers\ParrotOnShoulderLayer.java
net\minecraft\client\renderer\entity\layers\PhantomEyesLayer.java
net\minecraft\client\renderer\entity\layers\PlayerItemInHandLayer.java
net\minecraft\client\renderer\entity\layers\RenderLayer.java
net\minecraft\client\renderer\entity\layers\SaddleLayer.java
net\minecraft\client\renderer\entity\layers\SheepFurLayer.java
net\minecraft\client\renderer\entity\layers\ShulkerHeadLayer.java
net\minecraft\client\renderer\entity\layers\SlimeOuterLayer.java
net\minecraft\client\renderer\entity\layers\SnowGolemHeadLayer.java
net\minecraft\client\renderer\entity\layers\SpiderEyesLayer.java
net\minecraft\client\renderer\entity\layers\SpinAttackEffectLayer.java
net\minecraft\client\renderer\entity\layers\StrayClothingLayer.java
net\minecraft\client\renderer\entity\layers\StuckInBodyLayer.java
net\minecraft\client\renderer\entity\layers\TropicalFishPatternLayer.java
net\minecraft\client\renderer\entity\layers\VillagerProfessionLayer.java
net\minecraft\client\renderer\entity\layers\WardenEmissiveLayer.java
net\minecraft\client\renderer\entity\layers\WitchItemLayer.java
net\minecraft\client\renderer\entity\layers\WitherArmorLayer.java
net\minecraft\client\renderer\entity\layers\WolfCollarLayer.java
net\minecraft\client\renderer\entity\player\package-info.java
net\minecraft\client\renderer\entity\player\PlayerRenderer.java
net\minecraft\client\renderer\item\ClampedItemPropertyFunction.java
net\minecraft\client\renderer\item\CompassItemPropertyFunction.java
net\minecraft\client\renderer\item\ItemProperties.java
net\minecraft\client\renderer\item\ItemPropertyFunction.java
net\minecraft\client\renderer\item\package-info.java
net\minecraft\client\renderer\texture\atlas
net\minecraft\client\renderer\texture\AbstractTexture.java
net\minecraft\client\renderer\texture\Dumpable.java
net\minecraft\client\renderer\texture\DynamicTexture.java
net\minecraft\client\renderer\texture\HttpTexture.java
net\minecraft\client\renderer\texture\MipmapGenerator.java
net\minecraft\client\renderer\texture\MissingTextureAtlasSprite.java
net\minecraft\client\renderer\texture\OverlayTexture.java
net\minecraft\client\renderer\texture\package-info.java
net\minecraft\client\renderer\texture\PreloadedTexture.java
net\minecraft\client\renderer\texture\SimpleTexture.java
net\minecraft\client\renderer\texture\SpriteContents.java
net\minecraft\client\renderer\texture\SpriteLoader.java
net\minecraft\client\renderer\texture\SpriteTicker.java
net\minecraft\client\renderer\texture\Stitcher.java
net\minecraft\client\renderer\texture\StitcherException.java
net\minecraft\client\renderer\texture\TextureAtlas.java
net\minecraft\client\renderer\texture\TextureAtlasSprite.java
net\minecraft\client\renderer\texture\TextureManager.java
net\minecraft\client\renderer\texture\Tickable.java
net\minecraft\client\renderer\texture\atlas\sources
net\minecraft\client\renderer\texture\atlas\package-info.java
net\minecraft\client\renderer\texture\atlas\SpriteResourceLoader.java
net\minecraft\client\renderer\texture\atlas\SpriteSource.java
net\minecraft\client\renderer\texture\atlas\SpriteSourceList.java
net\minecraft\client\renderer\texture\atlas\SpriteSources.java
net\minecraft\client\renderer\texture\atlas\SpriteSourceType.java
net\minecraft\client\renderer\texture\atlas\sources\DirectoryLister.java
net\minecraft\client\renderer\texture\atlas\sources\LazyLoadedImage.java
net\minecraft\client\renderer\texture\atlas\sources\package-info.java
net\minecraft\client\renderer\texture\atlas\sources\PalettedPermutations.java
net\minecraft\client\renderer\texture\atlas\sources\SingleFile.java
net\minecraft\client\renderer\texture\atlas\sources\SourceFilter.java
net\minecraft\client\renderer\texture\atlas\sources\Unstitcher.java
net\minecraft\client\resources\language
net\minecraft\client\resources\metadata
net\minecraft\client\resources\model
net\minecraft\client\resources\server
net\minecraft\client\resources\sounds
net\minecraft\client\resources\ClientPackSource.java
net\minecraft\client\resources\DefaultPlayerSkin.java
net\minecraft\client\resources\FoliageColorReloadListener.java
net\minecraft\client\resources\GrassColorReloadListener.java
net\minecraft\client\resources\IndexedAssetSource.java
net\minecraft\client\resources\LegacyStuffWrapper.java
net\minecraft\client\resources\MobEffectTextureManager.java
net\minecraft\client\resources\package-info.java
net\minecraft\client\resources\PaintingTextureManager.java
net\minecraft\client\resources\PlayerSkin.java
net\minecraft\client\resources\SkinManager.java
net\minecraft\client\resources\SplashManager.java
net\minecraft\client\resources\TextureAtlasHolder.java
net\minecraft\client\resources\language\ClientLanguage.java
net\minecraft\client\resources\language\FormattedBidiReorder.java
net\minecraft\client\resources\language\I18n.java
net\minecraft\client\resources\language\LanguageInfo.java
net\minecraft\client\resources\language\LanguageManager.java
net\minecraft\client\resources\language\package-info.java
net\minecraft\client\resources\metadata\animation
net\minecraft\client\resources\metadata\gui
net\minecraft\client\resources\metadata\language
net\minecraft\client\resources\metadata\texture
net\minecraft\client\resources\metadata\package-info.java
net\minecraft\client\resources\metadata\animation\AnimationFrame.java
net\minecraft\client\resources\metadata\animation\AnimationMetadataSection.java
net\minecraft\client\resources\metadata\animation\AnimationMetadataSectionSerializer.java
net\minecraft\client\resources\metadata\animation\FrameSize.java
net\minecraft\client\resources\metadata\animation\package-info.java
net\minecraft\client\resources\metadata\animation\VillagerMetaDataSection.java
net\minecraft\client\resources\metadata\animation\VillagerMetadataSectionSerializer.java
net\minecraft\client\resources\metadata\gui\GuiMetadataSection.java
net\minecraft\client\resources\metadata\gui\GuiSpriteScaling.java
net\minecraft\client\resources\metadata\gui\package-info.java
net\minecraft\client\resources\metadata\language\LanguageMetadataSection.java
net\minecraft\client\resources\metadata\language\package-info.java
net\minecraft\client\resources\metadata\texture\package-info.java
net\minecraft\client\resources\metadata\texture\TextureMetadataSection.java
net\minecraft\client\resources\metadata\texture\TextureMetadataSectionSerializer.java
net\minecraft\client\resources\model\AtlasSet.java
net\minecraft\client\resources\model\BakedModel.java
net\minecraft\client\resources\model\BlockModelRotation.java
net\minecraft\client\resources\model\BuiltInModel.java
net\minecraft\client\resources\model\Material.java
net\minecraft\client\resources\model\ModelBaker.java
net\minecraft\client\resources\model\ModelBakery.java
net\minecraft\client\resources\model\ModelManager.java
net\minecraft\client\resources\model\ModelResourceLocation.java
net\minecraft\client\resources\model\ModelState.java
net\minecraft\client\resources\model\MultiPartBakedModel.java
net\minecraft\client\resources\model\package-info.java
net\minecraft\client\resources\model\SimpleBakedModel.java
net\minecraft\client\resources\model\UnbakedModel.java
net\minecraft\client\resources\model\WeightedBakedModel.java
net\minecraft\client\resources\server\DownloadedPackSource.java
net\minecraft\client\resources\server\package-info.java
net\minecraft\client\resources\server\PackDownloader.java
net\minecraft\client\resources\server\PackLoadFeedback.java
net\minecraft\client\resources\server\PackReloadConfig.java
net\minecraft\client\resources\server\ServerPackManager.java
net\minecraft\client\resources\sounds\AbstractSoundInstance.java
net\minecraft\client\resources\sounds\AbstractTickableSoundInstance.java
net\minecraft\client\resources\sounds\AmbientSoundHandler.java
net\minecraft\client\resources\sounds\BeeAggressiveSoundInstance.java
net\minecraft\client\resources\sounds\BeeFlyingSoundInstance.java
net\minecraft\client\resources\sounds\BeeSoundInstance.java
net\minecraft\client\resources\sounds\BiomeAmbientSoundsHandler.java
net\minecraft\client\resources\sounds\BubbleColumnAmbientSoundHandler.java
net\minecraft\client\resources\sounds\ElytraOnPlayerSoundInstance.java
net\minecraft\client\resources\sounds\EntityBoundSoundInstance.java
net\minecraft\client\resources\sounds\GuardianAttackSoundInstance.java
net\minecraft\client\resources\sounds\MinecartSoundInstance.java
net\minecraft\client\resources\sounds\package-info.java
net\minecraft\client\resources\sounds\RidingMinecartSoundInstance.java
net\minecraft\client\resources\sounds\SimpleSoundInstance.java
net\minecraft\client\resources\sounds\SnifferSoundInstance.java
net\minecraft\client\resources\sounds\Sound.java
net\minecraft\client\resources\sounds\SoundEventRegistration.java
net\minecraft\client\resources\sounds\SoundEventRegistrationSerializer.java
net\minecraft\client\resources\sounds\SoundInstance.java
net\minecraft\client\resources\sounds\TickableSoundInstance.java
net\minecraft\client\resources\sounds\UnderwaterAmbientSoundHandler.java
net\minecraft\client\resources\sounds\UnderwaterAmbientSoundInstances.java
net\minecraft\client\searchtree\FullTextSearchTree.java
net\minecraft\client\searchtree\IdSearchTree.java
net\minecraft\client\searchtree\IntersectionIterator.java
net\minecraft\client\searchtree\MergingUniqueIterator.java
net\minecraft\client\searchtree\package-info.java
net\minecraft\client\searchtree\PlainTextSearchTree.java
net\minecraft\client\searchtree\RefreshableSearchTree.java
net\minecraft\client\searchtree\ResourceLocationSearchTree.java
net\minecraft\client\searchtree\SearchRegistry.java
net\minecraft\client\searchtree\SearchTree.java
net\minecraft\client\searchtree\SuffixArray.java
net\minecraft\client\server\IntegratedPlayerList.java
net\minecraft\client\server\IntegratedServer.java
net\minecraft\client\server\LanServer.java
net\minecraft\client\server\LanServerDetection.java
net\minecraft\client\server\LanServerPinger.java
net\minecraft\client\server\package-info.java
net\minecraft\client\sounds\AudioStream.java
net\minecraft\client\sounds\ChannelAccess.java
net\minecraft\client\sounds\LoopingAudioStream.java
net\minecraft\client\sounds\MusicManager.java
net\minecraft\client\sounds\package-info.java
net\minecraft\client\sounds\SoundBufferLibrary.java
net\minecraft\client\sounds\SoundEngine.java
net\minecraft\client\sounds\SoundEngineExecutor.java
net\minecraft\client\sounds\SoundEventListener.java
net\minecraft\client\sounds\SoundManager.java
net\minecraft\client\sounds\WeighedSoundEvents.java
net\minecraft\client\sounds\Weighted.java
net\minecraft\client\telemetry\events
net\minecraft\client\telemetry\ClientTelemetryManager.java
net\minecraft\client\telemetry\package-info.java
net\minecraft\client\telemetry\TelemetryEventInstance.java
net\minecraft\client\telemetry\TelemetryEventLog.java
net\minecraft\client\telemetry\TelemetryEventLogger.java
net\minecraft\client\telemetry\TelemetryEventSender.java
net\minecraft\client\telemetry\TelemetryEventType.java
net\minecraft\client\telemetry\TelemetryLogManager.java
net\minecraft\client\telemetry\TelemetryProperty.java
net\minecraft\client\telemetry\TelemetryPropertyMap.java
net\minecraft\client\telemetry\WorldSessionTelemetryManager.java
net\minecraft\client\telemetry\events\AggregatedTelemetryEvent.java
net\minecraft\client\telemetry\events\GameLoadTimesEvent.java
net\minecraft\client\telemetry\events\package-info.java
net\minecraft\client\telemetry\events\PerformanceMetricsEvent.java
net\minecraft\client\telemetry\events\WorldLoadEvent.java
net\minecraft\client\telemetry\events\WorldLoadTimesEvent.java
net\minecraft\client\telemetry\events\WorldUnloadEvent.java
net\minecraft\client\tutorial\BundleTutorial.java
net\minecraft\client\tutorial\CompletedTutorialStepInstance.java
net\minecraft\client\tutorial\CraftPlanksTutorialStep.java
net\minecraft\client\tutorial\FindTreeTutorialStepInstance.java
net\minecraft\client\tutorial\MovementTutorialStepInstance.java
net\minecraft\client\tutorial\OpenInventoryTutorialStep.java
net\minecraft\client\tutorial\package-info.java
net\minecraft\client\tutorial\PunchTreeTutorialStepInstance.java
net\minecraft\client\tutorial\Tutorial.java
net\minecraft\client\tutorial\TutorialStepInstance.java
net\minecraft\client\tutorial\TutorialSteps.java
net\minecraft\commands\arguments
net\minecraft\commands\execution
net\minecraft\commands\functions
net\minecraft\commands\synchronization
net\minecraft\commands\BrigadierExceptions.java
net\minecraft\commands\CacheableFunction.java
net\minecraft\commands\CommandBuildContext.java
net\minecraft\commands\CommandResultCallback.java
net\minecraft\commands\Commands.java
net\minecraft\commands\CommandSigningContext.java
net\minecraft\commands\CommandSource.java
net\minecraft\commands\CommandSourceStack.java
net\minecraft\commands\ExecutionCommandSource.java
net\minecraft\commands\FunctionInstantiationException.java
net\minecraft\commands\package-info.java
net\minecraft\commands\ParserUtils.java
net\minecraft\commands\SharedSuggestionProvider.java
net\minecraft\commands\arguments\blocks
net\minecraft\commands\arguments\coordinates
net\minecraft\commands\arguments\item
net\minecraft\commands\arguments\selector
net\minecraft\commands\arguments\AngleArgument.java
net\minecraft\commands\arguments\ArgumentSignatures.java
net\minecraft\commands\arguments\ColorArgument.java
net\minecraft\commands\arguments\ComponentArgument.java
net\minecraft\commands\arguments\CompoundTagArgument.java
net\minecraft\commands\arguments\DimensionArgument.java
net\minecraft\commands\arguments\EntityAnchorArgument.java
net\minecraft\commands\arguments\EntityArgument.java
net\minecraft\commands\arguments\GameModeArgument.java
net\minecraft\commands\arguments\GameProfileArgument.java
net\minecraft\commands\arguments\HeightmapTypeArgument.java
net\minecraft\commands\arguments\MessageArgument.java
net\minecraft\commands\arguments\NbtPathArgument.java
net\minecraft\commands\arguments\NbtTagArgument.java
net\minecraft\commands\arguments\ObjectiveArgument.java
net\minecraft\commands\arguments\ObjectiveCriteriaArgument.java
net\minecraft\commands\arguments\OperationArgument.java
net\minecraft\commands\arguments\package-info.java
net\minecraft\commands\arguments\ParticleArgument.java
net\minecraft\commands\arguments\RangeArgument.java
net\minecraft\commands\arguments\ResourceArgument.java
net\minecraft\commands\arguments\ResourceKeyArgument.java
net\minecraft\commands\arguments\ResourceLocationArgument.java
net\minecraft\commands\arguments\ResourceOrTagArgument.java
net\minecraft\commands\arguments\ResourceOrTagKeyArgument.java
net\minecraft\commands\arguments\ScoreboardSlotArgument.java
net\minecraft\commands\arguments\ScoreHolderArgument.java
net\minecraft\commands\arguments\SignedArgument.java
net\minecraft\commands\arguments\SlotArgument.java
net\minecraft\commands\arguments\StringRepresentableArgument.java
net\minecraft\commands\arguments\StyleArgument.java
net\minecraft\commands\arguments\TeamArgument.java
net\minecraft\commands\arguments\TemplateMirrorArgument.java
net\minecraft\commands\arguments\TemplateRotationArgument.java
net\minecraft\commands\arguments\TimeArgument.java
net\minecraft\commands\arguments\UuidArgument.java
net\minecraft\commands\arguments\blocks\BlockInput.java
net\minecraft\commands\arguments\blocks\BlockPredicateArgument.java
net\minecraft\commands\arguments\blocks\BlockStateArgument.java
net\minecraft\commands\arguments\blocks\BlockStateParser.java
net\minecraft\commands\arguments\blocks\package-info.java
net\minecraft\commands\arguments\coordinates\BlockPosArgument.java
net\minecraft\commands\arguments\coordinates\ColumnPosArgument.java
net\minecraft\commands\arguments\coordinates\Coordinates.java
net\minecraft\commands\arguments\coordinates\LocalCoordinates.java
net\minecraft\commands\arguments\coordinates\package-info.java
net\minecraft\commands\arguments\coordinates\RotationArgument.java
net\minecraft\commands\arguments\coordinates\SwizzleArgument.java
net\minecraft\commands\arguments\coordinates\Vec2Argument.java
net\minecraft\commands\arguments\coordinates\Vec3Argument.java
net\minecraft\commands\arguments\coordinates\WorldCoordinate.java
net\minecraft\commands\arguments\coordinates\WorldCoordinates.java
net\minecraft\commands\arguments\item\FunctionArgument.java
net\minecraft\commands\arguments\item\ItemArgument.java
net\minecraft\commands\arguments\item\ItemInput.java
net\minecraft\commands\arguments\item\ItemParser.java
net\minecraft\commands\arguments\item\ItemPredicateArgument.java
net\minecraft\commands\arguments\item\package-info.java
net\minecraft\commands\arguments\selector\options
net\minecraft\commands\arguments\selector\EntitySelector.java
net\minecraft\commands\arguments\selector\EntitySelectorParser.java
net\minecraft\commands\arguments\selector\package-info.java
net\minecraft\commands\arguments\selector\options\EntitySelectorOptions.java
net\minecraft\commands\arguments\selector\options\package-info.java
net\minecraft\commands\execution\tasks
net\minecraft\commands\execution\ChainModifiers.java
net\minecraft\commands\execution\CommandQueueEntry.java
net\minecraft\commands\execution\CustomCommandExecutor.java
net\minecraft\commands\execution\CustomModifierExecutor.java
net\minecraft\commands\execution\EntryAction.java
net\minecraft\commands\execution\ExecutionContext.java
net\minecraft\commands\execution\ExecutionControl.java
net\minecraft\commands\execution\Frame.java
net\minecraft\commands\execution\package-info.java
net\minecraft\commands\execution\TraceCallbacks.java
net\minecraft\commands\execution\UnboundEntryAction.java
net\minecraft\commands\execution\tasks\BuildContexts.java
net\minecraft\commands\execution\tasks\CallFunction.java
net\minecraft\commands\execution\tasks\ContinuationTask.java
net\minecraft\commands\execution\tasks\ExecuteCommand.java
net\minecraft\commands\execution\tasks\FallthroughTask.java
net\minecraft\commands\execution\tasks\IsolatedCall.java
net\minecraft\commands\execution\tasks\package-info.java
net\minecraft\commands\functions\CommandFunction.java
net\minecraft\commands\functions\FunctionBuilder.java
net\minecraft\commands\functions\InstantiatedFunction.java
net\minecraft\commands\functions\MacroFunction.java
net\minecraft\commands\functions\package-info.java
net\minecraft\commands\functions\PlainTextFunction.java
net\minecraft\commands\functions\StringTemplate.java
net\minecraft\commands\synchronization\brigadier
net\minecraft\commands\synchronization\ArgumentTypeInfo.java
net\minecraft\commands\synchronization\ArgumentTypeInfos.java
net\minecraft\commands\synchronization\ArgumentUtils.java
net\minecraft\commands\synchronization\package-info.java
net\minecraft\commands\synchronization\SingletonArgumentInfo.java
net\minecraft\commands\synchronization\SuggestionProviders.java
net\minecraft\commands\synchronization\brigadier\DoubleArgumentInfo.java
net\minecraft\commands\synchronization\brigadier\FloatArgumentInfo.java
net\minecraft\commands\synchronization\brigadier\IntegerArgumentInfo.java
net\minecraft\commands\synchronization\brigadier\LongArgumentInfo.java
net\minecraft\commands\synchronization\brigadier\package-info.java
net\minecraft\commands\synchronization\brigadier\StringArgumentSerializer.java
net\minecraft\core\cauldron
net\minecraft\core\dispenser
net\minecraft\core\particles
net\minecraft\core\registries
net\minecraft\core\AxisCycle.java
net\minecraft\core\BlockMath.java
net\minecraft\core\BlockPos.java
net\minecraft\core\Cloner.java
net\minecraft\core\Cursor3D.java
net\minecraft\core\DefaultedMappedRegistry.java
net\minecraft\core\DefaultedRegistry.java
net\minecraft\core\Direction.java
net\minecraft\core\Direction8.java
net\minecraft\core\FrontAndTop.java
net\minecraft\core\GlobalPos.java
net\minecraft\core\Holder.java
net\minecraft\core\HolderGetter.java
net\minecraft\core\HolderLookup.java
net\minecraft\core\HolderOwner.java
net\minecraft\core\HolderSet.java
net\minecraft\core\IdMap.java
net\minecraft\core\IdMapper.java
net\minecraft\core\LayeredRegistryAccess.java
net\minecraft\core\MappedRegistry.java
net\minecraft\core\NonNullList.java
net\minecraft\core\package-info.java
net\minecraft\core\Position.java
net\minecraft\core\QuartPos.java
net\minecraft\core\Registry.java
net\minecraft\core\RegistryAccess.java
net\minecraft\core\RegistryCodecs.java
net\minecraft\core\RegistrySetBuilder.java
net\minecraft\core\RegistrySynchronization.java
net\minecraft\core\Rotations.java
net\minecraft\core\SectionPos.java
net\minecraft\core\UUIDUtil.java
net\minecraft\core\Vec3i.java
net\minecraft\core\WritableRegistry.java
net\minecraft\core\cauldron\CauldronInteraction.java
net\minecraft\core\cauldron\package-info.java
net\minecraft\core\dispenser\AbstractProjectileDispenseBehavior.java
net\minecraft\core\dispenser\BlockSource.java
net\minecraft\core\dispenser\BoatDispenseItemBehavior.java
net\minecraft\core\dispenser\DefaultDispenseItemBehavior.java
net\minecraft\core\dispenser\DispenseItemBehavior.java
net\minecraft\core\dispenser\OptionalDispenseItemBehavior.java
net\minecraft\core\dispenser\package-info.java
net\minecraft\core\dispenser\ShearsDispenseItemBehavior.java
net\minecraft\core\dispenser\ShulkerBoxDispenseBehavior.java
net\minecraft\core\particles\BlockParticleOption.java
net\minecraft\core\particles\DustColorTransitionOptions.java
net\minecraft\core\particles\DustParticleOptions.java
net\minecraft\core\particles\DustParticleOptionsBase.java
net\minecraft\core\particles\ItemParticleOption.java
net\minecraft\core\particles\package-info.java
net\minecraft\core\particles\ParticleGroup.java
net\minecraft\core\particles\ParticleOptions.java
net\minecraft\core\particles\ParticleType.java
net\minecraft\core\particles\ParticleTypes.java
net\minecraft\core\particles\SculkChargeParticleOptions.java
net\minecraft\core\particles\ShriekParticleOption.java
net\minecraft\core\particles\SimpleParticleType.java
net\minecraft\core\particles\VibrationParticleOption.java
net\minecraft\core\registries\BuiltInRegistries.java
net\minecraft\core\registries\package-info.java
net\minecraft\core\registries\Registries.java
net\minecraft\data\advancements
net\minecraft\data\info
net\minecraft\data\loot
net\minecraft\data\metadata
net\minecraft\data\models
net\minecraft\data\recipes
net\minecraft\data\registries
net\minecraft\data\structures
net\minecraft\data\tags
net\minecraft\data\worldgen
net\minecraft\data\BlockFamilies.java
net\minecraft\data\BlockFamily.java
net\minecraft\data\CachedOutput.java
net\minecraft\data\DataGenerator.java
net\minecraft\data\DataProvider.java
net\minecraft\data\HashCache.java
net\minecraft\data\Main.java
net\minecraft\data\package-info.java
net\minecraft\data\PackOutput.java
net\minecraft\data\advancements\packs
net\minecraft\data\advancements\AdvancementProvider.java
net\minecraft\data\advancements\AdvancementSubProvider.java
net\minecraft\data\advancements\package-info.java
net\minecraft\data\advancements\packs\package-info.java
net\minecraft\data\advancements\packs\UpdateOneTwentyOneAdvancementProvider.java
net\minecraft\data\advancements\packs\UpdateOneTwentyOneAdventureAdvancements.java
net\minecraft\data\advancements\packs\VanillaAdvancementProvider.java
net\minecraft\data\advancements\packs\VanillaAdventureAdvancements.java
net\minecraft\data\advancements\packs\VanillaHusbandryAdvancements.java
net\minecraft\data\advancements\packs\VanillaNetherAdvancements.java
net\minecraft\data\advancements\packs\VanillaStoryAdvancements.java
net\minecraft\data\advancements\packs\VanillaTheEndAdvancements.java
net\minecraft\data\info\BiomeParametersDumpReport.java
net\minecraft\data\info\BlockListReport.java
net\minecraft\data\info\CommandsReport.java
net\minecraft\data\info\package-info.java
net\minecraft\data\info\RegistryDumpReport.java
net\minecraft\data\loot\packs
net\minecraft\data\loot\BlockLootSubProvider.java
net\minecraft\data\loot\EntityLootSubProvider.java
net\minecraft\data\loot\LootTableProvider.java
net\minecraft\data\loot\LootTableSubProvider.java
net\minecraft\data\loot\package-info.java
net\minecraft\data\loot\packs\package-info.java
net\minecraft\data\loot\packs\TradeRebalanceChestLoot.java
net\minecraft\data\loot\packs\TradeRebalanceLootTableProvider.java
net\minecraft\data\loot\packs\UpdateOneTwentyOneBlockLoot.java
net\minecraft\data\loot\packs\UpdateOneTwentyOneChestLoot.java
net\minecraft\data\loot\packs\UpdateOneTwentyOneLootTableProvider.java
net\minecraft\data\loot\packs\VanillaArchaeologyLoot.java
net\minecraft\data\loot\packs\VanillaBlockLoot.java
net\minecraft\data\loot\packs\VanillaChestLoot.java
net\minecraft\data\loot\packs\VanillaEntityLoot.java
net\minecraft\data\loot\packs\VanillaFishingLoot.java
net\minecraft\data\loot\packs\VanillaGiftLoot.java
net\minecraft\data\loot\packs\VanillaLootTableProvider.java
net\minecraft\data\loot\packs\VanillaPiglinBarterLoot.java
net\minecraft\data\metadata\package-info.java
net\minecraft\data\metadata\PackMetadataGenerator.java
net\minecraft\data\models\blockstates
net\minecraft\data\models\model
net\minecraft\data\models\BlockModelGenerators.java
net\minecraft\data\models\ItemModelGenerators.java
net\minecraft\data\models\ModelProvider.java
net\minecraft\data\models\package-info.java
net\minecraft\data\models\blockstates\BlockStateGenerator.java
net\minecraft\data\models\blockstates\Condition.java
net\minecraft\data\models\blockstates\MultiPartGenerator.java
net\minecraft\data\models\blockstates\MultiVariantGenerator.java
net\minecraft\data\models\blockstates\package-info.java
net\minecraft\data\models\blockstates\PropertyDispatch.java
net\minecraft\data\models\blockstates\Selector.java
net\minecraft\data\models\blockstates\Variant.java
net\minecraft\data\models\blockstates\VariantProperties.java
net\minecraft\data\models\blockstates\VariantProperty.java
net\minecraft\data\models\model\DelegatedModel.java
net\minecraft\data\models\model\ModelLocationUtils.java
net\minecraft\data\models\model\ModelTemplate.java
net\minecraft\data\models\model\ModelTemplates.java
net\minecraft\data\models\model\package-info.java
net\minecraft\data\models\model\TexturedModel.java
net\minecraft\data\models\model\TextureMapping.java
net\minecraft\data\models\model\TextureSlot.java
net\minecraft\data\recipes\packs
net\minecraft\data\recipes\package-info.java
net\minecraft\data\recipes\RecipeBuilder.java
net\minecraft\data\recipes\RecipeCategory.java
net\minecraft\data\recipes\RecipeOutput.java
net\minecraft\data\recipes\RecipeProvider.java
net\minecraft\data\recipes\ShapedRecipeBuilder.java
net\minecraft\data\recipes\ShapelessRecipeBuilder.java
net\minecraft\data\recipes\SimpleCookingRecipeBuilder.java
net\minecraft\data\recipes\SingleItemRecipeBuilder.java
net\minecraft\data\recipes\SmithingTransformRecipeBuilder.java
net\minecraft\data\recipes\SmithingTrimRecipeBuilder.java
net\minecraft\data\recipes\SpecialRecipeBuilder.java
net\minecraft\data\recipes\packs\BundleRecipeProvider.java
net\minecraft\data\recipes\packs\package-info.java
net\minecraft\data\recipes\packs\UpdateOneTwentyOneRecipeProvider.java
net\minecraft\data\recipes\packs\VanillaRecipeProvider.java
net\minecraft\data\registries\package-info.java
net\minecraft\data\registries\RegistriesDatapackGenerator.java
net\minecraft\data\registries\RegistryPatchGenerator.java
net\minecraft\data\registries\UpdateOneTwentyOneRegistries.java
net\minecraft\data\registries\VanillaRegistries.java
net\minecraft\data\structures\NbtToSnbt.java
net\minecraft\data\structures\package-info.java
net\minecraft\data\structures\SnbtDatafixer.java
net\minecraft\data\structures\SnbtToNbt.java
net\minecraft\data\structures\StructureUpdater.java
net\minecraft\data\tags\BannerPatternTagsProvider.java
net\minecraft\data\tags\BiomeTagsProvider.java
net\minecraft\data\tags\CatVariantTagsProvider.java
net\minecraft\data\tags\DamageTypeTagsProvider.java
net\minecraft\data\tags\EntityTypeTagsProvider.java
net\minecraft\data\tags\FlatLevelGeneratorPresetTagsProvider.java
net\minecraft\data\tags\FluidTagsProvider.java
net\minecraft\data\tags\GameEventTagsProvider.java
net\minecraft\data\tags\InstrumentTagsProvider.java
net\minecraft\data\tags\IntrinsicHolderTagsProvider.java
net\minecraft\data\tags\ItemTagsProvider.java
net\minecraft\data\tags\package-info.java
net\minecraft\data\tags\PaintingVariantTagsProvider.java
net\minecraft\data\tags\PoiTypeTagsProvider.java
net\minecraft\data\tags\StructureTagsProvider.java
net\minecraft\data\tags\TagsProvider.java
net\minecraft\data\tags\TradeRebalanceStructureTagsProvider.java
net\minecraft\data\tags\UpdateOneTwentyOneBiomeTagsProvider.java
net\minecraft\data\tags\UpdateOneTwentyOneBlockTagsProvider.java
net\minecraft\data\tags\UpdateOneTwentyOneDamageTypeTagsProvider.java
net\minecraft\data\tags\UpdateOneTwentyOneEntityTypeTagsProvider.java
net\minecraft\data\tags\UpdateOneTwentyOneItemTagsProvider.java
net\minecraft\data\tags\VanillaBlockTagsProvider.java
net\minecraft\data\tags\VanillaItemTagsProvider.java
net\minecraft\data\tags\WorldPresetTagsProvider.java
net\minecraft\data\worldgen\biome
net\minecraft\data\worldgen\features
net\minecraft\data\worldgen\placement
net\minecraft\data\worldgen\AncientCityStructurePieces.java
net\minecraft\data\worldgen\AncientCityStructurePools.java
net\minecraft\data\worldgen\BastionBridgePools.java
net\minecraft\data\worldgen\BastionHoglinStablePools.java
net\minecraft\data\worldgen\BastionHousingUnitsPools.java
net\minecraft\data\worldgen\BastionPieces.java
net\minecraft\data\worldgen\BastionSharedPools.java
net\minecraft\data\worldgen\BastionTreasureRoomPools.java
net\minecraft\data\worldgen\BiomeDefaultFeatures.java
net\minecraft\data\worldgen\BootstapContext.java
net\minecraft\data\worldgen\Carvers.java
net\minecraft\data\worldgen\DesertVillagePools.java
net\minecraft\data\worldgen\DimensionTypes.java
net\minecraft\data\worldgen\NoiseData.java
net\minecraft\data\worldgen\package-info.java
net\minecraft\data\worldgen\PillagerOutpostPools.java
net\minecraft\data\worldgen\PlainVillagePools.java
net\minecraft\data\worldgen\Pools.java
net\minecraft\data\worldgen\ProcessorLists.java
net\minecraft\data\worldgen\SavannaVillagePools.java
net\minecraft\data\worldgen\SnowyVillagePools.java
net\minecraft\data\worldgen\Structures.java
net\minecraft\data\worldgen\StructureSets.java
net\minecraft\data\worldgen\SurfaceRuleData.java
net\minecraft\data\worldgen\TaigaVillagePools.java
net\minecraft\data\worldgen\TerrainProvider.java
net\minecraft\data\worldgen\TrailRuinsStructurePools.java
net\minecraft\data\worldgen\TrialChambersStructurePools.java
net\minecraft\data\worldgen\UpdateOneTwentyOnePools.java
net\minecraft\data\worldgen\UpdateOneTwentyOneProcessorLists.java
net\minecraft\data\worldgen\UpdateOneTwentyOneStructures.java
net\minecraft\data\worldgen\UpdateOneTwentyOneStructureSets.java
net\minecraft\data\worldgen\VillagePools.java
net\minecraft\data\worldgen\biome\BiomeData.java
net\minecraft\data\worldgen\biome\EndBiomes.java
net\minecraft\data\worldgen\biome\NetherBiomes.java
net\minecraft\data\worldgen\biome\OverworldBiomes.java
net\minecraft\data\worldgen\biome\package-info.java
net\minecraft\data\worldgen\features\AquaticFeatures.java
net\minecraft\data\worldgen\features\CaveFeatures.java
net\minecraft\data\worldgen\features\EndFeatures.java
net\minecraft\data\worldgen\features\FeatureUtils.java
net\minecraft\data\worldgen\features\MiscOverworldFeatures.java
net\minecraft\data\worldgen\features\NetherFeatures.java
net\minecraft\data\worldgen\features\OreFeatures.java
net\minecraft\data\worldgen\features\package-info.java
net\minecraft\data\worldgen\features\PileFeatures.java
net\minecraft\data\worldgen\features\TreeFeatures.java
net\minecraft\data\worldgen\features\VegetationFeatures.java
net\minecraft\data\worldgen\placement\AquaticPlacements.java
net\minecraft\data\worldgen\placement\CavePlacements.java
net\minecraft\data\worldgen\placement\EndPlacements.java
net\minecraft\data\worldgen\placement\MiscOverworldPlacements.java
net\minecraft\data\worldgen\placement\NetherPlacements.java
net\minecraft\data\worldgen\placement\OrePlacements.java
net\minecraft\data\worldgen\placement\package-info.java
net\minecraft\data\worldgen\placement\PlacementUtils.java
net\minecraft\data\worldgen\placement\TreePlacements.java
net\minecraft\data\worldgen\placement\VegetationPlacements.java
net\minecraft\data\worldgen\placement\VillagePlacements.java
net\minecraft\gametest\framework
net\minecraft\gametest\framework\AfterBatch.java
net\minecraft\gametest\framework\BeforeBatch.java
net\minecraft\gametest\framework\ExhaustedAttemptsException.java
net\minecraft\gametest\framework\GameTest.java
net\minecraft\gametest\framework\GameTestAssertException.java
net\minecraft\gametest\framework\GameTestAssertPosException.java
net\minecraft\gametest\framework\GameTestBatch.java
net\minecraft\gametest\framework\GameTestBatchRunner.java
net\minecraft\gametest\framework\GameTestEvent.java
net\minecraft\gametest\framework\GameTestGenerator.java
net\minecraft\gametest\framework\GameTestHelper.java
net\minecraft\gametest\framework\GameTestInfo.java
net\minecraft\gametest\framework\GameTestListener.java
net\minecraft\gametest\framework\GameTestRegistry.java
net\minecraft\gametest\framework\GameTestRunner.java
net\minecraft\gametest\framework\GameTestSequence.java
net\minecraft\gametest\framework\GameTestServer.java
net\minecraft\gametest\framework\GameTestTicker.java
net\minecraft\gametest\framework\GameTestTimeoutException.java
net\minecraft\gametest\framework\GlobalTestReporter.java
net\minecraft\gametest\framework\JUnitLikeTestReporter.java
net\minecraft\gametest\framework\LogTestReporter.java
net\minecraft\gametest\framework\MultipleTestTracker.java
net\minecraft\gametest\framework\package-info.java
net\minecraft\gametest\framework\ReportGameListener.java
net\minecraft\gametest\framework\StructureUtils.java
net\minecraft\gametest\framework\TestClassNameArgument.java
net\minecraft\gametest\framework\TestCommand.java
net\minecraft\gametest\framework\TestFunction.java
net\minecraft\gametest\framework\TestFunctionArgument.java
net\minecraft\gametest\framework\TestReporter.java
net\minecraft\locale\Language.java
net\minecraft\locale\package-info.java
net\minecraft\nbt\visitors
net\minecraft\nbt\ByteArrayTag.java
net\minecraft\nbt\ByteTag.java
net\minecraft\nbt\CollectionTag.java
net\minecraft\nbt\CompoundTag.java
net\minecraft\nbt\DoubleTag.java
net\minecraft\nbt\EndTag.java
net\minecraft\nbt\FloatTag.java
net\minecraft\nbt\IntArrayTag.java
net\minecraft\nbt\IntTag.java
net\minecraft\nbt\ListTag.java
net\minecraft\nbt\LongArrayTag.java
net\minecraft\nbt\LongTag.java
net\minecraft\nbt\NbtAccounter.java
net\minecraft\nbt\NbtAccounterException.java
net\minecraft\nbt\NbtException.java
net\minecraft\nbt\NbtFormatException.java
net\minecraft\nbt\NbtIo.java
net\minecraft\nbt\NbtOps.java
net\minecraft\nbt\NbtUtils.java
net\minecraft\nbt\NumericTag.java
net\minecraft\nbt\package-info.java
net\minecraft\nbt\ReportedNbtException.java
net\minecraft\nbt\ShortTag.java
net\minecraft\nbt\SnbtPrinterTagVisitor.java
net\minecraft\nbt\StreamTagVisitor.java
net\minecraft\nbt\StringTag.java
net\minecraft\nbt\StringTagVisitor.java
net\minecraft\nbt\Tag.java
net\minecraft\nbt\TagParser.java
net\minecraft\nbt\TagType.java
net\minecraft\nbt\TagTypes.java
net\minecraft\nbt\TagVisitor.java
net\minecraft\nbt\TextComponentTagVisitor.java
net\minecraft\nbt\visitors\CollectFields.java
net\minecraft\nbt\visitors\CollectToTag.java
net\minecraft\nbt\visitors\FieldSelector.java
net\minecraft\nbt\visitors\FieldTree.java
net\minecraft\nbt\visitors\package-info.java
net\minecraft\nbt\visitors\SkipAll.java
net\minecraft\nbt\visitors\SkipFields.java
net\minecraft\network\chat
net\minecraft\network\protocol
net\minecraft\network\syncher
net\minecraft\network\BandwidthDebugMonitor.java
net\minecraft\network\CipherBase.java
net\minecraft\network\CipherDecoder.java
net\minecraft\network\CipherEncoder.java
net\minecraft\network\ClientboundPacketListener.java
net\minecraft\network\ClientPongPacketListener.java
net\minecraft\network\CompressionDecoder.java
net\minecraft\network\CompressionEncoder.java
net\minecraft\network\Connection.java
net\minecraft\network\ConnectionProtocol.java
net\minecraft\network\FriendlyByteBuf.java
net\minecraft\network\package-info.java
net\minecraft\network\PacketBundlePacker.java
net\minecraft\network\PacketBundleUnpacker.java
net\minecraft\network\PacketDecoder.java
net\minecraft\network\PacketEncoder.java
net\minecraft\network\PacketFlowValidator.java
net\minecraft\network\PacketListener.java
net\minecraft\network\PacketSendListener.java
net\minecraft\network\ProtocolSwapHandler.java
net\minecraft\network\RateKickingConnection.java
net\minecraft\network\ServerboundPacketListener.java
net\minecraft\network\SkipPacketException.java
net\minecraft\network\TickablePacketListener.java
net\minecraft\network\Utf8String.java
net\minecraft\network\VarInt.java
net\minecraft\network\Varint21FrameDecoder.java
net\minecraft\network\Varint21LengthFieldPrepender.java
net\minecraft\network\VarLong.java
net\minecraft\network\chat\contents
net\minecraft\network\chat\numbers
net\minecraft\network\chat\ChatDecorator.java
net\minecraft\network\chat\ChatType.java
net\minecraft\network\chat\ChatTypeDecoration.java
net\minecraft\network\chat\ClickEvent.java
net\minecraft\network\chat\CommonComponents.java
net\minecraft\network\chat\Component.java
net\minecraft\network\chat\ComponentContents.java
net\minecraft\network\chat\ComponentSerialization.java
net\minecraft\network\chat\ComponentUtils.java
net\minecraft\network\chat\FilterMask.java
net\minecraft\network\chat\FormattedText.java
net\minecraft\network\chat\HoverEvent.java
net\minecraft\network\chat\LastSeenMessages.java
net\minecraft\network\chat\LastSeenMessagesTracker.java
net\minecraft\network\chat\LastSeenMessagesValidator.java
net\minecraft\network\chat\LastSeenTrackedEntry.java
net\minecraft\network\chat\LocalChatSession.java
net\minecraft\network\chat\MessageSignature.java
net\minecraft\network\chat\MessageSignatureCache.java
net\minecraft\network\chat\MutableComponent.java
net\minecraft\network\chat\OutgoingChatMessage.java
net\minecraft\network\chat\package-info.java
net\minecraft\network\chat\PlayerChatMessage.java
net\minecraft\network\chat\RemoteChatSession.java
net\minecraft\network\chat\SignableCommand.java
net\minecraft\network\chat\SignedMessageBody.java
net\minecraft\network\chat\SignedMessageChain.java
net\minecraft\network\chat\SignedMessageLink.java
net\minecraft\network\chat\SignedMessageValidator.java
net\minecraft\network\chat\Style.java
net\minecraft\network\chat\SubStringSource.java
net\minecraft\network\chat\TextColor.java
net\minecraft\network\chat\ThrowingComponent.java
net\minecraft\network\chat\contents\BlockDataSource.java
net\minecraft\network\chat\contents\DataSource.java
net\minecraft\network\chat\contents\EntityDataSource.java
net\minecraft\network\chat\contents\KeybindContents.java
net\minecraft\network\chat\contents\KeybindResolver.java
net\minecraft\network\chat\contents\NbtContents.java
net\minecraft\network\chat\contents\package-info.java
net\minecraft\network\chat\contents\PlainTextContents.java
net\minecraft\network\chat\contents\ScoreContents.java
net\minecraft\network\chat\contents\SelectorContents.java
net\minecraft\network\chat\contents\StorageDataSource.java
net\minecraft\network\chat\contents\TranslatableContents.java
net\minecraft\network\chat\contents\TranslatableFormatException.java
net\minecraft\network\chat\numbers\BlankFormat.java
net\minecraft\network\chat\numbers\FixedFormat.java
net\minecraft\network\chat\numbers\NumberFormat.java
net\minecraft\network\chat\numbers\NumberFormatType.java
net\minecraft\network\chat\numbers\NumberFormatTypes.java
net\minecraft\network\chat\numbers\package-info.java
net\minecraft\network\chat\numbers\StyledFormat.java
net\minecraft\network\protocol\common
net\minecraft\network\protocol\configuration
net\minecraft\network\protocol\game
net\minecraft\network\protocol\handshake
net\minecraft\network\protocol\login
net\minecraft\network\protocol\status
net\minecraft\network\protocol\BundleDelimiterPacket.java
net\minecraft\network\protocol\BundlePacket.java
net\minecraft\network\protocol\BundlerInfo.java
net\minecraft\network\protocol\package-info.java
net\minecraft\network\protocol\Packet.java
net\minecraft\network\protocol\PacketFlow.java
net\minecraft\network\protocol\PacketUtils.java
net\minecraft\network\protocol\common\custom
net\minecraft\network\protocol\common\ClientboundCustomPayloadPacket.java
net\minecraft\network\protocol\common\ClientboundDisconnectPacket.java
net\minecraft\network\protocol\common\ClientboundKeepAlivePacket.java
net\minecraft\network\protocol\common\ClientboundPingPacket.java
net\minecraft\network\protocol\common\ClientboundResourcePackPopPacket.java
net\minecraft\network\protocol\common\ClientboundResourcePackPushPacket.java
net\minecraft\network\protocol\common\ClientboundUpdateTagsPacket.java
net\minecraft\network\protocol\common\ClientCommonPacketListener.java
net\minecraft\network\protocol\common\package-info.java
net\minecraft\network\protocol\common\ServerboundClientInformationPacket.java
net\minecraft\network\protocol\common\ServerboundCustomPayloadPacket.java
net\minecraft\network\protocol\common\ServerboundKeepAlivePacket.java
net\minecraft\network\protocol\common\ServerboundPongPacket.java
net\minecraft\network\protocol\common\ServerboundResourcePackPacket.java
net\minecraft\network\protocol\common\ServerCommonPacketListener.java
net\minecraft\network\protocol\common\custom\BeeDebugPayload.java
net\minecraft\network\protocol\common\custom\BrainDebugPayload.java
net\minecraft\network\protocol\common\custom\BrandPayload.java
net\minecraft\network\protocol\common\custom\BreezeDebugPayload.java
net\minecraft\network\protocol\common\custom\CustomPacketPayload.java
net\minecraft\network\protocol\common\custom\DiscardedPayload.java
net\minecraft\network\protocol\common\custom\GameEventDebugPayload.java
net\minecraft\network\protocol\common\custom\GameEventListenerDebugPayload.java
net\minecraft\network\protocol\common\custom\GameTestAddMarkerDebugPayload.java
net\minecraft\network\protocol\common\custom\GameTestClearMarkersDebugPayload.java
net\minecraft\network\protocol\common\custom\GoalDebugPayload.java
net\minecraft\network\protocol\common\custom\HiveDebugPayload.java
net\minecraft\network\protocol\common\custom\NeighborUpdatesDebugPayload.java
net\minecraft\network\protocol\common\custom\package-info.java
net\minecraft\network\protocol\common\custom\PathfindingDebugPayload.java
net\minecraft\network\protocol\common\custom\PoiAddedDebugPayload.java
net\minecraft\network\protocol\common\custom\PoiRemovedDebugPayload.java
net\minecraft\network\protocol\common\custom\PoiTicketCountDebugPayload.java
net\minecraft\network\protocol\common\custom\RaidsDebugPayload.java
net\minecraft\network\protocol\common\custom\StructuresDebugPayload.java
net\minecraft\network\protocol\common\custom\VillageSectionsDebugPayload.java
net\minecraft\network\protocol\common\custom\WorldGenAttemptDebugPayload.java
net\minecraft\network\protocol\configuration\ClientboundFinishConfigurationPacket.java
net\minecraft\network\protocol\configuration\ClientboundRegistryDataPacket.java
net\minecraft\network\protocol\configuration\ClientboundUpdateEnabledFeaturesPacket.java
net\minecraft\network\protocol\configuration\ClientConfigurationPacketListener.java
net\minecraft\network\protocol\configuration\package-info.java
net\minecraft\network\protocol\configuration\ServerboundFinishConfigurationPacket.java
net\minecraft\network\protocol\configuration\ServerConfigurationPacketListener.java
net\minecraft\network\protocol\game\ClientboundAddEntityPacket.java
net\minecraft\network\protocol\game\ClientboundAddExperienceOrbPacket.java
net\minecraft\network\protocol\game\ClientboundAnimatePacket.java
net\minecraft\network\protocol\game\ClientboundAwardStatsPacket.java
net\minecraft\network\protocol\game\ClientboundBlockChangedAckPacket.java
net\minecraft\network\protocol\game\ClientboundBlockDestructionPacket.java
net\minecraft\network\protocol\game\ClientboundBlockEntityDataPacket.java
net\minecraft\network\protocol\game\ClientboundBlockEventPacket.java
net\minecraft\network\protocol\game\ClientboundBlockUpdatePacket.java
net\minecraft\network\protocol\game\ClientboundBossEventPacket.java
net\minecraft\network\protocol\game\ClientboundBundlePacket.java
net\minecraft\network\protocol\game\ClientboundChangeDifficultyPacket.java
net\minecraft\network\protocol\game\ClientboundChunkBatchFinishedPacket.java
net\minecraft\network\protocol\game\ClientboundChunkBatchStartPacket.java
net\minecraft\network\protocol\game\ClientboundChunksBiomesPacket.java
net\minecraft\network\protocol\game\ClientboundClearTitlesPacket.java
net\minecraft\network\protocol\game\ClientboundCommandsPacket.java
net\minecraft\network\protocol\game\ClientboundCommandSuggestionsPacket.java
net\minecraft\network\protocol\game\ClientboundContainerClosePacket.java
net\minecraft\network\protocol\game\ClientboundContainerSetContentPacket.java
net\minecraft\network\protocol\game\ClientboundContainerSetDataPacket.java
net\minecraft\network\protocol\game\ClientboundContainerSetSlotPacket.java
net\minecraft\network\protocol\game\ClientboundCooldownPacket.java
net\minecraft\network\protocol\game\ClientboundCustomChatCompletionsPacket.java
net\minecraft\network\protocol\game\ClientboundDamageEventPacket.java
net\minecraft\network\protocol\game\ClientboundDeleteChatPacket.java
net\minecraft\network\protocol\game\ClientboundDisguisedChatPacket.java
net\minecraft\network\protocol\game\ClientboundEntityEventPacket.java
net\minecraft\network\protocol\game\ClientboundExplodePacket.java
net\minecraft\network\protocol\game\ClientboundForgetLevelChunkPacket.java
net\minecraft\network\protocol\game\ClientboundGameEventPacket.java
net\minecraft\network\protocol\game\ClientboundHorseScreenOpenPacket.java
net\minecraft\network\protocol\game\ClientboundHurtAnimationPacket.java
net\minecraft\network\protocol\game\ClientboundInitializeBorderPacket.java
net\minecraft\network\protocol\game\ClientboundLevelChunkPacketData.java
net\minecraft\network\protocol\game\ClientboundLevelChunkWithLightPacket.java
net\minecraft\network\protocol\game\ClientboundLevelEventPacket.java
net\minecraft\network\protocol\game\ClientboundLevelParticlesPacket.java
net\minecraft\network\protocol\game\ClientboundLightUpdatePacket.java
net\minecraft\network\protocol\game\ClientboundLightUpdatePacketData.java
net\minecraft\network\protocol\game\ClientboundLoginPacket.java
net\minecraft\network\protocol\game\ClientboundMapItemDataPacket.java
net\minecraft\network\protocol\game\ClientboundMerchantOffersPacket.java
net\minecraft\network\protocol\game\ClientboundMoveEntityPacket.java
net\minecraft\network\protocol\game\ClientboundMoveVehiclePacket.java
net\minecraft\network\protocol\game\ClientboundOpenBookPacket.java
net\minecraft\network\protocol\game\ClientboundOpenScreenPacket.java
net\minecraft\network\protocol\game\ClientboundOpenSignEditorPacket.java
net\minecraft\network\protocol\game\ClientboundPlaceGhostRecipePacket.java
net\minecraft\network\protocol\game\ClientboundPlayerAbilitiesPacket.java
net\minecraft\network\protocol\game\ClientboundPlayerChatPacket.java
net\minecraft\network\protocol\game\ClientboundPlayerCombatEndPacket.java
net\minecraft\network\protocol\game\ClientboundPlayerCombatEnterPacket.java
net\minecraft\network\protocol\game\ClientboundPlayerCombatKillPacket.java
net\minecraft\network\protocol\game\ClientboundPlayerInfoRemovePacket.java
net\minecraft\network\protocol\game\ClientboundPlayerInfoUpdatePacket.java
net\minecraft\network\protocol\game\ClientboundPlayerLookAtPacket.java
net\minecraft\network\protocol\game\ClientboundPlayerPositionPacket.java
net\minecraft\network\protocol\game\ClientboundRecipePacket.java
net\minecraft\network\protocol\game\ClientboundRemoveEntitiesPacket.java
net\minecraft\network\protocol\game\ClientboundRemoveMobEffectPacket.java
net\minecraft\network\protocol\game\ClientboundResetScorePacket.java
net\minecraft\network\protocol\game\ClientboundRespawnPacket.java
net\minecraft\network\protocol\game\ClientboundRotateHeadPacket.java
net\minecraft\network\protocol\game\ClientboundSectionBlocksUpdatePacket.java
net\minecraft\network\protocol\game\ClientboundSelectAdvancementsTabPacket.java
net\minecraft\network\protocol\game\ClientboundServerDataPacket.java
net\minecraft\network\protocol\game\ClientboundSetActionBarTextPacket.java
net\minecraft\network\protocol\game\ClientboundSetBorderCenterPacket.java
net\minecraft\network\protocol\game\ClientboundSetBorderLerpSizePacket.java
net\minecraft\network\protocol\game\ClientboundSetBorderSizePacket.java
net\minecraft\network\protocol\game\ClientboundSetBorderWarningDelayPacket.java
net\minecraft\network\protocol\game\ClientboundSetBorderWarningDistancePacket.java
net\minecraft\network\protocol\game\ClientboundSetCameraPacket.java
net\minecraft\network\protocol\game\ClientboundSetCarriedItemPacket.java
net\minecraft\network\protocol\game\ClientboundSetChunkCacheCenterPacket.java
net\minecraft\network\protocol\game\ClientboundSetChunkCacheRadiusPacket.java
net\minecraft\network\protocol\game\ClientboundSetDefaultSpawnPositionPacket.java
net\minecraft\network\protocol\game\ClientboundSetDisplayObjectivePacket.java
net\minecraft\network\protocol\game\ClientboundSetEntityDataPacket.java
net\minecraft\network\protocol\game\ClientboundSetEntityLinkPacket.java
net\minecraft\network\protocol\game\ClientboundSetEntityMotionPacket.java
net\minecraft\network\protocol\game\ClientboundSetEquipmentPacket.java
net\minecraft\network\protocol\game\ClientboundSetExperiencePacket.java
net\minecraft\network\protocol\game\ClientboundSetHealthPacket.java
net\minecraft\network\protocol\game\ClientboundSetObjectivePacket.java
net\minecraft\network\protocol\game\ClientboundSetPassengersPacket.java
net\minecraft\network\protocol\game\ClientboundSetPlayerTeamPacket.java
net\minecraft\network\protocol\game\ClientboundSetScorePacket.java
net\minecraft\network\protocol\game\ClientboundSetSimulationDistancePacket.java
net\minecraft\network\protocol\game\ClientboundSetSubtitleTextPacket.java
net\minecraft\network\protocol\game\ClientboundSetTimePacket.java
net\minecraft\network\protocol\game\ClientboundSetTitlesAnimationPacket.java
net\minecraft\network\protocol\game\ClientboundSetTitleTextPacket.java
net\minecraft\network\protocol\game\ClientboundSoundEntityPacket.java
net\minecraft\network\protocol\game\ClientboundSoundPacket.java
net\minecraft\network\protocol\game\ClientboundStartConfigurationPacket.java
net\minecraft\network\protocol\game\ClientboundStopSoundPacket.java
net\minecraft\network\protocol\game\ClientboundSystemChatPacket.java
net\minecraft\network\protocol\game\ClientboundTabListPacket.java
net\minecraft\network\protocol\game\ClientboundTagQueryPacket.java
net\minecraft\network\protocol\game\ClientboundTakeItemEntityPacket.java
net\minecraft\network\protocol\game\ClientboundTeleportEntityPacket.java
net\minecraft\network\protocol\game\ClientboundTickingStatePacket.java
net\minecraft\network\protocol\game\ClientboundTickingStepPacket.java
net\minecraft\network\protocol\game\ClientboundUpdateAdvancementsPacket.java
net\minecraft\network\protocol\game\ClientboundUpdateAttributesPacket.java
net\minecraft\network\protocol\game\ClientboundUpdateMobEffectPacket.java
net\minecraft\network\protocol\game\ClientboundUpdateRecipesPacket.java
net\minecraft\network\protocol\game\ClientGamePacketListener.java
net\minecraft\network\protocol\game\CommonPlayerSpawnInfo.java
net\minecraft\network\protocol\game\DebugEntityNameGenerator.java
net\minecraft\network\protocol\game\DebugPackets.java
net\minecraft\network\protocol\game\package-info.java
net\minecraft\network\protocol\game\ServerboundAcceptTeleportationPacket.java
net\minecraft\network\protocol\game\ServerboundBlockEntityTagQuery.java
net\minecraft\network\protocol\game\ServerboundChangeDifficultyPacket.java
net\minecraft\network\protocol\game\ServerboundChatAckPacket.java
net\minecraft\network\protocol\game\ServerboundChatCommandPacket.java
net\minecraft\network\protocol\game\ServerboundChatPacket.java
net\minecraft\network\protocol\game\ServerboundChatSessionUpdatePacket.java
net\minecraft\network\protocol\game\ServerboundChunkBatchReceivedPacket.java
net\minecraft\network\protocol\game\ServerboundClientCommandPacket.java
net\minecraft\network\protocol\game\ServerboundCommandSuggestionPacket.java
net\minecraft\network\protocol\game\ServerboundConfigurationAcknowledgedPacket.java
net\minecraft\network\protocol\game\ServerboundContainerButtonClickPacket.java
net\minecraft\network\protocol\game\ServerboundContainerClickPacket.java
net\minecraft\network\protocol\game\ServerboundContainerClosePacket.java
net\minecraft\network\protocol\game\ServerboundContainerSlotStateChangedPacket.java
net\minecraft\network\protocol\game\ServerboundEditBookPacket.java
net\minecraft\network\protocol\game\ServerboundEntityTagQuery.java
net\minecraft\network\protocol\game\ServerboundInteractPacket.java
net\minecraft\network\protocol\game\ServerboundJigsawGeneratePacket.java
net\minecraft\network\protocol\game\ServerboundLockDifficultyPacket.java
net\minecraft\network\protocol\game\ServerboundMovePlayerPacket.java
net\minecraft\network\protocol\game\ServerboundMoveVehiclePacket.java
net\minecraft\network\protocol\game\ServerboundPaddleBoatPacket.java
net\minecraft\network\protocol\game\ServerboundPickItemPacket.java
net\minecraft\network\protocol\game\ServerboundPlaceRecipePacket.java
net\minecraft\network\protocol\game\ServerboundPlayerAbilitiesPacket.java
net\minecraft\network\protocol\game\ServerboundPlayerActionPacket.java
net\minecraft\network\protocol\game\ServerboundPlayerCommandPacket.java
net\minecraft\network\protocol\game\ServerboundPlayerInputPacket.java
net\minecraft\network\protocol\game\ServerboundRecipeBookChangeSettingsPacket.java
net\minecraft\network\protocol\game\ServerboundRecipeBookSeenRecipePacket.java
net\minecraft\network\protocol\game\ServerboundRenameItemPacket.java
net\minecraft\network\protocol\game\ServerboundSeenAdvancementsPacket.java
net\minecraft\network\protocol\game\ServerboundSelectTradePacket.java
net\minecraft\network\protocol\game\ServerboundSetBeaconPacket.java
net\minecraft\network\protocol\game\ServerboundSetCarriedItemPacket.java
net\minecraft\network\protocol\game\ServerboundSetCommandBlockPacket.java
net\minecraft\network\protocol\game\ServerboundSetCommandMinecartPacket.java
net\minecraft\network\protocol\game\ServerboundSetCreativeModeSlotPacket.java
net\minecraft\network\protocol\game\ServerboundSetJigsawBlockPacket.java
net\minecraft\network\protocol\game\ServerboundSetStructureBlockPacket.java
net\minecraft\network\protocol\game\ServerboundSignUpdatePacket.java
net\minecraft\network\protocol\game\ServerboundSwingPacket.java
net\minecraft\network\protocol\game\ServerboundTeleportToEntityPacket.java
net\minecraft\network\protocol\game\ServerboundUseItemOnPacket.java
net\minecraft\network\protocol\game\ServerboundUseItemPacket.java
net\minecraft\network\protocol\game\ServerGamePacketListener.java
net\minecraft\network\protocol\game\ServerPacketListener.java
net\minecraft\network\protocol\game\ServerPingPacketListener.java
net\minecraft\network\protocol\game\VecDeltaCodec.java
net\minecraft\network\protocol\handshake\ClientIntent.java
net\minecraft\network\protocol\handshake\ClientIntentionPacket.java
net\minecraft\network\protocol\handshake\package-info.java
net\minecraft\network\protocol\handshake\ServerHandshakePacketListener.java
net\minecraft\network\protocol\login\custom
net\minecraft\network\protocol\login\ClientboundCustomQueryPacket.java
net\minecraft\network\protocol\login\ClientboundGameProfilePacket.java
net\minecraft\network\protocol\login\ClientboundHelloPacket.java
net\minecraft\network\protocol\login\ClientboundLoginCompressionPacket.java
net\minecraft\network\protocol\login\ClientboundLoginDisconnectPacket.java
net\minecraft\network\protocol\login\ClientLoginPacketListener.java
net\minecraft\network\protocol\login\package-info.java
net\minecraft\network\protocol\login\ServerboundCustomQueryAnswerPacket.java
net\minecraft\network\protocol\login\ServerboundHelloPacket.java
net\minecraft\network\protocol\login\ServerboundKeyPacket.java
net\minecraft\network\protocol\login\ServerboundLoginAcknowledgedPacket.java
net\minecraft\network\protocol\login\ServerLoginPacketListener.java
net\minecraft\network\protocol\login\custom\CustomQueryAnswerPayload.java
net\minecraft\network\protocol\login\custom\CustomQueryPayload.java
net\minecraft\network\protocol\login\custom\DiscardedQueryAnswerPayload.java
net\minecraft\network\protocol\login\custom\DiscardedQueryPayload.java
net\minecraft\network\protocol\login\custom\package-info.java
net\minecraft\network\protocol\status\ClientboundPongResponsePacket.java
net\minecraft\network\protocol\status\ClientboundStatusResponsePacket.java
net\minecraft\network\protocol\status\ClientStatusPacketListener.java
net\minecraft\network\protocol\status\package-info.java
net\minecraft\network\protocol\status\ServerboundPingRequestPacket.java
net\minecraft\network\protocol\status\ServerboundStatusRequestPacket.java
net\minecraft\network\protocol\status\ServerStatus.java
net\minecraft\network\protocol\status\ServerStatusPacketListener.java
net\minecraft\network\syncher\EntityDataAccessor.java
net\minecraft\network\syncher\EntityDataSerializer.java
net\minecraft\network\syncher\EntityDataSerializers.java
net\minecraft\network\syncher\package-info.java
net\minecraft\network\syncher\SynchedEntityData.java
net\minecraft\obfuscate\DontObfuscate.java
net\minecraft\obfuscate\package-info.java
net\minecraft\realms\DisconnectedRealmsScreen.java
net\minecraft\realms\package-info.java
net\minecraft\realms\RealmsConnect.java
net\minecraft\realms\RealmsLabel.java
net\minecraft\realms\RealmsObjectSelectionList.java
net\minecraft\realms\RealmsScreen.java
net\minecraft\realms\RepeatedNarrator.java
net\minecraft\recipebook\package-info.java
net\minecraft\recipebook\PlaceRecipe.java
net\minecraft\recipebook\ServerPlaceRecipe.java
net\minecraft\references\Blocks.java
net\minecraft\references\Items.java
net\minecraft\resources\DelegatingOps.java
net\minecraft\resources\FileToIdConverter.java
net\minecraft\resources\HolderSetCodec.java
net\minecraft\resources\package-info.java
net\minecraft\resources\RegistryDataLoader.java
net\minecraft\resources\RegistryFileCodec.java
net\minecraft\resources\RegistryFixedCodec.java
net\minecraft\resources\RegistryOps.java
net\minecraft\resources\ResourceKey.java
net\minecraft\resources\ResourceLocation.java
net\minecraft\server\advancements
net\minecraft\server\bossevents
net\minecraft\server\chase
net\minecraft\server\commands
net\minecraft\server\dedicated
net\minecraft\server\gui
net\minecraft\server\level
net\minecraft\server\network
net\minecraft\server\packs
net\minecraft\server\players
net\minecraft\server\rcon
net\minecraft\server\Bootstrap.java
net\minecraft\server\ChainedJsonException.java
net\minecraft\server\ConsoleInput.java
net\minecraft\server\DebugLoggedPrintStream.java
net\minecraft\server\Eula.java
net\minecraft\server\LoggedPrintStream.java
net\minecraft\server\Main.java
net\minecraft\server\MinecraftServer.java
net\minecraft\server\package-info.java
net\minecraft\server\PlayerAdvancements.java
net\minecraft\server\RegistryLayer.java
net\minecraft\server\ReloadableServerResources.java
net\minecraft\server\RunningOnDifferentThreadException.java
net\minecraft\server\ServerAdvancementManager.java
net\minecraft\server\ServerFunctionLibrary.java
net\minecraft\server\ServerFunctionManager.java
net\minecraft\server\ServerInfo.java
net\minecraft\server\ServerInterface.java
net\minecraft\server\ServerScoreboard.java
net\minecraft\server\ServerTickRateManager.java
net\minecraft\server\Services.java
net\minecraft\server\TickTask.java
net\minecraft\server\WorldLoader.java
net\minecraft\server\WorldStem.java
net\minecraft\server\advancements\AdvancementVisibilityEvaluator.java
net\minecraft\server\advancements\package-info.java
net\minecraft\server\bossevents\CustomBossEvent.java
net\minecraft\server\bossevents\CustomBossEvents.java
net\minecraft\server\bossevents\package-info.java
net\minecraft\server\chase\ChaseClient.java
net\minecraft\server\chase\ChaseServer.java
net\minecraft\server\chase\package-info.java
net\minecraft\server\commands\data
net\minecraft\server\commands\AdvancementCommands.java
net\minecraft\server\commands\AttributeCommand.java
net\minecraft\server\commands\BanIpCommands.java
net\minecraft\server\commands\BanListCommands.java
net\minecraft\server\commands\BanPlayerCommands.java
net\minecraft\server\commands\BossBarCommands.java
net\minecraft\server\commands\ChaseCommand.java
net\minecraft\server\commands\ClearInventoryCommands.java
net\minecraft\server\commands\CloneCommands.java
net\minecraft\server\commands\DamageCommand.java
net\minecraft\server\commands\DataPackCommand.java
net\minecraft\server\commands\DebugCommand.java
net\minecraft\server\commands\DebugConfigCommand.java
net\minecraft\server\commands\DebugMobSpawningCommand.java
net\minecraft\server\commands\DebugPathCommand.java
net\minecraft\server\commands\DefaultGameModeCommands.java
net\minecraft\server\commands\DeOpCommands.java
net\minecraft\server\commands\DifficultyCommand.java
net\minecraft\server\commands\EffectCommands.java
net\minecraft\server\commands\EmoteCommands.java
net\minecraft\server\commands\EnchantCommand.java
net\minecraft\server\commands\ExecuteCommand.java
net\minecraft\server\commands\ExperienceCommand.java
net\minecraft\server\commands\FillBiomeCommand.java
net\minecraft\server\commands\FillCommand.java
net\minecraft\server\commands\ForceLoadCommand.java
net\minecraft\server\commands\FunctionCommand.java
net\minecraft\server\commands\GameModeCommand.java
net\minecraft\server\commands\GameRuleCommand.java
net\minecraft\server\commands\GiveCommand.java
net\minecraft\server\commands\HelpCommand.java
net\minecraft\server\commands\ItemCommands.java
net\minecraft\server\commands\JfrCommand.java
net\minecraft\server\commands\KickCommand.java
net\minecraft\server\commands\KillCommand.java
net\minecraft\server\commands\ListPlayersCommand.java
net\minecraft\server\commands\LocateCommand.java
net\minecraft\server\commands\LootCommand.java
net\minecraft\server\commands\MsgCommand.java
net\minecraft\server\commands\OpCommand.java
net\minecraft\server\commands\package-info.java
net\minecraft\server\commands\PardonCommand.java
net\minecraft\server\commands\PardonIpCommand.java
net\minecraft\server\commands\ParticleCommand.java
net\minecraft\server\commands\PerfCommand.java
net\minecraft\server\commands\PlaceCommand.java
net\minecraft\server\commands\PlaySoundCommand.java
net\minecraft\server\commands\PublishCommand.java
net\minecraft\server\commands\RaidCommand.java
net\minecraft\server\commands\RandomCommand.java
net\minecraft\server\commands\RecipeCommand.java
net\minecraft\server\commands\ReloadCommand.java
net\minecraft\server\commands\ResetChunksCommand.java
net\minecraft\server\commands\ReturnCommand.java
net\minecraft\server\commands\RideCommand.java
net\minecraft\server\commands\SaveAllCommand.java
net\minecraft\server\commands\SaveOffCommand.java
net\minecraft\server\commands\SaveOnCommand.java
net\minecraft\server\commands\SayCommand.java
net\minecraft\server\commands\ScheduleCommand.java
net\minecraft\server\commands\ScoreboardCommand.java
net\minecraft\server\commands\SeedCommand.java
net\minecraft\server\commands\ServerPackCommand.java
net\minecraft\server\commands\SetBlockCommand.java
net\minecraft\server\commands\SetPlayerIdleTimeoutCommand.java
net\minecraft\server\commands\SetSpawnCommand.java
net\minecraft\server\commands\SetWorldSpawnCommand.java
net\minecraft\server\commands\SpawnArmorTrimsCommand.java
net\minecraft\server\commands\SpectateCommand.java
net\minecraft\server\commands\SpreadPlayersCommand.java
net\minecraft\server\commands\StopCommand.java
net\minecraft\server\commands\StopSoundCommand.java
net\minecraft\server\commands\SummonCommand.java
net\minecraft\server\commands\TagCommand.java
net\minecraft\server\commands\TeamCommand.java
net\minecraft\server\commands\TeamMsgCommand.java
net\minecraft\server\commands\TeleportCommand.java
net\minecraft\server\commands\TellRawCommand.java
net\minecraft\server\commands\TickCommand.java
net\minecraft\server\commands\TimeCommand.java
net\minecraft\server\commands\TitleCommand.java
net\minecraft\server\commands\TriggerCommand.java
net\minecraft\server\commands\WardenSpawnTrackerCommand.java
net\minecraft\server\commands\WeatherCommand.java
net\minecraft\server\commands\WhitelistCommand.java
net\minecraft\server\commands\WorldBorderCommand.java
net\minecraft\server\commands\data\BlockDataAccessor.java
net\minecraft\server\commands\data\DataAccessor.java
net\minecraft\server\commands\data\DataCommands.java
net\minecraft\server\commands\data\EntityDataAccessor.java
net\minecraft\server\commands\data\package-info.java
net\minecraft\server\commands\data\StorageDataAccessor.java
net\minecraft\server\dedicated\DedicatedPlayerList.java
net\minecraft\server\dedicated\DedicatedServer.java
net\minecraft\server\dedicated\DedicatedServerProperties.java
net\minecraft\server\dedicated\DedicatedServerSettings.java
net\minecraft\server\dedicated\package-info.java
net\minecraft\server\dedicated\ServerWatchdog.java
net\minecraft\server\dedicated\Settings.java
net\minecraft\server\gui\MinecraftServerGui.java
net\minecraft\server\gui\package-info.java
net\minecraft\server\gui\PlayerListComponent.java
net\minecraft\server\gui\StatsComponent.java
net\minecraft\server\level\progress
net\minecraft\server\level\BlockDestructionProgress.java
net\minecraft\server\level\ChunkHolder.java
net\minecraft\server\level\ChunkLevel.java
net\minecraft\server\level\ChunkMap.java
net\minecraft\server\level\ChunkTaskPriorityQueue.java
net\minecraft\server\level\ChunkTaskPriorityQueueSorter.java
net\minecraft\server\level\ChunkTracker.java
net\minecraft\server\level\ChunkTrackingView.java
net\minecraft\server\level\ClientInformation.java
net\minecraft\server\level\ColumnPos.java
net\minecraft\server\level\DemoMode.java
net\minecraft\server\level\DistanceManager.java
net\minecraft\server\level\FullChunkStatus.java
net\minecraft\server\level\package-info.java
net\minecraft\server\level\PlayerMap.java
net\minecraft\server\level\PlayerRespawnLogic.java
net\minecraft\server\level\SectionTracker.java
net\minecraft\server\level\ServerBossEvent.java
net\minecraft\server\level\ServerChunkCache.java
net\minecraft\server\level\ServerEntity.java
net\minecraft\server\level\ServerLevel.java
net\minecraft\server\level\ServerPlayer.java
net\minecraft\server\level\ServerPlayerGameMode.java
net\minecraft\server\level\ThreadedLevelLightEngine.java
net\minecraft\server\level\Ticket.java
net\minecraft\server\level\TicketType.java
net\minecraft\server\level\TickingTracker.java
net\minecraft\server\level\WorldGenRegion.java
net\minecraft\server\level\progress\ChunkProgressListener.java
net\minecraft\server\level\progress\ChunkProgressListenerFactory.java
net\minecraft\server\level\progress\LoggerChunkProgressListener.java
net\minecraft\server\level\progress\package-info.java
net\minecraft\server\level\progress\ProcessorChunkProgressListener.java
net\minecraft\server\level\progress\StoringChunkProgressListener.java
net\minecraft\server\network\config
net\minecraft\server\network\CommonListenerCookie.java
net\minecraft\server\network\ConfigurationTask.java
net\minecraft\server\network\FilteredText.java
net\minecraft\server\network\LegacyProtocolUtils.java
net\minecraft\server\network\LegacyQueryHandler.java
net\minecraft\server\network\MemoryServerHandshakePacketListenerImpl.java
net\minecraft\server\network\package-info.java
net\minecraft\server\network\PlayerChunkSender.java
net\minecraft\server\network\ServerCommonPacketListenerImpl.java
net\minecraft\server\network\ServerConfigurationPacketListenerImpl.java
net\minecraft\server\network\ServerConnectionListener.java
net\minecraft\server\network\ServerGamePacketListenerImpl.java
net\minecraft\server\network\ServerHandshakePacketListenerImpl.java
net\minecraft\server\network\ServerLoginPacketListenerImpl.java
net\minecraft\server\network\ServerPlayerConnection.java
net\minecraft\server\network\ServerStatusPacketListenerImpl.java
net\minecraft\server\network\TextFilter.java
net\minecraft\server\network\TextFilterClient.java
net\minecraft\server\network\config\JoinWorldTask.java
net\minecraft\server\network\config\package-info.java
net\minecraft\server\network\config\ServerResourcePackConfigurationTask.java
net\minecraft\server\packs\linkfs
net\minecraft\server\packs\metadata
net\minecraft\server\packs\repository
net\minecraft\server\packs\resources
net\minecraft\server\packs\AbstractPackResources.java
net\minecraft\server\packs\BuiltInMetadata.java
net\minecraft\server\packs\CompositePackResources.java
net\minecraft\server\packs\DownloadCacheCleaner.java
net\minecraft\server\packs\DownloadQueue.java
net\minecraft\server\packs\FeatureFlagsMetadataSection.java
net\minecraft\server\packs\FilePackResources.java
net\minecraft\server\packs\OverlayMetadataSection.java
net\minecraft\server\packs\package-info.java
net\minecraft\server\packs\PackResources.java
net\minecraft\server\packs\PackType.java
net\minecraft\server\packs\PathPackResources.java
net\minecraft\server\packs\VanillaPackResources.java
net\minecraft\server\packs\VanillaPackResourcesBuilder.java
net\minecraft\server\packs\linkfs\DummyFileAttributes.java
net\minecraft\server\packs\linkfs\LinkFileSystem.java
net\minecraft\server\packs\linkfs\LinkFSFileStore.java
net\minecraft\server\packs\linkfs\LinkFSPath.java
net\minecraft\server\packs\linkfs\LinkFSProvider.java
net\minecraft\server\packs\linkfs\package-info.java
net\minecraft\server\packs\linkfs\PathContents.java
net\minecraft\server\packs\metadata\pack
net\minecraft\server\packs\metadata\MetadataSectionSerializer.java
net\minecraft\server\packs\metadata\MetadataSectionType.java
net\minecraft\server\packs\metadata\package-info.java
net\minecraft\server\packs\metadata\pack\package-info.java
net\minecraft\server\packs\metadata\pack\PackMetadataSection.java
net\minecraft\server\packs\repository\BuiltInPackSource.java
net\minecraft\server\packs\repository\FolderRepositorySource.java
net\minecraft\server\packs\repository\Pack.java
net\minecraft\server\packs\repository\package-info.java
net\minecraft\server\packs\repository\PackCompatibility.java
net\minecraft\server\packs\repository\PackDetector.java
net\minecraft\server\packs\repository\PackRepository.java
net\minecraft\server\packs\repository\PackSource.java
net\minecraft\server\packs\repository\RepositorySource.java
net\minecraft\server\packs\repository\ServerPacksSource.java
net\minecraft\server\packs\resources\CloseableResourceManager.java
net\minecraft\server\packs\resources\FallbackResourceManager.java
net\minecraft\server\packs\resources\IoSupplier.java
net\minecraft\server\packs\resources\MultiPackResourceManager.java
net\minecraft\server\packs\resources\package-info.java
net\minecraft\server\packs\resources\PreparableReloadListener.java
net\minecraft\server\packs\resources\ProfiledReloadInstance.java
net\minecraft\server\packs\resources\ReloadableResourceManager.java
net\minecraft\server\packs\resources\ReloadInstance.java
net\minecraft\server\packs\resources\Resource.java
net\minecraft\server\packs\resources\ResourceFilterSection.java
net\minecraft\server\packs\resources\ResourceManager.java
net\minecraft\server\packs\resources\ResourceManagerReloadListener.java
net\minecraft\server\packs\resources\ResourceMetadata.java
net\minecraft\server\packs\resources\ResourceProvider.java
net\minecraft\server\packs\resources\SimpleJsonResourceReloadListener.java
net\minecraft\server\packs\resources\SimplePreparableReloadListener.java
net\minecraft\server\packs\resources\SimpleReloadInstance.java
net\minecraft\server\players\BanListEntry.java
net\minecraft\server\players\GameProfileCache.java
net\minecraft\server\players\IpBanList.java
net\minecraft\server\players\IpBanListEntry.java
net\minecraft\server\players\OldUsersConverter.java
net\minecraft\server\players\package-info.java
net\minecraft\server\players\PlayerList.java
net\minecraft\server\players\ServerOpList.java
net\minecraft\server\players\ServerOpListEntry.java
net\minecraft\server\players\SleepStatus.java
net\minecraft\server\players\StoredUserEntry.java
net\minecraft\server\players\StoredUserList.java
net\minecraft\server\players\UserBanList.java
net\minecraft\server\players\UserBanListEntry.java
net\minecraft\server\players\UserWhiteList.java
net\minecraft\server\players\UserWhiteListEntry.java
net\minecraft\server\rcon\thread
net\minecraft\server\rcon\NetworkDataOutputStream.java
net\minecraft\server\rcon\package-info.java
net\minecraft\server\rcon\PktUtils.java
net\minecraft\server\rcon\RconConsoleSource.java
net\minecraft\server\rcon\thread\GenericThread.java
net\minecraft\server\rcon\thread\package-info.java
net\minecraft\server\rcon\thread\QueryThreadGs4.java
net\minecraft\server\rcon\thread\RconClient.java
net\minecraft\server\rcon\thread\RconThread.java
net\minecraft\sounds\Music.java
net\minecraft\sounds\Musics.java
net\minecraft\sounds\package-info.java
net\minecraft\sounds\SoundEvent.java
net\minecraft\sounds\SoundEvents.java
net\minecraft\sounds\SoundSource.java
net\minecraft\stats\package-info.java
net\minecraft\stats\RecipeBook.java
net\minecraft\stats\RecipeBookSettings.java
net\minecraft\stats\ServerRecipeBook.java
net\minecraft\stats\ServerStatsCounter.java
net\minecraft\stats\Stat.java
net\minecraft\stats\StatFormatter.java
net\minecraft\stats\Stats.java
net\minecraft\stats\StatsCounter.java
net\minecraft\stats\StatType.java
net\minecraft\tags\BannerPatternTags.java
net\minecraft\tags\BiomeTags.java
net\minecraft\tags\BlockTags.java
net\minecraft\tags\CatVariantTags.java
net\minecraft\tags\DamageTypeTags.java
net\minecraft\tags\EntityTypeTags.java
net\minecraft\tags\FlatLevelGeneratorPresetTags.java
net\minecraft\tags\FluidTags.java
net\minecraft\tags\GameEventTags.java
net\minecraft\tags\InstrumentTags.java
net\minecraft\tags\ItemTags.java
net\minecraft\tags\package-info.java
net\minecraft\tags\PaintingVariantTags.java
net\minecraft\tags\PoiTypeTags.java
net\minecraft\tags\StructureTags.java
net\minecraft\tags\TagBuilder.java
net\minecraft\tags\TagEntry.java
net\minecraft\tags\TagFile.java
net\minecraft\tags\TagKey.java
net\minecraft\tags\TagLoader.java
net\minecraft\tags\TagManager.java
net\minecraft\tags\TagNetworkSerialization.java
net\minecraft\tags\WorldPresetTags.java
net\minecraft\util\datafix
net\minecraft\util\eventlog
net\minecraft\util\monitoring
net\minecraft\util\profiling
net\minecraft\util\random
net\minecraft\util\thread
net\minecraft\util\valueproviders
net\minecraft\util\worldupdate
net\minecraft\util\AbortableIterationConsumer.java
net\minecraft\util\ArrayListDeque.java
net\minecraft\util\BitStorage.java
net\minecraft\util\Brightness.java
net\minecraft\util\ByIdMap.java
net\minecraft\util\ClassInstanceMultiMap.java
net\minecraft\util\ColorRGBA.java
net\minecraft\util\CommonColors.java
net\minecraft\util\CommonLinks.java
net\minecraft\util\CrudeIncrementalIntIdentityHashBiMap.java
net\minecraft\util\Crypt.java
net\minecraft\util\CryptException.java
net\minecraft\util\CsvOutput.java
net\minecraft\util\CubicSampler.java
net\minecraft\util\CubicSpline.java
net\minecraft\util\DebugBuffer.java
net\minecraft\util\DelegateDataOutput.java
net\minecraft\util\DependencySorter.java
net\minecraft\util\DirectoryLock.java
net\minecraft\util\ExceptionCollector.java
net\minecraft\util\ExtraCodecs.java
net\minecraft\util\FastBufferedInputStream.java
net\minecraft\util\FastColor.java
net\minecraft\util\FileZipper.java
net\minecraft\util\FormattedCharSequence.java
net\minecraft\util\FormattedCharSink.java
net\minecraft\util\FutureChain.java
net\minecraft\util\Graph.java
net\minecraft\util\GsonHelper.java
net\minecraft\util\HttpUtil.java
net\minecraft\util\InclusiveRange.java
net\minecraft\util\JavaOps.java
net\minecraft\util\KeyDispatchDataCodec.java
net\minecraft\util\LazyLoadedValue.java
net\minecraft\util\LinearCongruentialGenerator.java
net\minecraft\util\LowerCaseEnumTypeAdapterFactory.java
net\minecraft\util\MemoryReserve.java
net\minecraft\util\ModCheck.java
net\minecraft\util\Mth.java
net\minecraft\util\NativeModuleLister.java
net\minecraft\util\OptionEnum.java
net\minecraft\util\package-info.java
net\minecraft\util\ParticleUtils.java
net\minecraft\util\PngInfo.java
net\minecraft\util\ProblemReporter.java
net\minecraft\util\ProgressListener.java
net\minecraft\util\RandomSource.java
net\minecraft\util\ResourceLocationPattern.java
net\minecraft\util\SampleLogger.java
net\minecraft\util\SegmentedAnglePrecision.java
net\minecraft\util\SequencedPriorityIterator.java
net\minecraft\util\SignatureUpdater.java
net\minecraft\util\SignatureValidator.java
net\minecraft\util\Signer.java
net\minecraft\util\SimpleBitStorage.java
net\minecraft\util\SingleKeyCache.java
net\minecraft\util\SmoothDouble.java
net\minecraft\util\SortedArraySet.java
net\minecraft\util\SpawnUtil.java
net\minecraft\util\StringDecomposer.java
net\minecraft\util\StringRepresentable.java
net\minecraft\util\StringUtil.java
net\minecraft\util\TaskChainer.java
net\minecraft\util\ThreadingDetector.java
net\minecraft\util\TimeSource.java
net\minecraft\util\TimeUtil.java
net\minecraft\util\ToFloatFunction.java
net\minecraft\util\Tuple.java
net\minecraft\util\Unit.java
net\minecraft\util\VisibleForDebug.java
net\minecraft\util\ZeroBitStorage.java
net\minecraft\util\datafix\fixes
net\minecraft\util\datafix\schemas
net\minecraft\util\datafix\ComponentDataFixUtils.java
net\minecraft\util\datafix\DataFixers.java
net\minecraft\util\datafix\DataFixTypes.java
net\minecraft\util\datafix\package-info.java
net\minecraft\util\datafix\PackedBitStorage.java
net\minecraft\util\datafix\fixes\AbstractArrowPickupFix.java
net\minecraft\util\datafix\fixes\AbstractPoiSectionFix.java
net\minecraft\util\datafix\fixes\AbstractUUIDFix.java
net\minecraft\util\datafix\fixes\AddFlagIfNotPresentFix.java
net\minecraft\util\datafix\fixes\AddNewChoices.java
net\minecraft\util\datafix\fixes\AdvancementsFix.java
net\minecraft\util\datafix\fixes\AdvancementsRenameFix.java
net\minecraft\util\datafix\fixes\AttributesRename.java
net\minecraft\util\datafix\fixes\BedItemColorFix.java
net\minecraft\util\datafix\fixes\BiomeFix.java
net\minecraft\util\datafix\fixes\BitStorageAlignFix.java
net\minecraft\util\datafix\fixes\BlendingDataFix.java
net\minecraft\util\datafix\fixes\BlendingDataRemoveFromNetherEndFix.java
net\minecraft\util\datafix\fixes\BlockEntityBannerColorFix.java
net\minecraft\util\datafix\fixes\BlockEntityBlockStateFix.java
net\minecraft\util\datafix\fixes\BlockEntityCustomNameToComponentFix.java
net\minecraft\util\datafix\fixes\BlockEntityIdFix.java
net\minecraft\util\datafix\fixes\BlockEntityJukeboxFix.java
net\minecraft\util\datafix\fixes\BlockEntityKeepPacked.java
net\minecraft\util\datafix\fixes\BlockEntityRenameFix.java
net\minecraft\util\datafix\fixes\BlockEntityShulkerBoxColorFix.java
net\minecraft\util\datafix\fixes\BlockEntitySignDoubleSidedEditableTextFix.java
net\minecraft\util\datafix\fixes\BlockEntitySignTextStrictJsonFix.java
net\minecraft\util\datafix\fixes\BlockEntityUUIDFix.java
net\minecraft\util\datafix\fixes\BlockNameFlatteningFix.java
net\minecraft\util\datafix\fixes\BlockRenameFix.java
net\minecraft\util\datafix\fixes\BlockRenameFixWithJigsaw.java
net\minecraft\util\datafix\fixes\BlockStateData.java
net\minecraft\util\datafix\fixes\BlockStateStructureTemplateFix.java
net\minecraft\util\datafix\fixes\CatTypeFix.java
net\minecraft\util\datafix\fixes\CauldronRenameFix.java
net\minecraft\util\datafix\fixes\CavesAndCliffsRenames.java
net\minecraft\util\datafix\fixes\ChunkBedBlockEntityInjecterFix.java
net\minecraft\util\datafix\fixes\ChunkBiomeFix.java
net\minecraft\util\datafix\fixes\ChunkDeleteIgnoredLightDataFix.java
net\minecraft\util\datafix\fixes\ChunkDeleteLightFix.java
net\minecraft\util\datafix\fixes\ChunkHeightAndBiomeFix.java
net\minecraft\util\datafix\fixes\ChunkLightRemoveFix.java
net\minecraft\util\datafix\fixes\ChunkPalettedStorageFix.java
net\minecraft\util\datafix\fixes\ChunkProtoTickListFix.java
net\minecraft\util\datafix\fixes\ChunkRenamesFix.java
net\minecraft\util\datafix\fixes\ChunkStatusFix.java
net\minecraft\util\datafix\fixes\ChunkStatusFix2.java
net\minecraft\util\datafix\fixes\ChunkStructuresTemplateRenameFix.java
net\minecraft\util\datafix\fixes\ChunkToProtochunkFix.java
net\minecraft\util\datafix\fixes\ColorlessShulkerEntityFix.java
net\minecraft\util\datafix\fixes\CriteriaRenameFix.java
net\minecraft\util\datafix\fixes\DecoratedPotFieldRenameFix.java
net\minecraft\util\datafix\fixes\DropInvalidSignDataFix.java
net\minecraft\util\datafix\fixes\DyeItemRenameFix.java
net\minecraft\util\datafix\fixes\EffectDurationFix.java
net\minecraft\util\datafix\fixes\EntityArmorStandSilentFix.java
net\minecraft\util\datafix\fixes\EntityBlockStateFix.java
net\minecraft\util\datafix\fixes\EntityBrushableBlockFieldsRenameFix.java
net\minecraft\util\datafix\fixes\EntityCatSplitFix.java
net\minecraft\util\datafix\fixes\EntityCodSalmonFix.java
net\minecraft\util\datafix\fixes\EntityCustomNameToComponentFix.java
net\minecraft\util\datafix\fixes\EntityElderGuardianSplitFix.java
net\minecraft\util\datafix\fixes\EntityEquipmentToArmorAndHandFix.java
net\minecraft\util\datafix\fixes\EntityGoatMissingStateFix.java
net\minecraft\util\datafix\fixes\EntityHealthFix.java
net\minecraft\util\datafix\fixes\EntityHorseSaddleFix.java
net\minecraft\util\datafix\fixes\EntityHorseSplitFix.java
net\minecraft\util\datafix\fixes\EntityIdFix.java
net\minecraft\util\datafix\fixes\EntityItemFrameDirectionFix.java
net\minecraft\util\datafix\fixes\EntityMinecartIdentifiersFix.java
net\minecraft\util\datafix\fixes\EntityPaintingFieldsRenameFix.java
net\minecraft\util\datafix\fixes\EntityPaintingItemFrameDirectionFix.java
net\minecraft\util\datafix\fixes\EntityPaintingMotiveFix.java
net\minecraft\util\datafix\fixes\EntityProjectileOwnerFix.java
net\minecraft\util\datafix\fixes\EntityPufferfishRenameFix.java
net\minecraft\util\datafix\fixes\EntityRavagerRenameFix.java
net\minecraft\util\datafix\fixes\EntityRedundantChanceTagsFix.java
net\minecraft\util\datafix\fixes\EntityRenameFix.java
net\minecraft\util\datafix\fixes\EntityRidingToPassengersFix.java
net\minecraft\util\datafix\fixes\EntityShulkerColorFix.java
net\minecraft\util\datafix\fixes\EntityShulkerRotationFix.java
net\minecraft\util\datafix\fixes\EntitySkeletonSplitFix.java
net\minecraft\util\datafix\fixes\EntityStringUuidFix.java
net\minecraft\util\datafix\fixes\EntityTheRenameningFix.java
net\minecraft\util\datafix\fixes\EntityTippedArrowFix.java
net\minecraft\util\datafix\fixes\EntityUUIDFix.java
net\minecraft\util\datafix\fixes\EntityVariantFix.java
net\minecraft\util\datafix\fixes\EntityWolfColorFix.java
net\minecraft\util\datafix\fixes\EntityZombieSplitFix.java
net\minecraft\util\datafix\fixes\EntityZombieVillagerTypeFix.java
net\minecraft\util\datafix\fixes\EntityZombifiedPiglinRenameFix.java
net\minecraft\util\datafix\fixes\FeatureFlagRemoveFix.java
net\minecraft\util\datafix\fixes\FilteredBooksFix.java
net\minecraft\util\datafix\fixes\FilteredSignsFix.java
net\minecraft\util\datafix\fixes\FixProjectileStoredItem.java
net\minecraft\util\datafix\fixes\ForcePoiRebuild.java
net\minecraft\util\datafix\fixes\FurnaceRecipeFix.java
net\minecraft\util\datafix\fixes\GoatHornIdFix.java
net\minecraft\util\datafix\fixes\GossipUUIDFix.java
net\minecraft\util\datafix\fixes\HeightmapRenamingFix.java
net\minecraft\util\datafix\fixes\IglooMetadataRemovalFix.java
net\minecraft\util\datafix\fixes\ItemBannerColorFix.java
net\minecraft\util\datafix\fixes\ItemCustomNameToComponentFix.java
net\minecraft\util\datafix\fixes\ItemIdFix.java
net\minecraft\util\datafix\fixes\ItemLoreFix.java
net\minecraft\util\datafix\fixes\ItemPotionFix.java
net\minecraft\util\datafix\fixes\ItemRemoveBlockEntityTagFix.java
net\minecraft\util\datafix\fixes\ItemRenameFix.java
net\minecraft\util\datafix\fixes\ItemShulkerBoxColorFix.java
net\minecraft\util\datafix\fixes\ItemSpawnEggFix.java
net\minecraft\util\datafix\fixes\ItemStackEnchantmentNamesFix.java
net\minecraft\util\datafix\fixes\ItemStackMapIdFix.java
net\minecraft\util\datafix\fixes\ItemStackSpawnEggFix.java
net\minecraft\util\datafix\fixes\ItemStackTagFix.java
net\minecraft\util\datafix\fixes\ItemStackTheFlatteningFix.java
net\minecraft\util\datafix\fixes\ItemStackUUIDFix.java
net\minecraft\util\datafix\fixes\ItemWaterPotionFix.java
net\minecraft\util\datafix\fixes\ItemWrittenBookPagesStrictJsonFix.java
net\minecraft\util\datafix\fixes\JigsawPropertiesFix.java
net\minecraft\util\datafix\fixes\JigsawRotationFix.java
net\minecraft\util\datafix\fixes\LeavesFix.java
net\minecraft\util\datafix\fixes\LegacyDragonFightFix.java
net\minecraft\util\datafix\fixes\LevelDataGeneratorOptionsFix.java
net\minecraft\util\datafix\fixes\LevelFlatGeneratorInfoFix.java
net\minecraft\util\datafix\fixes\LevelLegacyWorldGenSettingsFix.java
net\minecraft\util\datafix\fixes\LevelUUIDFix.java
net\minecraft\util\datafix\fixes\MapIdFix.java
net\minecraft\util\datafix\fixes\MemoryExpiryDataFix.java
net\minecraft\util\datafix\fixes\MissingDimensionFix.java
net\minecraft\util\datafix\fixes\MobEffectIdFix.java
net\minecraft\util\datafix\fixes\MobSpawnerEntityIdentifiersFix.java
net\minecraft\util\datafix\fixes\NamedEntityFix.java
net\minecraft\util\datafix\fixes\NamedEntityWriteReadFix.java
net\minecraft\util\datafix\fixes\NamespacedTypeRenameFix.java
net\minecraft\util\datafix\fixes\NewVillageFix.java
net\minecraft\util\datafix\fixes\ObjectiveDisplayNameFix.java
net\minecraft\util\datafix\fixes\ObjectiveRenderTypeFix.java
net\minecraft\util\datafix\fixes\OminousBannerBlockEntityRenameFix.java
net\minecraft\util\datafix\fixes\OminousBannerRenameFix.java
net\minecraft\util\datafix\fixes\OptionsAccessibilityOnboardFix.java
net\minecraft\util\datafix\fixes\OptionsAddTextBackgroundFix.java
net\minecraft\util\datafix\fixes\OptionsAmbientOcclusionFix.java
net\minecraft\util\datafix\fixes\OptionsForceVBOFix.java
net\minecraft\util\datafix\fixes\OptionsKeyLwjgl3Fix.java
net\minecraft\util\datafix\fixes\OptionsKeyTranslationFix.java
net\minecraft\util\datafix\fixes\OptionsLowerCaseLanguageFix.java
net\minecraft\util\datafix\fixes\OptionsProgrammerArtFix.java
net\minecraft\util\datafix\fixes\OptionsRenameFieldFix.java
net\minecraft\util\datafix\fixes\OverreachingTickFix.java
net\minecraft\util\datafix\fixes\package-info.java
net\minecraft\util\datafix\fixes\PlayerUUIDFix.java
net\minecraft\util\datafix\fixes\PoiTypeRemoveFix.java
net\minecraft\util\datafix\fixes\PoiTypeRenameFix.java
net\minecraft\util\datafix\fixes\PrimedTntBlockStateFixer.java
net\minecraft\util\datafix\fixes\RandomSequenceSettingsFix.java
net\minecraft\util\datafix\fixes\RecipesFix.java
net\minecraft\util\datafix\fixes\RecipesRenameningFix.java
net\minecraft\util\datafix\fixes\RedstoneWireConnectionsFix.java
net\minecraft\util\datafix\fixes\References.java
net\minecraft\util\datafix\fixes\RemapChunkStatusFix.java
net\minecraft\util\datafix\fixes\RemoveGolemGossipFix.java
net\minecraft\util\datafix\fixes\RenamedCoralFansFix.java
net\minecraft\util\datafix\fixes\RenamedCoralFix.java
net\minecraft\util\datafix\fixes\ReorganizePoi.java
net\minecraft\util\datafix\fixes\SavedDataFeaturePoolElementFix.java
net\minecraft\util\datafix\fixes\SavedDataUUIDFix.java
net\minecraft\util\datafix\fixes\ScoreboardDisplaySlotFix.java
net\minecraft\util\datafix\fixes\SimpleEntityRenameFix.java
net\minecraft\util\datafix\fixes\SimplestEntityRenameFix.java
net\minecraft\util\datafix\fixes\SpawnerDataFix.java
net\minecraft\util\datafix\fixes\StatsCounterFix.java
net\minecraft\util\datafix\fixes\StatsRenameFix.java
net\minecraft\util\datafix\fixes\StriderGravityFix.java
net\minecraft\util\datafix\fixes\StructureReferenceCountFix.java
net\minecraft\util\datafix\fixes\StructuresBecomeConfiguredFix.java
net\minecraft\util\datafix\fixes\StructureSettingsFlattenFix.java
net\minecraft\util\datafix\fixes\TeamDisplayNameFix.java
net\minecraft\util\datafix\fixes\TrappedChestBlockEntityFix.java
net\minecraft\util\datafix\fixes\VariantRenameFix.java
net\minecraft\util\datafix\fixes\VillagerDataFix.java
net\minecraft\util\datafix\fixes\VillagerFollowRangeFix.java
net\minecraft\util\datafix\fixes\VillagerRebuildLevelAndXpFix.java
net\minecraft\util\datafix\fixes\VillagerTradeFix.java
net\minecraft\util\datafix\fixes\WallPropertyFix.java
net\minecraft\util\datafix\fixes\WeaponSmithChestLootTableFix.java
net\minecraft\util\datafix\fixes\WorldGenSettingsDisallowOldCustomWorldsFix.java
net\minecraft\util\datafix\fixes\WorldGenSettingsFix.java
net\minecraft\util\datafix\fixes\WorldGenSettingsHeightAndBiomeFix.java
net\minecraft\util\datafix\fixes\WriteAndReadFix.java
net\minecraft\util\datafix\fixes\ZombieVillagerRebuildXpFix.java
net\minecraft\util\datafix\schemas\NamespacedSchema.java
net\minecraft\util\datafix\schemas\package-info.java
net\minecraft\util\datafix\schemas\V100.java
net\minecraft\util\datafix\schemas\V102.java
net\minecraft\util\datafix\schemas\V1022.java
net\minecraft\util\datafix\schemas\V106.java
net\minecraft\util\datafix\schemas\V107.java
net\minecraft\util\datafix\schemas\V1125.java
net\minecraft\util\datafix\schemas\V135.java
net\minecraft\util\datafix\schemas\V143.java
net\minecraft\util\datafix\schemas\V1451_1.java
net\minecraft\util\datafix\schemas\V1451_2.java
net\minecraft\util\datafix\schemas\V1451_3.java
net\minecraft\util\datafix\schemas\V1451_4.java
net\minecraft\util\datafix\schemas\V1451_5.java
net\minecraft\util\datafix\schemas\V1451_6.java
net\minecraft\util\datafix\schemas\V1451.java
net\minecraft\util\datafix\schemas\V1460.java
net\minecraft\util\datafix\schemas\V1466.java
net\minecraft\util\datafix\schemas\V1470.java
net\minecraft\util\datafix\schemas\V1481.java
net\minecraft\util\datafix\schemas\V1483.java
net\minecraft\util\datafix\schemas\V1486.java
net\minecraft\util\datafix\schemas\V1510.java
net\minecraft\util\datafix\schemas\V1800.java
net\minecraft\util\datafix\schemas\V1801.java
net\minecraft\util\datafix\schemas\V1904.java
net\minecraft\util\datafix\schemas\V1906.java
net\minecraft\util\datafix\schemas\V1909.java
net\minecraft\util\datafix\schemas\V1920.java
net\minecraft\util\datafix\schemas\V1928.java
net\minecraft\util\datafix\schemas\V1929.java
net\minecraft\util\datafix\schemas\V1931.java
net\minecraft\util\datafix\schemas\V2100.java
net\minecraft\util\datafix\schemas\V2501.java
net\minecraft\util\datafix\schemas\V2502.java
net\minecraft\util\datafix\schemas\V2505.java
net\minecraft\util\datafix\schemas\V2509.java
net\minecraft\util\datafix\schemas\V2519.java
net\minecraft\util\datafix\schemas\V2522.java
net\minecraft\util\datafix\schemas\V2551.java
net\minecraft\util\datafix\schemas\V2568.java
net\minecraft\util\datafix\schemas\V2571.java
net\minecraft\util\datafix\schemas\V2684.java
net\minecraft\util\datafix\schemas\V2686.java
net\minecraft\util\datafix\schemas\V2688.java
net\minecraft\util\datafix\schemas\V2704.java
net\minecraft\util\datafix\schemas\V2707.java
net\minecraft\util\datafix\schemas\V2831.java
net\minecraft\util\datafix\schemas\V2832.java
net\minecraft\util\datafix\schemas\V2842.java
net\minecraft\util\datafix\schemas\V3076.java
net\minecraft\util\datafix\schemas\V3078.java
net\minecraft\util\datafix\schemas\V3081.java
net\minecraft\util\datafix\schemas\V3082.java
net\minecraft\util\datafix\schemas\V3083.java
net\minecraft\util\datafix\schemas\V3202.java
net\minecraft\util\datafix\schemas\V3203.java
net\minecraft\util\datafix\schemas\V3204.java
net\minecraft\util\datafix\schemas\V3325.java
net\minecraft\util\datafix\schemas\V3326.java
net\minecraft\util\datafix\schemas\V3327.java
net\minecraft\util\datafix\schemas\V3328.java
net\minecraft\util\datafix\schemas\V3438.java
net\minecraft\util\datafix\schemas\V3448.java
net\minecraft\util\datafix\schemas\V3682.java
net\minecraft\util\datafix\schemas\V3683.java
net\minecraft\util\datafix\schemas\V3685.java
net\minecraft\util\datafix\schemas\V3689.java
net\minecraft\util\datafix\schemas\V501.java
net\minecraft\util\datafix\schemas\V700.java
net\minecraft\util\datafix\schemas\V701.java
net\minecraft\util\datafix\schemas\V702.java
net\minecraft\util\datafix\schemas\V703.java
net\minecraft\util\datafix\schemas\V704.java
net\minecraft\util\datafix\schemas\V705.java
net\minecraft\util\datafix\schemas\V808.java
net\minecraft\util\datafix\schemas\V99.java
net\minecraft\util\eventlog\EventLogDirectory.java
net\minecraft\util\eventlog\JsonEventLog.java
net\minecraft\util\eventlog\JsonEventLogReader.java
net\minecraft\util\eventlog\package-info.java
net\minecraft\util\monitoring\jmx
net\minecraft\util\monitoring\jmx\MinecraftServerStatistics.java
net\minecraft\util\monitoring\jmx\package-info.java
net\minecraft\util\profiling\jfr
net\minecraft\util\profiling\metrics
net\minecraft\util\profiling\ActiveProfiler.java
net\minecraft\util\profiling\ContinuousProfiler.java
net\minecraft\util\profiling\EmptyProfileResults.java
net\minecraft\util\profiling\FilledProfileResults.java
net\minecraft\util\profiling\InactiveProfiler.java
net\minecraft\util\profiling\package-info.java
net\minecraft\util\profiling\ProfileCollector.java
net\minecraft\util\profiling\ProfileResults.java
net\minecraft\util\profiling\ProfilerFiller.java
net\minecraft\util\profiling\ProfilerPathEntry.java
net\minecraft\util\profiling\ResultField.java
net\minecraft\util\profiling\SingleTickProfiler.java
net\minecraft\util\profiling\jfr\callback
net\minecraft\util\profiling\jfr\event
net\minecraft\util\profiling\jfr\parse
net\minecraft\util\profiling\jfr\serialize
net\minecraft\util\profiling\jfr\stats
net\minecraft\util\profiling\jfr\Environment.java
net\minecraft\util\profiling\jfr\JfrProfiler.java
net\minecraft\util\profiling\jfr\JvmProfiler.java
net\minecraft\util\profiling\jfr\package-info.java
net\minecraft\util\profiling\jfr\Percentiles.java
net\minecraft\util\profiling\jfr\SummaryReporter.java
net\minecraft\util\profiling\jfr\callback\package-info.java
net\minecraft\util\profiling\jfr\callback\ProfiledDuration.java
net\minecraft\util\profiling\jfr\event\ChunkGenerationEvent.java
net\minecraft\util\profiling\jfr\event\NetworkSummaryEvent.java
net\minecraft\util\profiling\jfr\event\package-info.java
net\minecraft\util\profiling\jfr\event\PacketEvent.java
net\minecraft\util\profiling\jfr\event\PacketReceivedEvent.java
net\minecraft\util\profiling\jfr\event\PacketSentEvent.java
net\minecraft\util\profiling\jfr\event\ServerTickTimeEvent.java
net\minecraft\util\profiling\jfr\event\WorldLoadFinishedEvent.java
net\minecraft\util\profiling\jfr\parse\JfrStatsParser.java
net\minecraft\util\profiling\jfr\parse\JfrStatsResult.java
net\minecraft\util\profiling\jfr\parse\package-info.java
net\minecraft\util\profiling\jfr\serialize\JfrResultJsonSerializer.java
net\minecraft\util\profiling\jfr\serialize\package-info.java
net\minecraft\util\profiling\jfr\stats\ChunkGenStat.java
net\minecraft\util\profiling\jfr\stats\CpuLoadStat.java
net\minecraft\util\profiling\jfr\stats\FileIOStat.java
net\minecraft\util\profiling\jfr\stats\GcHeapStat.java
net\minecraft\util\profiling\jfr\stats\NetworkPacketSummary.java
net\minecraft\util\profiling\jfr\stats\package-info.java
net\minecraft\util\profiling\jfr\stats\ThreadAllocationStat.java
net\minecraft\util\profiling\jfr\stats\TickTimeStat.java
net\minecraft\util\profiling\jfr\stats\TimedStat.java
net\minecraft\util\profiling\jfr\stats\TimedStatSummary.java
net\minecraft\util\profiling\metrics\profiling
net\minecraft\util\profiling\metrics\storage
net\minecraft\util\profiling\metrics\MetricCategory.java
net\minecraft\util\profiling\metrics\MetricSampler.java
net\minecraft\util\profiling\metrics\MetricsRegistry.java
net\minecraft\util\profiling\metrics\MetricsSamplerProvider.java
net\minecraft\util\profiling\metrics\package-info.java
net\minecraft\util\profiling\metrics\ProfilerMeasured.java
net\minecraft\util\profiling\metrics\profiling\ActiveMetricsRecorder.java
net\minecraft\util\profiling\metrics\profiling\InactiveMetricsRecorder.java
net\minecraft\util\profiling\metrics\profiling\MetricsRecorder.java
net\minecraft\util\profiling\metrics\profiling\package-info.java
net\minecraft\util\profiling\metrics\profiling\ProfilerSamplerAdapter.java
net\minecraft\util\profiling\metrics\profiling\ServerMetricsSamplersProvider.java
net\minecraft\util\profiling\metrics\storage\MetricsPersister.java
net\minecraft\util\profiling\metrics\storage\package-info.java
net\minecraft\util\profiling\metrics\storage\RecordedDeviation.java
net\minecraft\util\random\package-info.java
net\minecraft\util\random\SimpleWeightedRandomList.java
net\minecraft\util\random\Weight.java
net\minecraft\util\random\WeightedEntry.java
net\minecraft\util\random\WeightedRandom.java
net\minecraft\util\random\WeightedRandomList.java
net\minecraft\util\thread\BlockableEventLoop.java
net\minecraft\util\thread\NamedThreadFactory.java
net\minecraft\util\thread\package-info.java
net\minecraft\util\thread\ProcessorHandle.java
net\minecraft\util\thread\ProcessorMailbox.java
net\minecraft\util\thread\ReentrantBlockableEventLoop.java
net\minecraft\util\thread\StrictQueue.java
net\minecraft\util\valueproviders\BiasedToBottomInt.java
net\minecraft\util\valueproviders\ClampedInt.java
net\minecraft\util\valueproviders\ClampedNormalFloat.java
net\minecraft\util\valueproviders\ClampedNormalInt.java
net\minecraft\util\valueproviders\ConstantFloat.java
net\minecraft\util\valueproviders\ConstantInt.java
net\minecraft\util\valueproviders\FloatProvider.java
net\minecraft\util\valueproviders\FloatProviderType.java
net\minecraft\util\valueproviders\IntProvider.java
net\minecraft\util\valueproviders\IntProviderType.java
net\minecraft\util\valueproviders\MultipliedFloats.java
net\minecraft\util\valueproviders\package-info.java
net\minecraft\util\valueproviders\SampledFloat.java
net\minecraft\util\valueproviders\TrapezoidFloat.java
net\minecraft\util\valueproviders\UniformFloat.java
net\minecraft\util\valueproviders\UniformInt.java
net\minecraft\util\valueproviders\WeightedListInt.java
net\minecraft\util\worldupdate\package-info.java
net\minecraft\util\worldupdate\WorldUpgrader.java
net\minecraft\world\damagesource
net\minecraft\world\effect
net\minecraft\world\entity
net\minecraft\world\flag
net\minecraft\world\food
net\minecraft\world\inventory
net\minecraft\world\item
net\minecraft\world\level
net\minecraft\world\phys
net\minecraft\world\scores
net\minecraft\world\ticks
net\minecraft\world\BossEvent.java
net\minecraft\world\Clearable.java
net\minecraft\world\CompoundContainer.java
net\minecraft\world\Container.java
net\minecraft\world\ContainerHelper.java
net\minecraft\world\ContainerListener.java
net\minecraft\world\Containers.java
net\minecraft\world\Difficulty.java
net\minecraft\world\DifficultyInstance.java
net\minecraft\world\InteractionHand.java
net\minecraft\world\InteractionResult.java
net\minecraft\world\InteractionResultHolder.java
net\minecraft\world\LockCode.java
net\minecraft\world\MenuProvider.java
net\minecraft\world\Nameable.java
net\minecraft\world\package-info.java
net\minecraft\world\RandomizableContainer.java
net\minecraft\world\RandomSequence.java
net\minecraft\world\RandomSequences.java
net\minecraft\world\SimpleContainer.java
net\minecraft\world\SimpleMenuProvider.java
net\minecraft\world\TickRateManager.java
net\minecraft\world\WorldlyContainer.java
net\minecraft\world\WorldlyContainerHolder.java
net\minecraft\world\damagesource\CombatEntry.java
net\minecraft\world\damagesource\CombatRules.java
net\minecraft\world\damagesource\CombatTracker.java
net\minecraft\world\damagesource\DamageEffects.java
net\minecraft\world\damagesource\DamageScaling.java
net\minecraft\world\damagesource\DamageSource.java
net\minecraft\world\damagesource\DamageSources.java
net\minecraft\world\damagesource\DamageType.java
net\minecraft\world\damagesource\DamageTypes.java
net\minecraft\world\damagesource\DeathMessageType.java
net\minecraft\world\damagesource\FallLocation.java
net\minecraft\world\damagesource\package-info.java
net\minecraft\world\effect\AbsorptionMobEffect.java
net\minecraft\world\effect\AttributeModifierTemplate.java
net\minecraft\world\effect\BadOmenMobEffect.java
net\minecraft\world\effect\HealOrHarmMobEffect.java
net\minecraft\world\effect\HungerMobEffect.java
net\minecraft\world\effect\InstantenousMobEffect.java
net\minecraft\world\effect\MobEffect.java
net\minecraft\world\effect\MobEffectCategory.java
net\minecraft\world\effect\MobEffectInstance.java
net\minecraft\world\effect\MobEffects.java
net\minecraft\world\effect\MobEffectUtil.java
net\minecraft\world\effect\package-info.java
net\minecraft\world\effect\PoisonMobEffect.java
net\minecraft\world\effect\RegenerationMobEffect.java
net\minecraft\world\effect\SaturationMobEffect.java
net\minecraft\world\effect\WitherMobEffect.java
net\minecraft\world\entity\ai
net\minecraft\world\entity\ambient
net\minecraft\world\entity\animal
net\minecraft\world\entity\boss
net\minecraft\world\entity\decoration
net\minecraft\world\entity\item
net\minecraft\world\entity\monster
net\minecraft\world\entity\npc
net\minecraft\world\entity\player
net\minecraft\world\entity\projectile
net\minecraft\world\entity\raid
net\minecraft\world\entity\schedule
net\minecraft\world\entity\vehicle
net\minecraft\world\entity\AgeableMob.java
net\minecraft\world\entity\AnimationState.java
net\minecraft\world\entity\AreaEffectCloud.java
net\minecraft\world\entity\Attackable.java
net\minecraft\world\entity\Display.java
net\minecraft\world\entity\Entity.java
net\minecraft\world\entity\EntityDimensions.java
net\minecraft\world\entity\EntityEvent.java
net\minecraft\world\entity\EntitySelector.java
net\minecraft\world\entity\EntityType.java
net\minecraft\world\entity\EquipmentSlot.java
net\minecraft\world\entity\ExperienceOrb.java
net\minecraft\world\entity\FlyingMob.java
net\minecraft\world\entity\GlowSquid.java
net\minecraft\world\entity\HasCustomInventoryScreen.java
net\minecraft\world\entity\HumanoidArm.java
net\minecraft\world\entity\Interaction.java
net\minecraft\world\entity\ItemBasedSteering.java
net\minecraft\world\entity\ItemSteerable.java
net\minecraft\world\entity\LerpingModel.java
net\minecraft\world\entity\LightningBolt.java
net\minecraft\world\entity\LivingEntity.java
net\minecraft\world\entity\Marker.java
net\minecraft\world\entity\Mob.java
net\minecraft\world\entity\MobCategory.java
net\minecraft\world\entity\MobSpawnType.java
net\minecraft\world\entity\MobType.java
net\minecraft\world\entity\MoverType.java
net\minecraft\world\entity\NeutralMob.java
net\minecraft\world\entity\OwnableEntity.java
net\minecraft\world\entity\package-info.java
net\minecraft\world\entity\PathfinderMob.java
net\minecraft\world\entity\PlayerRideable.java
net\minecraft\world\entity\PlayerRideableJumping.java
net\minecraft\world\entity\Pose.java
net\minecraft\world\entity\PowerableMob.java
net\minecraft\world\entity\RelativeMovement.java
net\minecraft\world\entity\ReputationEventHandler.java
net\minecraft\world\entity\Saddleable.java
net\minecraft\world\entity\Shearable.java
net\minecraft\world\entity\SlotAccess.java
net\minecraft\world\entity\SpawnGroupData.java
net\minecraft\world\entity\SpawnPlacements.java
net\minecraft\world\entity\TamableAnimal.java
net\minecraft\world\entity\Targeting.java
net\minecraft\world\entity\TraceableEntity.java
net\minecraft\world\entity\VariantHolder.java
net\minecraft\world\entity\WalkAnimationState.java
net\minecraft\world\entity\ai\attributes
net\minecraft\world\entity\ai\behavior
net\minecraft\world\entity\ai\control
net\minecraft\world\entity\ai\goal
net\minecraft\world\entity\ai\gossip
net\minecraft\world\entity\ai\memory
net\minecraft\world\entity\ai\navigation
net\minecraft\world\entity\ai\sensing
net\minecraft\world\entity\ai\targeting
net\minecraft\world\entity\ai\util
net\minecraft\world\entity\ai\village
net\minecraft\world\entity\ai\Brain.java
net\minecraft\world\entity\ai\package-info.java
net\minecraft\world\entity\ai\attributes\Attribute.java
net\minecraft\world\entity\ai\attributes\AttributeInstance.java
net\minecraft\world\entity\ai\attributes\AttributeMap.java
net\minecraft\world\entity\ai\attributes\AttributeModifier.java
net\minecraft\world\entity\ai\attributes\Attributes.java
net\minecraft\world\entity\ai\attributes\AttributeSupplier.java
net\minecraft\world\entity\ai\attributes\DefaultAttributes.java
net\minecraft\world\entity\ai\attributes\package-info.java
net\minecraft\world\entity\ai\attributes\RangedAttribute.java
net\minecraft\world\entity\ai\behavior\declarative
net\minecraft\world\entity\ai\behavior\warden
net\minecraft\world\entity\ai\behavior\AcquirePoi.java
net\minecraft\world\entity\ai\behavior\AnimalMakeLove.java
net\minecraft\world\entity\ai\behavior\AnimalPanic.java
net\minecraft\world\entity\ai\behavior\AssignProfessionFromJobSite.java
net\minecraft\world\entity\ai\behavior\BabyFollowAdult.java
net\minecraft\world\entity\ai\behavior\BackUpIfTooClose.java
net\minecraft\world\entity\ai\behavior\BecomePassiveIfMemoryPresent.java
net\minecraft\world\entity\ai\behavior\Behavior.java
net\minecraft\world\entity\ai\behavior\BehaviorControl.java
net\minecraft\world\entity\ai\behavior\BehaviorUtils.java
net\minecraft\world\entity\ai\behavior\BlockPosTracker.java
net\minecraft\world\entity\ai\behavior\CelebrateVillagersSurvivedRaid.java
net\minecraft\world\entity\ai\behavior\CopyMemoryWithExpiry.java
net\minecraft\world\entity\ai\behavior\CountDownCooldownTicks.java
net\minecraft\world\entity\ai\behavior\Croak.java
net\minecraft\world\entity\ai\behavior\CrossbowAttack.java
net\minecraft\world\entity\ai\behavior\DismountOrSkipMounting.java
net\minecraft\world\entity\ai\behavior\DoNothing.java
net\minecraft\world\entity\ai\behavior\EntityTracker.java
net\minecraft\world\entity\ai\behavior\EraseMemoryIf.java
net\minecraft\world\entity\ai\behavior\FollowTemptation.java
net\minecraft\world\entity\ai\behavior\GateBehavior.java
net\minecraft\world\entity\ai\behavior\GiveGiftToHero.java
net\minecraft\world\entity\ai\behavior\GoAndGiveItemsToTarget.java
net\minecraft\world\entity\ai\behavior\GoToClosestVillage.java
net\minecraft\world\entity\ai\behavior\GoToPotentialJobSite.java
net\minecraft\world\entity\ai\behavior\GoToTargetLocation.java
net\minecraft\world\entity\ai\behavior\GoToWantedItem.java
net\minecraft\world\entity\ai\behavior\HarvestFarmland.java
net\minecraft\world\entity\ai\behavior\InsideBrownianWalk.java
net\minecraft\world\entity\ai\behavior\InteractWith.java
net\minecraft\world\entity\ai\behavior\InteractWithDoor.java
net\minecraft\world\entity\ai\behavior\JumpOnBed.java
net\minecraft\world\entity\ai\behavior\LocateHidingPlace.java
net\minecraft\world\entity\ai\behavior\LongJumpMidJump.java
net\minecraft\world\entity\ai\behavior\LongJumpToPreferredBlock.java
net\minecraft\world\entity\ai\behavior\LongJumpToRandomPos.java
net\minecraft\world\entity\ai\behavior\LongJumpUtil.java
net\minecraft\world\entity\ai\behavior\LookAndFollowTradingPlayerSink.java
net\minecraft\world\entity\ai\behavior\LookAtTargetSink.java
net\minecraft\world\entity\ai\behavior\MeleeAttack.java
net\minecraft\world\entity\ai\behavior\Mount.java
net\minecraft\world\entity\ai\behavior\MoveToSkySeeingSpot.java
net\minecraft\world\entity\ai\behavior\MoveToTargetSink.java
net\minecraft\world\entity\ai\behavior\OneShot.java
net\minecraft\world\entity\ai\behavior\package-info.java
net\minecraft\world\entity\ai\behavior\PlayTagWithOtherKids.java
net\minecraft\world\entity\ai\behavior\PoiCompetitorScan.java
net\minecraft\world\entity\ai\behavior\PositionTracker.java
net\minecraft\world\entity\ai\behavior\PrepareRamNearestTarget.java
net\minecraft\world\entity\ai\behavior\RamTarget.java
net\minecraft\world\entity\ai\behavior\RandomLookAround.java
net\minecraft\world\entity\ai\behavior\RandomStroll.java
net\minecraft\world\entity\ai\behavior\ReactToBell.java
net\minecraft\world\entity\ai\behavior\ResetProfession.java
net\minecraft\world\entity\ai\behavior\ResetRaidStatus.java
net\minecraft\world\entity\ai\behavior\RingBell.java
net\minecraft\world\entity\ai\behavior\RunOne.java
net\minecraft\world\entity\ai\behavior\SetClosestHomeAsWalkTarget.java
net\minecraft\world\entity\ai\behavior\SetEntityLookTarget.java
net\minecraft\world\entity\ai\behavior\SetEntityLookTargetSometimes.java
net\minecraft\world\entity\ai\behavior\SetHiddenState.java
net\minecraft\world\entity\ai\behavior\SetLookAndInteract.java
net\minecraft\world\entity\ai\behavior\SetRaidStatus.java
net\minecraft\world\entity\ai\behavior\SetWalkTargetAwayFrom.java
net\minecraft\world\entity\ai\behavior\SetWalkTargetFromAttackTargetIfTargetOutOfReach.java
net\minecraft\world\entity\ai\behavior\SetWalkTargetFromBlockMemory.java
net\minecraft\world\entity\ai\behavior\SetWalkTargetFromLookTarget.java
net\minecraft\world\entity\ai\behavior\ShowTradesToPlayer.java
net\minecraft\world\entity\ai\behavior\ShufflingList.java
net\minecraft\world\entity\ai\behavior\SleepInBed.java
net\minecraft\world\entity\ai\behavior\SocializeAtBell.java
net\minecraft\world\entity\ai\behavior\StartAttacking.java
net\minecraft\world\entity\ai\behavior\StartCelebratingIfTargetDead.java
net\minecraft\world\entity\ai\behavior\StayCloseToTarget.java
net\minecraft\world\entity\ai\behavior\StopAttackingIfTargetInvalid.java
net\minecraft\world\entity\ai\behavior\StopBeingAngryIfTargetDead.java
net\minecraft\world\entity\ai\behavior\StrollAroundPoi.java
net\minecraft\world\entity\ai\behavior\StrollToPoi.java
net\minecraft\world\entity\ai\behavior\StrollToPoiList.java
net\minecraft\world\entity\ai\behavior\Swim.java
net\minecraft\world\entity\ai\behavior\TradeWithVillager.java
net\minecraft\world\entity\ai\behavior\TriggerGate.java
net\minecraft\world\entity\ai\behavior\TryFindLand.java
net\minecraft\world\entity\ai\behavior\TryFindLandNearWater.java
net\minecraft\world\entity\ai\behavior\TryFindWater.java
net\minecraft\world\entity\ai\behavior\TryLaySpawnOnWaterNearLand.java
net\minecraft\world\entity\ai\behavior\UpdateActivityFromSchedule.java
net\minecraft\world\entity\ai\behavior\UseBonemeal.java
net\minecraft\world\entity\ai\behavior\ValidateNearbyPoi.java
net\minecraft\world\entity\ai\behavior\VillageBoundRandomStroll.java
net\minecraft\world\entity\ai\behavior\VillagerCalmDown.java
net\minecraft\world\entity\ai\behavior\VillagerGoalPackages.java
net\minecraft\world\entity\ai\behavior\VillagerMakeLove.java
net\minecraft\world\entity\ai\behavior\VillagerPanicTrigger.java
net\minecraft\world\entity\ai\behavior\WakeUp.java
net\minecraft\world\entity\ai\behavior\WorkAtComposter.java
net\minecraft\world\entity\ai\behavior\WorkAtPoi.java
net\minecraft\world\entity\ai\behavior\YieldJobSite.java
net\minecraft\world\entity\ai\behavior\declarative\BehaviorBuilder.java
net\minecraft\world\entity\ai\behavior\declarative\MemoryAccessor.java
net\minecraft\world\entity\ai\behavior\declarative\MemoryCondition.java
net\minecraft\world\entity\ai\behavior\declarative\package-info.java
net\minecraft\world\entity\ai\behavior\declarative\Trigger.java
net\minecraft\world\entity\ai\behavior\warden\Digging.java
net\minecraft\world\entity\ai\behavior\warden\Emerging.java
net\minecraft\world\entity\ai\behavior\warden\ForceUnmount.java
net\minecraft\world\entity\ai\behavior\warden\package-info.java
net\minecraft\world\entity\ai\behavior\warden\Roar.java
net\minecraft\world\entity\ai\behavior\warden\SetRoarTarget.java
net\minecraft\world\entity\ai\behavior\warden\SetWardenLookTarget.java
net\minecraft\world\entity\ai\behavior\warden\Sniffing.java
net\minecraft\world\entity\ai\behavior\warden\SonicBoom.java
net\minecraft\world\entity\ai\behavior\warden\TryToSniff.java
net\minecraft\world\entity\ai\control\BodyRotationControl.java
net\minecraft\world\entity\ai\control\Control.java
net\minecraft\world\entity\ai\control\FlyingMoveControl.java
net\minecraft\world\entity\ai\control\JumpControl.java
net\minecraft\world\entity\ai\control\LookControl.java
net\minecraft\world\entity\ai\control\MoveControl.java
net\minecraft\world\entity\ai\control\package-info.java
net\minecraft\world\entity\ai\control\SmoothSwimmingLookControl.java
net\minecraft\world\entity\ai\control\SmoothSwimmingMoveControl.java
net\minecraft\world\entity\ai\goal\target
net\minecraft\world\entity\ai\goal\AvoidEntityGoal.java
net\minecraft\world\entity\ai\goal\BegGoal.java
net\minecraft\world\entity\ai\goal\BoatGoals.java
net\minecraft\world\entity\ai\goal\BreakDoorGoal.java
net\minecraft\world\entity\ai\goal\BreathAirGoal.java
net\minecraft\world\entity\ai\goal\BreedGoal.java
net\minecraft\world\entity\ai\goal\CatLieOnBedGoal.java
net\minecraft\world\entity\ai\goal\CatSitOnBlockGoal.java
net\minecraft\world\entity\ai\goal\ClimbOnTopOfPowderSnowGoal.java
net\minecraft\world\entity\ai\goal\DolphinJumpGoal.java
net\minecraft\world\entity\ai\goal\DoorInteractGoal.java
net\minecraft\world\entity\ai\goal\EatBlockGoal.java
net\minecraft\world\entity\ai\goal\FleeSunGoal.java
net\minecraft\world\entity\ai\goal\FloatGoal.java
net\minecraft\world\entity\ai\goal\FollowBoatGoal.java
net\minecraft\world\entity\ai\goal\FollowFlockLeaderGoal.java
net\minecraft\world\entity\ai\goal\FollowMobGoal.java
net\minecraft\world\entity\ai\goal\FollowOwnerGoal.java
net\minecraft\world\entity\ai\goal\FollowParentGoal.java
net\minecraft\world\entity\ai\goal\Goal.java
net\minecraft\world\entity\ai\goal\GoalSelector.java
net\minecraft\world\entity\ai\goal\GolemRandomStrollInVillageGoal.java
net\minecraft\world\entity\ai\goal\InteractGoal.java
net\minecraft\world\entity\ai\goal\JumpGoal.java
net\minecraft\world\entity\ai\goal\LandOnOwnersShoulderGoal.java
net\minecraft\world\entity\ai\goal\LeapAtTargetGoal.java
net\minecraft\world\entity\ai\goal\LlamaFollowCaravanGoal.java
net\minecraft\world\entity\ai\goal\LookAtPlayerGoal.java
net\minecraft\world\entity\ai\goal\LookAtTradingPlayerGoal.java
net\minecraft\world\entity\ai\goal\MeleeAttackGoal.java
net\minecraft\world\entity\ai\goal\MoveBackToVillageGoal.java
net\minecraft\world\entity\ai\goal\MoveThroughVillageGoal.java
net\minecraft\world\entity\ai\goal\MoveToBlockGoal.java
net\minecraft\world\entity\ai\goal\MoveTowardsRestrictionGoal.java
net\minecraft\world\entity\ai\goal\MoveTowardsTargetGoal.java
net\minecraft\world\entity\ai\goal\OcelotAttackGoal.java
net\minecraft\world\entity\ai\goal\OfferFlowerGoal.java
net\minecraft\world\entity\ai\goal\OpenDoorGoal.java
net\minecraft\world\entity\ai\goal\package-info.java
net\minecraft\world\entity\ai\goal\PanicGoal.java
net\minecraft\world\entity\ai\goal\PathfindToRaidGoal.java
net\minecraft\world\entity\ai\goal\RandomLookAroundGoal.java
net\minecraft\world\entity\ai\goal\RandomStandGoal.java
net\minecraft\world\entity\ai\goal\RandomStrollGoal.java
net\minecraft\world\entity\ai\goal\RandomSwimmingGoal.java
net\minecraft\world\entity\ai\goal\RangedAttackGoal.java
net\minecraft\world\entity\ai\goal\RangedBowAttackGoal.java
net\minecraft\world\entity\ai\goal\RangedCrossbowAttackGoal.java
net\minecraft\world\entity\ai\goal\RemoveBlockGoal.java
net\minecraft\world\entity\ai\goal\RestrictSunGoal.java
net\minecraft\world\entity\ai\goal\RunAroundLikeCrazyGoal.java
net\minecraft\world\entity\ai\goal\SitWhenOrderedToGoal.java
net\minecraft\world\entity\ai\goal\StrollThroughVillageGoal.java
net\minecraft\world\entity\ai\goal\SwellGoal.java
net\minecraft\world\entity\ai\goal\TemptGoal.java
net\minecraft\world\entity\ai\goal\TradeWithPlayerGoal.java
net\minecraft\world\entity\ai\goal\TryFindWaterGoal.java
net\minecraft\world\entity\ai\goal\UseItemGoal.java
net\minecraft\world\entity\ai\goal\WaterAvoidingRandomFlyingGoal.java
net\minecraft\world\entity\ai\goal\WaterAvoidingRandomStrollGoal.java
net\minecraft\world\entity\ai\goal\WrappedGoal.java
net\minecraft\world\entity\ai\goal\ZombieAttackGoal.java
net\minecraft\world\entity\ai\goal\target\DefendVillageTargetGoal.java
net\minecraft\world\entity\ai\goal\target\HurtByTargetGoal.java
net\minecraft\world\entity\ai\goal\target\NearestAttackableTargetGoal.java
net\minecraft\world\entity\ai\goal\target\NearestAttackableWitchTargetGoal.java
net\minecraft\world\entity\ai\goal\target\NearestHealableRaiderTargetGoal.java
net\minecraft\world\entity\ai\goal\target\NonTameRandomTargetGoal.java
net\minecraft\world\entity\ai\goal\target\OwnerHurtByTargetGoal.java
net\minecraft\world\entity\ai\goal\target\OwnerHurtTargetGoal.java
net\minecraft\world\entity\ai\goal\target\package-info.java
net\minecraft\world\entity\ai\goal\target\ResetUniversalAngerTargetGoal.java
net\minecraft\world\entity\ai\goal\target\TargetGoal.java
net\minecraft\world\entity\ai\gossip\GossipContainer.java
net\minecraft\world\entity\ai\gossip\GossipType.java
net\minecraft\world\entity\ai\gossip\package-info.java
net\minecraft\world\entity\ai\memory\ExpirableValue.java
net\minecraft\world\entity\ai\memory\MemoryModuleType.java
net\minecraft\world\entity\ai\memory\MemoryStatus.java
net\minecraft\world\entity\ai\memory\NearestVisibleLivingEntities.java
net\minecraft\world\entity\ai\memory\package-info.java
net\minecraft\world\entity\ai\memory\WalkTarget.java
net\minecraft\world\entity\ai\navigation\AmphibiousPathNavigation.java
net\minecraft\world\entity\ai\navigation\FlyingPathNavigation.java
net\minecraft\world\entity\ai\navigation\GroundPathNavigation.java
net\minecraft\world\entity\ai\navigation\package-info.java
net\minecraft\world\entity\ai\navigation\PathNavigation.java
net\minecraft\world\entity\ai\navigation\WallClimberNavigation.java
net\minecraft\world\entity\ai\navigation\WaterBoundPathNavigation.java
net\minecraft\world\entity\ai\sensing\AdultSensor.java
net\minecraft\world\entity\ai\sensing\AxolotlAttackablesSensor.java
net\minecraft\world\entity\ai\sensing\BreezeAttackEntitySensor.java
net\minecraft\world\entity\ai\sensing\DummySensor.java
net\minecraft\world\entity\ai\sensing\FrogAttackablesSensor.java
net\minecraft\world\entity\ai\sensing\GolemSensor.java
net\minecraft\world\entity\ai\sensing\HoglinSpecificSensor.java
net\minecraft\world\entity\ai\sensing\HurtBySensor.java
net\minecraft\world\entity\ai\sensing\IsInWaterSensor.java
net\minecraft\world\entity\ai\sensing\NearestBedSensor.java
net\minecraft\world\entity\ai\sensing\NearestItemSensor.java
net\minecraft\world\entity\ai\sensing\NearestLivingEntitySensor.java
net\minecraft\world\entity\ai\sensing\NearestVisibleLivingEntitySensor.java
net\minecraft\world\entity\ai\sensing\package-info.java
net\minecraft\world\entity\ai\sensing\PiglinBruteSpecificSensor.java
net\minecraft\world\entity\ai\sensing\PiglinSpecificSensor.java
net\minecraft\world\entity\ai\sensing\PlayerSensor.java
net\minecraft\world\entity\ai\sensing\SecondaryPoiSensor.java
net\minecraft\world\entity\ai\sensing\Sensing.java
net\minecraft\world\entity\ai\sensing\Sensor.java
net\minecraft\world\entity\ai\sensing\SensorType.java
net\minecraft\world\entity\ai\sensing\TemptingSensor.java
net\minecraft\world\entity\ai\sensing\VillagerBabiesSensor.java
net\minecraft\world\entity\ai\sensing\VillagerHostilesSensor.java
net\minecraft\world\entity\ai\sensing\WardenEntitySensor.java
net\minecraft\world\entity\ai\targeting\package-info.java
net\minecraft\world\entity\ai\targeting\TargetingConditions.java
net\minecraft\world\entity\ai\util\AirAndWaterRandomPos.java
net\minecraft\world\entity\ai\util\AirRandomPos.java
net\minecraft\world\entity\ai\util\DefaultRandomPos.java
net\minecraft\world\entity\ai\util\GoalUtils.java
net\minecraft\world\entity\ai\util\HoverRandomPos.java
net\minecraft\world\entity\ai\util\LandRandomPos.java
net\minecraft\world\entity\ai\util\package-info.java
net\minecraft\world\entity\ai\util\RandomPos.java
net\minecraft\world\entity\ai\village\poi
net\minecraft\world\entity\ai\village\package-info.java
net\minecraft\world\entity\ai\village\ReputationEventType.java
net\minecraft\world\entity\ai\village\VillageSiege.java
net\minecraft\world\entity\ai\village\poi\package-info.java
net\minecraft\world\entity\ai\village\poi\PoiManager.java
net\minecraft\world\entity\ai\village\poi\PoiRecord.java
net\minecraft\world\entity\ai\village\poi\PoiSection.java
net\minecraft\world\entity\ai\village\poi\PoiType.java
net\minecraft\world\entity\ai\village\poi\PoiTypes.java
net\minecraft\world\entity\ambient\AmbientCreature.java
net\minecraft\world\entity\ambient\Bat.java
net\minecraft\world\entity\ambient\package-info.java
net\minecraft\world\entity\animal\allay
net\minecraft\world\entity\animal\axolotl
net\minecraft\world\entity\animal\camel
net\minecraft\world\entity\animal\frog
net\minecraft\world\entity\animal\goat
net\minecraft\world\entity\animal\horse
net\minecraft\world\entity\animal\sniffer
net\minecraft\world\entity\animal\AbstractFish.java
net\minecraft\world\entity\animal\AbstractGolem.java
net\minecraft\world\entity\animal\AbstractSchoolingFish.java
net\minecraft\world\entity\animal\Animal.java
net\minecraft\world\entity\animal\Bee.java
net\minecraft\world\entity\animal\Bucketable.java
net\minecraft\world\entity\animal\Cat.java
net\minecraft\world\entity\animal\CatVariant.java
net\minecraft\world\entity\animal\Chicken.java
net\minecraft\world\entity\animal\Cod.java
net\minecraft\world\entity\animal\Cow.java
net\minecraft\world\entity\animal\Dolphin.java
net\minecraft\world\entity\animal\FlyingAnimal.java
net\minecraft\world\entity\animal\Fox.java
net\minecraft\world\entity\animal\FrogVariant.java
net\minecraft\world\entity\animal\IronGolem.java
net\minecraft\world\entity\animal\MushroomCow.java
net\minecraft\world\entity\animal\Ocelot.java
net\minecraft\world\entity\animal\package-info.java
net\minecraft\world\entity\animal\Panda.java
net\minecraft\world\entity\animal\Parrot.java
net\minecraft\world\entity\animal\Pig.java
net\minecraft\world\entity\animal\PolarBear.java
net\minecraft\world\entity\animal\Pufferfish.java
net\minecraft\world\entity\animal\Rabbit.java
net\minecraft\world\entity\animal\Salmon.java
net\minecraft\world\entity\animal\Sheep.java
net\minecraft\world\entity\animal\ShoulderRidingEntity.java
net\minecraft\world\entity\animal\SnowGolem.java
net\minecraft\world\entity\animal\Squid.java
net\minecraft\world\entity\animal\TropicalFish.java
net\minecraft\world\entity\animal\Turtle.java
net\minecraft\world\entity\animal\WaterAnimal.java
net\minecraft\world\entity\animal\Wolf.java
net\minecraft\world\entity\animal\allay\Allay.java
net\minecraft\world\entity\animal\allay\AllayAi.java
net\minecraft\world\entity\animal\allay\package-info.java
net\minecraft\world\entity\animal\axolotl\Axolotl.java
net\minecraft\world\entity\animal\axolotl\AxolotlAi.java
net\minecraft\world\entity\animal\axolotl\package-info.java
net\minecraft\world\entity\animal\axolotl\PlayDead.java
net\minecraft\world\entity\animal\axolotl\ValidatePlayDead.java
net\minecraft\world\entity\animal\camel\Camel.java
net\minecraft\world\entity\animal\camel\CamelAi.java
net\minecraft\world\entity\animal\camel\package-info.java
net\minecraft\world\entity\animal\frog\Frog.java
net\minecraft\world\entity\animal\frog\FrogAi.java
net\minecraft\world\entity\animal\frog\package-info.java
net\minecraft\world\entity\animal\frog\ShootTongue.java
net\minecraft\world\entity\animal\frog\Tadpole.java
net\minecraft\world\entity\animal\frog\TadpoleAi.java
net\minecraft\world\entity\animal\goat\Goat.java
net\minecraft\world\entity\animal\goat\GoatAi.java
net\minecraft\world\entity\animal\goat\package-info.java
net\minecraft\world\entity\animal\horse\AbstractChestedHorse.java
net\minecraft\world\entity\animal\horse\AbstractHorse.java
net\minecraft\world\entity\animal\horse\Donkey.java
net\minecraft\world\entity\animal\horse\Horse.java
net\minecraft\world\entity\animal\horse\Llama.java
net\minecraft\world\entity\animal\horse\Markings.java
net\minecraft\world\entity\animal\horse\Mule.java
net\minecraft\world\entity\animal\horse\package-info.java
net\minecraft\world\entity\animal\horse\SkeletonHorse.java
net\minecraft\world\entity\animal\horse\SkeletonTrapGoal.java
net\minecraft\world\entity\animal\horse\TraderLlama.java
net\minecraft\world\entity\animal\horse\Variant.java
net\minecraft\world\entity\animal\horse\ZombieHorse.java
net\minecraft\world\entity\animal\sniffer\Sniffer.java
net\minecraft\world\entity\animal\sniffer\SnifferAi.java
net\minecraft\world\entity\boss\enderdragon
net\minecraft\world\entity\boss\wither
net\minecraft\world\entity\boss\EnderDragonPart.java
net\minecraft\world\entity\boss\package-info.java
net\minecraft\world\entity\boss\enderdragon\phases
net\minecraft\world\entity\boss\enderdragon\EndCrystal.java
net\minecraft\world\entity\boss\enderdragon\EnderDragon.java
net\minecraft\world\entity\boss\enderdragon\package-info.java
net\minecraft\world\entity\boss\enderdragon\phases\AbstractDragonPhaseInstance.java
net\minecraft\world\entity\boss\enderdragon\phases\AbstractDragonSittingPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonChargePlayerPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonDeathPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonHoldingPatternPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonHoverPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonLandingApproachPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonLandingPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonPhaseInstance.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonSittingAttackingPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonSittingFlamingPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonSittingScanningPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonStrafePlayerPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\DragonTakeoffPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\EnderDragonPhase.java
net\minecraft\world\entity\boss\enderdragon\phases\EnderDragonPhaseManager.java
net\minecraft\world\entity\boss\enderdragon\phases\package-info.java
net\minecraft\world\entity\boss\wither\package-info.java
net\minecraft\world\entity\boss\wither\WitherBoss.java
net\minecraft\world\entity\decoration\ArmorStand.java
net\minecraft\world\entity\decoration\GlowItemFrame.java
net\minecraft\world\entity\decoration\HangingEntity.java
net\minecraft\world\entity\decoration\ItemFrame.java
net\minecraft\world\entity\decoration\LeashFenceKnotEntity.java
net\minecraft\world\entity\decoration\package-info.java
net\minecraft\world\entity\decoration\Painting.java
net\minecraft\world\entity\decoration\PaintingVariant.java
net\minecraft\world\entity\decoration\PaintingVariants.java
net\minecraft\world\entity\item\FallingBlockEntity.java
net\minecraft\world\entity\item\ItemEntity.java
net\minecraft\world\entity\item\package-info.java
net\minecraft\world\entity\item\PrimedTnt.java
net\minecraft\world\entity\monster\breeze
net\minecraft\world\entity\monster\hoglin
net\minecraft\world\entity\monster\piglin
net\minecraft\world\entity\monster\warden
net\minecraft\world\entity\monster\AbstractIllager.java
net\minecraft\world\entity\monster\AbstractSkeleton.java
net\minecraft\world\entity\monster\Blaze.java
net\minecraft\world\entity\monster\CaveSpider.java
net\minecraft\world\entity\monster\Creeper.java
net\minecraft\world\entity\monster\CrossbowAttackMob.java
net\minecraft\world\entity\monster\Drowned.java
net\minecraft\world\entity\monster\ElderGuardian.java
net\minecraft\world\entity\monster\EnderMan.java
net\minecraft\world\entity\monster\Endermite.java
net\minecraft\world\entity\monster\Enemy.java
net\minecraft\world\entity\monster\Evoker.java
net\minecraft\world\entity\monster\Ghast.java
net\minecraft\world\entity\monster\Giant.java
net\minecraft\world\entity\monster\Guardian.java
net\minecraft\world\entity\monster\Husk.java
net\minecraft\world\entity\monster\Illusioner.java
net\minecraft\world\entity\monster\MagmaCube.java
net\minecraft\world\entity\monster\Monster.java
net\minecraft\world\entity\monster\package-info.java
net\minecraft\world\entity\monster\PatrollingMonster.java
net\minecraft\world\entity\monster\Phantom.java
net\minecraft\world\entity\monster\Pillager.java
net\minecraft\world\entity\monster\RangedAttackMob.java
net\minecraft\world\entity\monster\Ravager.java
net\minecraft\world\entity\monster\Shulker.java
net\minecraft\world\entity\monster\Silverfish.java
net\minecraft\world\entity\monster\Skeleton.java
net\minecraft\world\entity\monster\Slime.java
net\minecraft\world\entity\monster\SpellcasterIllager.java
net\minecraft\world\entity\monster\Spider.java
net\minecraft\world\entity\monster\Stray.java
net\minecraft\world\entity\monster\Strider.java
net\minecraft\world\entity\monster\Vex.java
net\minecraft\world\entity\monster\Vindicator.java
net\minecraft\world\entity\monster\Witch.java
net\minecraft\world\entity\monster\WitherSkeleton.java
net\minecraft\world\entity\monster\Zoglin.java
net\minecraft\world\entity\monster\Zombie.java
net\minecraft\world\entity\monster\ZombieVillager.java
net\minecraft\world\entity\monster\ZombifiedPiglin.java
net\minecraft\world\entity\monster\breeze\Breeze.java
net\minecraft\world\entity\monster\breeze\BreezeAi.java
net\minecraft\world\entity\monster\breeze\LongJump.java
net\minecraft\world\entity\monster\breeze\package-info.java
net\minecraft\world\entity\monster\breeze\Shoot.java
net\minecraft\world\entity\monster\breeze\ShootWhenStuck.java
net\minecraft\world\entity\monster\breeze\Slide.java
net\minecraft\world\entity\monster\hoglin\Hoglin.java
net\minecraft\world\entity\monster\hoglin\HoglinAi.java
net\minecraft\world\entity\monster\hoglin\HoglinBase.java
net\minecraft\world\entity\monster\hoglin\package-info.java
net\minecraft\world\entity\monster\piglin\AbstractPiglin.java
net\minecraft\world\entity\monster\piglin\package-info.java
net\minecraft\world\entity\monster\piglin\Piglin.java
net\minecraft\world\entity\monster\piglin\PiglinAi.java
net\minecraft\world\entity\monster\piglin\PiglinArmPose.java
net\minecraft\world\entity\monster\piglin\PiglinBrute.java
net\minecraft\world\entity\monster\piglin\PiglinBruteAi.java
net\minecraft\world\entity\monster\piglin\RememberIfHoglinWasKilled.java
net\minecraft\world\entity\monster\piglin\StartAdmiringItemIfSeen.java
net\minecraft\world\entity\monster\piglin\StartHuntingHoglin.java
net\minecraft\world\entity\monster\piglin\StopAdmiringIfItemTooFarAway.java
net\minecraft\world\entity\monster\piglin\StopAdmiringIfTiredOfTryingToReachItem.java
net\minecraft\world\entity\monster\piglin\StopHoldingItemIfNoLongerAdmiring.java
net\minecraft\world\entity\monster\warden\AngerLevel.java
net\minecraft\world\entity\monster\warden\AngerManagement.java
net\minecraft\world\entity\monster\warden\package-info.java
net\minecraft\world\entity\monster\warden\Warden.java
net\minecraft\world\entity\monster\warden\WardenAi.java
net\minecraft\world\entity\monster\warden\WardenSpawnTracker.java
net\minecraft\world\entity\npc\AbstractVillager.java
net\minecraft\world\entity\npc\CatSpawner.java
net\minecraft\world\entity\npc\ClientSideMerchant.java
net\minecraft\world\entity\npc\InventoryCarrier.java
net\minecraft\world\entity\npc\Npc.java
net\minecraft\world\entity\npc\package-info.java
net\minecraft\world\entity\npc\Villager.java
net\minecraft\world\entity\npc\VillagerData.java
net\minecraft\world\entity\npc\VillagerDataHolder.java
net\minecraft\world\entity\npc\VillagerProfession.java
net\minecraft\world\entity\npc\VillagerTrades.java
net\minecraft\world\entity\npc\VillagerType.java
net\minecraft\world\entity\npc\WanderingTrader.java
net\minecraft\world\entity\npc\WanderingTraderSpawner.java
net\minecraft\world\entity\player\Abilities.java
net\minecraft\world\entity\player\ChatVisiblity.java
net\minecraft\world\entity\player\Inventory.java
net\minecraft\world\entity\player\package-info.java
net\minecraft\world\entity\player\Player.java
net\minecraft\world\entity\player\PlayerModelPart.java
net\minecraft\world\entity\player\ProfileKeyPair.java
net\minecraft\world\entity\player\ProfilePublicKey.java
net\minecraft\world\entity\player\StackedContents.java
net\minecraft\world\entity\projectile\AbstractArrow.java
net\minecraft\world\entity\projectile\AbstractHurtingProjectile.java
net\minecraft\world\entity\projectile\Arrow.java
net\minecraft\world\entity\projectile\DragonFireball.java
net\minecraft\world\entity\projectile\EvokerFangs.java
net\minecraft\world\entity\projectile\EyeOfEnder.java
net\minecraft\world\entity\projectile\Fireball.java
net\minecraft\world\entity\projectile\FireworkRocketEntity.java
net\minecraft\world\entity\projectile\FishingHook.java
net\minecraft\world\entity\projectile\ItemSupplier.java
net\minecraft\world\entity\projectile\LargeFireball.java
net\minecraft\world\entity\projectile\LlamaSpit.java
net\minecraft\world\entity\projectile\package-info.java
net\minecraft\world\entity\projectile\Projectile.java
net\minecraft\world\entity\projectile\ProjectileUtil.java
net\minecraft\world\entity\projectile\ShulkerBullet.java
net\minecraft\world\entity\projectile\SmallFireball.java
net\minecraft\world\entity\projectile\Snowball.java
net\minecraft\world\entity\projectile\SpectralArrow.java
net\minecraft\world\entity\projectile\ThrowableItemProjectile.java
net\minecraft\world\entity\projectile\ThrowableProjectile.java
net\minecraft\world\entity\projectile\ThrownEgg.java
net\minecraft\world\entity\projectile\ThrownEnderpearl.java
net\minecraft\world\entity\projectile\ThrownExperienceBottle.java
net\minecraft\world\entity\projectile\ThrownPotion.java
net\minecraft\world\entity\projectile\ThrownTrident.java
net\minecraft\world\entity\projectile\WindCharge.java
net\minecraft\world\entity\projectile\WitherSkull.java
net\minecraft\world\entity\raid\package-info.java
net\minecraft\world\entity\raid\Raid.java
net\minecraft\world\entity\raid\Raider.java
net\minecraft\world\entity\raid\Raids.java
net\minecraft\world\entity\schedule\Activity.java
net\minecraft\world\entity\schedule\Keyframe.java
net\minecraft\world\entity\schedule\package-info.java
net\minecraft\world\entity\schedule\Schedule.java
net\minecraft\world\entity\schedule\ScheduleBuilder.java
net\minecraft\world\entity\schedule\Timeline.java
net\minecraft\world\entity\vehicle\AbstractMinecart.java
net\minecraft\world\entity\vehicle\AbstractMinecartContainer.java
net\minecraft\world\entity\vehicle\Boat.java
net\minecraft\world\entity\vehicle\ChestBoat.java
net\minecraft\world\entity\vehicle\ContainerEntity.java
net\minecraft\world\entity\vehicle\DismountHelper.java
net\minecraft\world\entity\vehicle\Minecart.java
net\minecraft\world\entity\vehicle\MinecartChest.java
net\minecraft\world\entity\vehicle\MinecartCommandBlock.java
net\minecraft\world\entity\vehicle\MinecartFurnace.java
net\minecraft\world\entity\vehicle\MinecartHopper.java
net\minecraft\world\entity\vehicle\MinecartSpawner.java
net\minecraft\world\entity\vehicle\MinecartTNT.java
net\minecraft\world\entity\vehicle\package-info.java
net\minecraft\world\entity\vehicle\VehicleEntity.java
net\minecraft\world\flag\FeatureElement.java
net\minecraft\world\flag\FeatureFlag.java
net\minecraft\world\flag\FeatureFlagRegistry.java
net\minecraft\world\flag\FeatureFlags.java
net\minecraft\world\flag\FeatureFlagSet.java
net\minecraft\world\flag\FeatureFlagUniverse.java
net\minecraft\world\flag\package-info.java
net\minecraft\world\food\FoodConstants.java
net\minecraft\world\food\FoodData.java
net\minecraft\world\food\FoodProperties.java
net\minecraft\world\food\Foods.java
net\minecraft\world\food\package-info.java
net\minecraft\world\inventory\tooltip
net\minecraft\world\inventory\AbstractContainerMenu.java
net\minecraft\world\inventory\AbstractFurnaceMenu.java
net\minecraft\world\inventory\AnvilMenu.java
net\minecraft\world\inventory\BeaconMenu.java
net\minecraft\world\inventory\BlastFurnaceMenu.java
net\minecraft\world\inventory\BrewingStandMenu.java
net\minecraft\world\inventory\CartographyTableMenu.java
net\minecraft\world\inventory\ChestMenu.java
net\minecraft\world\inventory\ClickAction.java
net\minecraft\world\inventory\ClickType.java
net\minecraft\world\inventory\ContainerData.java
net\minecraft\world\inventory\ContainerLevelAccess.java
net\minecraft\world\inventory\ContainerListener.java
net\minecraft\world\inventory\ContainerSynchronizer.java
net\minecraft\world\inventory\CrafterMenu.java
net\minecraft\world\inventory\CrafterSlot.java
net\minecraft\world\inventory\CraftingContainer.java
net\minecraft\world\inventory\CraftingMenu.java
net\minecraft\world\inventory\DataSlot.java
net\minecraft\world\inventory\DispenserMenu.java
net\minecraft\world\inventory\EnchantmentMenu.java
net\minecraft\world\inventory\FurnaceFuelSlot.java
net\minecraft\world\inventory\FurnaceMenu.java
net\minecraft\world\inventory\FurnaceResultSlot.java
net\minecraft\world\inventory\GrindstoneMenu.java
net\minecraft\world\inventory\HopperMenu.java
net\minecraft\world\inventory\HorseInventoryMenu.java
net\minecraft\world\inventory\InventoryMenu.java
net\minecraft\world\inventory\ItemCombinerMenu.java
net\minecraft\world\inventory\ItemCombinerMenuSlotDefinition.java
net\minecraft\world\inventory\LecternMenu.java
net\minecraft\world\inventory\LoomMenu.java
net\minecraft\world\inventory\MenuConstructor.java
net\minecraft\world\inventory\MenuType.java
net\minecraft\world\inventory\MerchantContainer.java
net\minecraft\world\inventory\MerchantMenu.java
net\minecraft\world\inventory\MerchantResultSlot.java
net\minecraft\world\inventory\NonInteractiveResultSlot.java
net\minecraft\world\inventory\package-info.java
net\minecraft\world\inventory\PlayerEnderChestContainer.java
net\minecraft\world\inventory\RecipeBookMenu.java
net\minecraft\world\inventory\RecipeBookType.java
net\minecraft\world\inventory\RecipeCraftingHolder.java
net\minecraft\world\inventory\ResultContainer.java
net\minecraft\world\inventory\ResultSlot.java
net\minecraft\world\inventory\ShulkerBoxMenu.java
net\minecraft\world\inventory\ShulkerBoxSlot.java
net\minecraft\world\inventory\SimpleContainerData.java
net\minecraft\world\inventory\Slot.java
net\minecraft\world\inventory\SmithingMenu.java
net\minecraft\world\inventory\SmokerMenu.java
net\minecraft\world\inventory\StackedContentsCompatible.java
net\minecraft\world\inventory\StonecutterMenu.java
net\minecraft\world\inventory\TransientCraftingContainer.java
net\minecraft\world\inventory\tooltip\BundleTooltip.java
net\minecraft\world\inventory\tooltip\package-info.java
net\minecraft\world\inventory\tooltip\TooltipComponent.java
net\minecraft\world\item\alchemy
net\minecraft\world\item\armortrim
net\minecraft\world\item\context
net\minecraft\world\item\crafting
net\minecraft\world\item\enchantment
net\minecraft\world\item\trading
net\minecraft\world\item\AdventureModeCheck.java
net\minecraft\world\item\AirItem.java
net\minecraft\world\item\ArmorItem.java
net\minecraft\world\item\ArmorMaterial.java
net\minecraft\world\item\ArmorMaterials.java
net\minecraft\world\item\ArmorStandItem.java
net\minecraft\world\item\ArrowItem.java
net\minecraft\world\item\AxeItem.java
net\minecraft\world\item\BannerItem.java
net\minecraft\world\item\BannerPatternItem.java
net\minecraft\world\item\BedItem.java
net\minecraft\world\item\BlockItem.java
net\minecraft\world\item\BoatItem.java
net\minecraft\world\item\BoneMealItem.java
net\minecraft\world\item\BookItem.java
net\minecraft\world\item\BottleItem.java
net\minecraft\world\item\BowItem.java
net\minecraft\world\item\BowlFoodItem.java
net\minecraft\world\item\BrushItem.java
net\minecraft\world\item\BucketItem.java
net\minecraft\world\item\BundleItem.java
net\minecraft\world\item\ChorusFruitItem.java
net\minecraft\world\item\CompassItem.java
net\minecraft\world\item\ComplexItem.java
net\minecraft\world\item\CreativeModeTab.java
net\minecraft\world\item\CreativeModeTabs.java
net\minecraft\world\item\CrossbowItem.java
net\minecraft\world\item\DebugStickItem.java
net\minecraft\world\item\DiggerItem.java
net\minecraft\world\item\DiscFragmentItem.java
net\minecraft\world\item\DispensibleContainerItem.java
net\minecraft\world\item\DoubleHighBlockItem.java
net\minecraft\world\item\DyeableArmorItem.java
net\minecraft\world\item\DyeableHorseArmorItem.java
net\minecraft\world\item\DyeableLeatherItem.java
net\minecraft\world\item\DyeColor.java
net\minecraft\world\item\DyeItem.java
net\minecraft\world\item\EggItem.java
net\minecraft\world\item\ElytraItem.java
net\minecraft\world\item\EmptyMapItem.java
net\minecraft\world\item\EnchantedBookItem.java
net\minecraft\world\item\EnchantedGoldenAppleItem.java
net\minecraft\world\item\EndCrystalItem.java
net\minecraft\world\item\EnderEyeItem.java
net\minecraft\world\item\EnderpearlItem.java
net\minecraft\world\item\Equipable.java
net\minecraft\world\item\ExperienceBottleItem.java
net\minecraft\world\item\FireChargeItem.java
net\minecraft\world\item\FireworkRocketItem.java
net\minecraft\world\item\FireworkStarItem.java
net\minecraft\world\item\FishingRodItem.java
net\minecraft\world\item\FlintAndSteelItem.java
net\minecraft\world\item\FoodOnAStickItem.java
net\minecraft\world\item\GameMasterBlockItem.java
net\minecraft\world\item\GlowInkSacItem.java
net\minecraft\world\item\HangingEntityItem.java
net\minecraft\world\item\HangingSignItem.java
net\minecraft\world\item\HoeItem.java
net\minecraft\world\item\HoneyBottleItem.java
net\minecraft\world\item\HoneycombItem.java
net\minecraft\world\item\HorseArmorItem.java
net\minecraft\world\item\InkSacItem.java
net\minecraft\world\item\Instrument.java
net\minecraft\world\item\InstrumentItem.java
net\minecraft\world\item\Instruments.java
net\minecraft\world\item\Item.java
net\minecraft\world\item\ItemCooldowns.java
net\minecraft\world\item\ItemDisplayContext.java
net\minecraft\world\item\ItemFrameItem.java
net\minecraft\world\item\ItemNameBlockItem.java
net\minecraft\world\item\Items.java
net\minecraft\world\item\ItemStack.java
net\minecraft\world\item\ItemStackLinkedSet.java
net\minecraft\world\item\ItemUtils.java
net\minecraft\world\item\KnowledgeBookItem.java
net\minecraft\world\item\LeadItem.java
net\minecraft\world\item\LingeringPotionItem.java
net\minecraft\world\item\MapItem.java
net\minecraft\world\item\MilkBucketItem.java
net\minecraft\world\item\MinecartItem.java
net\minecraft\world\item\MobBucketItem.java
net\minecraft\world\item\NameTagItem.java
net\minecraft\world\item\package-info.java
net\minecraft\world\item\PickaxeItem.java
net\minecraft\world\item\PlaceOnWaterBlockItem.java
net\minecraft\world\item\PlayerHeadItem.java
net\minecraft\world\item\PotionItem.java
net\minecraft\world\item\ProjectileWeaponItem.java
net\minecraft\world\item\Rarity.java
net\minecraft\world\item\RecordItem.java
net\minecraft\world\item\SaddleItem.java
net\minecraft\world\item\ScaffoldingBlockItem.java
net\minecraft\world\item\ServerItemCooldowns.java
net\minecraft\world\item\ShearsItem.java
net\minecraft\world\item\ShieldItem.java
net\minecraft\world\item\ShovelItem.java
net\minecraft\world\item\SignApplicator.java
net\minecraft\world\item\SignItem.java
net\minecraft\world\item\SimpleFoiledItem.java
net\minecraft\world\item\SmithingTemplateItem.java
net\minecraft\world\item\SnowballItem.java
net\minecraft\world\item\SolidBucketItem.java
net\minecraft\world\item\SpawnEggItem.java
net\minecraft\world\item\SpectralArrowItem.java
net\minecraft\world\item\SplashPotionItem.java
net\minecraft\world\item\SpyglassItem.java
net\minecraft\world\item\StandingAndWallBlockItem.java
net\minecraft\world\item\SuspiciousStewItem.java
net\minecraft\world\item\SwordItem.java
net\minecraft\world\item\ThrowablePotionItem.java
net\minecraft\world\item\Tier.java
net\minecraft\world\item\TieredItem.java
net\minecraft\world\item\Tiers.java
net\minecraft\world\item\TippedArrowItem.java
net\minecraft\world\item\TooltipFlag.java
net\minecraft\world\item\TridentItem.java
net\minecraft\world\item\UseAnim.java
net\minecraft\world\item\Vanishable.java
net\minecraft\world\item\WritableBookItem.java
net\minecraft\world\item\WrittenBookItem.java
net\minecraft\world\item\alchemy\package-info.java
net\minecraft\world\item\alchemy\Potion.java
net\minecraft\world\item\alchemy\PotionBrewing.java
net\minecraft\world\item\alchemy\Potions.java
net\minecraft\world\item\alchemy\PotionUtils.java
net\minecraft\world\item\armortrim\ArmorTrim.java
net\minecraft\world\item\armortrim\package-info.java
net\minecraft\world\item\armortrim\TrimMaterial.java
net\minecraft\world\item\armortrim\TrimMaterials.java
net\minecraft\world\item\armortrim\TrimPattern.java
net\minecraft\world\item\armortrim\TrimPatterns.java
net\minecraft\world\item\context\BlockPlaceContext.java
net\minecraft\world\item\context\DirectionalPlaceContext.java
net\minecraft\world\item\context\package-info.java
net\minecraft\world\item\context\UseOnContext.java
net\minecraft\world\item\crafting\AbstractCookingRecipe.java
net\minecraft\world\item\crafting\ArmorDyeRecipe.java
net\minecraft\world\item\crafting\BannerDuplicateRecipe.java
net\minecraft\world\item\crafting\BlastingRecipe.java
net\minecraft\world\item\crafting\BookCloningRecipe.java
net\minecraft\world\item\crafting\CampfireCookingRecipe.java
net\minecraft\world\item\crafting\CookingBookCategory.java
net\minecraft\world\item\crafting\CraftingBookCategory.java
net\minecraft\world\item\crafting\CraftingRecipe.java
net\minecraft\world\item\crafting\CustomRecipe.java
net\minecraft\world\item\crafting\DecoratedPotRecipe.java
net\minecraft\world\item\crafting\FireworkRocketRecipe.java
net\minecraft\world\item\crafting\FireworkStarFadeRecipe.java
net\minecraft\world\item\crafting\FireworkStarRecipe.java
net\minecraft\world\item\crafting\Ingredient.java
net\minecraft\world\item\crafting\MapCloningRecipe.java
net\minecraft\world\item\crafting\MapExtendingRecipe.java
net\minecraft\world\item\crafting\package-info.java
net\minecraft\world\item\crafting\Recipe.java
net\minecraft\world\item\crafting\RecipeCache.java
net\minecraft\world\item\crafting\RecipeHolder.java
net\minecraft\world\item\crafting\RecipeManager.java
net\minecraft\world\item\crafting\RecipeSerializer.java
net\minecraft\world\item\crafting\RecipeType.java
net\minecraft\world\item\crafting\RepairItemRecipe.java
net\minecraft\world\item\crafting\ShapedRecipe.java
net\minecraft\world\item\crafting\ShapedRecipePattern.java
net\minecraft\world\item\crafting\ShapelessRecipe.java
net\minecraft\world\item\crafting\ShieldDecorationRecipe.java
net\minecraft\world\item\crafting\ShulkerBoxColoring.java
net\minecraft\world\item\crafting\SimpleCookingSerializer.java
net\minecraft\world\item\crafting\SimpleCraftingRecipeSerializer.java
net\minecraft\world\item\crafting\SingleItemRecipe.java
net\minecraft\world\item\crafting\SmeltingRecipe.java
net\minecraft\world\item\crafting\SmithingRecipe.java
net\minecraft\world\item\crafting\SmithingTransformRecipe.java
net\minecraft\world\item\crafting\SmithingTrimRecipe.java
net\minecraft\world\item\crafting\SmokingRecipe.java
net\minecraft\world\item\crafting\StonecutterRecipe.java
net\minecraft\world\item\crafting\SuspiciousStewRecipe.java
net\minecraft\world\item\crafting\TippedArrowRecipe.java
net\minecraft\world\item\enchantment\ArrowDamageEnchantment.java
net\minecraft\world\item\enchantment\ArrowFireEnchantment.java
net\minecraft\world\item\enchantment\ArrowInfiniteEnchantment.java
net\minecraft\world\item\enchantment\ArrowKnockbackEnchantment.java
net\minecraft\world\item\enchantment\ArrowPiercingEnchantment.java
net\minecraft\world\item\enchantment\BindingCurseEnchantment.java
net\minecraft\world\item\enchantment\DamageEnchantment.java
net\minecraft\world\item\enchantment\DigDurabilityEnchantment.java
net\minecraft\world\item\enchantment\DiggingEnchantment.java
net\minecraft\world\item\enchantment\Enchantment.java
net\minecraft\world\item\enchantment\EnchantmentCategory.java
net\minecraft\world\item\enchantment\EnchantmentHelper.java
net\minecraft\world\item\enchantment\EnchantmentInstance.java
net\minecraft\world\item\enchantment\Enchantments.java
net\minecraft\world\item\enchantment\FireAspectEnchantment.java
net\minecraft\world\item\enchantment\FishingSpeedEnchantment.java
net\minecraft\world\item\enchantment\FrostWalkerEnchantment.java
net\minecraft\world\item\enchantment\KnockbackEnchantment.java
net\minecraft\world\item\enchantment\LootBonusEnchantment.java
net\minecraft\world\item\enchantment\MendingEnchantment.java
net\minecraft\world\item\enchantment\MultiShotEnchantment.java
net\minecraft\world\item\enchantment\OxygenEnchantment.java
net\minecraft\world\item\enchantment\package-info.java
net\minecraft\world\item\enchantment\ProtectionEnchantment.java
net\minecraft\world\item\enchantment\QuickChargeEnchantment.java
net\minecraft\world\item\enchantment\SoulSpeedEnchantment.java
net\minecraft\world\item\enchantment\SweepingEdgeEnchantment.java
net\minecraft\world\item\enchantment\SwiftSneakEnchantment.java
net\minecraft\world\item\enchantment\ThornsEnchantment.java
net\minecraft\world\item\enchantment\TridentChannelingEnchantment.java
net\minecraft\world\item\enchantment\TridentImpalerEnchantment.java
net\minecraft\world\item\enchantment\TridentLoyaltyEnchantment.java
net\minecraft\world\item\enchantment\TridentRiptideEnchantment.java
net\minecraft\world\item\enchantment\UntouchingEnchantment.java
net\minecraft\world\item\enchantment\VanishingCurseEnchantment.java
net\minecraft\world\item\enchantment\WaterWalkerEnchantment.java
net\minecraft\world\item\enchantment\WaterWorkerEnchantment.java
net\minecraft\world\item\trading\Merchant.java
net\minecraft\world\item\trading\MerchantOffer.java
net\minecraft\world\item\trading\MerchantOffers.java
net\minecraft\world\item\trading\package-info.java
net\minecraft\world\level\biome
net\minecraft\world\level\block
net\minecraft\world\level\border
net\minecraft\world\level\chunk
net\minecraft\world\level\dimension
net\minecraft\world\level\entity
net\minecraft\world\level\gameevent
net\minecraft\world\level\levelgen
net\minecraft\world\level\lighting
net\minecraft\world\level\material
net\minecraft\world\level\pathfinder
net\minecraft\world\level\portal
net\minecraft\world\level\redstone
net\minecraft\world\level\saveddata
net\minecraft\world\level\storage
net\minecraft\world\level\timers
net\minecraft\world\level\validation
net\minecraft\world\level\BaseCommandBlock.java
net\minecraft\world\level\BaseSpawner.java
net\minecraft\world\level\BlockAndTintGetter.java
net\minecraft\world\level\BlockCollisions.java
net\minecraft\world\level\BlockEventData.java
net\minecraft\world\level\BlockGetter.java
net\minecraft\world\level\ChunkPos.java
net\minecraft\world\level\ClipBlockStateContext.java
net\minecraft\world\level\ClipContext.java
net\minecraft\world\level\CollisionGetter.java
net\minecraft\world\level\ColorResolver.java
net\minecraft\world\level\CommonLevelAccessor.java
net\minecraft\world\level\CustomSpawner.java
net\minecraft\world\level\DataPackConfig.java
net\minecraft\world\level\EmptyBlockGetter.java
net\minecraft\world\level\EntityBasedExplosionDamageCalculator.java
net\minecraft\world\level\EntityGetter.java
net\minecraft\world\level\Explosion.java
net\minecraft\world\level\ExplosionDamageCalculator.java
net\minecraft\world\level\FoliageColor.java
net\minecraft\world\level\ForcedChunksSavedData.java
net\minecraft\world\level\GameRules.java
net\minecraft\world\level\GameType.java
net\minecraft\world\level\GrassColor.java
net\minecraft\world\level\ItemLike.java
net\minecraft\world\level\Level.java
net\minecraft\world\level\LevelAccessor.java
net\minecraft\world\level\LevelHeightAccessor.java
net\minecraft\world\level\LevelReader.java
net\minecraft\world\level\LevelSettings.java
net\minecraft\world\level\LevelSimulatedReader.java
net\minecraft\world\level\LevelSimulatedRW.java
net\minecraft\world\level\LevelTimeAccess.java
net\minecraft\world\level\LevelWriter.java
net\minecraft\world\level\LightLayer.java
net\minecraft\world\level\LocalMobCapCalculator.java
net\minecraft\world\level\NaturalSpawner.java
net\minecraft\world\level\NoiseColumn.java
net\minecraft\world\level\package-info.java
net\minecraft\world\level\PathNavigationRegion.java
net\minecraft\world\level\PotentialCalculator.java
net\minecraft\world\level\ServerLevelAccessor.java
net\minecraft\world\level\SignalGetter.java
net\minecraft\world\level\SpawnData.java
net\minecraft\world\level\Spawner.java
net\minecraft\world\level\StructureManager.java
net\minecraft\world\level\WorldDataConfiguration.java
net\minecraft\world\level\WorldGenLevel.java
net\minecraft\world\level\biome\AmbientAdditionsSettings.java
net\minecraft\world\level\biome\AmbientMoodSettings.java
net\minecraft\world\level\biome\AmbientParticleSettings.java
net\minecraft\world\level\biome\Biome.java
net\minecraft\world\level\biome\BiomeGenerationSettings.java
net\minecraft\world\level\biome\BiomeManager.java
net\minecraft\world\level\biome\BiomeResolver.java
net\minecraft\world\level\biome\Biomes.java
net\minecraft\world\level\biome\BiomeSource.java
net\minecraft\world\level\biome\BiomeSources.java
net\minecraft\world\level\biome\BiomeSpecialEffects.java
net\minecraft\world\level\biome\CheckerboardColumnBiomeSource.java
net\minecraft\world\level\biome\Climate.java
net\minecraft\world\level\biome\FeatureSorter.java
net\minecraft\world\level\biome\FixedBiomeSource.java
net\minecraft\world\level\biome\MobSpawnSettings.java
net\minecraft\world\level\biome\MultiNoiseBiomeSource.java
net\minecraft\world\level\biome\MultiNoiseBiomeSourceParameterList.java
net\minecraft\world\level\biome\MultiNoiseBiomeSourceParameterLists.java
net\minecraft\world\level\biome\OverworldBiomeBuilder.java
net\minecraft\world\level\biome\package-info.java
net\minecraft\world\level\biome\TheEndBiomeSource.java
net\minecraft\world\level\block\entity
net\minecraft\world\level\block\grower
net\minecraft\world\level\block\piston
net\minecraft\world\level\block\state
net\minecraft\world\level\block\AbstractBannerBlock.java
net\minecraft\world\level\block\AbstractCandleBlock.java
net\minecraft\world\level\block\AbstractCauldronBlock.java
net\minecraft\world\level\block\AbstractChestBlock.java
net\minecraft\world\level\block\AbstractFurnaceBlock.java
net\minecraft\world\level\block\AbstractSkullBlock.java
net\minecraft\world\level\block\AirBlock.java
net\minecraft\world\level\block\AmethystBlock.java
net\minecraft\world\level\block\AmethystClusterBlock.java
net\minecraft\world\level\block\AnvilBlock.java
net\minecraft\world\level\block\AttachedStemBlock.java
net\minecraft\world\level\block\AzaleaBlock.java
net\minecraft\world\level\block\BambooSaplingBlock.java
net\minecraft\world\level\block\BambooStalkBlock.java
net\minecraft\world\level\block\BannerBlock.java
net\minecraft\world\level\block\BarrelBlock.java
net\minecraft\world\level\block\BarrierBlock.java
net\minecraft\world\level\block\BaseCoralFanBlock.java
net\minecraft\world\level\block\BaseCoralPlantBlock.java
net\minecraft\world\level\block\BaseCoralPlantTypeBlock.java
net\minecraft\world\level\block\BaseCoralWallFanBlock.java
net\minecraft\world\level\block\BaseEntityBlock.java
net\minecraft\world\level\block\BaseFireBlock.java
net\minecraft\world\level\block\BasePressurePlateBlock.java
net\minecraft\world\level\block\BaseRailBlock.java
net\minecraft\world\level\block\BaseTorchBlock.java
net\minecraft\world\level\block\BeaconBeamBlock.java
net\minecraft\world\level\block\BeaconBlock.java
net\minecraft\world\level\block\BedBlock.java
net\minecraft\world\level\block\BeehiveBlock.java
net\minecraft\world\level\block\BeetrootBlock.java
net\minecraft\world\level\block\BellBlock.java
net\minecraft\world\level\block\BigDripleafBlock.java
net\minecraft\world\level\block\BigDripleafStemBlock.java
net\minecraft\world\level\block\BlastFurnaceBlock.java
net\minecraft\world\level\block\Block.java
net\minecraft\world\level\block\Blocks.java
net\minecraft\world\level\block\BlockTypes.java
net\minecraft\world\level\block\BonemealableBlock.java
net\minecraft\world\level\block\BrewingStandBlock.java
net\minecraft\world\level\block\BrushableBlock.java
net\minecraft\world\level\block\BubbleColumnBlock.java
net\minecraft\world\level\block\BucketPickup.java
net\minecraft\world\level\block\BuddingAmethystBlock.java
net\minecraft\world\level\block\BushBlock.java
net\minecraft\world\level\block\ButtonBlock.java
net\minecraft\world\level\block\CactusBlock.java
net\minecraft\world\level\block\CakeBlock.java
net\minecraft\world\level\block\CalibratedSculkSensorBlock.java
net\minecraft\world\level\block\CampfireBlock.java
net\minecraft\world\level\block\CandleBlock.java
net\minecraft\world\level\block\CandleCakeBlock.java
net\minecraft\world\level\block\CarpetBlock.java
net\minecraft\world\level\block\CarrotBlock.java
net\minecraft\world\level\block\CartographyTableBlock.java
net\minecraft\world\level\block\CarvedPumpkinBlock.java
net\minecraft\world\level\block\CauldronBlock.java
net\minecraft\world\level\block\CaveVines.java
net\minecraft\world\level\block\CaveVinesBlock.java
net\minecraft\world\level\block\CaveVinesPlantBlock.java
net\minecraft\world\level\block\CeilingHangingSignBlock.java
net\minecraft\world\level\block\ChainBlock.java
net\minecraft\world\level\block\ChangeOverTimeBlock.java
net\minecraft\world\level\block\CherryLeavesBlock.java
net\minecraft\world\level\block\ChestBlock.java
net\minecraft\world\level\block\ChiseledBookShelfBlock.java
net\minecraft\world\level\block\ChorusFlowerBlock.java
net\minecraft\world\level\block\ChorusPlantBlock.java
net\minecraft\world\level\block\CocoaBlock.java
net\minecraft\world\level\block\ColoredFallingBlock.java
net\minecraft\world\level\block\CommandBlock.java
net\minecraft\world\level\block\ComparatorBlock.java
net\minecraft\world\level\block\ComposterBlock.java
net\minecraft\world\level\block\ConcretePowderBlock.java
net\minecraft\world\level\block\ConduitBlock.java
net\minecraft\world\level\block\CopperBulbBlock.java
net\minecraft\world\level\block\CoralBlock.java
net\minecraft\world\level\block\CoralFanBlock.java
net\minecraft\world\level\block\CoralPlantBlock.java
net\minecraft\world\level\block\CoralWallFanBlock.java
net\minecraft\world\level\block\CrafterBlock.java
net\minecraft\world\level\block\CraftingTableBlock.java
net\minecraft\world\level\block\CropBlock.java
net\minecraft\world\level\block\CrossCollisionBlock.java
net\minecraft\world\level\block\CryingObsidianBlock.java
net\minecraft\world\level\block\DaylightDetectorBlock.java
net\minecraft\world\level\block\DeadBushBlock.java
net\minecraft\world\level\block\DecoratedPotBlock.java
net\minecraft\world\level\block\DetectorRailBlock.java
net\minecraft\world\level\block\DiodeBlock.java
net\minecraft\world\level\block\DirectionalBlock.java
net\minecraft\world\level\block\DirtPathBlock.java
net\minecraft\world\level\block\DispenserBlock.java
net\minecraft\world\level\block\DoorBlock.java
net\minecraft\world\level\block\DoubleBlockCombiner.java
net\minecraft\world\level\block\DoublePlantBlock.java
net\minecraft\world\level\block\DragonEggBlock.java
net\minecraft\world\level\block\DropExperienceBlock.java
net\minecraft\world\level\block\DropperBlock.java
net\minecraft\world\level\block\EnchantmentTableBlock.java
net\minecraft\world\level\block\EnderChestBlock.java
net\minecraft\world\level\block\EndGatewayBlock.java
net\minecraft\world\level\block\EndPortalBlock.java
net\minecraft\world\level\block\EndPortalFrameBlock.java
net\minecraft\world\level\block\EndRodBlock.java
net\minecraft\world\level\block\EntityBlock.java
net\minecraft\world\level\block\EquipableCarvedPumpkinBlock.java
net\minecraft\world\level\block\FaceAttachedHorizontalDirectionalBlock.java
net\minecraft\world\level\block\Fallable.java
net\minecraft\world\level\block\FallingBlock.java
net\minecraft\world\level\block\FarmBlock.java
net\minecraft\world\level\block\FenceBlock.java
net\minecraft\world\level\block\FenceGateBlock.java
net\minecraft\world\level\block\FireBlock.java
net\minecraft\world\level\block\FletchingTableBlock.java
net\minecraft\world\level\block\FlowerBlock.java
net\minecraft\world\level\block\FlowerPotBlock.java
net\minecraft\world\level\block\FrogspawnBlock.java
net\minecraft\world\level\block\FrostedIceBlock.java
net\minecraft\world\level\block\FungusBlock.java
net\minecraft\world\level\block\FurnaceBlock.java
net\minecraft\world\level\block\GameMasterBlock.java
net\minecraft\world\level\block\GlazedTerracottaBlock.java
net\minecraft\world\level\block\GlowLichenBlock.java
net\minecraft\world\level\block\GrassBlock.java
net\minecraft\world\level\block\GrindstoneBlock.java
net\minecraft\world\level\block\GrowingPlantBlock.java
net\minecraft\world\level\block\GrowingPlantBodyBlock.java
net\minecraft\world\level\block\GrowingPlantHeadBlock.java
net\minecraft\world\level\block\HalfTransparentBlock.java
net\minecraft\world\level\block\HangingRootsBlock.java
net\minecraft\world\level\block\HayBlock.java
net\minecraft\world\level\block\HoneyBlock.java
net\minecraft\world\level\block\HopperBlock.java
net\minecraft\world\level\block\HorizontalDirectionalBlock.java
net\minecraft\world\level\block\HugeMushroomBlock.java
net\minecraft\world\level\block\IceBlock.java
net\minecraft\world\level\block\InfestedBlock.java
net\minecraft\world\level\block\InfestedRotatedPillarBlock.java
net\minecraft\world\level\block\IronBarsBlock.java
net\minecraft\world\level\block\JigsawBlock.java
net\minecraft\world\level\block\JukeboxBlock.java
net\minecraft\world\level\block\KelpBlock.java
net\minecraft\world\level\block\KelpPlantBlock.java
net\minecraft\world\level\block\LadderBlock.java
net\minecraft\world\level\block\LanternBlock.java
net\minecraft\world\level\block\LavaCauldronBlock.java
net\minecraft\world\level\block\LayeredCauldronBlock.java
net\minecraft\world\level\block\LeavesBlock.java
net\minecraft\world\level\block\LecternBlock.java
net\minecraft\world\level\block\LevelEvent.java
net\minecraft\world\level\block\LeverBlock.java
net\minecraft\world\level\block\LightBlock.java
net\minecraft\world\level\block\LightningRodBlock.java
net\minecraft\world\level\block\LiquidBlock.java
net\minecraft\world\level\block\LiquidBlockContainer.java
net\minecraft\world\level\block\LoomBlock.java
net\minecraft\world\level\block\MagmaBlock.java
net\minecraft\world\level\block\MangroveLeavesBlock.java
net\minecraft\world\level\block\MangrovePropaguleBlock.java
net\minecraft\world\level\block\MangroveRootsBlock.java
net\minecraft\world\level\block\Mirror.java
net\minecraft\world\level\block\MossBlock.java
net\minecraft\world\level\block\MudBlock.java
net\minecraft\world\level\block\MultifaceBlock.java
net\minecraft\world\level\block\MultifaceSpreader.java
net\minecraft\world\level\block\MushroomBlock.java
net\minecraft\world\level\block\MyceliumBlock.java
net\minecraft\world\level\block\NetherPortalBlock.java
net\minecraft\world\level\block\NetherrackBlock.java
net\minecraft\world\level\block\NetherSproutsBlock.java
net\minecraft\world\level\block\NetherVines.java
net\minecraft\world\level\block\NetherWartBlock.java
net\minecraft\world\level\block\NoteBlock.java
net\minecraft\world\level\block\NyliumBlock.java
net\minecraft\world\level\block\ObserverBlock.java
net\minecraft\world\level\block\package-info.java
net\minecraft\world\level\block\PiglinWallSkullBlock.java
net\minecraft\world\level\block\PinkPetalsBlock.java
net\minecraft\world\level\block\PipeBlock.java
net\minecraft\world\level\block\PitcherCropBlock.java
net\minecraft\world\level\block\PlayerHeadBlock.java
net\minecraft\world\level\block\PlayerWallHeadBlock.java
net\minecraft\world\level\block\PointedDripstoneBlock.java
net\minecraft\world\level\block\PotatoBlock.java
net\minecraft\world\level\block\PowderSnowBlock.java
net\minecraft\world\level\block\PoweredBlock.java
net\minecraft\world\level\block\PoweredRailBlock.java
net\minecraft\world\level\block\PressurePlateBlock.java
net\minecraft\world\level\block\PumpkinBlock.java
net\minecraft\world\level\block\RailBlock.java
net\minecraft\world\level\block\RailState.java
net\minecraft\world\level\block\RedstoneLampBlock.java
net\minecraft\world\level\block\RedStoneOreBlock.java
net\minecraft\world\level\block\RedstoneTorchBlock.java
net\minecraft\world\level\block\RedstoneWallTorchBlock.java
net\minecraft\world\level\block\RedStoneWireBlock.java
net\minecraft\world\level\block\RenderShape.java
net\minecraft\world\level\block\RepeaterBlock.java
net\minecraft\world\level\block\RespawnAnchorBlock.java
net\minecraft\world\level\block\RodBlock.java
net\minecraft\world\level\block\RootedDirtBlock.java
net\minecraft\world\level\block\RootsBlock.java
net\minecraft\world\level\block\RotatedPillarBlock.java
net\minecraft\world\level\block\Rotation.java
net\minecraft\world\level\block\SaplingBlock.java
net\minecraft\world\level\block\ScaffoldingBlock.java
net\minecraft\world\level\block\SculkBehaviour.java
net\minecraft\world\level\block\SculkBlock.java
net\minecraft\world\level\block\SculkCatalystBlock.java
net\minecraft\world\level\block\SculkSensorBlock.java
net\minecraft\world\level\block\SculkShriekerBlock.java
net\minecraft\world\level\block\SculkSpreader.java
net\minecraft\world\level\block\SculkVeinBlock.java
net\minecraft\world\level\block\SeagrassBlock.java
net\minecraft\world\level\block\SeaPickleBlock.java
net\minecraft\world\level\block\ShulkerBoxBlock.java
net\minecraft\world\level\block\SignBlock.java
net\minecraft\world\level\block\SimpleWaterloggedBlock.java
net\minecraft\world\level\block\SkullBlock.java
net\minecraft\world\level\block\SlabBlock.java
net\minecraft\world\level\block\SlimeBlock.java
net\minecraft\world\level\block\SmallDripleafBlock.java
net\minecraft\world\level\block\SmithingTableBlock.java
net\minecraft\world\level\block\SmokerBlock.java
net\minecraft\world\level\block\SnifferEggBlock.java
net\minecraft\world\level\block\SnowLayerBlock.java
net\minecraft\world\level\block\SnowyDirtBlock.java
net\minecraft\world\level\block\SoulFireBlock.java
net\minecraft\world\level\block\SoulSandBlock.java
net\minecraft\world\level\block\SoundType.java
net\minecraft\world\level\block\SpawnerBlock.java
net\minecraft\world\level\block\SpongeBlock.java
net\minecraft\world\level\block\SporeBlossomBlock.java
net\minecraft\world\level\block\SpreadingSnowyDirtBlock.java
net\minecraft\world\level\block\StainedGlassBlock.java
net\minecraft\world\level\block\StainedGlassPaneBlock.java
net\minecraft\world\level\block\StairBlock.java
net\minecraft\world\level\block\StandingSignBlock.java
net\minecraft\world\level\block\StemBlock.java
net\minecraft\world\level\block\StonecutterBlock.java
net\minecraft\world\level\block\StructureBlock.java
net\minecraft\world\level\block\StructureVoidBlock.java
net\minecraft\world\level\block\SugarCaneBlock.java
net\minecraft\world\level\block\SupportType.java
net\minecraft\world\level\block\SuspiciousEffectHolder.java
net\minecraft\world\level\block\SweetBerryBushBlock.java
net\minecraft\world\level\block\TallFlowerBlock.java
net\minecraft\world\level\block\TallGrassBlock.java
net\minecraft\world\level\block\TallSeagrassBlock.java
net\minecraft\world\level\block\TargetBlock.java
net\minecraft\world\level\block\TintedGlassBlock.java
net\minecraft\world\level\block\TntBlock.java
net\minecraft\world\level\block\TorchBlock.java
net\minecraft\world\level\block\TorchflowerCropBlock.java
net\minecraft\world\level\block\TransparentBlock.java
net\minecraft\world\level\block\TrapDoorBlock.java
net\minecraft\world\level\block\TrappedChestBlock.java
net\minecraft\world\level\block\TrialSpawnerBlock.java
net\minecraft\world\level\block\TripWireBlock.java
net\minecraft\world\level\block\TripWireHookBlock.java
net\minecraft\world\level\block\TurtleEggBlock.java
net\minecraft\world\level\block\TwistingVinesBlock.java
net\minecraft\world\level\block\TwistingVinesPlantBlock.java
net\minecraft\world\level\block\VineBlock.java
net\minecraft\world\level\block\WallBannerBlock.java
net\minecraft\world\level\block\WallBlock.java
net\minecraft\world\level\block\WallHangingSignBlock.java
net\minecraft\world\level\block\WallSignBlock.java
net\minecraft\world\level\block\WallSkullBlock.java
net\minecraft\world\level\block\WallTorchBlock.java
net\minecraft\world\level\block\WaterlilyBlock.java
net\minecraft\world\level\block\WaterloggedTransparentBlock.java
net\minecraft\world\level\block\WeatheringCopper.java
net\minecraft\world\level\block\WeatheringCopperBulbBlock.java
net\minecraft\world\level\block\WeatheringCopperDoorBlock.java
net\minecraft\world\level\block\WeatheringCopperFullBlock.java
net\minecraft\world\level\block\WeatheringCopperGrateBlock.java
net\minecraft\world\level\block\WeatheringCopperSlabBlock.java
net\minecraft\world\level\block\WeatheringCopperStairBlock.java
net\minecraft\world\level\block\WeatheringCopperTrapDoorBlock.java
net\minecraft\world\level\block\WebBlock.java
net\minecraft\world\level\block\WeepingVinesBlock.java
net\minecraft\world\level\block\WeepingVinesPlantBlock.java
net\minecraft\world\level\block\WeightedPressurePlateBlock.java
net\minecraft\world\level\block\WetSpongeBlock.java
net\minecraft\world\level\block\WitherRoseBlock.java
net\minecraft\world\level\block\WitherSkullBlock.java
net\minecraft\world\level\block\WitherWallSkullBlock.java
net\minecraft\world\level\block\WoolCarpetBlock.java
net\minecraft\world\level\block\entity\trialspawner
net\minecraft\world\level\block\entity\AbstractFurnaceBlockEntity.java
net\minecraft\world\level\block\entity\BannerBlockEntity.java
net\minecraft\world\level\block\entity\BannerPattern.java
net\minecraft\world\level\block\entity\BannerPatterns.java
net\minecraft\world\level\block\entity\BarrelBlockEntity.java
net\minecraft\world\level\block\entity\BaseContainerBlockEntity.java
net\minecraft\world\level\block\entity\BeaconBlockEntity.java
net\minecraft\world\level\block\entity\BedBlockEntity.java
net\minecraft\world\level\block\entity\BeehiveBlockEntity.java
net\minecraft\world\level\block\entity\BellBlockEntity.java
net\minecraft\world\level\block\entity\BlastFurnaceBlockEntity.java
net\minecraft\world\level\block\entity\BlockEntity.java
net\minecraft\world\level\block\entity\BlockEntityTicker.java
net\minecraft\world\level\block\entity\BlockEntityType.java
net\minecraft\world\level\block\entity\BrewingStandBlockEntity.java
net\minecraft\world\level\block\entity\BrushableBlockEntity.java
net\minecraft\world\level\block\entity\CalibratedSculkSensorBlockEntity.java
net\minecraft\world\level\block\entity\CampfireBlockEntity.java
net\minecraft\world\level\block\entity\ChestBlockEntity.java
net\minecraft\world\level\block\entity\ChestLidController.java
net\minecraft\world\level\block\entity\ChiseledBookShelfBlockEntity.java
net\minecraft\world\level\block\entity\CommandBlockEntity.java
net\minecraft\world\level\block\entity\ComparatorBlockEntity.java
net\minecraft\world\level\block\entity\ConduitBlockEntity.java
net\minecraft\world\level\block\entity\ContainerOpenersCounter.java
net\minecraft\world\level\block\entity\CrafterBlockEntity.java
net\minecraft\world\level\block\entity\DaylightDetectorBlockEntity.java
net\minecraft\world\level\block\entity\DecoratedPotBlockEntity.java
net\minecraft\world\level\block\entity\DecoratedPotPatterns.java
net\minecraft\world\level\block\entity\DispenserBlockEntity.java
net\minecraft\world\level\block\entity\DropperBlockEntity.java
net\minecraft\world\level\block\entity\EnchantmentTableBlockEntity.java
net\minecraft\world\level\block\entity\EnderChestBlockEntity.java
net\minecraft\world\level\block\entity\FurnaceBlockEntity.java
net\minecraft\world\level\block\entity\HangingSignBlockEntity.java
net\minecraft\world\level\block\entity\Hopper.java
net\minecraft\world\level\block\entity\HopperBlockEntity.java
net\minecraft\world\level\block\entity\JigsawBlockEntity.java
net\minecraft\world\level\block\entity\JukeboxBlockEntity.java
net\minecraft\world\level\block\entity\LecternBlockEntity.java
net\minecraft\world\level\block\entity\LidBlockEntity.java
net\minecraft\world\level\block\entity\package-info.java
net\minecraft\world\level\block\entity\RandomizableContainerBlockEntity.java
net\minecraft\world\level\block\entity\SculkCatalystBlockEntity.java
net\minecraft\world\level\block\entity\SculkSensorBlockEntity.java
net\minecraft\world\level\block\entity\SculkShriekerBlockEntity.java
net\minecraft\world\level\block\entity\ShulkerBoxBlockEntity.java
net\minecraft\world\level\block\entity\SignBlockEntity.java
net\minecraft\world\level\block\entity\SignText.java
net\minecraft\world\level\block\entity\SkullBlockEntity.java
net\minecraft\world\level\block\entity\SmokerBlockEntity.java
net\minecraft\world\level\block\entity\SpawnerBlockEntity.java
net\minecraft\world\level\block\entity\StructureBlockEntity.java
net\minecraft\world\level\block\entity\TheEndGatewayBlockEntity.java
net\minecraft\world\level\block\entity\TheEndPortalBlockEntity.java
net\minecraft\world\level\block\entity\TickingBlockEntity.java
net\minecraft\world\level\block\entity\TrappedChestBlockEntity.java
net\minecraft\world\level\block\entity\TrialSpawnerBlockEntity.java
net\minecraft\world\level\block\entity\trialspawner\package-info.java
net\minecraft\world\level\block\entity\trialspawner\PlayerDetector.java
net\minecraft\world\level\block\entity\trialspawner\TrialSpawner.java
net\minecraft\world\level\block\entity\trialspawner\TrialSpawnerConfig.java
net\minecraft\world\level\block\entity\trialspawner\TrialSpawnerData.java
net\minecraft\world\level\block\entity\trialspawner\TrialSpawnerState.java
net\minecraft\world\level\block\grower\package-info.java
net\minecraft\world\level\block\grower\TreeGrower.java
net\minecraft\world\level\block\piston\MovingPistonBlock.java
net\minecraft\world\level\block\piston\package-info.java
net\minecraft\world\level\block\piston\PistonBaseBlock.java
net\minecraft\world\level\block\piston\PistonHeadBlock.java
net\minecraft\world\level\block\piston\PistonMath.java
net\minecraft\world\level\block\piston\PistonMovingBlockEntity.java
net\minecraft\world\level\block\piston\PistonStructureResolver.java
net\minecraft\world\level\block\state\pattern
net\minecraft\world\level\block\state\predicate
net\minecraft\world\level\block\state\properties
net\minecraft\world\level\block\state\BlockBehaviour.java
net\minecraft\world\level\block\state\BlockState.java
net\minecraft\world\level\block\state\package-info.java
net\minecraft\world\level\block\state\StateDefinition.java
net\minecraft\world\level\block\state\StateHolder.java
net\minecraft\world\level\block\state\pattern\BlockInWorld.java
net\minecraft\world\level\block\state\pattern\BlockPattern.java
net\minecraft\world\level\block\state\pattern\BlockPatternBuilder.java
net\minecraft\world\level\block\state\pattern\package-info.java
net\minecraft\world\level\block\state\predicate\BlockPredicate.java
net\minecraft\world\level\block\state\predicate\BlockStatePredicate.java
net\minecraft\world\level\block\state\predicate\package-info.java
net\minecraft\world\level\block\state\properties\AttachFace.java
net\minecraft\world\level\block\state\properties\BambooLeaves.java
net\minecraft\world\level\block\state\properties\BedPart.java
net\minecraft\world\level\block\state\properties\BellAttachType.java
net\minecraft\world\level\block\state\properties\BlockSetType.java
net\minecraft\world\level\block\state\properties\BlockStateProperties.java
net\minecraft\world\level\block\state\properties\BooleanProperty.java
net\minecraft\world\level\block\state\properties\ChestType.java
net\minecraft\world\level\block\state\properties\ComparatorMode.java
net\minecraft\world\level\block\state\properties\DirectionProperty.java
net\minecraft\world\level\block\state\properties\DoorHingeSide.java
net\minecraft\world\level\block\state\properties\DoubleBlockHalf.java
net\minecraft\world\level\block\state\properties\DripstoneThickness.java
net\minecraft\world\level\block\state\properties\EnumProperty.java
net\minecraft\world\level\block\state\properties\Half.java
net\minecraft\world\level\block\state\properties\IntegerProperty.java
net\minecraft\world\level\block\state\properties\NoteBlockInstrument.java
net\minecraft\world\level\block\state\properties\package-info.java
net\minecraft\world\level\block\state\properties\PistonType.java
net\minecraft\world\level\block\state\properties\Property.java
net\minecraft\world\level\block\state\properties\RailShape.java
net\minecraft\world\level\block\state\properties\RedstoneSide.java
net\minecraft\world\level\block\state\properties\RotationSegment.java
net\minecraft\world\level\block\state\properties\SculkSensorPhase.java
net\minecraft\world\level\block\state\properties\SlabType.java
net\minecraft\world\level\block\state\properties\StairsShape.java
net\minecraft\world\level\block\state\properties\StructureMode.java
net\minecraft\world\level\block\state\properties\Tilt.java
net\minecraft\world\level\block\state\properties\WallSide.java
net\minecraft\world\level\block\state\properties\WoodType.java
net\minecraft\world\level\border\BorderChangeListener.java
net\minecraft\world\level\border\BorderStatus.java
net\minecraft\world\level\border\package-info.java
net\minecraft\world\level\border\WorldBorder.java
net\minecraft\world\level\chunk\storage
net\minecraft\world\level\chunk\BlockColumn.java
net\minecraft\world\level\chunk\BulkSectionAccess.java
net\minecraft\world\level\chunk\CarvingMask.java
net\minecraft\world\level\chunk\ChunkAccess.java
net\minecraft\world\level\chunk\ChunkGenerator.java
net\minecraft\world\level\chunk\ChunkGenerators.java
net\minecraft\world\level\chunk\ChunkGeneratorStructureState.java
net\minecraft\world\level\chunk\ChunkSource.java
net\minecraft\world\level\chunk\ChunkStatus.java
net\minecraft\world\level\chunk\DataLayer.java
net\minecraft\world\level\chunk\EmptyLevelChunk.java
net\minecraft\world\level\chunk\GlobalPalette.java
net\minecraft\world\level\chunk\HashMapPalette.java
net\minecraft\world\level\chunk\ImposterProtoChunk.java
net\minecraft\world\level\chunk\LevelChunk.java
net\minecraft\world\level\chunk\LevelChunkSection.java
net\minecraft\world\level\chunk\LightChunk.java
net\minecraft\world\level\chunk\LightChunkGetter.java
net\minecraft\world\level\chunk\LinearPalette.java
net\minecraft\world\level\chunk\MissingPaletteEntryException.java
net\minecraft\world\level\chunk\package-info.java
net\minecraft\world\level\chunk\Palette.java
net\minecraft\world\level\chunk\PalettedContainer.java
net\minecraft\world\level\chunk\PalettedContainerRO.java
net\minecraft\world\level\chunk\PaletteResize.java
net\minecraft\world\level\chunk\ProtoChunk.java
net\minecraft\world\level\chunk\SingleValuePalette.java
net\minecraft\world\level\chunk\StructureAccess.java
net\minecraft\world\level\chunk\UpgradeData.java
net\minecraft\world\level\chunk\storage\ChunkScanAccess.java
net\minecraft\world\level\chunk\storage\ChunkSerializer.java
net\minecraft\world\level\chunk\storage\ChunkStorage.java
net\minecraft\world\level\chunk\storage\EntityStorage.java
net\minecraft\world\level\chunk\storage\IOWorker.java
net\minecraft\world\level\chunk\storage\package-info.java
net\minecraft\world\level\chunk\storage\RegionBitmap.java
net\minecraft\world\level\chunk\storage\RegionFile.java
net\minecraft\world\level\chunk\storage\RegionFileStorage.java
net\minecraft\world\level\chunk\storage\RegionFileVersion.java
net\minecraft\world\level\chunk\storage\SectionStorage.java
net\minecraft\world\level\dimension\end
net\minecraft\world\level\dimension\BuiltinDimensionTypes.java
net\minecraft\world\level\dimension\DimensionDefaults.java
net\minecraft\world\level\dimension\DimensionType.java
net\minecraft\world\level\dimension\LevelStem.java
net\minecraft\world\level\dimension\package-info.java
net\minecraft\world\level\dimension\end\DragonRespawnAnimation.java
net\minecraft\world\level\dimension\end\EndDragonFight.java
net\minecraft\world\level\dimension\end\package-info.java
net\minecraft\world\level\entity\ChunkEntities.java
net\minecraft\world\level\entity\ChunkStatusUpdateListener.java
net\minecraft\world\level\entity\EntityAccess.java
net\minecraft\world\level\entity\EntityInLevelCallback.java
net\minecraft\world\level\entity\EntityLookup.java
net\minecraft\world\level\entity\EntityPersistentStorage.java
net\minecraft\world\level\entity\EntitySection.java
net\minecraft\world\level\entity\EntitySectionStorage.java
net\minecraft\world\level\entity\EntityTickList.java
net\minecraft\world\level\entity\EntityTypeTest.java
net\minecraft\world\level\entity\LevelCallback.java
net\minecraft\world\level\entity\LevelEntityGetter.java
net\minecraft\world\level\entity\LevelEntityGetterAdapter.java
net\minecraft\world\level\entity\package-info.java
net\minecraft\world\level\entity\PersistentEntitySectionManager.java
net\minecraft\world\level\entity\TransientEntitySectionManager.java
net\minecraft\world\level\entity\Visibility.java
net\minecraft\world\level\gameevent\vibrations
net\minecraft\world\level\gameevent\BlockPositionSource.java
net\minecraft\world\level\gameevent\DynamicGameEventListener.java
net\minecraft\world\level\gameevent\EntityPositionSource.java
net\minecraft\world\level\gameevent\EuclideanGameEventListenerRegistry.java
net\minecraft\world\level\gameevent\GameEvent.java
net\minecraft\world\level\gameevent\GameEventDispatcher.java
net\minecraft\world\level\gameevent\GameEventListener.java
net\minecraft\world\level\gameevent\GameEventListenerRegistry.java
net\minecraft\world\level\gameevent\package-info.java
net\minecraft\world\level\gameevent\PositionSource.java
net\minecraft\world\level\gameevent\PositionSourceType.java
net\minecraft\world\level\gameevent\vibrations\package-info.java
net\minecraft\world\level\gameevent\vibrations\VibrationInfo.java
net\minecraft\world\level\gameevent\vibrations\VibrationSelector.java
net\minecraft\world\level\gameevent\vibrations\VibrationSystem.java
net\minecraft\world\level\levelgen\blending
net\minecraft\world\level\levelgen\blockpredicates
net\minecraft\world\level\levelgen\carver
net\minecraft\world\level\levelgen\feature
net\minecraft\world\level\levelgen\flat
net\minecraft\world\level\levelgen\heightproviders
net\minecraft\world\level\levelgen\material
net\minecraft\world\level\levelgen\placement
net\minecraft\world\level\levelgen\presets
net\minecraft\world\level\levelgen\structure
net\minecraft\world\level\levelgen\synth
net\minecraft\world\level\levelgen\Aquifer.java
net\minecraft\world\level\levelgen\Beardifier.java
net\minecraft\world\level\levelgen\BelowZeroRetrogen.java
net\minecraft\world\level\levelgen\BitRandomSource.java
net\minecraft\world\level\levelgen\Column.java
net\minecraft\world\level\levelgen\DebugLevelSource.java
net\minecraft\world\level\levelgen\Density.java
net\minecraft\world\level\levelgen\DensityFunction.java
net\minecraft\world\level\levelgen\DensityFunctions.java
net\minecraft\world\level\levelgen\FlatLevelSource.java
net\minecraft\world\level\levelgen\GenerationStep.java
net\minecraft\world\level\levelgen\GeodeBlockSettings.java
net\minecraft\world\level\levelgen\GeodeCrackSettings.java
net\minecraft\world\level\levelgen\GeodeLayerSettings.java
net\minecraft\world\level\levelgen\Heightmap.java
net\minecraft\world\level\levelgen\LegacyRandomSource.java
net\minecraft\world\level\levelgen\MarsagliaPolarGaussian.java
net\minecraft\world\level\levelgen\NoiseBasedChunkGenerator.java
net\minecraft\world\level\levelgen\NoiseChunk.java
net\minecraft\world\level\levelgen\NoiseGeneratorSettings.java
net\minecraft\world\level\levelgen\NoiseRouter.java
net\minecraft\world\level\levelgen\NoiseRouterData.java
net\minecraft\world\level\levelgen\Noises.java
net\minecraft\world\level\levelgen\NoiseSettings.java
net\minecraft\world\level\levelgen\OreVeinifier.java
net\minecraft\world\level\levelgen\package-info.java
net\minecraft\world\level\levelgen\PatrolSpawner.java
net\minecraft\world\level\levelgen\PhantomSpawner.java
net\minecraft\world\level\levelgen\PositionalRandomFactory.java
net\minecraft\world\level\levelgen\RandomState.java
net\minecraft\world\level\levelgen\RandomSupport.java
net\minecraft\world\level\levelgen\SingleThreadedRandomSource.java
net\minecraft\world\level\levelgen\SurfaceRules.java
net\minecraft\world\level\levelgen\SurfaceSystem.java
net\minecraft\world\level\levelgen\ThreadSafeLegacyRandomSource.java
net\minecraft\world\level\levelgen\VerticalAnchor.java
net\minecraft\world\level\levelgen\WorldDimensions.java
net\minecraft\world\level\levelgen\WorldGenerationContext.java
net\minecraft\world\level\levelgen\WorldgenRandom.java
net\minecraft\world\level\levelgen\WorldGenSettings.java
net\minecraft\world\level\levelgen\WorldOptions.java
net\minecraft\world\level\levelgen\Xoroshiro128PlusPlus.java
net\minecraft\world\level\levelgen\XoroshiroRandomSource.java
net\minecraft\world\level\levelgen\blending\Blender.java
net\minecraft\world\level\levelgen\blending\BlendingData.java
net\minecraft\world\level\levelgen\blending\package-info.java
net\minecraft\world\level\levelgen\blockpredicates\AllOfPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\AnyOfPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\BlockPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\BlockPredicateType.java
net\minecraft\world\level\levelgen\blockpredicates\CombiningPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\HasSturdyFacePredicate.java
net\minecraft\world\level\levelgen\blockpredicates\InsideWorldBoundsPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\MatchingBlocksPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\MatchingBlockTagPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\MatchingFluidsPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\NotPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\package-info.java
net\minecraft\world\level\levelgen\blockpredicates\ReplaceablePredicate.java
net\minecraft\world\level\levelgen\blockpredicates\SolidPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\StateTestingPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\TrueBlockPredicate.java
net\minecraft\world\level\levelgen\blockpredicates\WouldSurvivePredicate.java
net\minecraft\world\level\levelgen\carver\CanyonCarverConfiguration.java
net\minecraft\world\level\levelgen\carver\CanyonWorldCarver.java
net\minecraft\world\level\levelgen\carver\CarverConfiguration.java
net\minecraft\world\level\levelgen\carver\CarverDebugSettings.java
net\minecraft\world\level\levelgen\carver\CarvingContext.java
net\minecraft\world\level\levelgen\carver\CaveCarverConfiguration.java
net\minecraft\world\level\levelgen\carver\CaveWorldCarver.java
net\minecraft\world\level\levelgen\carver\ConfiguredWorldCarver.java
net\minecraft\world\level\levelgen\carver\NetherWorldCarver.java
net\minecraft\world\level\levelgen\carver\package-info.java
net\minecraft\world\level\levelgen\carver\WorldCarver.java
net\minecraft\world\level\levelgen\feature\configurations
net\minecraft\world\level\levelgen\feature\featuresize
net\minecraft\world\level\levelgen\feature\foliageplacers
net\minecraft\world\level\levelgen\feature\rootplacers
net\minecraft\world\level\levelgen\feature\stateproviders
net\minecraft\world\level\levelgen\feature\treedecorators
net\minecraft\world\level\levelgen\feature\trunkplacers
net\minecraft\world\level\levelgen\feature\AbstractHugeMushroomFeature.java
net\minecraft\world\level\levelgen\feature\BambooFeature.java
net\minecraft\world\level\levelgen\feature\BasaltColumnsFeature.java
net\minecraft\world\level\levelgen\feature\BasaltPillarFeature.java
net\minecraft\world\level\levelgen\feature\BlockBlobFeature.java
net\minecraft\world\level\levelgen\feature\BlockColumnFeature.java
net\minecraft\world\level\levelgen\feature\BlockPileFeature.java
net\minecraft\world\level\levelgen\feature\BlueIceFeature.java
net\minecraft\world\level\levelgen\feature\BonusChestFeature.java
net\minecraft\world\level\levelgen\feature\ChorusPlantFeature.java
net\minecraft\world\level\levelgen\feature\ConfiguredFeature.java
net\minecraft\world\level\levelgen\feature\CoralClawFeature.java
net\minecraft\world\level\levelgen\feature\CoralFeature.java
net\minecraft\world\level\levelgen\feature\CoralMushroomFeature.java
net\minecraft\world\level\levelgen\feature\CoralTreeFeature.java
net\minecraft\world\level\levelgen\feature\DeltaFeature.java
net\minecraft\world\level\levelgen\feature\DesertWellFeature.java
net\minecraft\world\level\levelgen\feature\DiskFeature.java
net\minecraft\world\level\levelgen\feature\DripstoneClusterFeature.java
net\minecraft\world\level\levelgen\feature\DripstoneUtils.java
net\minecraft\world\level\levelgen\feature\EndGatewayFeature.java
net\minecraft\world\level\levelgen\feature\EndIslandFeature.java
net\minecraft\world\level\levelgen\feature\EndPodiumFeature.java
net\minecraft\world\level\levelgen\feature\Feature.java
net\minecraft\world\level\levelgen\feature\FeatureCountTracker.java
net\minecraft\world\level\levelgen\feature\FeaturePlaceContext.java
net\minecraft\world\level\levelgen\feature\FillLayerFeature.java
net\minecraft\world\level\levelgen\feature\FossilFeature.java
net\minecraft\world\level\levelgen\feature\FossilFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\GeodeFeature.java
net\minecraft\world\level\levelgen\feature\GlowstoneFeature.java
net\minecraft\world\level\levelgen\feature\HugeBrownMushroomFeature.java
net\minecraft\world\level\levelgen\feature\HugeFungusConfiguration.java
net\minecraft\world\level\levelgen\feature\HugeFungusFeature.java
net\minecraft\world\level\levelgen\feature\HugeRedMushroomFeature.java
net\minecraft\world\level\levelgen\feature\IcebergFeature.java
net\minecraft\world\level\levelgen\feature\IceSpikeFeature.java
net\minecraft\world\level\levelgen\feature\KelpFeature.java
net\minecraft\world\level\levelgen\feature\LakeFeature.java
net\minecraft\world\level\levelgen\feature\LargeDripstoneFeature.java
net\minecraft\world\level\levelgen\feature\MonsterRoomFeature.java
net\minecraft\world\level\levelgen\feature\MultifaceGrowthFeature.java
net\minecraft\world\level\levelgen\feature\NetherForestVegetationFeature.java
net\minecraft\world\level\levelgen\feature\NoOpFeature.java
net\minecraft\world\level\levelgen\feature\OreFeature.java
net\minecraft\world\level\levelgen\feature\package-info.java
net\minecraft\world\level\levelgen\feature\PointedDripstoneFeature.java
net\minecraft\world\level\levelgen\feature\RandomBooleanSelectorFeature.java
net\minecraft\world\level\levelgen\feature\RandomPatchFeature.java
net\minecraft\world\level\levelgen\feature\RandomSelectorFeature.java
net\minecraft\world\level\levelgen\feature\ReplaceBlobsFeature.java
net\minecraft\world\level\levelgen\feature\ReplaceBlockFeature.java
net\minecraft\world\level\levelgen\feature\RootSystemFeature.java
net\minecraft\world\level\levelgen\feature\ScatteredOreFeature.java
net\minecraft\world\level\levelgen\feature\SculkPatchFeature.java
net\minecraft\world\level\levelgen\feature\SeagrassFeature.java
net\minecraft\world\level\levelgen\feature\SeaPickleFeature.java
net\minecraft\world\level\levelgen\feature\SimpleBlockFeature.java
net\minecraft\world\level\levelgen\feature\SimpleRandomSelectorFeature.java
net\minecraft\world\level\levelgen\feature\SnowAndFreezeFeature.java
net\minecraft\world\level\levelgen\feature\SpikeFeature.java
net\minecraft\world\level\levelgen\feature\SpringFeature.java
net\minecraft\world\level\levelgen\feature\TreeFeature.java
net\minecraft\world\level\levelgen\feature\TwistingVinesFeature.java
net\minecraft\world\level\levelgen\feature\UnderwaterMagmaFeature.java
net\minecraft\world\level\levelgen\feature\VegetationPatchFeature.java
net\minecraft\world\level\levelgen\feature\VinesFeature.java
net\minecraft\world\level\levelgen\feature\VoidStartPlatformFeature.java
net\minecraft\world\level\levelgen\feature\WaterloggedVegetationPatchFeature.java
net\minecraft\world\level\levelgen\feature\WeepingVinesFeature.java
net\minecraft\world\level\levelgen\feature\WeightedPlacedFeature.java
net\minecraft\world\level\levelgen\feature\configurations\BlockColumnConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\BlockPileConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\BlockStateConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\ColumnFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\CountConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\DeltaFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\DiskConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\DripstoneClusterConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\EndGatewayConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\FeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\GeodeConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\HugeMushroomFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\LargeDripstoneConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\LayerConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\MultifaceGrowthConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\NetherForestVegetationConfig.java
net\minecraft\world\level\levelgen\feature\configurations\NoneFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\OreConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\package-info.java
net\minecraft\world\level\levelgen\feature\configurations\PointedDripstoneConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\ProbabilityFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\RandomBooleanFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\RandomFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\RandomPatchConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\ReplaceBlockConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\ReplaceSphereConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\RootSystemConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\SculkPatchConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\SimpleBlockConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\SimpleRandomFeatureConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\SpikeConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\SpringConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\TreeConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\TwistingVinesConfig.java
net\minecraft\world\level\levelgen\feature\configurations\UnderwaterMagmaConfiguration.java
net\minecraft\world\level\levelgen\feature\configurations\VegetationPatchConfiguration.java
net\minecraft\world\level\levelgen\feature\featuresize\FeatureSize.java
net\minecraft\world\level\levelgen\feature\featuresize\FeatureSizeType.java
net\minecraft\world\level\levelgen\feature\featuresize\package-info.java
net\minecraft\world\level\levelgen\feature\featuresize\ThreeLayersFeatureSize.java
net\minecraft\world\level\levelgen\feature\featuresize\TwoLayersFeatureSize.java
net\minecraft\world\level\levelgen\feature\foliageplacers\AcaciaFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\BlobFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\BushFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\CherryFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\DarkOakFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\FancyFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\FoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\FoliagePlacerType.java
net\minecraft\world\level\levelgen\feature\foliageplacers\MegaJungleFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\MegaPineFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\package-info.java
net\minecraft\world\level\levelgen\feature\foliageplacers\PineFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\RandomSpreadFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\foliageplacers\SpruceFoliagePlacer.java
net\minecraft\world\level\levelgen\feature\rootplacers\AboveRootPlacement.java
net\minecraft\world\level\levelgen\feature\rootplacers\MangroveRootPlacement.java
net\minecraft\world\level\levelgen\feature\rootplacers\MangroveRootPlacer.java
net\minecraft\world\level\levelgen\feature\rootplacers\package-info.java
net\minecraft\world\level\levelgen\feature\rootplacers\RootPlacer.java
net\minecraft\world\level\levelgen\feature\rootplacers\RootPlacerType.java
net\minecraft\world\level\levelgen\feature\stateproviders\BlockStateProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\BlockStateProviderType.java
net\minecraft\world\level\levelgen\feature\stateproviders\DualNoiseProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\NoiseBasedStateProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\NoiseProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\NoiseThresholdProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\package-info.java
net\minecraft\world\level\levelgen\feature\stateproviders\RandomizedIntStateProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\RotatedBlockProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\RuleBasedBlockStateProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\SimpleStateProvider.java
net\minecraft\world\level\levelgen\feature\stateproviders\WeightedStateProvider.java
net\minecraft\world\level\levelgen\feature\treedecorators\AlterGroundDecorator.java
net\minecraft\world\level\levelgen\feature\treedecorators\AttachedToLeavesDecorator.java
net\minecraft\world\level\levelgen\feature\treedecorators\BeehiveDecorator.java
net\minecraft\world\level\levelgen\feature\treedecorators\CocoaDecorator.java
net\minecraft\world\level\levelgen\feature\treedecorators\LeaveVineDecorator.java
net\minecraft\world\level\levelgen\feature\treedecorators\package-info.java
net\minecraft\world\level\levelgen\feature\treedecorators\TreeDecorator.java
net\minecraft\world\level\levelgen\feature\treedecorators\TreeDecoratorType.java
net\minecraft\world\level\levelgen\feature\treedecorators\TrunkVineDecorator.java
net\minecraft\world\level\levelgen\feature\trunkplacers\BendingTrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\CherryTrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\DarkOakTrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\FancyTrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\ForkingTrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\GiantTrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\MegaJungleTrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\package-info.java
net\minecraft\world\level\levelgen\feature\trunkplacers\StraightTrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\TrunkPlacer.java
net\minecraft\world\level\levelgen\feature\trunkplacers\TrunkPlacerType.java
net\minecraft\world\level\levelgen\feature\trunkplacers\UpwardsBranchingTrunkPlacer.java
net\minecraft\world\level\levelgen\flat\FlatLayerInfo.java
net\minecraft\world\level\levelgen\flat\FlatLevelGeneratorPreset.java
net\minecraft\world\level\levelgen\flat\FlatLevelGeneratorPresets.java
net\minecraft\world\level\levelgen\flat\FlatLevelGeneratorSettings.java
net\minecraft\world\level\levelgen\flat\package-info.java
net\minecraft\world\level\levelgen\heightproviders\BiasedToBottomHeight.java
net\minecraft\world\level\levelgen\heightproviders\ConstantHeight.java
net\minecraft\world\level\levelgen\heightproviders\HeightProvider.java
net\minecraft\world\level\levelgen\heightproviders\HeightProviderType.java
net\minecraft\world\level\levelgen\heightproviders\package-info.java
net\minecraft\world\level\levelgen\heightproviders\TrapezoidHeight.java
net\minecraft\world\level\levelgen\heightproviders\UniformHeight.java
net\minecraft\world\level\levelgen\heightproviders\VeryBiasedToBottomHeight.java
net\minecraft\world\level\levelgen\heightproviders\WeightedListHeight.java
net\minecraft\world\level\levelgen\material\MaterialRuleList.java
net\minecraft\world\level\levelgen\material\package-info.java
net\minecraft\world\level\levelgen\material\WorldGenMaterialRule.java
net\minecraft\world\level\levelgen\placement\BiomeFilter.java
net\minecraft\world\level\levelgen\placement\BlockPredicateFilter.java
net\minecraft\world\level\levelgen\placement\CarvingMaskPlacement.java
net\minecraft\world\level\levelgen\placement\CaveSurface.java
net\minecraft\world\level\levelgen\placement\CountOnEveryLayerPlacement.java
net\minecraft\world\level\levelgen\placement\CountPlacement.java
net\minecraft\world\level\levelgen\placement\EnvironmentScanPlacement.java
net\minecraft\world\level\levelgen\placement\HeightmapPlacement.java
net\minecraft\world\level\levelgen\placement\HeightRangePlacement.java
net\minecraft\world\level\levelgen\placement\InSquarePlacement.java
net\minecraft\world\level\levelgen\placement\NoiseBasedCountPlacement.java
net\minecraft\world\level\levelgen\placement\NoiseThresholdCountPlacement.java
net\minecraft\world\level\levelgen\placement\package-info.java
net\minecraft\world\level\levelgen\placement\PlacedFeature.java
net\minecraft\world\level\levelgen\placement\PlacementContext.java
net\minecraft\world\level\levelgen\placement\PlacementFilter.java
net\minecraft\world\level\levelgen\placement\PlacementModifier.java
net\minecraft\world\level\levelgen\placement\PlacementModifierType.java
net\minecraft\world\level\levelgen\placement\RandomOffsetPlacement.java
net\minecraft\world\level\levelgen\placement\RarityFilter.java
net\minecraft\world\level\levelgen\placement\RepeatingPlacement.java
net\minecraft\world\level\levelgen\placement\SurfaceRelativeThresholdFilter.java
net\minecraft\world\level\levelgen\placement\SurfaceWaterDepthFilter.java
net\minecraft\world\level\levelgen\presets\package-info.java
net\minecraft\world\level\levelgen\presets\WorldPreset.java
net\minecraft\world\level\levelgen\presets\WorldPresets.java
net\minecraft\world\level\levelgen\structure\pieces
net\minecraft\world\level\levelgen\structure\placement
net\minecraft\world\level\levelgen\structure\pools
net\minecraft\world\level\levelgen\structure\structures
net\minecraft\world\level\levelgen\structure\templatesystem
net\minecraft\world\level\levelgen\structure\BoundingBox.java
net\minecraft\world\level\levelgen\structure\BuiltinStructures.java
net\minecraft\world\level\levelgen\structure\BuiltinStructureSets.java
net\minecraft\world\level\levelgen\structure\LegacyStructureDataHandler.java
net\minecraft\world\level\levelgen\structure\package-info.java
net\minecraft\world\level\levelgen\structure\PoolElementStructurePiece.java
net\minecraft\world\level\levelgen\structure\PostPlacementProcessor.java
net\minecraft\world\level\levelgen\structure\ScatteredFeaturePiece.java
net\minecraft\world\level\levelgen\structure\SinglePieceStructure.java
net\minecraft\world\level\levelgen\structure\Structure.java
net\minecraft\world\level\levelgen\structure\StructureCheck.java
net\minecraft\world\level\levelgen\structure\StructureCheckResult.java
net\minecraft\world\level\levelgen\structure\StructureFeatureIndexSavedData.java
net\minecraft\world\level\levelgen\structure\StructurePiece.java
net\minecraft\world\level\levelgen\structure\StructurePieceAccessor.java
net\minecraft\world\level\levelgen\structure\StructureSet.java
net\minecraft\world\level\levelgen\structure\StructureSpawnOverride.java
net\minecraft\world\level\levelgen\structure\StructureStart.java
net\minecraft\world\level\levelgen\structure\StructureType.java
net\minecraft\world\level\levelgen\structure\TemplateStructurePiece.java
net\minecraft\world\level\levelgen\structure\TerrainAdjustment.java
net\minecraft\world\level\levelgen\structure\pieces\package-info.java
net\minecraft\world\level\levelgen\structure\pieces\PieceGenerator.java
net\minecraft\world\level\levelgen\structure\pieces\PieceGeneratorSupplier.java
net\minecraft\world\level\levelgen\structure\pieces\PiecesContainer.java
net\minecraft\world\level\levelgen\structure\pieces\StructurePiecesBuilder.java
net\minecraft\world\level\levelgen\structure\pieces\StructurePieceSerializationContext.java
net\minecraft\world\level\levelgen\structure\pieces\StructurePieceType.java
net\minecraft\world\level\levelgen\structure\placement\ConcentricRingsStructurePlacement.java
net\minecraft\world\level\levelgen\structure\placement\package-info.java
net\minecraft\world\level\levelgen\structure\placement\RandomSpreadStructurePlacement.java
net\minecraft\world\level\levelgen\structure\placement\RandomSpreadType.java
net\minecraft\world\level\levelgen\structure\placement\StructurePlacement.java
net\minecraft\world\level\levelgen\structure\placement\StructurePlacementType.java
net\minecraft\world\level\levelgen\structure\pools\alias
net\minecraft\world\level\levelgen\structure\pools\EmptyPoolElement.java
net\minecraft\world\level\levelgen\structure\pools\FeaturePoolElement.java
net\minecraft\world\level\levelgen\structure\pools\JigsawJunction.java
net\minecraft\world\level\levelgen\structure\pools\JigsawPlacement.java
net\minecraft\world\level\levelgen\structure\pools\LegacySinglePoolElement.java
net\minecraft\world\level\levelgen\structure\pools\ListPoolElement.java
net\minecraft\world\level\levelgen\structure\pools\package-info.java
net\minecraft\world\level\levelgen\structure\pools\SinglePoolElement.java
net\minecraft\world\level\levelgen\structure\pools\StructurePoolElement.java
net\minecraft\world\level\levelgen\structure\pools\StructurePoolElementType.java
net\minecraft\world\level\levelgen\structure\pools\StructureTemplatePool.java
net\minecraft\world\level\levelgen\structure\pools\alias\Direct.java
net\minecraft\world\level\levelgen\structure\pools\alias\package-info.java
net\minecraft\world\level\levelgen\structure\pools\alias\PoolAliasBinding.java
net\minecraft\world\level\levelgen\structure\pools\alias\PoolAliasBindings.java
net\minecraft\world\level\levelgen\structure\pools\alias\PoolAliasLookup.java
net\minecraft\world\level\levelgen\structure\pools\alias\Random.java
net\minecraft\world\level\levelgen\structure\pools\alias\RandomGroup.java
net\minecraft\world\level\levelgen\structure\structures\BuriedTreasurePieces.java
net\minecraft\world\level\levelgen\structure\structures\BuriedTreasureStructure.java
net\minecraft\world\level\levelgen\structure\structures\DesertPyramidPiece.java
net\minecraft\world\level\levelgen\structure\structures\DesertPyramidStructure.java
net\minecraft\world\level\levelgen\structure\structures\EndCityPieces.java
net\minecraft\world\level\levelgen\structure\structures\EndCityStructure.java
net\minecraft\world\level\levelgen\structure\structures\IglooPieces.java
net\minecraft\world\level\levelgen\structure\structures\IglooStructure.java
net\minecraft\world\level\levelgen\structure\structures\JigsawStructure.java
net\minecraft\world\level\levelgen\structure\structures\JungleTemplePiece.java
net\minecraft\world\level\levelgen\structure\structures\JungleTempleStructure.java
net\minecraft\world\level\levelgen\structure\structures\MineshaftPieces.java
net\minecraft\world\level\levelgen\structure\structures\MineshaftStructure.java
net\minecraft\world\level\levelgen\structure\structures\NetherFortressPieces.java
net\minecraft\world\level\levelgen\structure\structures\NetherFortressStructure.java
net\minecraft\world\level\levelgen\structure\structures\NetherFossilPieces.java
net\minecraft\world\level\levelgen\structure\structures\NetherFossilStructure.java
net\minecraft\world\level\levelgen\structure\structures\OceanMonumentPieces.java
net\minecraft\world\level\levelgen\structure\structures\OceanMonumentStructure.java
net\minecraft\world\level\levelgen\structure\structures\OceanRuinPieces.java
net\minecraft\world\level\levelgen\structure\structures\OceanRuinStructure.java
net\minecraft\world\level\levelgen\structure\structures\package-info.java
net\minecraft\world\level\levelgen\structure\structures\RuinedPortalPiece.java
net\minecraft\world\level\levelgen\structure\structures\RuinedPortalStructure.java
net\minecraft\world\level\levelgen\structure\structures\ShipwreckPieces.java
net\minecraft\world\level\levelgen\structure\structures\ShipwreckStructure.java
net\minecraft\world\level\levelgen\structure\structures\StrongholdPieces.java
net\minecraft\world\level\levelgen\structure\structures\StrongholdStructure.java
net\minecraft\world\level\levelgen\structure\structures\SwampHutPiece.java
net\minecraft\world\level\levelgen\structure\structures\SwampHutStructure.java
net\minecraft\world\level\levelgen\structure\structures\WoodlandMansionPieces.java
net\minecraft\world\level\levelgen\structure\structures\WoodlandMansionStructure.java
net\minecraft\world\level\levelgen\structure\templatesystem\rule
net\minecraft\world\level\levelgen\structure\templatesystem\AlwaysTrueTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\AxisAlignedLinearPosTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\BlackstoneReplaceProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\BlockAgeProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\BlockIgnoreProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\BlockMatchTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\BlockRotProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\BlockStateMatchTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\CappedProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\GravityProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\JigsawReplacementProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\LavaSubmergedBlockProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\LinearPosTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\NopProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\package-info.java
net\minecraft\world\level\levelgen\structure\templatesystem\PosAlwaysTrueTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\PosRuleTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\PosRuleTestType.java
net\minecraft\world\level\levelgen\structure\templatesystem\ProcessorRule.java
net\minecraft\world\level\levelgen\structure\templatesystem\ProtectedBlockProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\RandomBlockMatchTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\RandomBlockStateMatchTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\RuleProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\RuleTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\RuleTestType.java
net\minecraft\world\level\levelgen\structure\templatesystem\StructurePlaceSettings.java
net\minecraft\world\level\levelgen\structure\templatesystem\StructureProcessor.java
net\minecraft\world\level\levelgen\structure\templatesystem\StructureProcessorList.java
net\minecraft\world\level\levelgen\structure\templatesystem\StructureProcessorType.java
net\minecraft\world\level\levelgen\structure\templatesystem\StructureTemplate.java
net\minecraft\world\level\levelgen\structure\templatesystem\StructureTemplateManager.java
net\minecraft\world\level\levelgen\structure\templatesystem\TagMatchTest.java
net\minecraft\world\level\levelgen\structure\templatesystem\rule\blockentity
net\minecraft\world\level\levelgen\structure\templatesystem\rule\blockentity\AppendLoot.java
net\minecraft\world\level\levelgen\structure\templatesystem\rule\blockentity\AppendStatic.java
net\minecraft\world\level\levelgen\structure\templatesystem\rule\blockentity\Clear.java
net\minecraft\world\level\levelgen\structure\templatesystem\rule\blockentity\package-info.java
net\minecraft\world\level\levelgen\structure\templatesystem\rule\blockentity\Passthrough.java
net\minecraft\world\level\levelgen\structure\templatesystem\rule\blockentity\RuleBlockEntityModifier.java
net\minecraft\world\level\levelgen\structure\templatesystem\rule\blockentity\RuleBlockEntityModifierType.java
net\minecraft\world\level\levelgen\synth\BlendedNoise.java
net\minecraft\world\level\levelgen\synth\ImprovedNoise.java
net\minecraft\world\level\levelgen\synth\NoiseUtils.java
net\minecraft\world\level\levelgen\synth\NormalNoise.java
net\minecraft\world\level\levelgen\synth\package-info.java
net\minecraft\world\level\levelgen\synth\PerlinNoise.java
net\minecraft\world\level\levelgen\synth\PerlinSimplexNoise.java
net\minecraft\world\level\levelgen\synth\SimplexNoise.java
net\minecraft\world\level\lighting\BlockLightEngine.java
net\minecraft\world\level\lighting\BlockLightSectionStorage.java
net\minecraft\world\level\lighting\ChunkSkyLightSources.java
net\minecraft\world\level\lighting\DataLayerStorageMap.java
net\minecraft\world\level\lighting\DynamicGraphMinFixedPoint.java
net\minecraft\world\level\lighting\LayerLightEventListener.java
net\minecraft\world\level\lighting\LayerLightSectionStorage.java
net\minecraft\world\level\lighting\LeveledPriorityQueue.java
net\minecraft\world\level\lighting\LevelLightEngine.java
net\minecraft\world\level\lighting\LightEngine.java
net\minecraft\world\level\lighting\LightEventListener.java
net\minecraft\world\level\lighting\package-info.java
net\minecraft\world\level\lighting\SkyLightEngine.java
net\minecraft\world\level\lighting\SkyLightSectionStorage.java
net\minecraft\world\level\lighting\SpatialLongSet.java
net\minecraft\world\level\material\EmptyFluid.java
net\minecraft\world\level\material\FlowingFluid.java
net\minecraft\world\level\material\Fluid.java
net\minecraft\world\level\material\Fluids.java
net\minecraft\world\level\material\FluidState.java
net\minecraft\world\level\material\FogType.java
net\minecraft\world\level\material\LavaFluid.java
net\minecraft\world\level\material\MapColor.java
net\minecraft\world\level\material\package-info.java
net\minecraft\world\level\material\PushReaction.java
net\minecraft\world\level\material\WaterFluid.java
net\minecraft\world\level\pathfinder\AmphibiousNodeEvaluator.java
net\minecraft\world\level\pathfinder\BinaryHeap.java
net\minecraft\world\level\pathfinder\BlockPathTypes.java
net\minecraft\world\level\pathfinder\FlyNodeEvaluator.java
net\minecraft\world\level\pathfinder\Node.java
net\minecraft\world\level\pathfinder\NodeEvaluator.java
net\minecraft\world\level\pathfinder\package-info.java
net\minecraft\world\level\pathfinder\Path.java
net\minecraft\world\level\pathfinder\PathComputationType.java
net\minecraft\world\level\pathfinder\PathFinder.java
net\minecraft\world\level\pathfinder\SwimNodeEvaluator.java
net\minecraft\world\level\pathfinder\Target.java
net\minecraft\world\level\pathfinder\WalkNodeEvaluator.java
net\minecraft\world\level\portal\package-info.java
net\minecraft\world\level\portal\PortalForcer.java
net\minecraft\world\level\portal\PortalInfo.java
net\minecraft\world\level\portal\PortalShape.java
net\minecraft\world\level\redstone\CollectingNeighborUpdater.java
net\minecraft\world\level\redstone\InstantNeighborUpdater.java
net\minecraft\world\level\redstone\NeighborUpdater.java
net\minecraft\world\level\redstone\package-info.java
net\minecraft\world\level\redstone\Redstone.java
net\minecraft\world\level\saveddata\maps
net\minecraft\world\level\saveddata\package-info.java
net\minecraft\world\level\saveddata\SavedData.java
net\minecraft\world\level\saveddata\maps\MapBanner.java
net\minecraft\world\level\saveddata\maps\MapDecoration.java
net\minecraft\world\level\saveddata\maps\MapFrame.java
net\minecraft\world\level\saveddata\maps\MapIndex.java
net\minecraft\world\level\saveddata\maps\MapItemSavedData.java
net\minecraft\world\level\saveddata\maps\package-info.java
net\minecraft\world\level\storage\loot
net\minecraft\world\level\storage\CommandStorage.java
net\minecraft\world\level\storage\DataVersion.java
net\minecraft\world\level\storage\DerivedLevelData.java
net\minecraft\world\level\storage\DimensionDataStorage.java
net\minecraft\world\level\storage\LevelData.java
net\minecraft\world\level\storage\LevelDataAndDimensions.java
net\minecraft\world\level\storage\LevelResource.java
net\minecraft\world\level\storage\LevelStorageException.java
net\minecraft\world\level\storage\LevelStorageSource.java
net\minecraft\world\level\storage\LevelSummary.java
net\minecraft\world\level\storage\LevelVersion.java
net\minecraft\world\level\storage\package-info.java
net\minecraft\world\level\storage\PlayerDataStorage.java
net\minecraft\world\level\storage\PrimaryLevelData.java
net\minecraft\world\level\storage\ServerLevelData.java
net\minecraft\world\level\storage\WorldData.java
net\minecraft\world\level\storage\WritableLevelData.java
net\minecraft\world\level\storage\loot\entries
net\minecraft\world\level\storage\loot\functions
net\minecraft\world\level\storage\loot\parameters
net\minecraft\world\level\storage\loot\predicates
net\minecraft\world\level\storage\loot\providers
net\minecraft\world\level\storage\loot\BuiltInLootTables.java
net\minecraft\world\level\storage\loot\IntRange.java
net\minecraft\world\level\storage\loot\LootContext.java
net\minecraft\world\level\storage\loot\LootContextUser.java
net\minecraft\world\level\storage\loot\LootDataId.java
net\minecraft\world\level\storage\loot\LootDataManager.java
net\minecraft\world\level\storage\loot\LootDataResolver.java
net\minecraft\world\level\storage\loot\LootDataType.java
net\minecraft\world\level\storage\loot\LootParams.java
net\minecraft\world\level\storage\loot\LootPool.java
net\minecraft\world\level\storage\loot\LootTable.java
net\minecraft\world\level\storage\loot\package-info.java
net\minecraft\world\level\storage\loot\ValidationContext.java
net\minecraft\world\level\storage\loot\entries\AlternativesEntry.java
net\minecraft\world\level\storage\loot\entries\ComposableEntryContainer.java
net\minecraft\world\level\storage\loot\entries\CompositeEntryBase.java
net\minecraft\world\level\storage\loot\entries\DynamicLoot.java
net\minecraft\world\level\storage\loot\entries\EmptyLootItem.java
net\minecraft\world\level\storage\loot\entries\EntryGroup.java
net\minecraft\world\level\storage\loot\entries\LootItem.java
net\minecraft\world\level\storage\loot\entries\LootPoolEntries.java
net\minecraft\world\level\storage\loot\entries\LootPoolEntry.java
net\minecraft\world\level\storage\loot\entries\LootPoolEntryContainer.java
net\minecraft\world\level\storage\loot\entries\LootPoolEntryType.java
net\minecraft\world\level\storage\loot\entries\LootPoolSingletonContainer.java
net\minecraft\world\level\storage\loot\entries\LootTableReference.java
net\minecraft\world\level\storage\loot\entries\package-info.java
net\minecraft\world\level\storage\loot\entries\SequentialEntry.java
net\minecraft\world\level\storage\loot\entries\TagEntry.java
net\minecraft\world\level\storage\loot\functions\ApplyBonusCount.java
net\minecraft\world\level\storage\loot\functions\ApplyExplosionDecay.java
net\minecraft\world\level\storage\loot\functions\CopyBlockState.java
net\minecraft\world\level\storage\loot\functions\CopyNameFunction.java
net\minecraft\world\level\storage\loot\functions\CopyNbtFunction.java
net\minecraft\world\level\storage\loot\functions\EnchantRandomlyFunction.java
net\minecraft\world\level\storage\loot\functions\EnchantWithLevelsFunction.java
net\minecraft\world\level\storage\loot\functions\ExplorationMapFunction.java
net\minecraft\world\level\storage\loot\functions\FillPlayerHead.java
net\minecraft\world\level\storage\loot\functions\FunctionReference.java
net\minecraft\world\level\storage\loot\functions\FunctionUserBuilder.java
net\minecraft\world\level\storage\loot\functions\LimitCount.java
net\minecraft\world\level\storage\loot\functions\LootingEnchantFunction.java
net\minecraft\world\level\storage\loot\functions\LootItemConditionalFunction.java
net\minecraft\world\level\storage\loot\functions\LootItemFunction.java
net\minecraft\world\level\storage\loot\functions\LootItemFunctions.java
net\minecraft\world\level\storage\loot\functions\LootItemFunctionType.java
net\minecraft\world\level\storage\loot\functions\package-info.java
net\minecraft\world\level\storage\loot\functions\SequenceFunction.java
net\minecraft\world\level\storage\loot\functions\SetAttributesFunction.java
net\minecraft\world\level\storage\loot\functions\SetBannerPatternFunction.java
net\minecraft\world\level\storage\loot\functions\SetContainerContents.java
net\minecraft\world\level\storage\loot\functions\SetContainerLootTable.java
net\minecraft\world\level\storage\loot\functions\SetEnchantmentsFunction.java
net\minecraft\world\level\storage\loot\functions\SetInstrumentFunction.java
net\minecraft\world\level\storage\loot\functions\SetItemCountFunction.java
net\minecraft\world\level\storage\loot\functions\SetItemDamageFunction.java
net\minecraft\world\level\storage\loot\functions\SetLoreFunction.java
net\minecraft\world\level\storage\loot\functions\SetNameFunction.java
net\minecraft\world\level\storage\loot\functions\SetNbtFunction.java
net\minecraft\world\level\storage\loot\functions\SetPotionFunction.java
net\minecraft\world\level\storage\loot\functions\SetStewEffectFunction.java
net\minecraft\world\level\storage\loot\functions\SmeltItemFunction.java
net\minecraft\world\level\storage\loot\parameters\LootContextParam.java
net\minecraft\world\level\storage\loot\parameters\LootContextParams.java
net\minecraft\world\level\storage\loot\parameters\LootContextParamSet.java
net\minecraft\world\level\storage\loot\parameters\LootContextParamSets.java
net\minecraft\world\level\storage\loot\parameters\package-info.java
net\minecraft\world\level\storage\loot\predicates\AllOfCondition.java
net\minecraft\world\level\storage\loot\predicates\AnyOfCondition.java
net\minecraft\world\level\storage\loot\predicates\BonusLevelTableCondition.java
net\minecraft\world\level\storage\loot\predicates\CompositeLootItemCondition.java
net\minecraft\world\level\storage\loot\predicates\ConditionReference.java
net\minecraft\world\level\storage\loot\predicates\ConditionUserBuilder.java
net\minecraft\world\level\storage\loot\predicates\DamageSourceCondition.java
net\minecraft\world\level\storage\loot\predicates\EntityHasScoreCondition.java
net\minecraft\world\level\storage\loot\predicates\ExplosionCondition.java
net\minecraft\world\level\storage\loot\predicates\InvertedLootItemCondition.java
net\minecraft\world\level\storage\loot\predicates\LocationCheck.java
net\minecraft\world\level\storage\loot\predicates\LootItemBlockStatePropertyCondition.java
net\minecraft\world\level\storage\loot\predicates\LootItemCondition.java
net\minecraft\world\level\storage\loot\predicates\LootItemConditions.java
net\minecraft\world\level\storage\loot\predicates\LootItemConditionType.java
net\minecraft\world\level\storage\loot\predicates\LootItemEntityPropertyCondition.java
net\minecraft\world\level\storage\loot\predicates\LootItemKilledByPlayerCondition.java
net\minecraft\world\level\storage\loot\predicates\LootItemRandomChanceCondition.java
net\minecraft\world\level\storage\loot\predicates\LootItemRandomChanceWithLootingCondition.java
net\minecraft\world\level\storage\loot\predicates\MatchTool.java
net\minecraft\world\level\storage\loot\predicates\package-info.java
net\minecraft\world\level\storage\loot\predicates\TimeCheck.java
net\minecraft\world\level\storage\loot\predicates\ValueCheckCondition.java
net\minecraft\world\level\storage\loot\predicates\WeatherCheck.java
net\minecraft\world\level\storage\loot\providers\nbt
net\minecraft\world\level\storage\loot\providers\number
net\minecraft\world\level\storage\loot\providers\score
net\minecraft\world\level\storage\loot\providers\nbt\ContextNbtProvider.java
net\minecraft\world\level\storage\loot\providers\nbt\LootNbtProviderType.java
net\minecraft\world\level\storage\loot\providers\nbt\NbtProvider.java
net\minecraft\world\level\storage\loot\providers\nbt\NbtProviders.java
net\minecraft\world\level\storage\loot\providers\nbt\package-info.java
net\minecraft\world\level\storage\loot\providers\nbt\StorageNbtProvider.java
net\minecraft\world\level\storage\loot\providers\number\BinomialDistributionGenerator.java
net\minecraft\world\level\storage\loot\providers\number\ConstantValue.java
net\minecraft\world\level\storage\loot\providers\number\LootNumberProviderType.java
net\minecraft\world\level\storage\loot\providers\number\NumberProvider.java
net\minecraft\world\level\storage\loot\providers\number\NumberProviders.java
net\minecraft\world\level\storage\loot\providers\number\package-info.java
net\minecraft\world\level\storage\loot\providers\number\ScoreboardValue.java
net\minecraft\world\level\storage\loot\providers\number\UniformGenerator.java
net\minecraft\world\level\storage\loot\providers\score\ContextScoreboardNameProvider.java
net\minecraft\world\level\storage\loot\providers\score\FixedScoreboardNameProvider.java
net\minecraft\world\level\storage\loot\providers\score\LootScoreProviderType.java
net\minecraft\world\level\storage\loot\providers\score\package-info.java
net\minecraft\world\level\storage\loot\providers\score\ScoreboardNameProvider.java
net\minecraft\world\level\storage\loot\providers\score\ScoreboardNameProviders.java
net\minecraft\world\level\timers\FunctionCallback.java
net\minecraft\world\level\timers\FunctionTagCallback.java
net\minecraft\world\level\timers\package-info.java
net\minecraft\world\level\timers\TimerCallback.java
net\minecraft\world\level\timers\TimerCallbacks.java
net\minecraft\world\level\timers\TimerQueue.java
net\minecraft\world\level\validation\ContentValidationException.java
net\minecraft\world\level\validation\DirectoryValidator.java
net\minecraft\world\level\validation\ForbiddenSymlinkInfo.java
net\minecraft\world\level\validation\package-info.java
net\minecraft\world\level\validation\PathAllowList.java
net\minecraft\world\phys\shapes
net\minecraft\world\phys\AABB.java
net\minecraft\world\phys\BlockHitResult.java
net\minecraft\world\phys\EntityHitResult.java
net\minecraft\world\phys\HitResult.java
net\minecraft\world\phys\package-info.java
net\minecraft\world\phys\Vec2.java
net\minecraft\world\phys\Vec3.java
net\minecraft\world\phys\shapes\ArrayVoxelShape.java
net\minecraft\world\phys\shapes\BitSetDiscreteVoxelShape.java
net\minecraft\world\phys\shapes\BooleanOp.java
net\minecraft\world\phys\shapes\CollisionContext.java
net\minecraft\world\phys\shapes\CubePointRange.java
net\minecraft\world\phys\shapes\CubeVoxelShape.java
net\minecraft\world\phys\shapes\DiscreteCubeMerger.java
net\minecraft\world\phys\shapes\DiscreteVoxelShape.java
net\minecraft\world\phys\shapes\EntityCollisionContext.java
net\minecraft\world\phys\shapes\IdenticalMerger.java
net\minecraft\world\phys\shapes\IndexMerger.java
net\minecraft\world\phys\shapes\IndirectMerger.java
net\minecraft\world\phys\shapes\NonOverlappingMerger.java
net\minecraft\world\phys\shapes\OffsetDoubleList.java
net\minecraft\world\phys\shapes\package-info.java
net\minecraft\world\phys\shapes\Shapes.java
net\minecraft\world\phys\shapes\SliceShape.java
net\minecraft\world\phys\shapes\SubShape.java
net\minecraft\world\phys\shapes\VoxelShape.java
net\minecraft\world\scores\criteria
net\minecraft\world\scores\DisplaySlot.java
net\minecraft\world\scores\Objective.java
net\minecraft\world\scores\package-info.java
net\minecraft\world\scores\PlayerScoreEntry.java
net\minecraft\world\scores\PlayerScores.java
net\minecraft\world\scores\PlayerTeam.java
net\minecraft\world\scores\ReadOnlyScoreInfo.java
net\minecraft\world\scores\Score.java
net\minecraft\world\scores\ScoreAccess.java
net\minecraft\world\scores\Scoreboard.java
net\minecraft\world\scores\ScoreboardSaveData.java
net\minecraft\world\scores\ScoreHolder.java
net\minecraft\world\scores\Team.java
net\minecraft\world\scores\criteria\ObjectiveCriteria.java
net\minecraft\world\scores\criteria\package-info.java
net\minecraft\world\ticks\BlackholeTickAccess.java
net\minecraft\world\ticks\ContainerSingleItem.java
net\minecraft\world\ticks\LevelChunkTicks.java
net\minecraft\world\ticks\LevelTickAccess.java
net\minecraft\world\ticks\LevelTicks.java
net\minecraft\world\ticks\package-info.java
net\minecraft\world\ticks\ProtoChunkTicks.java
net\minecraft\world\ticks\SavedTick.java
net\minecraft\world\ticks\ScheduledTick.java
net\minecraft\world\ticks\SerializableTickContainer.java
net\minecraft\world\ticks\TickAccess.java
net\minecraft\world\ticks\TickContainerAccess.java
net\minecraft\world\ticks\TickPriority.java
net\minecraft\world\ticks\WorldGenTickAccess.java
net\neoforged\neoforge
net\neoforged\neoforge\attachment
net\neoforged\neoforge\capabilities
net\neoforged\neoforge\client
net\neoforged\neoforge\common
net\neoforged\neoforge\data
net\neoforged\neoforge\energy
net\neoforged\neoforge\entity
net\neoforged\neoforge\event
net\neoforged\neoforge\fluids
net\neoforged\neoforge\forge
net\neoforged\neoforge\gametest
net\neoforged\neoforge\internal
net\neoforged\neoforge\items
net\neoforged\neoforge\logging
net\neoforged\neoforge\network
net\neoforged\neoforge\registries
net\neoforged\neoforge\resource
net\neoforged\neoforge\server
net\neoforged\neoforge\attachment\AttachmentHolder.java
net\neoforged\neoforge\attachment\AttachmentInternals.java
net\neoforged\neoforge\attachment\AttachmentType.java
net\neoforged\neoforge\attachment\IAttachmentComparator.java
net\neoforged\neoforge\attachment\IAttachmentHolder.java
net\neoforged\neoforge\attachment\IAttachmentSerializer.java
net\neoforged\neoforge\capabilities\BaseCapability.java
net\neoforged\neoforge\capabilities\BlockCapability.java
net\neoforged\neoforge\capabilities\BlockCapabilityCache.java
net\neoforged\neoforge\capabilities\Capabilities.java
net\neoforged\neoforge\capabilities\CapabilityHooks.java
net\neoforged\neoforge\capabilities\CapabilityListenerHolder.java
net\neoforged\neoforge\capabilities\CapabilityRegistry.java
net\neoforged\neoforge\capabilities\EntityCapability.java
net\neoforged\neoforge\capabilities\IBlockCapabilityProvider.java
net\neoforged\neoforge\capabilities\ICapabilityInvalidationListener.java
net\neoforged\neoforge\capabilities\ICapabilityProvider.java
net\neoforged\neoforge\capabilities\ItemCapability.java
net\neoforged\neoforge\capabilities\RegisterCapabilitiesEvent.java
net\neoforged\neoforge\client\event
net\neoforged\neoforge\client\extensions
net\neoforged\neoforge\client\gui
net\neoforged\neoforge\client\loading
net\neoforged\neoforge\client\model
net\neoforged\neoforge\client\settings
net\neoforged\neoforge\client\textures
net\neoforged\neoforge\client\BlockEntityRenderBoundsDebugRenderer.java
net\neoforged\neoforge\client\ChunkRenderTypeSet.java
net\neoforged\neoforge\client\ClientCommandHandler.java
net\neoforged\neoforge\client\ClientCommandSourceStack.java
net\neoforged\neoforge\client\ClientHooks.java
net\neoforged\neoforge\client\ClientNeoForgeMod.java
net\neoforged\neoforge\client\ColorResolverManager.java
net\neoforged\neoforge\client\ConfigScreenHandler.java
net\neoforged\neoforge\client\CreativeModeTabSearchRegistry.java
net\neoforged\neoforge\client\DimensionSpecialEffectsManager.java
net\neoforged\neoforge\client\EntitySpectatorShaderManager.java
net\neoforged\neoforge\client\ExtendedServerListData.java
net\neoforged\neoforge\client\FireworkShapeFactoryRegistry.java
net\neoforged\neoforge\client\GlStateBackup.java
net\neoforged\neoforge\client\IArmPoseTransformer.java
net\neoforged\neoforge\client\IItemDecorator.java
net\neoforged\neoforge\client\ItemDecoratorHandler.java
net\neoforged\neoforge\client\NamedRenderTypeManager.java
net\neoforged\neoforge\client\NeoForgeRenderTypes.java
net\neoforged\neoforge\client\PresetEditorManager.java
net\neoforged\neoforge\client\RecipeBookManager.java
net\neoforged\neoforge\client\RenderTypeGroup.java
net\neoforged\neoforge\client\RenderTypeHelper.java
net\neoforged\neoforge\client\StencilManager.java
net\neoforged\neoforge\client\event\sound
net\neoforged\neoforge\client\event\ClientChatEvent.java
net\neoforged\neoforge\client\event\ClientChatReceivedEvent.java
net\neoforged\neoforge\client\event\ClientPlayerChangeGameTypeEvent.java
net\neoforged\neoforge\client\event\ClientPlayerNetworkEvent.java
net\neoforged\neoforge\client\event\ComputeFovModifierEvent.java
net\neoforged\neoforge\client\event\ContainerScreenEvent.java
net\neoforged\neoforge\client\event\CustomizeGuiOverlayEvent.java
net\neoforged\neoforge\client\event\EntityRenderersEvent.java
net\neoforged\neoforge\client\event\InputEvent.java
net\neoforged\neoforge\client\event\ModelEvent.java
net\neoforged\neoforge\client\event\MovementInputUpdateEvent.java
net\neoforged\neoforge\client\event\package-info.java
net\neoforged\neoforge\client\event\RecipesUpdatedEvent.java
net\neoforged\neoforge\client\event\RegisterClientCommandsEvent.java
net\neoforged\neoforge\client\event\RegisterClientReloadListenersEvent.java
net\neoforged\neoforge\client\event\RegisterClientTooltipComponentFactoriesEvent.java
net\neoforged\neoforge\client\event\RegisterColorHandlersEvent.java
net\neoforged\neoforge\client\event\RegisterDimensionSpecialEffectsEvent.java
net\neoforged\neoforge\client\event\RegisterEntitySpectatorShadersEvent.java
net\neoforged\neoforge\client\event\RegisterGuiOverlaysEvent.java
net\neoforged\neoforge\client\event\RegisterItemDecorationsEvent.java
net\neoforged\neoforge\client\event\RegisterKeyMappingsEvent.java
net\neoforged\neoforge\client\event\RegisterNamedRenderTypesEvent.java
net\neoforged\neoforge\client\event\RegisterParticleProvidersEvent.java
net\neoforged\neoforge\client\event\RegisterPresetEditorsEvent.java
net\neoforged\neoforge\client\event\RegisterRecipeBookCategoriesEvent.java
net\neoforged\neoforge\client\event\RegisterShadersEvent.java
net\neoforged\neoforge\client\event\RegisterSpriteSourceTypesEvent.java
net\neoforged\neoforge\client\event\RenderArmEvent.java
net\neoforged\neoforge\client\event\RenderBlockScreenEffectEvent.java
net\neoforged\neoforge\client\event\RenderGuiEvent.java
net\neoforged\neoforge\client\event\RenderGuiOverlayEvent.java
net\neoforged\neoforge\client\event\RenderHandEvent.java
net\neoforged\neoforge\client\event\RenderHighlightEvent.java
net\neoforged\neoforge\client\event\RenderItemInFrameEvent.java
net\neoforged\neoforge\client\event\RenderLevelStageEvent.java
net\neoforged\neoforge\client\event\RenderLivingEvent.java
net\neoforged\neoforge\client\event\RenderNameTagEvent.java
net\neoforged\neoforge\client\event\RenderPlayerEvent.java
net\neoforged\neoforge\client\event\RenderTooltipEvent.java
net\neoforged\neoforge\client\event\ScreenEvent.java
net\neoforged\neoforge\client\event\ScreenshotEvent.java
net\neoforged\neoforge\client\event\TextureAtlasStitchedEvent.java
net\neoforged\neoforge\client\event\ToastAddEvent.java
net\neoforged\neoforge\client\event\ViewportEvent.java
net\neoforged\neoforge\client\event\sound\package-info.java
net\neoforged\neoforge\client\event\sound\PlaySoundEvent.java
net\neoforged\neoforge\client\event\sound\PlaySoundSourceEvent.java
net\neoforged\neoforge\client\event\sound\PlayStreamingSourceEvent.java
net\neoforged\neoforge\client\event\sound\SoundEngineLoadEvent.java
net\neoforged\neoforge\client\event\sound\SoundEvent.java
net\neoforged\neoforge\client\extensions\common
net\neoforged\neoforge\client\extensions\IAbstractWidgetExtension.java
net\neoforged\neoforge\client\extensions\IBakedModelExtension.java
net\neoforged\neoforge\client\extensions\IBlockEntityRendererExtension.java
net\neoforged\neoforge\client\extensions\IDimensionSpecialEffectsExtension.java
net\neoforged\neoforge\client\extensions\IFontExtension.java
net\neoforged\neoforge\client\extensions\IGuiGraphicsExtension.java
net\neoforged\neoforge\client\extensions\IKeyMappingExtension.java
net\neoforged\neoforge\client\extensions\IMinecraftExtension.java
net\neoforged\neoforge\client\extensions\IModelBakerExtension.java
net\neoforged\neoforge\client\extensions\IPoseStackExtension.java
net\neoforged\neoforge\client\extensions\IVertexConsumerExtension.java
net\neoforged\neoforge\client\extensions\package-info.java
net\neoforged\neoforge\client\extensions\common\IClientBlockExtensions.java
net\neoforged\neoforge\client\extensions\common\IClientFluidTypeExtensions.java
net\neoforged\neoforge\client\extensions\common\IClientItemExtensions.java
net\neoforged\neoforge\client\extensions\common\IClientMobEffectExtensions.java
net\neoforged\neoforge\client\gui\overlay
net\neoforged\neoforge\client\gui\widget
net\neoforged\neoforge\client\gui\ClientTooltipComponentManager.java
net\neoforged\neoforge\client\gui\CreativeTabsScreenPage.java
net\neoforged\neoforge\client\gui\LoadingErrorScreen.java
net\neoforged\neoforge\client\gui\ModListScreen.java
net\neoforged\neoforge\client\gui\ModMismatchDisconnectedScreen.java
net\neoforged\neoforge\client\gui\ScreenUtils.java
net\neoforged\neoforge\client\gui\TitleScreenModUpdateIndicator.java
net\neoforged\neoforge\client\gui\overlay\ExtendedGui.java
net\neoforged\neoforge\client\gui\overlay\GuiOverlayManager.java
net\neoforged\neoforge\client\gui\overlay\IGuiOverlay.java
net\neoforged\neoforge\client\gui\overlay\NamedGuiOverlay.java
net\neoforged\neoforge\client\gui\overlay\VanillaGuiOverlay.java
net\neoforged\neoforge\client\gui\widget\ExtendedButton.java
net\neoforged\neoforge\client\gui\widget\ExtendedSlider.java
net\neoforged\neoforge\client\gui\widget\ModListWidget.java
net\neoforged\neoforge\client\gui\widget\ScrollPanel.java
net\neoforged\neoforge\client\gui\widget\UnicodeGlyphButton.java
net\neoforged\neoforge\client\loading\ClientModLoader.java
net\neoforged\neoforge\client\loading\NeoForgeLoadingOverlay.java
net\neoforged\neoforge\client\loading\NoVizFallback.java
net\neoforged\neoforge\client\model\data
net\neoforged\neoforge\client\model\generators
net\neoforged\neoforge\client\model\geometry
net\neoforged\neoforge\client\model\lighting
net\neoforged\neoforge\client\model\obj
net\neoforged\neoforge\client\model\pipeline
net\neoforged\neoforge\client\model\renderable
net\neoforged\neoforge\client\model\BakedModelWrapper.java
net\neoforged\neoforge\client\model\CompositeModel.java
net\neoforged\neoforge\client\model\DynamicFluidContainerModel.java
net\neoforged\neoforge\client\model\ElementsModel.java
net\neoforged\neoforge\client\model\EmptyModel.java
net\neoforged\neoforge\client\model\ExtendedBlockModelDeserializer.java
net\neoforged\neoforge\client\model\ExtraFaceData.java
net\neoforged\neoforge\client\model\IDynamicBakedModel.java
net\neoforged\neoforge\client\model\IModelBuilder.java
net\neoforged\neoforge\client\model\IQuadTransformer.java
net\neoforged\neoforge\client\model\ItemLayerModel.java
net\neoforged\neoforge\client\model\package-info.java
net\neoforged\neoforge\client\model\QuadTransformers.java
net\neoforged\neoforge\client\model\RegistryAwareItemModelShaper.java
net\neoforged\neoforge\client\model\SeparateTransformsModel.java
net\neoforged\neoforge\client\model\SimpleModelState.java
net\neoforged\neoforge\client\model\data\ModelData.java
net\neoforged\neoforge\client\model\data\ModelDataManager.java
net\neoforged\neoforge\client\model\data\ModelProperty.java
net\neoforged\neoforge\client\model\data\MultipartModelData.java
net\neoforged\neoforge\client\model\generators\loaders
net\neoforged\neoforge\client\model\generators\BlockModelBuilder.java
net\neoforged\neoforge\client\model\generators\BlockModelProvider.java
net\neoforged\neoforge\client\model\generators\BlockStateProvider.java
net\neoforged\neoforge\client\model\generators\ConfiguredModel.java
net\neoforged\neoforge\client\model\generators\CustomLoaderBuilder.java
net\neoforged\neoforge\client\model\generators\IGeneratedBlockState.java
net\neoforged\neoforge\client\model\generators\ItemModelBuilder.java
net\neoforged\neoforge\client\model\generators\ItemModelProvider.java
net\neoforged\neoforge\client\model\generators\ModelBuilder.java
net\neoforged\neoforge\client\model\generators\ModelFile.java
net\neoforged\neoforge\client\model\generators\ModelProvider.java
net\neoforged\neoforge\client\model\generators\MultiPartBlockStateBuilder.java
net\neoforged\neoforge\client\model\generators\VariantBlockStateBuilder.java
net\neoforged\neoforge\client\model\generators\loaders\CompositeModelBuilder.java
net\neoforged\neoforge\client\model\generators\loaders\DynamicFluidContainerModelBuilder.java
net\neoforged\neoforge\client\model\generators\loaders\ItemLayerModelBuilder.java
net\neoforged\neoforge\client\model\generators\loaders\ObjModelBuilder.java
net\neoforged\neoforge\client\model\generators\loaders\SeparateTransformsModelBuilder.java
net\neoforged\neoforge\client\model\geometry\BlockGeometryBakingContext.java
net\neoforged\neoforge\client\model\geometry\GeometryLoaderManager.java
net\neoforged\neoforge\client\model\geometry\IGeometryBakingContext.java
net\neoforged\neoforge\client\model\geometry\IGeometryLoader.java
net\neoforged\neoforge\client\model\geometry\IUnbakedGeometry.java
net\neoforged\neoforge\client\model\geometry\SimpleUnbakedGeometry.java
net\neoforged\neoforge\client\model\geometry\StandaloneGeometryBakingContext.java
net\neoforged\neoforge\client\model\geometry\UnbakedGeometryHelper.java
net\neoforged\neoforge\client\model\lighting\FlatQuadLighter.java
net\neoforged\neoforge\client\model\lighting\LightPipelineAwareModelBlockRenderer.java
net\neoforged\neoforge\client\model\lighting\QuadLighter.java
net\neoforged\neoforge\client\model\lighting\SmoothQuadLighter.java
net\neoforged\neoforge\client\model\obj\ObjLoader.java
net\neoforged\neoforge\client\model\obj\ObjMaterialLibrary.java
net\neoforged\neoforge\client\model\obj\ObjModel.java
net\neoforged\neoforge\client\model\obj\ObjTokenizer.java
net\neoforged\neoforge\client\model\obj\package-info.java
net\neoforged\neoforge\client\model\pipeline\package-info.java
net\neoforged\neoforge\client\model\pipeline\QuadBakingVertexConsumer.java
net\neoforged\neoforge\client\model\pipeline\RemappingVertexPipeline.java
net\neoforged\neoforge\client\model\pipeline\TransformingVertexPipeline.java
net\neoforged\neoforge\client\model\pipeline\VertexConsumerWrapper.java
net\neoforged\neoforge\client\model\renderable\BakedModelRenderable.java
net\neoforged\neoforge\client\model\renderable\CompositeRenderable.java
net\neoforged\neoforge\client\model\renderable\IRenderable.java
net\neoforged\neoforge\client\model\renderable\ITextureRenderTypeLookup.java
net\neoforged\neoforge\client\settings\IKeyConflictContext.java
net\neoforged\neoforge\client\settings\KeyConflictContext.java
net\neoforged\neoforge\client\settings\KeyMappingLookup.java
net\neoforged\neoforge\client\settings\KeyModifier.java
net\neoforged\neoforge\client\textures\FluidSpriteCache.java
net\neoforged\neoforge\client\textures\SpriteContentsConstructor.java
net\neoforged\neoforge\client\textures\UnitTextureAtlasSprite.java
net\neoforged\neoforge\common\advancements
net\neoforged\neoforge\common\brewing
net\neoforged\neoforge\common\command
net\neoforged\neoforge\common\conditions
net\neoforged\neoforge\common\crafting
net\neoforged\neoforge\common\data
net\neoforged\neoforge\common\extensions
net\neoforged\neoforge\common\loot
net\neoforged\neoforge\common\property
net\neoforged\neoforge\common\ticket
net\neoforged\neoforge\common\util
net\neoforged\neoforge\common\world
net\neoforged\neoforge\common\BasicItemListing.java
net\neoforged\neoforge\common\BiomeManager.java
net\neoforged\neoforge\common\CommonHooks.java
net\neoforged\neoforge\common\CreativeModeTabRegistry.java
net\neoforged\neoforge\common\DeferredSpawnEggItem.java
net\neoforged\neoforge\common\DungeonHooks.java
net\neoforged\neoforge\common\FarmlandWaterManager.java
net\neoforged\neoforge\common\I18nExtension.java
net\neoforged\neoforge\common\IExtensibleEnum.java
net\neoforged\neoforge\common\IMinecartCollisionHandler.java
net\neoforged\neoforge\common\IPlantable.java
net\neoforged\neoforge\common\IShearable.java
net\neoforged\neoforge\common\LenientUnboundedMapCodec.java
net\neoforged\neoforge\common\ModConfigSpec.java
net\neoforged\neoforge\common\NeoForge.java
net\neoforged\neoforge\common\NeoForgeConfig.java
net\neoforged\neoforge\common\NeoForgeEventHandler.java
net\neoforged\neoforge\common\NeoForgeMod.java
net\neoforged\neoforge\common\PlantType.java
net\neoforged\neoforge\common\SimpleTier.java
net\neoforged\neoforge\common\SoundAction.java
net\neoforged\neoforge\common\SoundActions.java
net\neoforged\neoforge\common\Tags.java
net\neoforged\neoforge\common\TierSortingRegistry.java
net\neoforged\neoforge\common\ToolAction.java
net\neoforged\neoforge\common\ToolActions.java
net\neoforged\neoforge\common\UsernameCache.java
net\neoforged\neoforge\common\VillagerTradingManager.java
net\neoforged\neoforge\common\WorldWorkerManager.java
net\neoforged\neoforge\common\advancements\critereon
net\neoforged\neoforge\common\advancements\critereon\ICustomItemPredicate.java
net\neoforged\neoforge\common\brewing\BrewingRecipe.java
net\neoforged\neoforge\common\brewing\BrewingRecipeRegistry.java
net\neoforged\neoforge\common\brewing\IBrewingRecipe.java
net\neoforged\neoforge\common\brewing\package-info.java
net\neoforged\neoforge\common\brewing\VanillaBrewingRecipe.java
net\neoforged\neoforge\common\command\EntitySelectorManager.java
net\neoforged\neoforge\common\command\IEntitySelectorType.java
net\neoforged\neoforge\common\conditions\AndCondition.java
net\neoforged\neoforge\common\conditions\ConditionalOps.java
net\neoforged\neoforge\common\conditions\ConditionContext.java
net\neoforged\neoforge\common\conditions\FalseCondition.java
net\neoforged\neoforge\common\conditions\ICondition.java
net\neoforged\neoforge\common\conditions\IConditionBuilder.java
net\neoforged\neoforge\common\conditions\ItemExistsCondition.java
net\neoforged\neoforge\common\conditions\ModLoadedCondition.java
net\neoforged\neoforge\common\conditions\NotCondition.java
net\neoforged\neoforge\common\conditions\OrCondition.java
net\neoforged\neoforge\common\conditions\TagEmptyCondition.java
net\neoforged\neoforge\common\conditions\TrueCondition.java
net\neoforged\neoforge\common\conditions\WithConditions.java
net\neoforged\neoforge\common\crafting\CompoundIngredient.java
net\neoforged\neoforge\common\crafting\ConditionalRecipe.java
net\neoforged\neoforge\common\crafting\ConditionalRecipeOutput.java
net\neoforged\neoforge\common\crafting\CraftingHelper.java
net\neoforged\neoforge\common\crafting\DifferenceIngredient.java
net\neoforged\neoforge\common\crafting\IngredientType.java
net\neoforged\neoforge\common\crafting\IntersectionIngredient.java
net\neoforged\neoforge\common\crafting\IRecipeContainer.java
net\neoforged\neoforge\common\crafting\IShapedRecipe.java
net\neoforged\neoforge\common\crafting\package-info.java
net\neoforged\neoforge\common\crafting\PartialNBTIngredient.java
net\neoforged\neoforge\common\crafting\StrictNBTIngredient.java
net\neoforged\neoforge\common\data\internal
net\neoforged\neoforge\common\data\AdvancementProvider.java
net\neoforged\neoforge\common\data\BlockTagsProvider.java
net\neoforged\neoforge\common\data\DatapackBuiltinEntriesProvider.java
net\neoforged\neoforge\common\data\ExistingFileHelper.java
net\neoforged\neoforge\common\data\GlobalLootModifierProvider.java
net\neoforged\neoforge\common\data\JsonCodecProvider.java
net\neoforged\neoforge\common\data\LanguageProvider.java
net\neoforged\neoforge\common\data\package-info.java
net\neoforged\neoforge\common\data\ParticleDescriptionProvider.java
net\neoforged\neoforge\common\data\SoundDefinition.java
net\neoforged\neoforge\common\data\SoundDefinitionsProvider.java
net\neoforged\neoforge\common\data\SpriteSourceProvider.java
net\neoforged\neoforge\common\data\internal\NeoForgeBiomeTagsProvider.java
net\neoforged\neoforge\common\data\internal\NeoForgeBlockTagsProvider.java
net\neoforged\neoforge\common\data\internal\NeoForgeEntityTypeTagsProvider.java
net\neoforged\neoforge\common\data\internal\NeoForgeFluidTagsProvider.java
net\neoforged\neoforge\common\data\internal\NeoForgeItemTagsProvider.java
net\neoforged\neoforge\common\data\internal\NeoForgeLootTableProvider.java
net\neoforged\neoforge\common\data\internal\NeoForgeRecipeProvider.java
net\neoforged\neoforge\common\data\internal\NeoForgeSpriteSourceProvider.java
net\neoforged\neoforge\common\data\internal\package-info.java
net\neoforged\neoforge\common\data\internal\VanillaSoundDefinitionsProvider.java
net\neoforged\neoforge\common\extensions\IAbstractMinecartExtension.java
net\neoforged\neoforge\common\extensions\IAdvancementBuilderExtension.java
net\neoforged\neoforge\common\extensions\IBaseRailBlockExtension.java
net\neoforged\neoforge\common\extensions\IBlockAndTintGetterExtension.java
net\neoforged\neoforge\common\extensions\IBlockEntityExtension.java
net\neoforged\neoforge\common\extensions\IBlockExtension.java
net\neoforged\neoforge\common\extensions\IBlockGetterExtension.java
net\neoforged\neoforge\common\extensions\IBlockStateExtension.java
net\neoforged\neoforge\common\extensions\IBoatExtension.java
net\neoforged\neoforge\common\extensions\IBucketPickupExtension.java
net\neoforged\neoforge\common\extensions\ICommandSourceStackExtension.java
net\neoforged\neoforge\common\extensions\IDispensibleContainerItemExtension.java
net\neoforged\neoforge\common\extensions\IEnchantmentExtension.java
net\neoforged\neoforge\common\extensions\IEntityExtension.java
net\neoforged\neoforge\common\extensions\IFluidExtension.java
net\neoforged\neoforge\common\extensions\IFluidStateExtension.java
net\neoforged\neoforge\common\extensions\IFriendlyByteBufExtension.java
net\neoforged\neoforge\common\extensions\IHolderSetExtension.java
net\neoforged\neoforge\common\extensions\IIntrinsicHolderTagAppenderExtension.java
net\neoforged\neoforge\common\extensions\IItemExtension.java
net\neoforged\neoforge\common\extensions\IItemStackExtension.java
net\neoforged\neoforge\common\extensions\ILevelExtension.java
net\neoforged\neoforge\common\extensions\ILivingEntityExtension.java
net\neoforged\neoforge\common\extensions\IMenuTypeExtension.java
net\neoforged\neoforge\common\extensions\IMobEffectExtension.java
net\neoforged\neoforge\common\extensions\IMobEffectInstanceExtension.java
net\neoforged\neoforge\common\extensions\IPackResourcesExtension.java
net\neoforged\neoforge\common\extensions\IPlayerExtension.java
net\neoforged\neoforge\common\extensions\IRecipeOutputExtension.java
net\neoforged\neoforge\common\extensions\ITagAppenderExtension.java
net\neoforged\neoforge\common\extensions\ITagBuilderExtension.java
net\neoforged\neoforge\common\extensions\ITransformationExtension.java
net\neoforged\neoforge\common\loot\CanToolPerformAction.java
net\neoforged\neoforge\common\loot\IGlobalLootModifier.java
net\neoforged\neoforge\common\loot\LootModifier.java
net\neoforged\neoforge\common\loot\LootModifierManager.java
net\neoforged\neoforge\common\loot\LootTableIdCondition.java
net\neoforged\neoforge\common\property\Properties.java
net\neoforged\neoforge\common\ticket\AABBTicket.java
net\neoforged\neoforge\common\ticket\ChunkTicketManager.java
net\neoforged\neoforge\common\ticket\ITicketGetter.java
net\neoforged\neoforge\common\ticket\ITicketManager.java
net\neoforged\neoforge\common\ticket\SimpleTicket.java
net\neoforged\neoforge\common\util\BlockSnapshot.java
net\neoforged\neoforge\common\util\CenterChunkPosComparator.java
net\neoforged\neoforge\common\util\ConcatenatedListView.java
net\neoforged\neoforge\common\util\DeferredSoundType.java
net\neoforged\neoforge\common\util\DummySavedData.java
net\neoforged\neoforge\common\util\FakePlayer.java
net\neoforged\neoforge\common\util\FakePlayerFactory.java
net\neoforged\neoforge\common\util\HexDumper.java
net\neoforged\neoforge\common\util\INBTSerializable.java
net\neoforged\neoforge\common\util\ITeleporter.java
net\neoforged\neoforge\common\util\ItemStackMap.java
net\neoforged\neoforge\common\util\JsonUtils.java
net\neoforged\neoforge\common\util\Lazy.java
net\neoforged\neoforge\common\util\LogicalSidedProvider.java
net\neoforged\neoforge\common\util\LogMessageAdapter.java
net\neoforged\neoforge\common\util\MavenVersionStringHelper.java
net\neoforged\neoforge\common\util\MutableHashedLinkedMap.java
net\neoforged\neoforge\common\util\NeoForgeExtraCodecs.java
net\neoforged\neoforge\common\util\NonNullConsumer.java
net\neoforged\neoforge\common\util\NonNullFunction.java
net\neoforged\neoforge\common\util\NonNullLazy.java
net\neoforged\neoforge\common\util\NonNullPredicate.java
net\neoforged\neoforge\common\util\NonNullSupplier.java
net\neoforged\neoforge\common\util\RecipeMatcher.java
net\neoforged\neoforge\common\util\Size2i.java
net\neoforged\neoforge\common\util\SortedProperties.java
net\neoforged\neoforge\common\util\TablePrinter.java
net\neoforged\neoforge\common\util\TextTable.java
net\neoforged\neoforge\common\util\TransformationHelper.java
net\neoforged\neoforge\common\util\TriPredicate.java
net\neoforged\neoforge\common\world\chunk
net\neoforged\neoforge\common\world\BiomeGenerationSettingsBuilder.java
net\neoforged\neoforge\common\world\BiomeModifier.java
net\neoforged\neoforge\common\world\BiomeModifiers.java
net\neoforged\neoforge\common\world\BiomeSpecialEffectsBuilder.java
net\neoforged\neoforge\common\world\ClimateSettingsBuilder.java
net\neoforged\neoforge\common\world\MobSpawnSettingsBuilder.java
net\neoforged\neoforge\common\world\ModifiableBiomeInfo.java
net\neoforged\neoforge\common\world\ModifiableStructureInfo.java
net\neoforged\neoforge\common\world\NoneBiomeModifier.java
net\neoforged\neoforge\common\world\NoneStructureModifier.java
net\neoforged\neoforge\common\world\PieceBeardifierModifier.java
net\neoforged\neoforge\common\world\StructureModifier.java
net\neoforged\neoforge\common\world\StructureSettingsBuilder.java
net\neoforged\neoforge\common\world\chunk\ForcedChunkManager.java
net\neoforged\neoforge\common\world\chunk\LoadingValidationCallback.java
net\neoforged\neoforge\common\world\chunk\RegisterTicketControllersEvent.java
net\neoforged\neoforge\common\world\chunk\TicketController.java
net\neoforged\neoforge\common\world\chunk\TicketHelper.java
net\neoforged\neoforge\common\world\chunk\TicketSet.java
net\neoforged\neoforge\data\event
net\neoforged\neoforge\data\loading
net\neoforged\neoforge\data\event\GatherDataEvent.java
net\neoforged\neoforge\data\loading\DatagenModLoader.java
net\neoforged\neoforge\energy\EmptyEnergyStorage.java
net\neoforged\neoforge\energy\EnergyStorage.java
net\neoforged\neoforge\energy\IEnergyStorage.java
net\neoforged\neoforge\entity\IEntityAdditionalSpawnData.java
net\neoforged\neoforge\entity\PartEntity.java
net\neoforged\neoforge\event\brewing
net\neoforged\neoforge\event\enchanting
net\neoforged\neoforge\event\entity
net\neoforged\neoforge\event\furnace
net\neoforged\neoforge\event\level
net\neoforged\neoforge\event\server
net\neoforged\neoforge\event\village
net\neoforged\neoforge\event\AddPackFindersEvent.java
net\neoforged\neoforge\event\AddReloadListenerEvent.java
net\neoforged\neoforge\event\AnvilUpdateEvent.java
net\neoforged\neoforge\event\BuildCreativeModeTabContentsEvent.java
net\neoforged\neoforge\event\CommandEvent.java
net\neoforged\neoforge\event\DifficultyChangeEvent.java
net\neoforged\neoforge\event\EventHooks.java
net\neoforged\neoforge\event\GameShuttingDownEvent.java
net\neoforged\neoforge\event\GrindstoneEvent.java
net\neoforged\neoforge\event\ItemAttributeModifierEvent.java
net\neoforged\neoforge\event\ItemStackedOnOtherEvent.java
net\neoforged\neoforge\event\LootTableLoadEvent.java
net\neoforged\neoforge\event\ModMismatchEvent.java
net\neoforged\neoforge\event\OnDatapackSyncEvent.java
net\neoforged\neoforge\event\PlayLevelSoundEvent.java
net\neoforged\neoforge\event\RegisterCommandsEvent.java
net\neoforged\neoforge\event\RegisterGameTestsEvent.java
net\neoforged\neoforge\event\RegisterStructureConversionsEvent.java
net\neoforged\neoforge\event\ServerChatEvent.java
net\neoforged\neoforge\event\TagsUpdatedEvent.java
net\neoforged\neoforge\event\TickEvent.java
net\neoforged\neoforge\event\VanillaGameEvent.java
net\neoforged\neoforge\event\brewing\PlayerBrewedPotionEvent.java
net\neoforged\neoforge\event\brewing\PotionBrewEvent.java
net\neoforged\neoforge\event\enchanting\EnchantmentLevelSetEvent.java
net\neoforged\neoforge\event\entity\item
net\neoforged\neoforge\event\entity\living
net\neoforged\neoforge\event\entity\player
net\neoforged\neoforge\event\entity\EntityAttributeCreationEvent.java
net\neoforged\neoforge\event\entity\EntityAttributeModificationEvent.java
net\neoforged\neoforge\event\entity\EntityEvent.java
net\neoforged\neoforge\event\entity\EntityJoinLevelEvent.java
net\neoforged\neoforge\event\entity\EntityLeaveLevelEvent.java
net\neoforged\neoforge\event\entity\EntityMobGriefingEvent.java
net\neoforged\neoforge\event\entity\EntityMountEvent.java
net\neoforged\neoforge\event\entity\EntityStruckByLightningEvent.java
net\neoforged\neoforge\event\entity\EntityTeleportEvent.java
net\neoforged\neoforge\event\entity\EntityTravelToDimensionEvent.java
net\neoforged\neoforge\event\entity\ProjectileImpactEvent.java
net\neoforged\neoforge\event\entity\SpawnPlacementRegisterEvent.java
net\neoforged\neoforge\event\entity\item\ItemEvent.java
net\neoforged\neoforge\event\entity\item\ItemExpireEvent.java
net\neoforged\neoforge\event\entity\item\ItemTossEvent.java
net\neoforged\neoforge\event\entity\living\AnimalTameEvent.java
net\neoforged\neoforge\event\entity\living\BabyEntitySpawnEvent.java
net\neoforged\neoforge\event\entity\living\EnderManAngerEvent.java
net\neoforged\neoforge\event\entity\living\LivingAttackEvent.java
net\neoforged\neoforge\event\entity\living\LivingBreatheEvent.java
net\neoforged\neoforge\event\entity\living\LivingChangeTargetEvent.java
net\neoforged\neoforge\event\entity\living\LivingConversionEvent.java
net\neoforged\neoforge\event\entity\living\LivingDamageEvent.java
net\neoforged\neoforge\event\entity\living\LivingDeathEvent.java
net\neoforged\neoforge\event\entity\living\LivingDestroyBlockEvent.java
net\neoforged\neoforge\event\entity\living\LivingDropsEvent.java
net\neoforged\neoforge\event\entity\living\LivingDrownEvent.java
net\neoforged\neoforge\event\entity\living\LivingEntityUseItemEvent.java
net\neoforged\neoforge\event\entity\living\LivingEquipmentChangeEvent.java
net\neoforged\neoforge\event\entity\living\LivingEvent.java
net\neoforged\neoforge\event\entity\living\LivingExperienceDropEvent.java
net\neoforged\neoforge\event\entity\living\LivingFallEvent.java
net\neoforged\neoforge\event\entity\living\LivingGetProjectileEvent.java
net\neoforged\neoforge\event\entity\living\LivingHealEvent.java
net\neoforged\neoforge\event\entity\living\LivingHurtEvent.java
net\neoforged\neoforge\event\entity\living\LivingKnockBackEvent.java
net\neoforged\neoforge\event\entity\living\LivingPackSizeEvent.java
net\neoforged\neoforge\event\entity\living\LivingSwapItemsEvent.java
net\neoforged\neoforge\event\entity\living\LivingUseTotemEvent.java
net\neoforged\neoforge\event\entity\living\LootingLevelEvent.java
net\neoforged\neoforge\event\entity\living\MobEffectEvent.java
net\neoforged\neoforge\event\entity\living\MobSpawnEvent.java
net\neoforged\neoforge\event\entity\living\PotionColorCalculationEvent.java
net\neoforged\neoforge\event\entity\living\ShieldBlockEvent.java
net\neoforged\neoforge\event\entity\living\ZombieEvent.java
net\neoforged\neoforge\event\entity\player\AdvancementEvent.java
net\neoforged\neoforge\event\entity\player\AnvilRepairEvent.java
net\neoforged\neoforge\event\entity\player\ArrowLooseEvent.java
net\neoforged\neoforge\event\entity\player\ArrowNockEvent.java
net\neoforged\neoforge\event\entity\player\AttackEntityEvent.java
net\neoforged\neoforge\event\entity\player\BonemealEvent.java
net\neoforged\neoforge\event\entity\player\CriticalHitEvent.java
net\neoforged\neoforge\event\entity\player\EntityItemPickupEvent.java
net\neoforged\neoforge\event\entity\player\FillBucketEvent.java
net\neoforged\neoforge\event\entity\player\ItemFishedEvent.java
net\neoforged\neoforge\event\entity\player\ItemTooltipEvent.java
net\neoforged\neoforge\event\entity\player\PermissionsChangedEvent.java
net\neoforged\neoforge\event\entity\player\PlayerContainerEvent.java
net\neoforged\neoforge\event\entity\player\PlayerDestroyItemEvent.java
net\neoforged\neoforge\event\entity\player\PlayerEvent.java
net\neoforged\neoforge\event\entity\player\PlayerFlyableFallEvent.java
net\neoforged\neoforge\event\entity\player\PlayerInteractEvent.java
net\neoforged\neoforge\event\entity\player\PlayerNegotiationEvent.java
net\neoforged\neoforge\event\entity\player\PlayerSetSpawnEvent.java
net\neoforged\neoforge\event\entity\player\PlayerSleepInBedEvent.java
net\neoforged\neoforge\event\entity\player\PlayerSpawnPhantomsEvent.java
net\neoforged\neoforge\event\entity\player\PlayerWakeUpEvent.java
net\neoforged\neoforge\event\entity\player\PlayerXpEvent.java
net\neoforged\neoforge\event\entity\player\SleepingLocationCheckEvent.java
net\neoforged\neoforge\event\entity\player\SleepingTimeCheckEvent.java
net\neoforged\neoforge\event\entity\player\TradeWithVillagerEvent.java
net\neoforged\neoforge\event\entity\player\UseItemOnBlockEvent.java
net\neoforged\neoforge\event\furnace\FurnaceFuelBurnTimeEvent.java
net\neoforged\neoforge\event\level\AlterGroundEvent.java
net\neoforged\neoforge\event\level\BlockEvent.java
net\neoforged\neoforge\event\level\ChunkDataEvent.java
net\neoforged\neoforge\event\level\ChunkEvent.java
net\neoforged\neoforge\event\level\ChunkTicketLevelUpdatedEvent.java
net\neoforged\neoforge\event\level\ChunkWatchEvent.java
net\neoforged\neoforge\event\level\ExplosionEvent.java
net\neoforged\neoforge\event\level\LevelEvent.java
net\neoforged\neoforge\event\level\NoteBlockEvent.java
net\neoforged\neoforge\event\level\PistonEvent.java
net\neoforged\neoforge\event\level\SaplingGrowTreeEvent.java
net\neoforged\neoforge\event\level\SleepFinishedTimeEvent.java
net\neoforged\neoforge\event\server\ServerAboutToStartEvent.java
net\neoforged\neoforge\event\server\ServerLifecycleEvent.java
net\neoforged\neoforge\event\server\ServerStartedEvent.java
net\neoforged\neoforge\event\server\ServerStartingEvent.java
net\neoforged\neoforge\event\server\ServerStoppedEvent.java
net\neoforged\neoforge\event\server\ServerStoppingEvent.java
net\neoforged\neoforge\event\village\VillagerTradesEvent.java
net\neoforged\neoforge\event\village\VillageSiegeEvent.java
net\neoforged\neoforge\event\village\WandererTradesEvent.java
net\neoforged\neoforge\fluids\capability
net\neoforged\neoforge\fluids\BaseFlowingFluid.java
net\neoforged\neoforge\fluids\DispenseFluidContainer.java
net\neoforged\neoforge\fluids\FluidActionResult.java
net\neoforged\neoforge\fluids\FluidInteractionRegistry.java
net\neoforged\neoforge\fluids\FluidStack.java
net\neoforged\neoforge\fluids\FluidType.java
net\neoforged\neoforge\fluids\FluidUtil.java
net\neoforged\neoforge\fluids\IFluidBlock.java
net\neoforged\neoforge\fluids\IFluidTank.java
net\neoforged\neoforge\fluids\capability\templates
net\neoforged\neoforge\fluids\capability\wrappers
net\neoforged\neoforge\fluids\capability\IFluidHandler.java
net\neoforged\neoforge\fluids\capability\IFluidHandlerItem.java
net\neoforged\neoforge\fluids\capability\templates\EmptyFluidHandler.java
net\neoforged\neoforge\fluids\capability\templates\FluidHandlerItemStack.java
net\neoforged\neoforge\fluids\capability\templates\FluidHandlerItemStackSimple.java
net\neoforged\neoforge\fluids\capability\templates\FluidTank.java
net\neoforged\neoforge\fluids\capability\templates\VoidFluidHandler.java
net\neoforged\neoforge\fluids\capability\wrappers\BlockWrapper.java
net\neoforged\neoforge\fluids\capability\wrappers\BucketPickupHandlerWrapper.java
net\neoforged\neoforge\fluids\capability\wrappers\FluidBlockWrapper.java
net\neoforged\neoforge\fluids\capability\wrappers\FluidBucketWrapper.java
net\neoforged\neoforge\forge\snapshots
net\neoforged\neoforge\forge\snapshots\ForgeSnapshotsMod.java
net\neoforged\neoforge\forge\snapshots\ForgeSnapshotsModClient.java
net\neoforged\neoforge\gametest\BlockPosValueConverter.java
net\neoforged\neoforge\gametest\GameTestHolder.java
net\neoforged\neoforge\gametest\GameTestHooks.java
net\neoforged\neoforge\gametest\PrefixGameTestTemplate.java
net\neoforged\neoforge\internal\versions
net\neoforged\neoforge\internal\BrandingControl.java
net\neoforged\neoforge\internal\NeoForgeBindings.java
net\neoforged\neoforge\internal\NeoForgeStatesProvider.java
net\neoforged\neoforge\internal\RegistrationEvents.java
net\neoforged\neoforge\internal\TextComponentMessageFormatHandler.java
net\neoforged\neoforge\internal\versions\neoforge
net\neoforged\neoforge\internal\versions\neoform
net\neoforged\neoforge\internal\versions\neoforge\NeoForgeVersion.java
net\neoforged\neoforge\internal\versions\neoform\NeoFormVersion.java
net\neoforged\neoforge\items\wrapper
net\neoforged\neoforge\items\IItemHandler.java
net\neoforged\neoforge\items\IItemHandlerModifiable.java
net\neoforged\neoforge\items\ItemHandlerHelper.java
net\neoforged\neoforge\items\ItemStackHandler.java
net\neoforged\neoforge\items\SlotItemHandler.java
net\neoforged\neoforge\items\VanillaHopperItemHandler.java
net\neoforged\neoforge\items\VanillaInventoryCodeHooks.java
net\neoforged\neoforge\items\wrapper\CombinedInvWrapper.java
net\neoforged\neoforge\items\wrapper\EmptyHandler.java
net\neoforged\neoforge\items\wrapper\EntityArmorInvWrapper.java
net\neoforged\neoforge\items\wrapper\EntityEquipmentInvWrapper.java
net\neoforged\neoforge\items\wrapper\EntityHandsInvWrapper.java
net\neoforged\neoforge\items\wrapper\ForwardingItemHandler.java
net\neoforged\neoforge\items\wrapper\InvWrapper.java
net\neoforged\neoforge\items\wrapper\PlayerArmorInvWrapper.java
net\neoforged\neoforge\items\wrapper\PlayerInvWrapper.java
net\neoforged\neoforge\items\wrapper\PlayerMainInvWrapper.java
net\neoforged\neoforge\items\wrapper\PlayerOffhandInvWrapper.java
net\neoforged\neoforge\items\wrapper\RangedWrapper.java
net\neoforged\neoforge\items\wrapper\RecipeWrapper.java
net\neoforged\neoforge\items\wrapper\ShulkerItemStackInvWrapper.java
net\neoforged\neoforge\items\wrapper\SidedInvWrapper.java
net\neoforged\neoforge\logging\CrashReportExtender.java
net\neoforged\neoforge\logging\PacketDump.java
net\neoforged\neoforge\network\custom
net\neoforged\neoforge\network\event
net\neoforged\neoforge\network\filters
net\neoforged\neoforge\network\simple
net\neoforged\neoforge\network\ConfigSync.java
net\neoforged\neoforge\network\ConnectionData.java
net\neoforged\neoforge\network\ConnectionType.java
net\neoforged\neoforge\network\DualStackUtils.java
net\neoforged\neoforge\network\HandshakeHandler.java
net\neoforged\neoforge\network\HandshakeMessages.java
net\neoforged\neoforge\network\IContainerFactory.java
net\neoforged\neoforge\network\ICustomPacketPayloadWithBuffer.java
net\neoforged\neoforge\network\ICustomQueryPayloadWithBuffer.java
net\neoforged\neoforge\network\INetworkDirection.java
net\neoforged\neoforge\network\LoginNetworkDirection.java
net\neoforged\neoforge\network\LoginWrapper.java
net\neoforged\neoforge\network\MCRegisterPacketHandler.java
net\neoforged\neoforge\network\NetworkConstants.java
net\neoforged\neoforge\network\NetworkEvent.java
net\neoforged\neoforge\network\NetworkHooks.java
net\neoforged\neoforge\network\NetworkInitialization.java
net\neoforged\neoforge\network\NetworkInstance.java
net\neoforged\neoforge\network\NetworkRegistry.java
net\neoforged\neoforge\network\PacketDistributor.java
net\neoforged\neoforge\network\PlayMessages.java
net\neoforged\neoforge\network\PlayNetworkDirection.java
net\neoforged\neoforge\network\ServerStatusPing.java
net\neoforged\neoforge\network\custom\payload
net\neoforged\neoforge\network\custom\payload\SimplePayload.java
net\neoforged\neoforge\network\custom\payload\SimpleQueryPayload.java
net\neoforged\neoforge\network\event\EventNetworkChannel.java
net\neoforged\neoforge\network\filters\CommandTreeCleaner.java
net\neoforged\neoforge\network\filters\NeoForgeConnectionNetworkFilter.java
net\neoforged\neoforge\network\filters\NetworkFilters.java
net\neoforged\neoforge\network\filters\VanillaConnectionNetworkFilter.java
net\neoforged\neoforge\network\filters\VanillaPacketFilter.java
net\neoforged\neoforge\network\filters\VanillaPacketSplitter.java
net\neoforged\neoforge\network\simple\IndexedMessageCodec.java
net\neoforged\neoforge\network\simple\MessageFunctions.java
net\neoforged\neoforge\network\simple\SimpleChannel.java
net\neoforged\neoforge\network\simple\SimpleLoginMessage.java
net\neoforged\neoforge\network\simple\SimpleMessage.java
net\neoforged\neoforge\registries\callback
net\neoforged\neoforge\registries\holdersets
net\neoforged\neoforge\registries\BaseMappedRegistry.java
net\neoforged\neoforge\registries\DataPackRegistriesHooks.java
net\neoforged\neoforge\registries\DataPackRegistryEvent.java
net\neoforged\neoforge\registries\DeferredBlock.java
net\neoforged\neoforge\registries\DeferredHolder.java
net\neoforged\neoforge\registries\DeferredItem.java
net\neoforged\neoforge\registries\DeferredRegister.java
net\neoforged\neoforge\registries\GameData.java
net\neoforged\neoforge\registries\IdMappingEvent.java
net\neoforged\neoforge\registries\IRegistryExtension.java
net\neoforged\neoforge\registries\ModifyRegistriesEvent.java
net\neoforged\neoforge\registries\NeoForgeRegistries.java
net\neoforged\neoforge\registries\NeoForgeRegistriesSetup.java
net\neoforged\neoforge\registries\NeoForgeRegistryCallbacks.java
net\neoforged\neoforge\registries\NewRegistryEvent.java
net\neoforged\neoforge\registries\package-info.java
net\neoforged\neoforge\registries\RegisterEvent.java
net\neoforged\neoforge\registries\RegistryBuilder.java
net\neoforged\neoforge\registries\RegistryManager.java
net\neoforged\neoforge\registries\RegistrySnapshot.java
net\neoforged\neoforge\registries\callback\AddCallback.java
net\neoforged\neoforge\registries\callback\BakeCallback.java
net\neoforged\neoforge\registries\callback\ClearCallback.java
net\neoforged\neoforge\registries\callback\RegistryCallback.java
net\neoforged\neoforge\registries\holdersets\AndHolderSet.java
net\neoforged\neoforge\registries\holdersets\AnyHolderSet.java
net\neoforged\neoforge\registries\holdersets\CompositeHolderSet.java
net\neoforged\neoforge\registries\holdersets\HolderSetType.java
net\neoforged\neoforge\registries\holdersets\ICustomHolderSet.java
net\neoforged\neoforge\registries\holdersets\NotHolderSet.java
net\neoforged\neoforge\registries\holdersets\OrHolderSet.java
net\neoforged\neoforge\resource\ContextAwareReloadListener.java
net\neoforged\neoforge\resource\DelegatingPackResources.java
net\neoforged\neoforge\resource\package-info.java
net\neoforged\neoforge\resource\ResourcePackLoader.java
net\neoforged\neoforge\server\command
net\neoforged\neoforge\server\console
net\neoforged\neoforge\server\loading
net\neoforged\neoforge\server\permission
net\neoforged\neoforge\server\timings
net\neoforged\neoforge\server\LanguageHook.java
net\neoforged\neoforge\server\ServerLifecycleHooks.java
net\neoforged\neoforge\server\command\ChunkGenWorker.java
net\neoforged\neoforge\server\command\CommandHelper.java
net\neoforged\neoforge\server\command\ConfigCommand.java
net\neoforged\neoforge\server\command\DimensionsCommand.java
net\neoforged\neoforge\server\command\EntityCommand.java
net\neoforged\neoforge\server\command\EnumArgument.java
net\neoforged\neoforge\server\command\GenerateCommand.java
net\neoforged\neoforge\server\command\ModIdArgument.java
net\neoforged\neoforge\server\command\ModListCommand.java
net\neoforged\neoforge\server\command\NeoForgeCommand.java
net\neoforged\neoforge\server\command\package-info.java
net\neoforged\neoforge\server\command\TagsCommand.java
net\neoforged\neoforge\server\command\TextComponentHelper.java
net\neoforged\neoforge\server\command\TPSCommand.java
net\neoforged\neoforge\server\command\TrackCommand.java
net\neoforged\neoforge\server\console\ConsoleCommandCompleter.java
net\neoforged\neoforge\server\console\TerminalHandler.java
net\neoforged\neoforge\server\loading\ServerModLoader.java
net\neoforged\neoforge\server\permission\events
net\neoforged\neoforge\server\permission\exceptions
net\neoforged\neoforge\server\permission\handler
net\neoforged\neoforge\server\permission\nodes
net\neoforged\neoforge\server\permission\package-info.java
net\neoforged\neoforge\server\permission\PermissionAPI.java
net\neoforged\neoforge\server\permission\events\PermissionGatherEvent.java
net\neoforged\neoforge\server\permission\exceptions\UnregisteredPermissionException.java
net\neoforged\neoforge\server\permission\handler\DefaultPermissionHandler.java
net\neoforged\neoforge\server\permission\handler\IPermissionHandler.java
net\neoforged\neoforge\server\permission\handler\IPermissionHandlerFactory.java
net\neoforged\neoforge\server\permission\nodes\PermissionDynamicContext.java
net\neoforged\neoforge\server\permission\nodes\PermissionDynamicContextKey.java
net\neoforged\neoforge\server\permission\nodes\PermissionNode.java
net\neoforged\neoforge\server\permission\nodes\PermissionType.java
net\neoforged\neoforge\server\permission\nodes\PermissionTypes.java
net\neoforged\neoforge\server\timings\ObjectTimings.java
net\neoforged\neoforge\server\timings\TimeTracker.java
```

===

We are in the process of migrating the Super Factory Manager (SFM) mod from Minecraft 1.20.2 to 1.20.3.
Some migration steps have been performed manually, but much work remains to be done.
We are in an information gathering stage.
Identify the subset of library files presented above that seem relevant to updating the SFM mod to accommodate the changes between Minecraft versions. 

Your response should be formatted as a markdown document.

Here is a sample of what your response should look like:

===
# Migration Overview

## Capabilities

Capabilities have been reworked. 

```
net\neoforged\neoforge\capabilities\BaseCapability.java
net\neoforged\neoforge\capabilities\BlockCapability.java
net\neoforged\neoforge\capabilities\BlockCapabilityCache.java
net\neoforged\neoforge\capabilities\Capabilities.java
net\neoforged\neoforge\capabilities\CapabilityHooks.java
net\neoforged\neoforge\capabilities\CapabilityListenerHolder.java
net\neoforged\neoforge\capabilities\CapabilityRegistry.java
net\neoforged\neoforge\capabilities\EntityCapability.java
net\neoforged\neoforge\capabilities\IBlockCapabilityProvider.java
net\neoforged\neoforge\capabilities\ICapabilityInvalidationListener.java
net\neoforged\neoforge\capabilities\ICapabilityProvider.java
net\neoforged\neoforge\capabilities\ItemCapability.java
net\neoforged\neoforge\capabilities\RegisterCapabilitiesEvent.java
```

## Recipes

FinishedRecipe no longer exists. Instead, a RecipeProvider with a buildRecipes method must be provided

```
net\neoforged\neoforge\common\util\RecipeMatcher.java
net\neoforged\neoforge\items\wrapper\RecipeWrapper.java
```

## Some other heading

Some explanation

```
some file
another file
```

===

You are expected to provide more sections and more detailed explanations compared to the example.