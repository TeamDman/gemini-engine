
So, you just got access to the Gemini 1.5 Pro API. Congratulations!
Make sure you select the correct cloud project for the API key or it won't work.
You can do it through the console instead of the studio if you're having trouble.
https://console.cloud.google.com/apis/credentials 

Given that this is an API for a million-token context window LLM, there's some leg work to be done.
We need a way to streamline the process of summarizing context.

I've created my gemini-engine github repo to help with this.
The repository contains powershell scripts that together compose a command line environment.

One action that is included is a summary tool.
It shows you the list of files in the project.
You pick a few, and the summary gets written to your clipboard.

Then you can use the create-a-prompt action to paste that summary into a prompt.

Then you use the perform text-only inference action to get the response.

Then you use the view-a-response action to extract the relevant parts from the json and opens it in vscode for viewing.

Problem: the summary tool only works for the gemini engine repo, since that's where the action is ran.

We need actions that help summarize other repos.

This will involve:
- getting a list of locations to summarize
- storing subsets of files of those locations to help update summaries without having to redo the pick operation

I have many git repos spread across my disk.
By adding a command that marks the current directory, we can use normal terminal navigation to build the list of locations.

So, we want an action that puts us in a subshell with a "mark" command that appends the current directory as a new line in locations.txt

Here is a summary of the action system so far
===


#REGION D:\Repos\ml\gemini-engine\actions\Upload a file.ps1
# Get user choice
$filePath = Get-ChildItem -Path files `
| ForEach-Object { $_.Name } `
| fzf

# Overwrite check
if ($cachedFiles.ContainsKey($filePath)) {
  $overwrite = Read-Host "$filePath already exists, overwrite? (y/n)"
  if ($overwrite -ne "y") { continue }
}

# Get mimetype
$fileMimetype = Get-Content .\mimetypes.txt | fzf

# Upload file
$fileUrl = python file_upload.py "files/$filePath" "$fileMimetype"
if ($? -eq $false) {
  Write-Warning "Failed to upload file."
  continue
}

# Update cached data
$cachedFiles[$filePath] = [PSCustomObject]@{
  url = $fileUrl
  mimetype = $fileMimetype
}
$cachedFiles | ConvertTo-Json | Set-Content -Path "files.json"

# Inform the user
Write-Host "Uploaded file and saved the url to the cache."

#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Interactive mode.ps1
while ($true) {
    $chosenFileName = $cachedFiles.Keys | fzf
    if ([string]::IsNullOrEmpty($chosenFileName)) {
        $file = [PSCustomObject]@{
            url = $null
            mimetype = $null
        }
    } else {
        $file = $cachedFiles[$chosenFileName]
    }
    $prompt = Read-Host "Prompt"
    if ([string]::IsNullOrWhiteSpace($prompt)) {
        break
    }
    $payload = [pscustomobject]@{
        prompt = $prompt
        file_url = $file.url
        file_mimetype = $file.mimetype
    }
    python inference.py $($payload | ConvertTo-Json)
    pause
}
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Create a new prompt.ps1
$promptName = Read-Host "Enter a name for the prompt (.txt gets appended)"
$promptName += ".txt"
# Open prompt file in editor
hx prompts/$promptName
# Update cached data
$cachedPrompts += $promptName
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Preview cached files.ps1
$cachedfiles.Keys `
    | ForEach-Object { 
        $entry = $cachedfiles[$_]
        $name = $_
        $url = $entry.url
        $mimetype = $entry.mimetype    
        # format as %-20s %-20s %-20s
        "{0,-20} {1,-20} {2,-64}" -f $name, $mimetype, $url
    } `
    | fzf
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\View a response in VSCode.ps1
# Select response file
$chosenResponseFile = Get-ChildItem -Path responses -Filter "*.json" `
    | Select-Object -ExpandProperty Name `
    | Sort-Object -Descending `
    | fzf --no-sort

# Check if file was selected
if ([string]::IsNullOrEmpty($chosenResponseFile)) {
    Write-Host "No response file selected."
    return
}

# Read response data
$responseData = Get-Content -Raw -Path "responses/$chosenResponseFile" `
    | ConvertFrom-Json

# Extract the "good part"
# (Modify this logic based on the actual response structure)
$extracted = $responseData.response.candidates.content.parts.text

# Open the extracted content in VSCode
$extracted | code -

#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Execute a prompt inference.ps1
# Select file and prompt using fzf
$chosenFileName = $cachedFiles.Keys | fzf --prompt "Select file: " --header "Cached Files"
$file = $cachedFiles[$chosenFileName]
Push-Location prompts
$env:SHELL="pwsh"
$chosenPromptName = fzf --preview "bat {}" --prompt "Select prompt: " --header "Available Prompts"
Pop-Location
# Read prompt content
$prompt = Get-Content -Raw "prompts\$chosenPromptName"
# Prepare payload and call Python script
$payload = [pscustomobject]@{
    prompt = $prompt
    file_url = $file.url
    file_mimetype = $file.mimetype
}
$file = New-TemporaryFile
$payload | ConvertTo-Json | Set-Content -Path $file.FullName
try {
    python inference.py "$($file.FullName)"
} finally {
    Remove-Item -Path $file.FullName
}
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Copy file summary to clipboard.ps1
$choices = Get-ChildItem -Recurse -File | Select-Object -ExpandProperty FullName

$files = @()
while ($true) {
    $chosen = $choices | fzf --multi --bind "ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all" --header "Selection will repeat until Ctrl+C received"
    if ($null -eq $chosen) {
        break
    }
    $files += $chosen
}
$content = $files | ForEach-Object { 
    $content = Get-Content $_ -Raw
    return "
#REGION $($_)
$content
#ENDREGION
"
}
| Out-String
$content | Set-Clipboard
Write-Host "Copied $($files.Count) files to clipboard"
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Load api key from 1password vault.ps1
$env:GEMINI_API_KEY = op read "op://Private/Google AI Studio Gemini API key/credential"
Write-Host "API Key loaded into GEMINI_API_KEY environment variable."
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\feedback\mimetypes.md
https://discord.com/channels/1009525727504384150/1182420115661267085/1222619212577640650

```python
# Prepare file to upload to GenAI File API
file_path = "beans.txt"

# media = MediaFileUpload(file_path, mimetype="application/json")
media = MediaFileUpload(file_path, mimetype=mimetypes.guess_type(file_path)[0])
body = {"file": {"displayName": "A text file"}}

# Upload file
create_file_request = genai_service.media().upload(media_body=media, body=body)
create_file_response = create_file_request.execute()
file_uri = create_file_response["file"]["uri"]
file_mimetype = create_file_response["file"]["mimeType"]
print("Uploaded file: " + file_uri)
```
This works
Uploaded file: https://generativelanguage.googleapis.com/v1beta/files/y...

This fails

```python
# Make Gemini 1.5 API LLM call
prompt = "Describe the contents of the text file"
model = "models/gemini-1.5-pro-latest"
contents = {"contents": [{ 
  "parts":[
    {"text": prompt},
    {"file_data": {"file_uri": file_uri, "mime_type": file_mimetype}}]
}]}
genai_request = genai_service.models().generateContent(model=model, body=contents)
resp = genai_request.execute()
print(len(resp["candidates"]))
```
HttpError: <HttpError 400 when requesting https:...
returned "Request contains an invalid argument.". Details: "Request contains an invalid argument."

the FAQ doc lists image/webp as supported but I received the same error when trying a webp file, mimetypes.py doesn't contain an entry for it from what I can tell so this happens which doesn't prevent the genai_servbice.media().upload from working but it fails at inference time

```python
mimetypes.guess_type("abc.webp")
> (None,None)
```


#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Edit prompts.ps1
$file = $cachedPrompts | fzf --prompt "Select prompt to edit: " --header "Cached Prompts"
hx "prompts\$file"
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Manually set API key.ps1
# Read the secure string
Write-Host -NoNewLine "Enter the API key: "
$secureString = Read-Host -AsSecureString

# Convert SecureString to BSTR (Basic String) and then to a plain text string
$ptr = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureString)
try {
    $plainText = [Runtime.InteropServices.Marshal]::PtrToStringBSTR($ptr)
} finally {
    # Make sure to free the BSTR to prevent memory leaks
    [Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ptr)
}

# Now you can use $plainText as a regular string
# For example, setting it as an environment variable
$ENV:GEMINI_API_KEY = $plainText

# Use the environment variable
Write-Host "Set the API key as an environment variable."
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\actions\Install python dependencies.ps1
pip install -q google-api-python-client google-generativeai
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\README.md
<div align="center">

# Gemini Engine

<img height=500 src="https://cards.scryfall.io/large/front/2/e/2e03e05b-011b-4695-950b-98dd7643b8a0.jpg?1562636055">

Mine
[![Discord](https://img.shields.io/discord/967118679370264627.svg?colorB=7289DA&logo=data:image/png)](https://discord.gg/5mbUY3mu6m)

Google Developer Community
[![Discord](https://img.shields.io/discord/1009525727504384150.svg?colorB=7289DA&logo=data:image/png)](https://discord.gg/google-dev-community)

</div>

A collection of scripts I'm using to interact with the Gemini 1.5 Pro API.

## Leaking API keys

The Google python APIs will include your API key in the error messages.

Clear your cell outputs before committing notebooks to reduce risk of leaking your API key.

## Mimetypes

Sourced from https://www.iana.org/assignments/media-types/media-types.xhtml using

```javascript
copy(Array.from(document.querySelectorAll("td:nth-child(2)")).map(x => x.innerText).join("\n"))
```
#ENDREGION


#REGION D:\Repos\ml\gemini-engine\gemini.ps1
# gemini.ps1

# Load cached data
if (Test-Path -Path .\files.json) {
  $cachedFiles = Get-Content -Path "files.json" | ConvertFrom-Json -AsHashtable
} else {
  $cachedFiles = @{}
}
if (-not (Test-Path -Path .\prompts)) {
  New-Item -ItemType Directory -Path .\prompts | Out-Null
}
$cachedPrompts = Get-ChildItem -Path "prompts/*.txt" | Select-Object -ExpandProperty Name

while ($true) {
  $action = Get-ChildItem -Path actions `
    | Select-Object -ExpandProperty name `
    | Sort-Object -Descending `
    | fzf --prompt "Action: " --header "Select an action to run"
  if ([string]::IsNullOrWhiteSpace($action)) {
    break
  }
  . ".\actions\$action"
  pause
}

#ENDREGION


#REGION D:\Repos\ml\gemini-engine\README.md
<div align="center">

# Gemini Engine

<img height=500 src="https://cards.scryfall.io/large/front/2/e/2e03e05b-011b-4695-950b-98dd7643b8a0.jpg?1562636055">

Mine
[![Discord](https://img.shields.io/discord/967118679370264627.svg?colorB=7289DA&logo=data:image/png)](https://discord.gg/5mbUY3mu6m)

Google Developer Community
[![Discord](https://img.shields.io/discord/1009525727504384150.svg?colorB=7289DA&logo=data:image/png)](https://discord.gg/google-dev-community)

</div>

A collection of scripts I'm using to interact with the Gemini 1.5 Pro API.

## Leaking API keys

The Google python APIs will include your API key in the error messages.

Clear your cell outputs before committing notebooks to reduce risk of leaking your API key.

## Mimetypes

Sourced from https://www.iana.org/assignments/media-types/media-types.xhtml using

```javascript
copy(Array.from(document.querySelectorAll("td:nth-child(2)")).map(x => x.innerText).join("\n"))
```
#ENDREGION

This is the suite of scripts I am using to interact with the Gemini API.
Propose a new action.
Provide an English summary of what it will do.
Propose the file name ending with .ps1, spaces are preferred over other separators.
Provide the implementation.

===

Please create the "Mark dirs of interest.ps1" script.
