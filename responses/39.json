{
    "payload": {
        "prompt": "# Summary\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\SetOperator.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.function.BiPredicate;\r\n\r\npublic enum SetOperator implements ASTNode, BiPredicate<Boolean, List<Boolean>> {\r\n    OVERALL((overall, __) -> overall),\r\n    SOME((__, set) -> set.stream().anyMatch(Boolean::booleanValue)),\r\n    EVERY((__, set) -> set.stream().allMatch(Boolean::booleanValue)),\r\n    ONE((__, set) -> set.stream().filter(Boolean::booleanValue).count() == 1),\r\n    LONE((__, set) -> set.stream().filter(Boolean::booleanValue).count() <= 1);\r\n\r\n    private final BiPredicate<Boolean, List<Boolean>> PRED;\r\n\r\n    SetOperator(BiPredicate<Boolean, List<Boolean>> pred) {\r\n        this.PRED = pred;\r\n    }\r\n\r\n    public static SetOperator from(String text) {\r\n        text = text.toUpperCase(Locale.ROOT);\r\n        if (text.equals(\"EACH\")) {\r\n            text = \"EVERY\";\r\n        }\r\n        return SetOperator.valueOf(text);\r\n    }\r\n\r\n    @Override\r\n    public boolean test(Boolean overall, List<Boolean> counts) {\r\n        return PRED.test(overall, counts);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\TimerTrigger.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\n\r\nimport java.util.List;\r\n\r\npublic record TimerTrigger(\r\n        Interval interval,\r\n        Block block\r\n) implements Trigger {\r\n    @Override\r\n    public Block getBlock() {\r\n        return block;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldTick(ProgramContext context) {\r\n        if (context.getExecutionPolicy() == ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES) return true;\r\n        return context.getManager().getTick() % interval.getTicks() == 0;\r\n    }\r\n\r\n    @Override\r\n    public void tick(ProgramContext context) {\r\n        block.tick(context);\r\n    }\r\n\r\n    @Override\r\n    public List<Statement> getStatements() {\r\n        return List.of(block);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String rtn = \"EVERY \" + interval + \" DO\\n\"\r\n                     + block.toString().indent(1).stripTrailing()\r\n                     + \"\\nEND\";\r\n        return rtn;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\DiskItem.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.item;\r\n\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport ca.teamdman.sfm.client.ProgramSyntaxHighlightingHelper;\r\nimport ca.teamdman.sfm.client.registry.SFMKeyMappings;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.net.ServerboundDiskItemSetProgramPacket;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.nbt.ListTag;\r\nimport net.minecraft.nbt.Tag;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.network.chat.MutableComponent;\r\nimport net.minecraft.network.chat.contents.TranslatableContents;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.InteractionResultHolder;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.TooltipFlag;\r\nimport net.minecraft.world.level.Level;\r\nimport net.neoforged.api.distmarker.Dist;\r\nimport net.neoforged.fml.DistExecutor;\r\nimport net.neoforged.fml.loading.FMLEnvironment;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class DiskItem extends Item {\r\n    public DiskItem() {\r\n        super(new Item.Properties());\r\n    }\r\n\r\n    public static String getProgram(ItemStack stack) {\r\n        return stack\r\n                .getOrCreateTag()\r\n                .getString(\"sfm:program\");\r\n    }\r\n\r\n    public static Optional<Program> updateDetails(ItemStack stack, @Nullable ManagerBlockEntity manager) {\r\n        AtomicReference<Program> rtn = new AtomicReference<>(null);\r\n        Program.compile(\r\n                getProgram(stack),\r\n                (successProgram, builder) -> {\r\n                    setProgramName(stack, successProgram.name());\r\n                    setWarnings(stack, successProgram.gatherWarnings(stack, manager));\r\n                    setErrors(stack, Collections.emptyList());\r\n                    rtn.set(successProgram);\r\n                },\r\n                failure -> {\r\n                    setWarnings(stack, Collections.emptyList());\r\n                    setErrors(stack, failure);\r\n                }\r\n        );\r\n        return Optional.ofNullable(rtn.get());\r\n    }\r\n\r\n    public static void setProgram(ItemStack stack, String program) {\r\n        stack\r\n                .getOrCreateTag()\r\n                .putString(\"sfm:program\", program.replaceAll(\"\\r\", \"\"));\r\n\r\n    }\r\n\r\n    @Override\r\n    public @NotNull InteractionResultHolder<ItemStack> use(Level pLevel, Player pPlayer, InteractionHand pUsedHand) {\r\n        var stack = pPlayer.getItemInHand(pUsedHand);\r\n        if (pLevel.isClientSide) {\r\n            ClientStuff.showProgramEditScreen(\r\n                    stack,\r\n                    programString -> SFMPackets.DISK_ITEM_CHANNEL.sendToServer(new ServerboundDiskItemSetProgramPacket(\r\n                            programString,\r\n                            pUsedHand\r\n                    ))\r\n            );\r\n        }\r\n        return InteractionResultHolder.sidedSuccess(stack, pLevel.isClientSide());\r\n    }\r\n\r\n    public static void setErrors(ItemStack stack, List<TranslatableContents> errors) {\r\n        stack\r\n                .getOrCreateTag()\r\n                .put(\r\n                        \"sfm:errors\",\r\n                        errors\r\n                                .stream()\r\n                                .map(SFMUtils::serializeTranslation)\r\n                                .collect(ListTag::new, ListTag::add, ListTag::addAll)\r\n                );\r\n    }\r\n\r\n\r\n    public static void setWarnings(ItemStack stack, List<TranslatableContents> warnings) {\r\n        stack\r\n                .getOrCreateTag()\r\n                .put(\r\n                        \"sfm:warnings\",\r\n                        warnings\r\n                                .stream()\r\n                                .map(SFMUtils::serializeTranslation)\r\n                                .collect(ListTag::new, ListTag::add, ListTag::addAll)\r\n                );\r\n    }\r\n\r\n\r\n    public static List<TranslatableContents> getErrors(ItemStack stack) {\r\n        return stack\r\n                .getOrCreateTag()\r\n                .getList(\"sfm:errors\", Tag.TAG_COMPOUND)\r\n                .stream()\r\n                .map(CompoundTag.class::cast)\r\n                .map(SFMUtils::deserializeTranslation)\r\n                .toList();\r\n    }\r\n\r\n    public static List<TranslatableContents> getWarnings(ItemStack stack) {\r\n        return stack\r\n                .getOrCreateTag()\r\n                .getList(\"sfm:warnings\", Tag.TAG_COMPOUND)\r\n                .stream()\r\n                .map(CompoundTag.class::cast)\r\n                .map(SFMUtils::deserializeTranslation)\r\n                .collect(\r\n                        Collectors.toList());\r\n    }\r\n\r\n    public static String getProgramName(ItemStack stack) {\r\n        return stack\r\n                .getOrCreateTag()\r\n                .getString(\"sfm:name\");\r\n    }\r\n\r\n    public static void setProgramName(ItemStack stack, String name) {\r\n        if (stack.getItem() instanceof DiskItem) {\r\n            stack\r\n                    .getOrCreateTag()\r\n                    .putString(\"sfm:name\", name);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Component getName(ItemStack stack) {\r\n        if (FMLEnvironment.dist == Dist.CLIENT) {\r\n            if (ClientStuff.isMoreInfoKeyDown()) return super.getName(stack);\r\n        }\r\n        var name = getProgramName(stack);\r\n        if (name.isEmpty()) return super.getName(stack);\r\n        return Component.literal(name).withStyle(ChatFormatting.AQUA);\r\n    }\r\n\r\n    @Override\r\n    public void appendHoverText(\r\n            ItemStack stack, @Nullable Level level, List<Component> list, TooltipFlag detail\r\n    ) {\r\n        if (stack.hasTag()) {\r\n            boolean showProgram = FMLEnvironment.dist.isClient() && ClientStuff.isMoreInfoKeyDown();\r\n            if (!showProgram) {\r\n                list.addAll(LabelPositionHolder.from(stack).asHoverText());\r\n                getErrors(stack)\r\n                        .stream()\r\n                        .map(MutableComponent::create)\r\n                        .map(line -> line.withStyle(ChatFormatting.RED))\r\n                        .forEach(list::add);\r\n                getWarnings(stack)\r\n                        .stream()\r\n                        .map(MutableComponent::create)\r\n                        .map(line -> line.withStyle(ChatFormatting.YELLOW))\r\n                        .forEach(list::add);\r\n                list.add(Constants.LocalizationKeys.GUI_ADVANCED_TOOLTIP_HINT\r\n                                 .getComponent(SFMKeyMappings.MORE_INFO_TOOLTIP_KEY.get().getTranslatedKeyMessage())\r\n                                 .withStyle(ChatFormatting.AQUA));\r\n            } else {\r\n                var program = getProgram(stack);\r\n                if (!program.isEmpty()) {\r\n                    var start = Component.empty();\r\n                    ChatFormatting[] rainbowColors = new ChatFormatting[]{\r\n                            ChatFormatting.DARK_RED,\r\n                            ChatFormatting.RED,\r\n                            ChatFormatting.GOLD,\r\n                            ChatFormatting.YELLOW,\r\n                            ChatFormatting.DARK_GREEN,\r\n                            ChatFormatting.GREEN,\r\n                            ChatFormatting.DARK_AQUA,\r\n                            ChatFormatting.AQUA,\r\n                            ChatFormatting.DARK_BLUE,\r\n                            ChatFormatting.BLUE,\r\n                            ChatFormatting.DARK_PURPLE,\r\n                            ChatFormatting.LIGHT_PURPLE\r\n                    };\r\n                    int rainbowColorsLength = rainbowColors.length;\r\n                    int fullCycleLength = 2 * rainbowColorsLength - 2;\r\n                    for (int i = 0; i < getName(stack).getString().length() - 2; i++) {\r\n                        int cyclePosition = i % fullCycleLength;\r\n                        int adjustedIndex = cyclePosition < rainbowColorsLength\r\n                                            ? cyclePosition\r\n                                            : fullCycleLength - cyclePosition;\r\n                        ChatFormatting color = rainbowColors[adjustedIndex];\r\n                        start = start.append(Component.literal(\"=\").withStyle(color));\r\n                    }\r\n                    list.add(start);\r\n                    list.addAll(ProgramSyntaxHighlightingHelper.withSyntaxHighlighting(program, false));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\jei\\FallingAnvilRecipe.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.jei;\r\n\r\npublic class FallingAnvilRecipe {\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMCreativeTabs.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport net.minecraft.core.registries.Registries;\r\nimport net.minecraft.world.item.CreativeModeTab;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic class SFMCreativeTabs {\r\n    private static final DeferredRegister<CreativeModeTab> CREATIVE_TABS = DeferredRegister.create(\r\n            Registries.CREATIVE_MODE_TAB,\r\n            SFM.MOD_ID\r\n    );\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    public static final Supplier<CreativeModeTab> MAIN_TAB = CREATIVE_TABS.register(\r\n            \"main\",\r\n            () -> CreativeModeTab\r\n                    .builder()\r\n                    .title(Constants.LocalizationKeys.ITEM_GROUP.getComponent())\r\n                    .icon(() -> new ItemStack(SFMBlocks.MANAGER_BLOCK.get()))\r\n                    .displayItems(SFMItems::populateMainCreativeTab)\r\n                    .build()\r\n    );\r\n\r\n    public static void register(IEventBus bus) {\r\n        CREATIVE_TABS.register(bus);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.recipe;\r\n\r\nimport ca.teamdman.sfm.common.registry.SFMRecipeSerializers;\r\nimport com.google.gson.JsonObject;\r\nimport net.minecraft.advancements.AdvancementHolder;\r\nimport net.minecraft.data.recipes.;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.crafting.Ingredient;\r\nimport net.minecraft.world.item.crafting.RecipeSerializer;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\npublic class PrintingPressFinishedRecipe implements FinishedRecipe {\r\n    private final ResourceLocation id;\r\n    private final Ingredient form;\r\n    private final Ingredient ink;\r\n    private final Ingredient paper;\r\n\r\n    public PrintingPressFinishedRecipe(\r\n            ResourceLocation id,\r\n            Ingredient form,\r\n            Ingredient ink,\r\n            Ingredient paper\r\n    ) {\r\n        this.id = id;\r\n        this.form = form;\r\n        this.ink = ink;\r\n        this.paper = paper;\r\n    }\r\n\r\n    @Override\r\n    public void serializeRecipeData(JsonObject json) {\r\n        json.add(\"form\", form.toJson(false));\r\n        json.add(\"ink\", ink.toJson(false));\r\n        json.add(\"paper\", paper.toJson(false));\r\n    }\r\n\r\n    @Override\r\n    public ResourceLocation id() {\r\n        return id;\r\n    }\r\n\r\n    @Override\r\n    public RecipeSerializer<?> type() {\r\n        return SFMRecipeSerializers.PRINTING_PRESS.get();\r\n    }\r\n\r\n    @Override\r\n    public JsonObject serializeRecipe() {\r\n        return FinishedRecipe.super.serializeRecipe();\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public AdvancementHolder advancement() {\r\n        return null;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\gui\\screen\\ProgramTemplatePickerScreen.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.gui.screen;\r\n\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.registry.SFMResourceTypes;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.gui.GuiGraphics;\r\nimport net.minecraft.client.gui.components.Button;\r\nimport net.minecraft.client.gui.screens.Screen;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.network.chat.MutableComponent;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.server.packs.resources.Resource;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.function.Consumer;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ProgramTemplatePickerScreen extends Screen {\r\n    private final Consumer<String> CALLBACK;\r\n\r\n    public ProgramTemplatePickerScreen(Consumer<String> callback) {\r\n        super(Constants.LocalizationKeys.PROGRAM_TEMPLATE_PICKER_GUI_TITLE.getComponent());\r\n        CALLBACK = callback;\r\n    }\r\n\r\n    @Override\r\n    protected void init() {\r\n        super.init();\r\n\r\n        //discover template programs\r\n        var irm = Minecraft.getInstance().getResourceManager();\r\n        Map<ResourceLocation, Resource> found = irm.listResources(\r\n                \"template_programs\",\r\n                (path) -> path.getPath().endsWith(\".sfml\") || path.getPath().endsWith(\".sfm\")\r\n        );\r\n        Map<String, String> templatePrograms = new HashMap<>();\r\n        for (var entry : found.entrySet()) {\r\n            try (BufferedReader reader = entry.getValue().openAsReader()) {\r\n                String program = reader.lines().collect(Collectors.joining(\"\\n\"));\r\n                if (program.contains(\"$REPLACE_RESOURCE_TYPES_HERE$\")) {\r\n                    var replacement = SFMResourceTypes.DEFERRED_TYPES.keySet()\r\n                            .stream()\r\n                            .map(ResourceLocation::getPath)\r\n                            .map(e -> \"INPUT \" + e + \":: FROM a\")\r\n                            .collect(Collectors.joining(\"\\n    \"));\r\n                    program = program.replace(\"$REPLACE_RESOURCE_TYPES_HERE$\", replacement);\r\n                }\r\n                String finalProgram = program;\r\n                Program.compile(\r\n                        program,\r\n                        (successProgram, builder) -> templatePrograms.put(\r\n                                successProgram.name().isBlank() ? entry.getKey().toString() : successProgram.name(),\r\n                                finalProgram\r\n                        ),\r\n                        failure -> templatePrograms.put(entry.getKey().toString(), finalProgram)\r\n                );\r\n            } catch (IOException ignored) {\r\n            }\r\n        }\r\n\r\n        // add picker buttons\r\n        {\r\n            int i = 0;\r\n            int buttonWidth = templatePrograms.keySet()\r\n                                      .stream()\r\n                                      .mapToInt(this.font::width)\r\n                                      .max().orElse(50) + 10;\r\n            int buttonHeight = 20;\r\n            int paddingX = 5;\r\n            int paddingY = 5;\r\n            int buttonsPerRow = this.width / (buttonWidth + paddingX);\r\n            for (var entry : templatePrograms\r\n                    .entrySet()\r\n                    .stream()\r\n                    .sorted((o1, o2) -> Comparator.<String>naturalOrder().compare(o1.getKey(), o2.getKey()))\r\n                    .toList()) {\r\n                int x = (this.width - (buttonWidth + paddingX) * Math.min(buttonsPerRow, templatePrograms.size())) / 2\r\n                        + paddingX\r\n                        + (i % buttonsPerRow) * (\r\n                        buttonWidth\r\n                        + paddingX\r\n                );\r\n                int y = 50 + (i / buttonsPerRow) * (buttonHeight + paddingY);\r\n                addRenderableWidget(\r\n                        Button.builder(\r\n                                        Component.literal(entry.getKey()),\r\n                                        btn -> {\r\n                                            onClose();\r\n                                            CALLBACK.accept(entry.getValue());\r\n                                        }\r\n                                )\r\n                                .pos(x, y)\r\n                                .size(buttonWidth, buttonHeight)\r\n                                .build()\r\n                );\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void render(GuiGraphics graphics, int pMouseX, int pMouseY, float pPartialTick) {\r\n        this.renderTransparentBackground(graphics);\r\n        this.renderTransparentBackground(graphics);\r\n        this.renderTransparentBackground(graphics);\r\n        super.render(graphics, pMouseX, pMouseY, pPartialTick);\r\n        MutableComponent warning1 = Constants.LocalizationKeys.PROGRAM_TEMPLATE_PICKER_GUI_WARNING_1.getComponent();\r\n        graphics.drawString(\r\n                this.font,\r\n                warning1,\r\n                this.width / 2 - this.font.width(warning1) / 2,\r\n                20,\r\n                0xffffff,\r\n                false\r\n        );\r\n        graphics.drawString(\r\n                this.font,\r\n                warning1,\r\n                this.width / 2 - this.font.width(warning1) / 2,\r\n                20,\r\n                0xffffff,\r\n                false\r\n        );\r\n        MutableComponent warning2 = Constants.LocalizationKeys.PROGRAM_TEMPLATE_PICKER_GUI_WARNING_2.getComponent();\r\n        graphics.drawString(\r\n                this.font,\r\n                warning2,\r\n                this.width / 2 - this.font.width(warning2) / 2,\r\n                36,\r\n                0xffffff,\r\n                false\r\n        );\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\RegexCache.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;\r\n\r\nimport java.util.Map;\r\nimport java.util.function.Predicate;\r\nimport java.util.regex.Pattern;\r\n\r\n// Having this logic inside ResourceIdentifier.java causes classloading issues lol\r\npublic class RegexCache {\r\n    private static final Map<String, Predicate<String>> patternCache = new Object2ObjectOpenHashMap<>();\r\n\r\n    static {\r\n        // we want to make common match-all patterns fast\r\n        // resource names are lowercase alphanumeric with underscores\r\n        String[] matchAny = new String[]{\r\n                \".\",\r\n                \"[a-z0-9/._-]\",\r\n                };\r\n        String[] suffixes = new String[]{\"+\", \"*\"};\r\n        for (String s : matchAny) {\r\n            for (String suffix : suffixes) {\r\n                patternCache.put(s + suffix, s1 -> true);\r\n                patternCache.put(\"^\" + s + suffix, s1 -> true);\r\n                patternCache.put(\"^\" + s + suffix + \"$\", s1 -> true);\r\n                patternCache.put(s + suffix + \"$\", s1 -> true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Predicate<String> buildPredicate(String possiblePattern) {\r\n        return isRegexPattern(possiblePattern)\r\n               ? patternCache.computeIfAbsent(possiblePattern, x -> Pattern.compile(x).asMatchPredicate())\r\n               : possiblePattern::equals;\r\n    }\r\n\r\n    public static boolean isRegexPattern(String pattern) {\r\n        String specialChars = \".?*+^$[](){}|\\\\\";\r\n        for (int i = 0; i < pattern.length(); i++) {\r\n            if (specialChars.indexOf(pattern.charAt(i)) >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\render\\FormItemRenderer.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.render;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport ca.teamdman.sfm.common.item.FormItem;\r\nimport com.mojang.blaze3d.vertex.PoseStack;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer;\r\nimport net.minecraft.client.renderer.ItemBlockRenderTypes;\r\nimport net.minecraft.client.renderer.MultiBufferSource;\r\nimport net.minecraft.client.renderer.entity.ItemRenderer;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.ItemDisplayContext;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.neoforged.api.distmarker.Dist;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.client.event.ModelEvent;\r\n\r\n@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD, modid = SFM.MOD_ID, value = Dist.CLIENT)\r\npublic class FormItemRenderer extends BlockEntityWithoutLevelRenderer {\r\n\r\n    private static final ResourceLocation BASE_MODEL = new ResourceLocation(SFM.MOD_ID, \"item/form_base\");\r\n\r\n    public FormItemRenderer() {\r\n        super(Minecraft.getInstance().getBlockEntityRenderDispatcher(), Minecraft.getInstance().getEntityModels());\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void registerModels(ModelEvent.RegisterAdditional event) {\r\n        event.register(BASE_MODEL);\r\n    }\r\n\r\n    // Thanks Shadows\r\n    // https://github.com/Shadows-of-Fire/Hostile-Neural-Networks/blob/1.18/src/main/java/shadows/hostilenetworks/client/DataModelItemStackRenderer.java#L71\r\n    // https://discord.com/channels/313125603924639766/915304642668290119/1029330876208795758\r\n    @Override\r\n    public void renderByItem(\r\n            ItemStack stack,\r\n            ItemDisplayContext transformType,\r\n            PoseStack poseStack,\r\n            MultiBufferSource multiBuffer,\r\n            int packedLight,\r\n            int packedOverlay\r\n    ) {\r\n        if (!(stack.getItem() instanceof FormItem)) return;\r\n        var renderer = Minecraft.getInstance().getItemRenderer();\r\n        var baseModel = renderer.getItemModelShaper().getModelManager().getModel(BASE_MODEL);\r\n        @SuppressWarnings(\"deprecation\")\r\n        var renderType = ItemBlockRenderTypes.getRenderType(stack, true);\r\n        var buffer = ItemRenderer.getFoilBufferDirect(multiBuffer, renderType, true, stack.hasFoil());\r\n        poseStack.pushPose();\r\n\r\n        if (transformType != ItemDisplayContext.FIXED && transformType != ItemDisplayContext.GUI) {\r\n            poseStack.scale(0.5F, 0.5F, 1F);\r\n            poseStack.translate(0.5, 0.5, 0);\r\n//            poseStack.mulPose(Vector3f.YP.rotationDegrees(-65));\r\n        }\r\n\r\n        if (ClientStuff.isMoreInfoKeyDown()) {\r\n            poseStack.pushPose();\r\n            poseStack.translate(0, 0.5f, 0.3f);\r\n            poseStack.scale(0.5f, 0.5f, 0.5f);\r\n            renderer.renderModelLists(baseModel, stack, packedLight, packedOverlay, poseStack, buffer);\r\n            poseStack.popPose();\r\n\r\n            var reference = FormItem.getReference(stack);\r\n            if (!reference.isEmpty()) {\r\n                var model = renderer.getItemModelShaper().getItemModel(reference.getItem());\r\n                if (model != null) {\r\n                    renderer.renderModelLists(model, stack, packedLight, packedOverlay, poseStack, buffer);\r\n                }\r\n            }\r\n        } else {\r\n            renderer.renderModelLists(baseModel, stack, packedLight, packedOverlay, poseStack, buffer);\r\n        }\r\n\r\n        poseStack.popPose();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMResourceTypes.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.compat.SFMCompat;\r\nimport ca.teamdman.sfm.common.resourcetype.FluidResourceType;\r\nimport ca.teamdman.sfm.common.resourcetype.ForgeEnergyResourceType;\r\nimport ca.teamdman.sfm.common.resourcetype.ItemResourceType;\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;\r\nimport net.minecraft.core.Registry;\r\nimport net.minecraft.resources.ResourceKey;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.material.Fluid;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.neoforge.energy.IEnergyStorage;\r\nimport net.neoforged.neoforge.fluids.FluidStack;\r\nimport net.neoforged.neoforge.fluids.capability.IFluidHandler;\r\nimport net.neoforged.neoforge.items.IItemHandler;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\nimport net.neoforged.neoforge.registries.RegistryBuilder;\r\n\r\nimport java.util.Objects;\r\nimport java.util.function.Supplier;\r\n\r\npublic class SFMResourceTypes {\r\n    public static final ResourceKey<Registry<ResourceType<?, ?, ?>>> REGISTRY_ID = ResourceKey.createRegistryKey(new ResourceLocation(\r\n            SFM.MOD_ID,\r\n            \"resource_type\"\r\n    ));\r\n\r\n    private static final DeferredRegister<ResourceType<?, ?, ?>> RESOURCE_TYPES = DeferredRegister.create(\r\n            REGISTRY_ID,\r\n            SFM.MOD_ID\r\n    );\r\n\r\n    public static final Registry<ResourceType<?, ?, ?>> DEFERRED_TYPES = RESOURCE_TYPES.makeRegistry(\r\n            registryBuilder->{});\r\n\r\n    public static final Supplier<ResourceType<ItemStack, Item, IItemHandler>> ITEM = RESOURCE_TYPES.register(\r\n            \"item\",\r\n            ItemResourceType::new\r\n    );\r\n    public static final Supplier<ResourceType<FluidStack, Fluid, IFluidHandler>> FLUID = RESOURCE_TYPES.register(\r\n            \"fluid\",\r\n            FluidResourceType::new\r\n    );\r\n    public static final Supplier<ResourceType<Integer, Class<Integer>, IEnergyStorage>> FORGE_ENERGY = RESOURCE_TYPES.register(\r\n            \"forge_energy\",\r\n            ForgeEnergyResourceType::new\r\n    );\r\n\r\n    private static final Int2ObjectArrayMap<ResourceType<?, ?, ?>> DEFERRED_TYPES_BY_ID = new Int2ObjectArrayMap<>();\r\n\r\n    public static ResourceType<?, ?, ?> fastLookup(String resourceTypeNamespace, String resourceTypeName) {\r\n//        return DEFERRED_TYPES.get().getValue(new ResourceLocation(resourceTypeNamespace, resourceTypeName));\r\n        return Objects.requireNonNull(DEFERRED_TYPES_BY_ID.computeIfAbsent(\r\n                resourceTypeNamespace.hashCode() ^ resourceTypeName.hashCode(),\r\n                i -> DEFERRED_TYPES.get(new ResourceLocation(resourceTypeNamespace, resourceTypeName))\r\n        ));\r\n    }\r\n\r\n    static {\r\n        if (SFMCompat.isMekanismLoaded()) {\r\n//            ca.teamdman.sfm.common.compat.SFMMekanismCompat.register(RESOURCE_TYPES);\r\n        }\r\n    }\r\n\r\n    public static void register(IEventBus bus) {\r\n        RESOURCE_TYPES.register(bus);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\LimitedOutputSlotObjectPool.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n/**\r\n * A pool of {@link LimitedOutputSlot} objects to avoid the garbage collector\r\n * <p>\r\n * This assumes that the pool will be used in a single thread.\r\n */\r\npublic class LimitedOutputSlotObjectPool {\r\n    public static final LimitedOutputSlotObjectPool INSTANCE = new LimitedOutputSlotObjectPool();\r\n    @SuppressWarnings(\"rawtypes\")\r\n    private LimitedOutputSlot[] pool = new LimitedOutputSlot[1];\r\n    private int index = -1;\r\n\r\n    /**\r\n     * Acquire a {@link LimitedOutputSlot} from the pool, or creates a new one if none available\r\n     */\r\n    public <STACK, ITEM, CAP> LimitedOutputSlot<STACK, ITEM, CAP> acquire(\r\n            CAP handler,\r\n            int slot,\r\n            OutputResourceTracker<STACK, ITEM, CAP> tracker\r\n    ) {\r\n        if (index == -1) {\r\n            return new LimitedOutputSlot<>(handler, slot, tracker);\r\n        } else {\r\n            @SuppressWarnings(\"unchecked\") LimitedOutputSlot<STACK, ITEM, CAP> obj = pool[index];\r\n            index--;\r\n            obj.init(handler, slot, tracker);\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release a {@link LimitedOutputSlot} back into the pool for it to be reused instead of garbage collected\r\n     */\r\n    public void release(LimitedOutputSlot<?, ?, ?> obj) {\r\n        if (index == pool.length - 1) {\r\n            // we need to grow the array\r\n            pool = Arrays.copyOf(pool, pool.length * 2);\r\n        }\r\n        pool[++index] = obj;\r\n    }\r\n\r\n    /**\r\n     * Release a {@link LimitedOutputSlot} back into the pool for it to be reused instead of garbage collected\r\n     */\r\n    @SuppressWarnings(\"rawtypes\")\r\n    public void release(List<LimitedOutputSlot> slots) {\r\n        // handle resizing\r\n        if (index + slots.size() >= pool.length) {\r\n            int slotsFree = pool.length - index - 1;\r\n            int newLength = pool.length + slots.size() - slotsFree;\r\n            pool = Arrays.copyOf(pool, newLength);\r\n        }\r\n        // add to pool\r\n        for (LimitedOutputSlot<?, ?, ?> slot : slots) {\r\n            index++;\r\n            pool[index] = slot;\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ForgeEnergyResourceType.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.resourcetype;\r\n\r\nimport net.minecraft.core.Registry;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\nimport net.neoforged.neoforge.energy.IEnergyStorage;\r\nimport org.apache.commons.lang3.NotImplementedException;\r\n\r\npublic class ForgeEnergyResourceType extends ResourceType<Integer, Class<Integer>, IEnergyStorage> {\r\n    public ForgeEnergyResourceType() {\r\n        super(Capabilities.ENERGY);\r\n    }\r\n\r\n    @Override\r\n    public long getAmount(Integer integer) {\r\n        return integer;\r\n    }\r\n\r\n    @Override\r\n    public Integer getStackInSlot(IEnergyStorage iEnergyStorage, int slot) {\r\n        return iEnergyStorage.getEnergyStored();\r\n    }\r\n\r\n    @Override\r\n    public Integer extract(IEnergyStorage iEnergyStorage, int slot, long amount, boolean simulate) {\r\n        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;\r\n        return iEnergyStorage.extractEnergy(finalAmount, simulate);\r\n    }\r\n\r\n    @Override\r\n    public int getSlots(IEnergyStorage handler) {\r\n        return 1;\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(Integer integer) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(IEnergyStorage iEnergyStorage, int slot) {\r\n        return iEnergyStorage.getMaxEnergyStored();\r\n    }\r\n\r\n    @Override\r\n    public Integer insert(IEnergyStorage iEnergyStorage, int slot, Integer integer, boolean simulate) {\r\n        return integer - iEnergyStorage.receiveEnergy(integer, simulate);\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(Integer integer) {\r\n        return integer == 0;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesStackType(Object o) {\r\n        return o instanceof Integer;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesCapabilityType(Object o) {\r\n        return o instanceof IEnergyStorage;\r\n    }\r\n\r\n    @Override\r\n    public Integer getEmptyStack() {\r\n        return 0;\r\n    }\r\n\r\n    public static final ResourceLocation REGISTRY_KEY = new ResourceLocation(\"forge\", \"energy\");\r\n\r\n    @Override\r\n    public ResourceLocation getRegistryKey(Integer integer) {\r\n        return REGISTRY_KEY;\r\n    }\r\n\r\n    @Override\r\n    public Registry<Class<Integer>> getRegistry() {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    @Override\r\n    public boolean registryKeyExists(ResourceLocation location) {\r\n        return location.equals(REGISTRY_KEY);\r\n    }\r\n\r\n    @Override\r\n    public Class<Integer> getItem(Integer integer) {\r\n        return Integer.class;\r\n    }\r\n\r\n    @Override\r\n    public Integer copy(Integer integer) {\r\n        return integer;\r\n    }\r\n\r\n    @Override\r\n    protected Integer setCount(Integer integer, long amount) {\r\n        return amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\exclude\\InfuseResourceType.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.resourcetype.exclude;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport mekanism.api.Action;\r\nimport mekanism.api.MekanismAPI;\r\nimport mekanism.api.chemical.infuse.IInfusionHandler;\r\nimport mekanism.api.chemical.infuse.InfuseType;\r\nimport mekanism.api.chemical.infuse.InfusionStack;\r\nimport net.minecraft.core.Registry;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.capabilities.CapabilityManager;\r\nimport net.neoforged.neoforge.common.capabilities.CapabilityToken;\r\nimport org.apache.commons.lang3.NotImplementedException;\r\n\r\npublic class InfuseResourceType extends ResourceType<InfusionStack, InfuseType, IInfusionHandler> {\r\n    public static final Capability<IInfusionHandler> CAP = CapabilityManager.get(new CapabilityToken<>() {\r\n    });\r\n\r\n    public InfuseResourceType() {\r\n        super(CAP);\r\n    }\r\n\r\n    @Override\r\n    public long getAmount(InfusionStack stack) {\r\n        return stack.getAmount();\r\n    }\r\n\r\n    @Override\r\n    public InfusionStack getStackInSlot(IInfusionHandler handler, int slot) {\r\n        return handler.getChemicalInTank(slot);\r\n    }\r\n\r\n    @Override\r\n    public InfusionStack extract(IInfusionHandler handler, int slot, long amount, boolean simulate) {\r\n        return handler.extractChemical(slot, amount, simulate ? Action.SIMULATE : Action.EXECUTE);\r\n    }\r\n\r\n    @Override\r\n    public int getSlots(IInfusionHandler handler) {\r\n        return handler.getTanks();\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(InfusionStack stack) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(IInfusionHandler handler, int slot) {\r\n        return handler.getTankCapacity(slot);\r\n    }\r\n\r\n    @Override\r\n    public InfusionStack insert(\r\n            IInfusionHandler handler,\r\n            int slot,\r\n            InfusionStack stack,\r\n            boolean simulate\r\n    ) {\r\n        return handler.insertChemical(slot, stack, simulate ? Action.SIMULATE : Action.EXECUTE);\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(InfusionStack stack) {\r\n        return stack.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public InfusionStack getEmptyStack() {\r\n        return InfusionStack.EMPTY;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesStackType(Object o) {\r\n        return o instanceof InfusionStack;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesCapabilityType(Object o) {\r\n        return o instanceof IInfusionHandler;\r\n    }\r\n\r\n\r\n    @Override\r\n    public Registry<InfuseType> getRegistry() {\r\n        throw new NotImplementedException();\r\n//        return MekanismAPI.infuseTypeRegistry();\r\n    }\r\n\r\n    @Override\r\n    public InfuseType getItem(InfusionStack stack) {\r\n        return stack.getType();\r\n    }\r\n\r\n    @Override\r\n    public InfusionStack copy(InfusionStack stack) {\r\n        return stack.copy();\r\n    }\r\n\r\n    @Override\r\n    protected InfusionStack setCount(InfusionStack stack, long amount) {\r\n        stack.setAmount(amount);\r\n        return stack;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ClientboundOutputInspectionResultsPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ClientboundOutputInspectionResultsPacket(\r\n        String results\r\n) {\r\n    public static final int MAX_RESULTS_LENGTH = 10240;\r\n\r\n    public static void encode(\r\n            ClientboundOutputInspectionResultsPacket msg, FriendlyByteBuf friendlyByteBuf\r\n    ) {\r\n        friendlyByteBuf.writeUtf(msg.results(), MAX_RESULTS_LENGTH);\r\n    }\r\n\r\n    public static ClientboundOutputInspectionResultsPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ClientboundOutputInspectionResultsPacket(\r\n                friendlyByteBuf.readUtf(MAX_RESULTS_LENGTH)\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ClientboundOutputInspectionResultsPacket msg, NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> ClientStuff.showProgramEditScreen(msg.results, next -> {\r\n        }));\r\n        context.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Side.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\npublic enum Side implements ASTNode {\r\n    TOP,\r\n    BOTTOM,\r\n    NORTH,\r\n    SOUTH,\r\n    EAST,\r\n    WEST\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Number.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\npublic record Number(long value) implements ASTNode {\r\n    @Override\r\n    public String toString() {\r\n        return String.valueOf(value);\r\n    }\r\n\r\n    public Number add(Number number) {\r\n        return new Number(value + number.value);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ResourceLimit.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.InputResourceTracker;\r\nimport ca.teamdman.sfm.common.program.OutputResourceTracker;\r\n\r\nimport java.util.concurrent.atomic.AtomicLong;\r\nimport java.util.function.Consumer;\r\nimport java.util.function.Predicate;\r\n\r\nimport static ca.teamdman.sfml.ast.ResourceQuantity.IdExpansionBehaviour.EXPAND;\r\nimport static ca.teamdman.sfml.ast.ResourceQuantity.IdExpansionBehaviour.NO_EXPAND;\r\n\r\npublic record ResourceLimit<STACK, ITEM, CAP>(\r\n        ResourceIdentifier<STACK, ITEM, CAP> resourceId,\r\n        Limit limit\r\n) implements ASTNode, Predicate<Object> {\r\n    public static final ResourceLimit<?, ?, ?> TAKE_ALL_LEAVE_NONE = new ResourceLimit<>(\r\n            ResourceIdentifier.MATCH_ALL, Limit.MAX_QUANTITY_NO_RETENTION\r\n    );\r\n    public static final ResourceLimit<?, ?, ?> ACCEPT_ALL_WITHOUT_RESTRAINT = new ResourceLimit<>(\r\n            ResourceIdentifier.MATCH_ALL, Limit.MAX_QUANTITY_MAX_RETENTION\r\n    );\r\n\r\n    public ResourceLimit<STACK, ITEM, CAP> withDefaults(Limit defaults) {\r\n        return new ResourceLimit<>(resourceId, limit.withDefaults(defaults));\r\n    }\r\n\r\n    public ResourceLimit<STACK, ITEM, CAP> withLimit(Limit limit) {\r\n        return new ResourceLimit<>(resourceId, limit);\r\n    }\r\n\r\n    public void gatherInputTrackers(Consumer<InputResourceTracker<?, ?, ?>> gatherer, ResourceIdSet exclusions) {\r\n        if (limit.quantity().idExpansionBehaviour() == NO_EXPAND) {\r\n            if (limit.retention().idExpansionBehaviour() == NO_EXPAND) {\r\n                // no sharing, single tracker\r\n                gatherer.accept(new InputResourceTracker<>(\r\n                        this,\r\n                        exclusions,\r\n                        new AtomicLong(0),\r\n                        new AtomicLong(0)\r\n                ));\r\n            } else if (limit.retention().idExpansionBehaviour() == EXPAND) {\r\n                // expand retention\r\n                // share quantity\r\n                AtomicLong quantity = new AtomicLong(0);\r\n                resourceId\r\n                        .expand()\r\n                        .forEach(rid -> gatherer.accept(new InputResourceTracker<>(\r\n                                new ResourceLimit<>(rid, limit),\r\n                                exclusions,\r\n                                quantity,\r\n                                new AtomicLong(0)\r\n                        )));\r\n            }\r\n        } else if (limit.quantity().idExpansionBehaviour() == EXPAND) {\r\n            if (limit.retention().idExpansionBehaviour() == NO_EXPAND) {\r\n                // expand quantity\r\n                // share retention\r\n                AtomicLong retention = new AtomicLong(0);\r\n                resourceId\r\n                        .expand()\r\n                        .forEach(rid -> gatherer.accept(new InputResourceTracker<>(\r\n                                new ResourceLimit<>(rid, limit),\r\n                                exclusions,\r\n                                new AtomicLong(0),\r\n                                retention\r\n                        )));\r\n            } else if (limit.retention().idExpansionBehaviour() == EXPAND) {\r\n                // no sharing, multiple trackers\r\n                resourceId\r\n                        .expand()\r\n                        .forEach(rid -> gatherer.accept(new InputResourceTracker<>(\r\n                                new ResourceLimit<>(rid, limit),\r\n                                exclusions,\r\n                                new AtomicLong(0),\r\n                                new AtomicLong(0)\r\n                        )));\r\n            }\r\n        }\r\n    }\r\n\r\n    public void gatherOutputTrackers(Consumer<OutputResourceTracker<?, ?, ?>> gatherer, ResourceIdSet exclusions) {\r\n        if (limit.quantity().idExpansionBehaviour() == NO_EXPAND) {\r\n            if (limit.retention().idExpansionBehaviour() == NO_EXPAND) {\r\n                // single tracker\r\n                gatherer.accept(new OutputResourceTracker<>(this, exclusions, new AtomicLong(0), new AtomicLong(0)));\r\n            } else if (limit.retention().idExpansionBehaviour() == EXPAND) {\r\n                // tracker for each retention, sharing quantity\r\n                AtomicLong quantity = new AtomicLong(0);\r\n                resourceId\r\n                        .expand()\r\n                        .forEach(rid -> gatherer.accept(new OutputResourceTracker<>(\r\n                                new ResourceLimit<>(rid, limit),\r\n                                exclusions,\r\n                                quantity,\r\n                                new AtomicLong(0)\r\n                        )));\r\n            }\r\n        } else if (limit.quantity().idExpansionBehaviour() == EXPAND) {\r\n            if (limit.retention().idExpansionBehaviour() == NO_EXPAND) {\r\n                // tracker for each quantity, sharing retention\r\n                AtomicLong retained = new AtomicLong(0);\r\n                resourceId\r\n                        .expand()\r\n                        .forEach(rid -> gatherer.accept(new OutputResourceTracker<>(\r\n                                new ResourceLimit<>(rid, limit),\r\n                                exclusions,\r\n                                new AtomicLong(0),\r\n                                retained\r\n                        )));\r\n            } else if (limit.retention().idExpansionBehaviour() == EXPAND) {\r\n                // expand both quantity and retention, no sharing\r\n                resourceId\r\n                        .expand()\r\n                        .forEach(rid -> gatherer.accept(new OutputResourceTracker<>(\r\n                                new ResourceLimit<>(rid, limit),\r\n                                exclusions,\r\n                                new AtomicLong(0),\r\n                                new AtomicLong(0)\r\n                        )));\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean test(Object stack) {\r\n        return resourceId.test(stack);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return limit + \" \" + resourceId;\r\n    }\r\n\r\n    public String toStringCondensed(Limit defaults) {\r\n        return (limit.toStringCondensed(defaults) + \" \" + resourceId.toStringCondensed()).trim();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CableNetwork.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.cablenetwork;\r\n\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport it.unimi.dsi.fastutil.longs.LongOpenHashSet;\r\nimport it.unimi.dsi.fastutil.longs.LongSet;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.world.level.Level;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\n\r\nimport javax.annotation.Nonnull;\r\nimport javax.annotation.Nullable;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.stream.Stream;\r\n\r\npublic class CableNetwork {\r\n\r\n    protected final Level LEVEL;\r\n    protected final LongSet CABLE_POSITIONS = new LongOpenHashSet();\r\n    protected final CapabilityCache CAPABILITY_CACHE = new CapabilityCache();\r\n\r\n    public CableNetwork(Level level) {\r\n        this.LEVEL = level;\r\n    }\r\n\r\n    /**\r\n     * Only cable blocks are valid network members\r\n     */\r\n    public static boolean isCable(@Nullable Level world, BlockPos cablePos) {\r\n        if (world == null) return false;\r\n        return world\r\n                .getBlockState(cablePos)\r\n                .getBlock() instanceof ICableBlock;\r\n    }\r\n\r\n    public void rebuildNetwork(BlockPos start) {\r\n        CABLE_POSITIONS.clear();\r\n        CAPABILITY_CACHE.clear();\r\n        discoverCables(start).forEach(this::addCable);\r\n    }\r\n\r\n    public void rebuildNetworkFromCache(BlockPos start, CableNetwork other) {\r\n        CABLE_POSITIONS.clear();\r\n        CAPABILITY_CACHE.clear();\r\n\r\n        // discover connected cables\r\n        var cables = SFMUtils.getRecursiveStream((current, next, results) -> {\r\n            results.accept(current);\r\n            for (Direction d : Direction.values()) {\r\n                BlockPos offset = current.offset(d.getNormal());\r\n                if (other.containsCablePosition(offset)) {\r\n                    next.accept(offset);\r\n                }\r\n            }\r\n        }, start).toList();\r\n        for (BlockPos cablePos : cables) {\r\n            CABLE_POSITIONS.add(cablePos.asLong());\r\n        }\r\n\r\n        // discover capabilities\r\n        cables\r\n                .stream()\r\n                .flatMap(cablePos -> Arrays.stream(Direction.values()).map(Direction::getNormal).map(cablePos::offset))\r\n                .distinct()\r\n                .forEach(pos -> CAPABILITY_CACHE.overwriteFromOther(pos, other.CAPABILITY_CACHE));\r\n    }\r\n\r\n    public Stream<BlockPos> discoverCables(BlockPos startPos) {\r\n        return SFMUtils.getRecursiveStream((current, next, results) -> {\r\n            results.accept(current);\r\n            for (Direction d : Direction.values()) {\r\n                BlockPos offset = current.offset(d.getNormal());\r\n                if (isCable(getLevel(), offset)) {\r\n                    next.accept(offset);\r\n                }\r\n            }\r\n        }, startPos);\r\n    }\r\n\r\n    public void addCable(BlockPos pos) {\r\n        CABLE_POSITIONS.add(pos.asLong());\r\n    }\r\n\r\n    public Level getLevel() {\r\n        return LEVEL;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"CableNetwork{level=\"\r\n               + getLevel().dimension().location()\r\n               + \", #cables=\"\r\n               + getCableCount()\r\n               + \", #cache=\"\r\n               + CAPABILITY_CACHE.size()\r\n               + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Cables should only join the network if they would be touching a cable already in the network\r\n     *\r\n     * @param pos Candidate cable position\r\n     * @return {@code true} if adjacent to cable in network\r\n     */\r\n    public boolean isAdjacentToCable(BlockPos pos) {\r\n        for (Direction direction : Direction.values()) {\r\n            if (containsCablePosition(pos.offset(direction.getNormal()))) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean containsCablePosition(BlockPos pos) {\r\n        return CABLE_POSITIONS.contains(pos.asLong());\r\n    }\r\n\r\n    public <CAP> @Nonnull LazyOptional<CAP> getCapability(\r\n            Capability<CAP> cap,\r\n            BlockPos pos,\r\n            @Nullable Direction direction\r\n    ) {\r\n        return CAPABILITY_CACHE.getOrDiscoverCapability(LEVEL, pos, cap, direction);\r\n    }\r\n\r\n    public int getCableCount() {\r\n        return CABLE_POSITIONS.size();\r\n    }\r\n\r\n    /**\r\n     * Merges a network into this one, such as when a cable connects two networks\r\n     *\r\n     * @param other Foreign network\r\n     */\r\n    public void mergeNetwork(CableNetwork other) {\r\n        CABLE_POSITIONS.addAll(other.CABLE_POSITIONS);\r\n        CAPABILITY_CACHE.putAll(other.CAPABILITY_CACHE);\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return CABLE_POSITIONS.isEmpty();\r\n    }\r\n\r\n    public Stream<BlockPos> getCablePositions() {\r\n        return CABLE_POSITIONS.longStream().mapToObj(BlockPos::of);\r\n    }\r\n\r\n    public Stream<BlockPos> getCapabilityProviderPositions() {\r\n        return CAPABILITY_CACHE.getPositions();\r\n    }\r\n\r\n    /**\r\n     * Discover what networks would exist if this network did not have a cable at {@code cablePos}.\r\n     *\r\n     * @param cablePos cable position to be removed\r\n     * @return resulting networks to replace this network\r\n     */\r\n    protected List<CableNetwork> withoutCable(BlockPos cablePos) {\r\n        CABLE_POSITIONS.remove(cablePos.asLong());\r\n        List<CableNetwork> branches = new ArrayList<>();\r\n        for (var direction : Direction.values()) {\r\n            var offsetPos = cablePos.offset(direction.getNormal());\r\n            if (!containsCablePosition(offsetPos)) continue;\r\n            // make sure that a branch network doesn't already contain this cable\r\n            if (branches.stream().anyMatch(n -> n.containsCablePosition(offsetPos))) continue;\r\n            var branchNetwork = new CableNetwork(this.getLevel());\r\n            branchNetwork.rebuildNetworkFromCache(offsetPos, this);\r\n            branches.add(branchNetwork);\r\n        }\r\n        return branches;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\handler\\LabelGunScrollSwitcher.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.handler;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.item.LabelGunItem;\r\nimport ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.neoforged.api.distmarker.Dist;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.client.event.InputEvent;\r\n\r\n@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE, value = Dist.CLIENT)\r\npublic class LabelGunScrollSwitcher {\r\n    @SubscribeEvent\r\n    public static void onScroll(InputEvent.MouseScrollingEvent event) {\r\n        var player = Minecraft.getInstance().player;\r\n        if (player == null) return;\r\n        if (!player.isShiftKeyDown()) return;\r\n        var gun = player.getMainHandItem();\r\n        var hand = InteractionHand.MAIN_HAND;\r\n        if (!(gun.getItem() instanceof LabelGunItem)) {\r\n            gun = player.getOffhandItem();\r\n            hand = InteractionHand.OFF_HAND;\r\n        }\r\n        if (!(gun.getItem() instanceof LabelGunItem)) return;\r\n\r\n        var next = LabelGunItem.getNextLabel(gun, event.getScrollDeltaY() < 0 ? -1 : 1);\r\n        SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunUpdatePacket(\r\n                next,\r\n                hand\r\n        ));\r\n\r\n        event.setCanceled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\FluidResourceType.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.resourcetype;\r\n\r\nimport net.minecraft.core.Registry;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.world.level.material.Fluid;\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\nimport net.neoforged.neoforge.fluids.FluidStack;\r\nimport net.neoforged.neoforge.fluids.capability.IFluidHandler;\r\n\r\npublic class FluidResourceType extends ResourceType<FluidStack, Fluid, IFluidHandler> {\r\n    public FluidResourceType() {\r\n        super(Capabilities.FLUID_HANDLER);\r\n    }\r\n\r\n    @Override\r\n    public Registry<Fluid> getRegistry() {\r\n        return BuiltInRegistries.FLUID;\r\n    }\r\n\r\n    @Override\r\n    public Fluid getItem(FluidStack fluidStack) {\r\n        return fluidStack.getFluid();\r\n    }\r\n\r\n    @Override\r\n    public FluidStack copy(FluidStack fluidStack) {\r\n        return fluidStack.copy();\r\n    }\r\n\r\n    @Override\r\n    protected FluidStack setCount(FluidStack fluidStack, long amount) {\r\n        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;\r\n        fluidStack.setAmount(finalAmount);\r\n        return fluidStack;\r\n    }\r\n\r\n    @Override\r\n    public long getAmount(FluidStack stack) {\r\n        return stack.getAmount();\r\n    }\r\n\r\n    @Override\r\n    public FluidStack getStackInSlot(IFluidHandler cap, int slot) {\r\n        return cap.getFluidInTank(slot);\r\n    }\r\n\r\n    @Override\r\n    public FluidStack extract(IFluidHandler handler, int slot, long amount, boolean simulate) {\r\n        var in          = getStackInSlot(handler, slot);\r\n        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;\r\n        var toExtract   = new FluidStack(in.getFluid(), Math.min(in.getAmount(), finalAmount));\r\n        return handler.drain(\r\n                toExtract,\r\n                simulate ? IFluidHandler.FluidAction.SIMULATE : IFluidHandler.FluidAction.EXECUTE\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesStackType(Object o) {\r\n        return o instanceof FluidStack;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesCapabilityType(Object o) {\r\n        return o instanceof IFluidHandler;\r\n    }\r\n\r\n    @Override\r\n    public int getSlots(IFluidHandler handler) {\r\n        return handler.getTanks();\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(FluidStack fluidStack) {\r\n        return Integer.MAX_VALUE;\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(IFluidHandler iFluidHandler, int slot) {\r\n        return iFluidHandler.getTankCapacity(slot);\r\n    }\r\n\r\n    @Override\r\n    public FluidStack insert(IFluidHandler handler, int slot, FluidStack stack, boolean simulate) {\r\n        //todo: PR to forge to add a method that takes tank slot index\r\n        var x = handler.fill(stack, simulate ? IFluidHandler.FluidAction.SIMULATE : IFluidHandler.FluidAction.EXECUTE);\r\n\r\n        // convert units to find amount NOT inserted\r\n        return new FluidStack(stack.getFluid(), stack.getAmount() - x);\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(FluidStack stack) {\r\n        return stack.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public FluidStack getEmptyStack() {\r\n        return FluidStack.EMPTY;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\containermenu\\ManagerContainerMenu.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.containermenu;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.item.DiskItem;\r\nimport ca.teamdman.sfm.common.registry.SFMMenus;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.world.Container;\r\nimport net.minecraft.world.SimpleContainer;\r\nimport net.minecraft.world.entity.player.Inventory;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.inventory.AbstractContainerMenu;\r\nimport net.minecraft.world.inventory.Slot;\r\nimport net.minecraft.world.item.ItemStack;\r\n\r\npublic class ManagerContainerMenu extends AbstractContainerMenu {\r\n    public final Container CONTAINER;\r\n    public final Inventory INVENTORY;\r\n    public final BlockPos MANAGER_POSITION;\r\n    public String program;\r\n    public ManagerBlockEntity.State state;\r\n    public long[] tickTimeNanos;\r\n\r\n\r\n    public ManagerContainerMenu(\r\n            int windowId,\r\n            Inventory inv,\r\n            Container container,\r\n            BlockPos blockEntityPos,\r\n            String program,\r\n            ManagerBlockEntity.State state,\r\n            long[] tickTimeNanos\r\n    ) {\r\n        super(SFMMenus.MANAGER_MENU.get(), windowId);\r\n        checkContainerSize(container, 1);\r\n        this.CONTAINER = container;\r\n        this.INVENTORY = inv;\r\n        this.MANAGER_POSITION = blockEntityPos;\r\n        this.program = program;\r\n        this.state = state;\r\n        this.tickTimeNanos = tickTimeNanos;\r\n\r\n        this.addSlot(new Slot(container, 0, 15, 47) {\r\n            @Override\r\n            public int getMaxStackSize() {\r\n                return 1;\r\n            }\r\n\r\n            @Override\r\n            public boolean mayPlace(ItemStack stack) {\r\n                return stack.getItem() instanceof DiskItem;\r\n            }\r\n        });\r\n\r\n        for (int i = 0; i < 3; ++i) {\r\n            for (int j = 0; j < 9; ++j) {\r\n                this.addSlot(new Slot(inv, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));\r\n            }\r\n        }\r\n\r\n        for (int k = 0; k < 9; ++k) {\r\n            this.addSlot(new Slot(inv, k, 8 + k * 18, 142));\r\n        }\r\n    }\r\n\r\n    public ManagerContainerMenu(int windowId, Inventory inventory, FriendlyByteBuf buf) {\r\n        this(\r\n                windowId,\r\n                inventory,\r\n                new SimpleContainer(1),\r\n                buf.readBlockPos(),\r\n                buf.readUtf(Program.MAX_PROGRAM_LENGTH),\r\n                buf.readEnum(ManagerBlockEntity.State.class),\r\n                buf.readLongArray(null, ManagerBlockEntity.TICK_TIME_HISTORY_SIZE)\r\n        );\r\n    }\r\n\r\n    public ManagerContainerMenu(int windowId, Inventory inventory, ManagerBlockEntity manager) {\r\n        this(\r\n                windowId,\r\n                inventory,\r\n                manager,\r\n                manager.getBlockPos(),\r\n                manager.getProgramString().orElse(\"\"),\r\n                manager.getState(),\r\n                manager.getTickTimeNanos()\r\n        );\r\n    }\r\n\r\n    public static void encode(ManagerBlockEntity manager, FriendlyByteBuf buf) {\r\n        buf.writeBlockPos(manager.getBlockPos());\r\n        buf.writeUtf(manager.getProgramString().orElse(\"\"), Program.MAX_PROGRAM_LENGTH);\r\n        buf.writeEnum(manager.getState());\r\n        buf.writeLongArray(manager.getTickTimeNanos());\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean stillValid(Player player) {\r\n        return CONTAINER.stillValid(player);\r\n    }\r\n\r\n    @Override\r\n    public ItemStack quickMoveStack(Player player, int slotIndex) {\r\n        var slot = this.slots.get(slotIndex);\r\n        if (!slot.hasItem()) return ItemStack.EMPTY;\r\n\r\n        var containerEnd = CONTAINER.getContainerSize();\r\n        var inventoryEnd = this.slots.size();\r\n\r\n        var contents = slot.getItem();\r\n        var result = contents.copy();\r\n\r\n        if (slotIndex < containerEnd) {\r\n            // clicked slot in container\r\n            if (!this.moveItemStackTo(contents, containerEnd, inventoryEnd, true)) return ItemStack.EMPTY;\r\n        } else {\r\n            // clicked slot in inventory\r\n            if (!this.moveItemStackTo(contents, 0, containerEnd, false)) return ItemStack.EMPTY;\r\n        }\r\n\r\n        if (contents.isEmpty()) {\r\n            slot.set(ItemStack.EMPTY);\r\n        } else {\r\n            slot.setChanged();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\StringHolder.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\npublic record StringHolder(String value) implements ASTNode {\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\block\\package-info.java\r\n\r\n````java\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.block;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\ExperienceGoop.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.item;\r\n\r\nimport net.minecraft.world.item.Item;\r\n\r\npublic class ExperienceGoop extends Item {\r\n    public ExperienceGoop() {\r\n        super(new Properties());\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\package-info.java\r\n\r\n````java\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.cablenetwork;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\package-info.java\r\n\r\n````java\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.client;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMMenus.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.world.entity.player.Inventory;\r\nimport net.minecraft.world.inventory.MenuType;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.fml.loading.FMLEnvironment;\r\nimport net.neoforged.neoforge.common.extensions.IMenuTypeExtension;\r\nimport net.neoforged.neoforge.network.IContainerFactory;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic class SFMMenus {\r\n    private static final DeferredRegister<MenuType<?>> MENU_TYPES = DeferredRegister.create(\r\n            BuiltInRegistries.MENU,\r\n            SFM.MOD_ID\r\n    );\r\n\r\n    public static void register(IEventBus bus) {\r\n        MENU_TYPES.register(bus);\r\n    }\r\n\r\n    public static final Supplier<MenuType<ManagerContainerMenu>> MANAGER_MENU = MENU_TYPES.register(\r\n            \"manager\",\r\n            () -> IMenuTypeExtension.create(\r\n                    new IContainerFactory<>() {\r\n                        @Override\r\n                        public ManagerContainerMenu create(\r\n                                int windowId,\r\n                                Inventory inv,\r\n                                FriendlyByteBuf data\r\n                        ) {\r\n                            return new ManagerContainerMenu(\r\n                                    windowId,\r\n                                    inv,\r\n                                    data\r\n                            );\r\n                        }\r\n\r\n                        @Override\r\n                        public ManagerContainerMenu create(\r\n                                int windowId,\r\n                                Inventory inv\r\n                        ) {\r\n                            if (FMLEnvironment.dist.isClient()) {\r\n                                BlockEntity be = ClientStuff.getLookBlockEntity();\r\n                                if (!(be instanceof ManagerBlockEntity mbe)) {\r\n                                    return IContainerFactory.super.create(windowId, inv);\r\n                                }\r\n                                return new ManagerContainerMenu(windowId, inv, mbe);\r\n                            } else {\r\n                                return IContainerFactory.super.create(\r\n                                        windowId,\r\n                                        inv\r\n                                );\r\n                            }\r\n                        }\r\n                    })\r\n    );\r\n\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\registry\\SFMKeyMappings.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport com.mojang.blaze3d.platform.InputConstants;\r\nimport net.minecraft.client.KeyMapping;\r\nimport net.neoforged.api.distmarker.Dist;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.client.event.RegisterKeyMappingsEvent;\r\nimport net.neoforged.neoforge.client.settings.KeyConflictContext;\r\nimport net.neoforged.neoforge.client.settings.KeyModifier;\r\nimport net.neoforged.neoforge.common.util.Lazy;\r\nimport org.lwjgl.glfw.GLFW;\r\n\r\n\r\n@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD, modid = SFM.MOD_ID, value = Dist.CLIENT)\r\n\r\npublic class SFMKeyMappings {\r\n    public static final Lazy<KeyMapping> MORE_INFO_TOOLTIP_KEY = Lazy.of(() -> new KeyMapping(\r\n            Constants.LocalizationKeys.MORE_HOVER_INFO_KEY.key().get(),\r\n            KeyConflictContext.GUI,\r\n            InputConstants.Type.KEYSYM,\r\n            GLFW.GLFW_KEY_LEFT_SHIFT,\r\n            Constants.LocalizationKeys.SFM_KEY_CATEGORY.key().get()\r\n    ));\r\n\r\n    public static final Lazy<KeyMapping> CONTAINER_INSPECTOR_KEY = Lazy.of(() -> new KeyMapping(\r\n            Constants.LocalizationKeys.CONTAINER_INSPECTOR_TOGGLE_KEY.key().get(),\r\n            KeyConflictContext.GUI,\r\n            KeyModifier.CONTROL,\r\n            InputConstants.Type.KEYSYM,\r\n            GLFW.GLFW_KEY_I,\r\n            Constants.LocalizationKeys.SFM_KEY_CATEGORY.key().get()\r\n    ));\r\n\r\n    @SubscribeEvent\r\n    public static void registerBindings(RegisterKeyMappingsEvent event) {\r\n        event.register(MORE_INFO_TOOLTIP_KEY.get());\r\n        event.register(CONTAINER_INSPECTOR_KEY.get());\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\ProgramTokenContextActions.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.net.ServerboundInputInspectionRequestPacket;\r\nimport ca.teamdman.sfm.common.net.ServerboundLabelInspectionRequestPacket;\r\nimport ca.teamdman.sfm.common.net.ServerboundOutputInspectionRequestPacket;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfml.SFMLLexer;\r\nimport ca.teamdman.sfml.SFMLParser;\r\nimport ca.teamdman.sfml.ast.*;\r\nimport org.antlr.v4.runtime.CharStreams;\r\nimport org.antlr.v4.runtime.CommonTokenStream;\r\nimport org.antlr.v4.runtime.ParserRuleContext;\r\nimport org.antlr.v4.runtime.Token;\r\n\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\npublic class ProgramTokenContextActions {\r\n\r\n    public static Optional<Runnable> getContextAction(String programString, int cursorPosition) {\r\n        var lexer = new SFMLLexer(CharStreams.fromString(programString));\r\n        var tokens = new CommonTokenStream(lexer);\r\n        var parser = new SFMLParser(tokens);\r\n        var builder = new ASTBuilder();\r\n        try {\r\n            builder.visitProgram(parser.program());\r\n            SFM.LOGGER.info(\"Gathering context actions for cursor position \" + cursorPosition);\r\n            return Stream.concat(\r\n                            builder\r\n                                    .getNodesUnderCursor(cursorPosition)\r\n                                    .stream(),\r\n                            builder\r\n                                    .getNodesUnderCursor(cursorPosition - 1)\r\n                                    .stream()\r\n                    )\r\n                    .map(pair -> getContextAction(programString, builder, pair.a, pair.b, cursorPosition))\r\n                    .filter(Optional::isPresent)\r\n                    .map(Optional::get)\r\n                    .findFirst();\r\n        } catch (Throwable t) {\r\n            return Optional.of(() -> ClientStuff.showProgramEditScreen(\"-- Encountered error, program parse failed:\\n--\"\r\n                                                                       + t.getMessage(), next -> {\r\n            }));\r\n        }\r\n    }\r\n\r\n    public static Optional<Runnable> getContextAction(\r\n            String programString,\r\n            ASTBuilder builder,\r\n            ASTNode node,\r\n            ParserRuleContext parserRuleContext,\r\n            int cursorPosition\r\n    ) {\r\n        SFM.LOGGER.info(\"Checking if context action exists for node {} {}\", node.getClass(), node);\r\n        if (node instanceof ResourceIdentifier<?, ?, ?> rid) {\r\n            SFM.LOGGER.info(\"Found context action for resource identifier node\");\r\n            return Optional.of(() -> {\r\n                String expansion = rid\r\n                        .expand()\r\n                        .stream()\r\n                        .map(ResourceIdentifier::toStringCondensed)\r\n                        .collect(Collectors.joining(\",\\n\"));\r\n                ClientStuff.showProgramEditScreen(expansion, next -> {\r\n                });\r\n            });\r\n        } else if (node instanceof Label label) {\r\n            SFM.LOGGER.info(\"Found context action for label node\");\r\n            return Optional.of(() -> SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundLabelInspectionRequestPacket(\r\n                    label.name()\r\n            )));\r\n        } else if (node instanceof InputStatement) {\r\n            if (cursorPosition > parserRuleContext.getStart().getStartIndex() + \"INPUT\".length()) {\r\n                SFM.LOGGER.info(\"Found context action for input node, but the cursor isn't at the start of the node\");\r\n                return Optional.empty();\r\n            }\r\n            SFM.LOGGER.info(\"Found context action for input node\");\r\n            int nodeIndex = builder.getIndexForNode(node);\r\n            return Optional.of(() -> SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundInputInspectionRequestPacket(\r\n                    programString,\r\n                    nodeIndex\r\n            )));\r\n        } else if (node instanceof OutputStatement) {\r\n            if (cursorPosition > parserRuleContext.getStart().getStartIndex() + \"OUTPUT\".length()) {\r\n                SFM.LOGGER.info(\"Found context action for output node, but the cursor isn't at the start of the node\");\r\n                return Optional.empty();\r\n            }\r\n            SFM.LOGGER.info(\"Found context action for output node\");\r\n            int nodeIndex = builder.getIndexForNode(node);\r\n            return Optional.of(() -> SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundOutputInspectionRequestPacket(\r\n                    programString,\r\n                    nodeIndex\r\n            )));\r\n        }\r\n        return Optional.empty();\r\n    }\r\n\r\n    public static boolean hasContextAction(Token token) {\r\n        return switch (token.getType()) {\r\n            case SFMLLexer.INPUT, SFMLLexer.OUTPUT, SFMLLexer.IDENTIFIER -> true;\r\n            default -> false;\r\n        };\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\jei\\PrintingPressJEICategory.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.jei;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.item.FormItem;\r\nimport ca.teamdman.sfm.common.recipe.PrintingPressRecipe;\r\nimport ca.teamdman.sfm.common.registry.SFMBlocks;\r\nimport mezz.jei.api.gui.builder.IRecipeLayoutBuilder;\r\nimport mezz.jei.api.gui.drawable.IDrawable;\r\nimport mezz.jei.api.helpers.IJeiHelpers;\r\nimport mezz.jei.api.recipe.IFocusGroup;\r\nimport mezz.jei.api.recipe.RecipeIngredientRole;\r\nimport mezz.jei.api.recipe.RecipeType;\r\nimport mezz.jei.api.recipe.category.IRecipeCategory;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.item.ItemStack;\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class PrintingPressJEICategory implements IRecipeCategory<PrintingPressRecipe> {\r\n\r\n    public static final RecipeType<PrintingPressRecipe> RECIPE_TYPE = RecipeType.create(\r\n            SFM.MOD_ID,\r\n            \"printing_press\",\r\n            PrintingPressRecipe.class\r\n    );\r\n    private final IDrawable background;\r\n    private final IDrawable icon;\r\n    private final IDrawable slot;\r\n\r\n    public PrintingPressJEICategory(IJeiHelpers jeiHelpers) {\r\n        background = jeiHelpers.getGuiHelper().createBlankDrawable(50, 54);\r\n        icon = jeiHelpers.getGuiHelper().createDrawableItemStack(new ItemStack(SFMBlocks.PRINTING_PRESS_BLOCK.get()));\r\n        slot = jeiHelpers.getGuiHelper().getSlotDrawable();\r\n    }\r\n\r\n    @Override\r\n    public RecipeType<PrintingPressRecipe> getRecipeType() {\r\n        return RECIPE_TYPE;\r\n    }\r\n\r\n    @Override\r\n    public Component getTitle() {\r\n        return Constants.LocalizationKeys.PRINTING_PRESS_JEI_CATEGORY_TITLE.getComponent();\r\n    }\r\n\r\n    @Override\r\n    public IDrawable getBackground() {\r\n        return background;\r\n    }\r\n\r\n    @Override\r\n    public IDrawable getIcon() {\r\n        return icon;\r\n    }\r\n\r\n    @Override\r\n    public void setRecipe(IRecipeLayoutBuilder builder, PrintingPressRecipe recipe, IFocusGroup focuses) {\r\n        builder\r\n                .addSlot(RecipeIngredientRole.INPUT, 0, 0)\r\n                .addItemStacks(Arrays.stream(recipe.FORM.getItems()).map(FormItem::getForm).toList())\r\n                .setBackground(slot, -1, -1);\r\n        builder.addSlot(RecipeIngredientRole.INPUT, 0, 18).addIngredients(recipe.INK).setBackground(slot, -1, -1);\r\n        builder.addSlot(RecipeIngredientRole.INPUT, 0, 36).addIngredients(recipe.PAPER).setBackground(slot, -1, -1);\r\n        builder.addSlot(RecipeIngredientRole.OUTPUT, 25, 18).addIngredients(recipe.FORM);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Label.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\npublic record Label(String name) implements ASTNode {\r\n    @Override\r\n    public String toString() {\r\n        return name;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Statement.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\n\r\npublic interface Statement extends ASTNode {\r\n    void tick(ProgramContext context);\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\IfStatement.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\n\r\nimport java.util.List;\r\nimport java.util.function.Predicate;\r\n\r\npublic record IfStatement(\r\n        BoolExpr condition,\r\n        Block trueBlock,\r\n        Block falseBlock\r\n) implements ASTNode, Statement {\r\n    @Override\r\n    public void tick(ProgramContext context) {\r\n        Predicate<ProgramContext> condition = this.condition;\r\n        if (context.getExecutionPolicy() == ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES) {\r\n            condition = ctx -> {\r\n                int conditionIndex = ctx.getProgram().getConditionIndex(this);\r\n                return (ctx.getExplorationBranchIndex() & (1 << conditionIndex)) != 0;\r\n            };\r\n        }\r\n\r\n        if (condition.test(context)) {\r\n            context.pushPath(new ProgramContext.Branch(this, true));\r\n            trueBlock.tick(context);\r\n        } else {\r\n            context.pushPath(new ProgramContext.Branch(this, false));\r\n            falseBlock.tick(context);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        var rtn = \"IF \" + condition + \" THEN\\n\" + trueBlock.toString().strip().indent(1).stripTrailing();\r\n        if (!falseBlock.getStatements().isEmpty()) {\r\n            rtn += \"\\nELSE\\n\" + falseBlock.toString().strip().indent(1);\r\n        }\r\n        rtn += \"\\nEND\";\r\n//        var rtn = new StringBuilder();\r\n//        rtn.append(\"IF \").append(condition).append(\" THEN\\n\").append(trueBlock.toString().indent(1));\r\n//        if (!falseBlock.getStatements().isEmpty()) {\r\n//            rtn.append(\"\\nELSE\\n\").append(falseBlock.toString().indent(1));\r\n//        }\r\n//        rtn.append(\"\\nEND\");\r\n        return rtn.strip();\r\n    }\r\n\r\n    @Override\r\n    public List<Statement> getStatements() {\r\n        return List.of(trueBlock, falseBlock);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\block\\ManagerBlock.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.block;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;\r\nimport ca.teamdman.sfm.common.cablenetwork.ICableBlock;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport com.mojang.serialization.MapCodec;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.server.level.ServerLevel;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.minecraft.world.Container;\r\nimport net.minecraft.world.Containers;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.InteractionResult;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.*;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.entity.BlockEntityTicker;\r\nimport net.minecraft.world.level.block.entity.BlockEntityType;\r\nimport net.minecraft.world.level.block.state.BlockBehaviour;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.block.state.StateDefinition;\r\nimport net.minecraft.world.level.block.state.properties.BlockStateProperties;\r\nimport net.minecraft.world.level.block.state.properties.BooleanProperty;\r\nimport net.minecraft.world.phys.BlockHitResult;\r\nimport net.neoforged.neoforge.network.NetworkHooks;\r\nimport org.apache.commons.lang3.NotImplementedException;\r\n\r\nimport javax.annotation.Nullable;\r\n\r\npublic class ManagerBlock extends BaseEntityBlock implements EntityBlock, ICableBlock {\r\n    public static final BooleanProperty TRIGGERED = BlockStateProperties.TRIGGERED;\r\n\r\n    public ManagerBlock() {\r\n        super(BlockBehaviour.Properties.of()\r\n                      .destroyTime(2)\r\n                      .sound(SoundType.METAL));\r\n        registerDefaultState(getStateDefinition().any().setValue(TRIGGERED, false));\r\n    }\r\n\r\n    @Override\r\n    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {\r\n        builder.add(TRIGGERED);\r\n    }\r\n\r\n    public RenderShape getRenderShape(BlockState state) {\r\n        return RenderShape.MODEL;\r\n    }\r\n\r\n    @Override\r\n    protected MapCodec<WaterTankBlock> codec() {\r\n        throw new NotImplementedException(\"This isn't used until 1.20.5 apparently\");\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public void neighborChanged(\r\n            BlockState state,\r\n            Level level,\r\n            BlockPos pos,\r\n            Block block,\r\n            BlockPos neighbourPos,\r\n            boolean movedByPiston\r\n    ) {\r\n        if (!(level.getBlockEntity(pos) instanceof ManagerBlockEntity mgr)) return;\r\n        if (!(level instanceof ServerLevel)) return;\r\n        { // check redstone for triggers\r\n            var isPowered = level.hasNeighborSignal(pos) || level.hasNeighborSignal(pos.above());\r\n            var debounce  = state.getValue(TRIGGERED);\r\n            if (isPowered && !debounce) {\r\n                mgr.trackRedstonePulseUnprocessed();\r\n                level.setBlock(pos, state.setValue(TRIGGERED, true), 4);\r\n            } else if (!isPowered && debounce) {\r\n                level.setBlock(pos, state.setValue(TRIGGERED, false), 4);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {\r\n        return SFMBlockEntities.MANAGER_BLOCK_ENTITY\r\n                .get()\r\n                .create(pos, state);\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public InteractionResult use(\r\n            BlockState state,\r\n            Level level,\r\n            BlockPos pos,\r\n            Player player,\r\n            InteractionHand hand,\r\n            BlockHitResult hit\r\n    ) {\r\n        if (level.getBlockEntity(pos) instanceof ManagerBlockEntity manager && player instanceof ServerPlayer sp) {\r\n            NetworkHooks.openScreen(sp, manager, buf -> ManagerContainerMenu.encode(manager, buf));\r\n            return InteractionResult.CONSUME;\r\n        }\r\n        return InteractionResult.SUCCESS;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(\r\n            Level level,\r\n            BlockState state,\r\n            BlockEntityType<T> type\r\n    ) {\r\n        if (level.isClientSide()) return null;\r\n        return createTickerHelper(type, SFMBlockEntities.MANAGER_BLOCK_ENTITY.get(), ManagerBlockEntity::serverTick);\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean isMoving) {\r\n        CableNetworkManager.getOrRegisterNetworkFromCablePosition(world, pos);\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean isMoving) {\r\n        if (!state.is(newState.getBlock())) {\r\n            if (level.getBlockEntity(pos) instanceof Container container) {\r\n                Containers.dropContents(level, pos, container);\r\n                level.updateNeighbourForOutputSignal(pos, this);\r\n            }\r\n            CableNetworkManager.removeCable(level, pos);\r\n            super.onRemove(state, level, pos, newState, isMoving);\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\NetworkToolItem.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.item;\r\n\r\nimport ca.teamdman.sfm.client.registry.SFMKeyMappings;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;\r\nimport ca.teamdman.sfm.common.net.ServerboundNetworkToolUsePacket;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.nbt.ListTag;\r\nimport net.minecraft.nbt.NbtUtils;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.InteractionResult;\r\nimport net.minecraft.world.entity.Entity;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.TooltipFlag;\r\nimport net.minecraft.world.item.context.UseOnContext;\r\nimport net.minecraft.world.level.Level;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.List;\r\n\r\npublic class NetworkToolItem extends Item {\r\n    public NetworkToolItem() {\r\n        super(new Item.Properties().stacksTo(1));\r\n    }\r\n\r\n    @Override\r\n    public InteractionResult onItemUseFirst(ItemStack stack, UseOnContext pContext) {\r\n        if (pContext.getLevel().isClientSide) return InteractionResult.SUCCESS;\r\n\r\n        SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundNetworkToolUsePacket(\r\n                pContext.getClickedPos(),\r\n                pContext.getClickedFace()\r\n        ));\r\n        return InteractionResult.CONSUME;\r\n    }\r\n\r\n    @Override\r\n    public void appendHoverText(\r\n            ItemStack stack, @Nullable Level level, List<Component> lines, TooltipFlag detail\r\n    ) {\r\n        lines.add(Constants.LocalizationKeys.NETWORK_TOOL_ITEM_TOOLTIP_1.getComponent().withStyle(ChatFormatting.GRAY));\r\n        lines.add(Constants.LocalizationKeys.NETWORK_TOOL_ITEM_TOOLTIP_2.getComponent().withStyle(ChatFormatting.GRAY));\r\n        lines.add(Constants.LocalizationKeys.NETWORK_TOOL_ITEM_TOOLTIP_3.getComponent(\r\n                SFMKeyMappings.CONTAINER_INSPECTOR_KEY.get().getTranslatedKeyMessage()\r\n        ).withStyle(ChatFormatting.AQUA));\r\n    }\r\n\r\n    @Override\r\n    public void inventoryTick(ItemStack pStack, Level pLevel, Entity pEntity, int pSlotId, boolean pIsSelected) {\r\n        if (pIsSelected && !pLevel.isClientSide && pEntity.tickCount % 20 == 0) {\r\n            final long maxDistance = 128;\r\n            CompoundTag tag = new CompoundTag();\r\n            ListTag networks = new ListTag();\r\n            CableNetworkManager\r\n                    .getNetworksForLevel(pLevel)\r\n                    .filter(net -> net\r\n                            .getCablePositions()\r\n                            .anyMatch(cablePos -> cablePos.distSqr(pEntity.blockPosition())\r\n                                                  < maxDistance * maxDistance))\r\n                    .forEach(net -> {\r\n                        CompoundTag networkTag = new CompoundTag();\r\n                        networkTag.put(\r\n                                \"cable_positions\",\r\n                                net\r\n                                        .getCablePositions()\r\n                                        .map(NbtUtils::writeBlockPos)\r\n                                        .collect(ListTag::new, ListTag::add, ListTag::addAll)\r\n                        );\r\n                        networkTag.put(\r\n                                \"capability_provider_positions\",\r\n                                net\r\n                                        .getCapabilityProviderPositions()\r\n                                        .map(NbtUtils::writeBlockPos)\r\n                                        .collect(ListTag::new, ListTag::add, ListTag::addAll)\r\n                        );\r\n                        networks.add(networkTag);\r\n                    });\r\n            tag.put(\"networks\", networks);\r\n            pStack.setTag(tag);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\SFMCompat.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.compat;\r\n\r\nimport net.neoforged.fml.ModList;\r\nimport net.neoforged.neoforge.capabilities.BlockCapability;\r\nimport net.neoforged.neoforge.capabilities.Capabilities;\r\n\r\nimport java.util.List;\r\n\r\npublic class SFMCompat {\r\n    public static boolean isMekanismLoaded() {\r\n        return ModList.get().getModContainerById(\"mekanism\").isPresent();\r\n    }\r\n\r\n    public static List<BlockCapability<?,?>> getCapabilities() {\r\n        return List.of(\r\n                Capabilities.ItemHandler.BLOCK,\r\n                Capabilities.FluidHandler.BLOCK,\r\n                Capabilities.EnergyStorage.BLOCK\r\n        );\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundLabelGunUsePacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetwork;\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;\r\nimport ca.teamdman.sfm.common.item.LabelGunItem;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport java.util.function.Supplier;\r\nimport java.util.stream.Collectors;\r\n\r\npublic record ServerboundLabelGunUsePacket(\r\n        InteractionHand hand,\r\n        BlockPos pos,\r\n        boolean isCtrlKeyDown,\r\n        boolean isShiftKeyDown\r\n) {\r\n\r\n    public static void encode(ServerboundLabelGunUsePacket msg, FriendlyByteBuf buf) {\r\n        buf.writeEnum(msg.hand);\r\n        buf.writeBlockPos(msg.pos);\r\n        buf.writeBoolean(msg.isCtrlKeyDown);\r\n        buf.writeBoolean(msg.isShiftKeyDown);\r\n    }\r\n\r\n    public static ServerboundLabelGunUsePacket decode(\r\n            FriendlyByteBuf buf\r\n    ) {\r\n        return new ServerboundLabelGunUsePacket(\r\n                buf.readEnum(InteractionHand.class),\r\n                buf.readBlockPos(),\r\n                buf.readBoolean(),\r\n                buf.readBoolean()\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ServerboundLabelGunUsePacket msg, NetworkEvent.Context ctx\r\n    ) {\r\n        ctx.enqueueWork(() -> {\r\n            var sender = ctx.getSender();\r\n            if (sender == null) {\r\n                return;\r\n            }\r\n            var stack = sender.getItemInHand(msg.hand);\r\n            var level = sender.level();\r\n            if (!(stack.getItem() instanceof LabelGunItem)) {\r\n                return;\r\n            }\r\n\r\n            var gunLabels = LabelPositionHolder.from(stack);\r\n            var pos = msg.pos;\r\n\r\n            // target is a manager, perform push or pull action\r\n            if (level.getBlockEntity(pos) instanceof ManagerBlockEntity manager) {\r\n                manager.getDisk().ifPresent(disk -> {\r\n                    if (msg.isShiftKeyDown) {\r\n                        // start with labels from disk\r\n                        var newLabels = LabelPositionHolder.from(disk);\r\n                        // ensure script-referenced labels are included\r\n                        manager.getReferencedLabels().forEach(newLabels::addReferencedLabel);\r\n                        // save to gun\r\n                        newLabels.save(stack);\r\n                        // give feedback to player\r\n                        sender.sendSystemMessage(Constants.LocalizationKeys.LABEL_GUN_CHAT_PULLED.getComponent());\r\n                    } else {\r\n                        // save gun labels to disk\r\n                        gunLabels.save(disk);\r\n                        // rebuild program\r\n                        manager.rebuildProgramAndUpdateDisk();\r\n                        // mark manager dirty\r\n                        manager.setChanged();\r\n                        // give feedback to player\r\n                        sender.sendSystemMessage(Constants.LocalizationKeys.LABEL_GUN_CHAT_PUSHED.getComponent());\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n\r\n            // target is not a manager, we will perform label toggle\r\n            var activeLabel = LabelGunItem.getActiveLabel(stack);\r\n            if (activeLabel.isEmpty()) return;\r\n\r\n            if (msg.isCtrlKeyDown) {\r\n                // find all connected inventories of the same block type and toggle the label on all of them\r\n                // if any of them don't have it, apply it, otherwise strip from all\r\n\r\n                // find all cable positions so that we only include inventories adjacent to a cable\r\n                Set<BlockPos> cablePositions = CableNetworkManager\r\n                        .getNetworksForLevel(level)\r\n                        .flatMap(CableNetwork::getCablePositions)\r\n                        .collect(Collectors.toSet());\r\n\r\n                // get positions of all connected blocks of the same type\r\n                Block targetBlock = level.getBlockState(pos).getBlock();\r\n                List<BlockPos> positions = SFMUtils.getRecursiveStream((current, nextQueue, results) -> {\r\n                    results.accept(current);\r\n                    for (var d : Direction.values()) {\r\n                        var offset = current.offset(d.getNormal());\r\n                        if (level.getBlockState(offset).getBlock() == targetBlock) {\r\n                            // this is the block we are looking for\r\n                            // ensure it is also adjacent to a cable\r\n                            if (Arrays\r\n                                    .stream(Direction.values())\r\n                                    .anyMatch(d2 -> cablePositions.contains(offset.offset(d2.getNormal())))) {\r\n                                nextQueue.accept(offset);\r\n                            }\r\n                        }\r\n                    }\r\n                }, pos).toList();\r\n\r\n                // check if any of the positions are missing the label\r\n                var existing = new HashSet<>(gunLabels.getPositions(activeLabel));\r\n                boolean anyMissing = positions.stream().anyMatch(p -> !existing.contains(p));\r\n\r\n                // apply or strip label from all positions\r\n                if (anyMissing) {\r\n                    gunLabels.addAll(activeLabel, positions);\r\n                } else {\r\n                    positions.forEach(p -> gunLabels.remove(activeLabel, p));\r\n                }\r\n            } else {\r\n                // normal behaviour - operate on a single position\r\n                if (msg.isShiftKeyDown) {\r\n                    // clear all labels from this position\r\n                    gunLabels.remove(pos);\r\n                } else {\r\n                    // toggle the active label for this position\r\n                    gunLabels.toggle(activeLabel, pos);\r\n                }\r\n            }\r\n\r\n            // write changes to label gun stack\r\n            gunLabels.save(stack);\r\n        });\r\n        ctx.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundLabelGunUpdatePacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.item.LabelGunItem;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundLabelGunUpdatePacket(\r\n        String label,\r\n        InteractionHand hand\r\n) {\r\n    public static final int MAX_LABEL_LENGTH = 80;\r\n\r\n    public static void encode(ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket msg, FriendlyByteBuf buf) {\r\n        buf.writeUtf(msg.label, MAX_LABEL_LENGTH);\r\n        buf.writeEnum(msg.hand);\r\n    }\r\n\r\n    public static ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket decode(\r\n            FriendlyByteBuf buf\r\n    ) {\r\n        return new ServerboundLabelGunUpdatePacket(buf.readUtf(MAX_LABEL_LENGTH), buf.readEnum(InteractionHand.class));\r\n    }\r\n\r\n    public static void handle(\r\n            ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket msg, NetworkEvent.Context ctx\r\n    ) {\r\n        ctx.enqueueWork(() -> {\r\n            var sender = ctx.getSender();\r\n            if (sender == null) {\r\n                return;\r\n            }\r\n            var stack = sender.getItemInHand(msg.hand);\r\n            if (stack.getItem() instanceof LabelGunItem) {\r\n                LabelGunItem.setActiveLabel(stack, msg.label);\r\n            }\r\n        });\r\n        ctx.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\exclude\\SlurryResourceType.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.resourcetype.exclude;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport mekanism.api.Action;\r\nimport mekanism.api.MekanismAPI;\r\nimport mekanism.api.chemical.slurry.ISlurryHandler;\r\nimport mekanism.api.chemical.slurry.Slurry;\r\nimport mekanism.api.chemical.slurry.SlurryStack;\r\nimport net.minecraft.core.Registry;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.capabilities.CapabilityManager;\r\nimport net.neoforged.neoforge.common.capabilities.CapabilityToken;\r\nimport org.apache.commons.lang3.NotImplementedException;\r\n\r\npublic class SlurryResourceType extends ResourceType<SlurryStack, Slurry, ISlurryHandler> {\r\n    public static final Capability<ISlurryHandler> CAP = CapabilityManager.get(new CapabilityToken<>() {\r\n    });\r\n\r\n    public SlurryResourceType() {\r\n        super(CAP);\r\n    }\r\n\r\n    @Override\r\n    public long getAmount(SlurryStack stack) {\r\n        return stack.getAmount();\r\n    }\r\n\r\n    @Override\r\n    public SlurryStack getStackInSlot(ISlurryHandler handler, int slot) {\r\n        return handler.getChemicalInTank(slot);\r\n    }\r\n\r\n    @Override\r\n    public SlurryStack extract(ISlurryHandler handler, int slot, long amount, boolean simulate) {\r\n        return handler.extractChemical(slot, amount, simulate ? Action.SIMULATE : Action.EXECUTE);\r\n    }\r\n\r\n    @Override\r\n    public int getSlots(ISlurryHandler handler) {\r\n        return handler.getTanks();\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(SlurryStack stack) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(ISlurryHandler handler, int slot) {\r\n        return handler.getTankCapacity(slot);\r\n    }\r\n\r\n    @Override\r\n    public SlurryStack insert(\r\n            ISlurryHandler handler,\r\n            int slot,\r\n            SlurryStack stack,\r\n            boolean simulate\r\n    ) {\r\n        return handler.insertChemical(slot, stack, simulate ? Action.SIMULATE : Action.EXECUTE);\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(SlurryStack stack) {\r\n        return stack.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public SlurryStack getEmptyStack() {\r\n        return SlurryStack.EMPTY;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesStackType(Object o) {\r\n        return o instanceof SlurryStack;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesCapabilityType(Object o) {\r\n        return o instanceof ISlurryHandler;\r\n    }\r\n\r\n\r\n    @Override\r\n    public Registry<Slurry> getRegistry() {\r\n        throw new NotImplementedException();\r\n//        return MekanismAPI.slurryRegistry();\r\n    }\r\n\r\n    @Override\r\n    public Slurry getItem(SlurryStack stack) {\r\n        return stack.getType();\r\n    }\r\n\r\n    @Override\r\n    public SlurryStack copy(SlurryStack stack) {\r\n        return stack.copy();\r\n    }\r\n\r\n    @Override\r\n    protected SlurryStack setCount(SlurryStack stack, long amount) {\r\n        stack.setAmount(amount);\r\n        return stack;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Trigger.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\n\r\nimport java.util.List;\r\n\r\npublic interface Trigger extends Statement {\r\n    boolean shouldTick(ProgramContext context);\r\n\r\n    Block getBlock();\r\n\r\n    @Override\r\n    default List<Statement> getStatements() {\r\n        return List.of(getBlock());\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\gui\\screen\\package-info.java\r\n\r\n````java\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.client.gui.screen;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMRecipeTypes.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.recipe.PrintingPressRecipe;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.crafting.RecipeType;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic class SFMRecipeTypes {\r\n    private static final DeferredRegister<RecipeType<?>> RECIPE_TYPES = DeferredRegister.create(\r\n            BuiltInRegistries.RECIPE_TYPE,\r\n            SFM.MOD_ID\r\n    );\r\n\r\n    public static final Supplier<RecipeType<PrintingPressRecipe>> PRINTING_PRESS = RECIPE_TYPES.register(\r\n            \"printing_press\",\r\n            () -> RecipeType.simple(new ResourceLocation(SFM.MOD_ID, \"printing_press\"))\r\n    );\r\n\r\n    public static void register(IEventBus bus) {\r\n        RECIPE_TYPES.register(bus);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\package-info.java\r\n\r\n````java\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.blockentity;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundManagerResetPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundManagerResetPacket(\r\n        int windowId,\r\n        BlockPos pos\r\n) {\r\n    public static void encode(ServerboundManagerResetPacket msg, FriendlyByteBuf friendlyByteBuf) {\r\n        friendlyByteBuf.writeVarInt(msg.windowId());\r\n        friendlyByteBuf.writeBlockPos(msg.pos());\r\n    }\r\n\r\n    public static ServerboundManagerResetPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ServerboundManagerResetPacket(\r\n                friendlyByteBuf.readVarInt(),\r\n                friendlyByteBuf.readBlockPos()\r\n        );\r\n    }\r\n\r\n    public static void handle(ServerboundManagerResetPacket msg, NetworkEvent.Context context) {\r\n        SFMPackets.handleServerboundContainerPacket(\r\n                context,\r\n                ManagerContainerMenu.class,\r\n                ManagerBlockEntity.class,\r\n                msg.pos,\r\n                msg.windowId,\r\n                (menu, manager) -> manager.reset()\r\n        );\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundNetworkToolUsePacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;\r\nimport ca.teamdman.sfm.common.compat.SFMCompat;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfm.common.registry.SFMResourceTypes;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport ca.teamdman.sfml.ast.DirectionQualifier;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.resources.ResourceKey;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.neoforged.fml.loading.FMLEnvironment;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\nimport net.neoforged.neoforge.network.PacketDistributor;\r\n\r\nimport java.util.function.Supplier;\r\nimport java.util.stream.Collectors;\r\n\r\npublic record ServerboundNetworkToolUsePacket(\r\n        BlockPos blockPosition,\r\n        Direction blockFace\r\n) {\r\n    public static void encode(ServerboundNetworkToolUsePacket msg, FriendlyByteBuf friendlyByteBuf) {\r\n        friendlyByteBuf.writeBlockPos(msg.blockPosition);\r\n        friendlyByteBuf.writeEnum(msg.blockFace);\r\n    }\r\n\r\n    public static ServerboundNetworkToolUsePacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ServerboundNetworkToolUsePacket(\r\n                friendlyByteBuf.readBlockPos(),\r\n                friendlyByteBuf.readEnum(Direction.class)\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ServerboundNetworkToolUsePacket msg, NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> {\r\n            // we don't know if the player has the program edit screen open from a manager or a disk in hand\r\n            ServerPlayer player = context.getSender();\r\n            if (player == null) return;\r\n            Level level = player.level();\r\n            BlockPos pos = msg.blockPosition();\r\n            if (!level.isLoaded(pos)) return;\r\n            StringBuilder payload = new StringBuilder()\r\n                    .append(\"---- block position ----\\n\")\r\n                    .append(pos)\r\n                    .append(\"\\n---- block state ----\\n\");\r\n            BlockState state = level.getBlockState(pos);\r\n            payload.append(state).append(\"\\n\");\r\n\r\n            CableNetworkManager.getNetworkFromPosition(level, pos).ifPresent(net -> {\r\n                payload.append(\"---- cable network ----\\n\");\r\n                payload.append(net).append(\"\\n\");\r\n            });\r\n\r\n            BlockEntity entity = level.getBlockEntity(pos);\r\n            if (entity != null) {\r\n                if (!FMLEnvironment.production) {\r\n                    payload.append(\"---- (dev only) block entity ----\\n\");\r\n                    payload.append(entity).append(\"\\n\");\r\n                }\r\n                payload.append(\"---- capability directions ----\\n\");\r\n                for (var cap : SFMCompat.getCapabilities()) {\r\n                    payload\r\n                            .append(cap.getName())\r\n                            .append(\": \");\r\n                    String directions = DirectionQualifier.EVERY_DIRECTION\r\n                            .stream()\r\n                            .filter(dir -> entity.getCapability(cap, dir).isPresent())\r\n                            .map(dir -> dir == null ? \"NULL DIRECTION\" : DirectionQualifier.directionToString(dir))\r\n                            .collect(Collectors.joining(\", \", \"[\", \"]\"));\r\n                    payload.append(directions).append(\"\\n\");\r\n                }\r\n            }\r\n\r\n\r\n            payload.append(\"---- exports ----\\n\");\r\n            int len = payload.length();\r\n            //noinspection unchecked,rawtypes\r\n            SFMResourceTypes.DEFERRED_TYPES\r\n                    .entrySet()\r\n                    .forEach(entry -> payload.append(ServerboundContainerExportsInspectionRequestPacket.buildInspectionResults(\r\n                            (ResourceKey) entry.getKey(),\r\n                            entry.getValue(),\r\n                            level,\r\n                            pos,\r\n                            msg.blockFace\r\n                    )));\r\n            if (payload.length() == len) {\r\n                payload.append(\"No exports found\");\r\n            }\r\n            payload.append(\"\\n\");\r\n\r\n\r\n            if (entity != null) {\r\n                if (player.hasPermissions(2)) {\r\n                    payload.append(\"---- (op only) nbt data ----\\n\");\r\n                    payload.append(entity.serializeNBT()).append(\"\\n\");\r\n                }\r\n            }\r\n\r\n\r\n            SFMPackets.INSPECTION_CHANNEL.send(\r\n                    PacketDistributor.PLAYER.with(() -> player),\r\n                    new ClientboundInputInspectionResultsPacket(\r\n                            SFMUtils.truncate(\r\n                                    payload.toString(),\r\n                                    ClientboundInputInspectionResultsPacket.MAX_RESULTS_LENGTH\r\n                            ))\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\handler\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.handler;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.resourcetype;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundLabelGunClearPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.item.LabelGunItem;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundLabelGunClearPacket(\r\n        InteractionHand hand\r\n) {\r\n    public static void encode(ServerboundLabelGunClearPacket msg, FriendlyByteBuf buf) {\r\n        buf.writeEnum(msg.hand);\r\n    }\r\n\r\n    public static ServerboundLabelGunClearPacket decode(\r\n            FriendlyByteBuf buf\r\n    ) {\r\n        return new ServerboundLabelGunClearPacket(buf.readEnum(InteractionHand.class));\r\n    }\r\n\r\n    public static void handle(\r\n            ServerboundLabelGunClearPacket msg, NetworkEvent.Context ctx\r\n    ) {\r\n        ctx.enqueueWork(() -> {\r\n            var sender = ctx.getSender();\r\n            if (sender == null) {\r\n                return;\r\n            }\r\n            var stack = sender.getItemInHand(msg.hand);\r\n            if (stack.getItem() instanceof LabelGunItem) {\r\n                LabelPositionHolder.empty().save(stack);\r\n            }\r\n        });\r\n        ctx.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\jei\\FallingAnvilExperienceShardRecipe.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.jei;\r\n\r\npublic class FallingAnvilExperienceShardRecipe extends FallingAnvilRecipe {\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ClientboundLabelInspectionResultsPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ClientboundLabelInspectionResultsPacket(\r\n        String results\r\n) {\r\n    public static final int MAX_RESULTS_LENGTH = 50_000;\r\n\r\n    public static void encode(\r\n            ClientboundLabelInspectionResultsPacket msg, FriendlyByteBuf friendlyByteBuf\r\n    ) {\r\n        friendlyByteBuf.writeUtf(msg.results(), MAX_RESULTS_LENGTH);\r\n    }\r\n\r\n    public static ClientboundLabelInspectionResultsPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ClientboundLabelInspectionResultsPacket(\r\n                friendlyByteBuf.readUtf(MAX_RESULTS_LENGTH)\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ClientboundLabelInspectionResultsPacket msg, NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> ClientStuff.showProgramEditScreen(msg.results, next -> {\r\n        }));\r\n        context.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\RoundRobin.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport net.minecraft.core.BlockPos;\r\n\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.stream.Stream;\r\n\r\npublic class RoundRobin implements ASTNode {\r\n    private final Behaviour behaviour;\r\n    private int index = 0;\r\n\r\n    public RoundRobin(Behaviour behaviour) {\r\n        this.behaviour = behaviour;\r\n    }\r\n\r\n    public static RoundRobin disabled() {\r\n        return new RoundRobin(Behaviour.UNMODIFIED);\r\n    }\r\n\r\n    public Stream<BlockPos> gather(LabelAccess labelAccess, LabelPositionHolder labelPositions) {\r\n        return switch (behaviour) {\r\n            case BY_LABEL -> {\r\n                int index = this.next(labelAccess.labels().size());\r\n                yield labelPositions.getPositions(labelAccess.labels().get(index).name()).stream();\r\n            }\r\n            case BY_BLOCK -> {\r\n                List<BlockPos> positions = labelAccess.labels().stream()\r\n                        .map(Label::name)\r\n                        .map(labelPositions::getPositions)\r\n                        .flatMap(Collection::stream)\r\n                        .distinct()\r\n                        .toList();\r\n                if (positions.isEmpty()) {\r\n                    yield Stream.empty();\r\n                }\r\n                yield Stream.of(positions.get(this.next(positions.size())));\r\n            }\r\n            default -> labelAccess.labels().stream()\r\n                    .map(Label::name)\r\n                    .map(labelPositions::getPositions)\r\n                    .flatMap(Collection::stream);\r\n        };\r\n    }\r\n\r\n    public int next(int max) {\r\n        return index++ % max;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return switch (behaviour) {\r\n            case UNMODIFIED -> \"NOT ROUND ROBIN\";\r\n            case BY_BLOCK -> \"ROUND ROBIN BY BLOCK\";\r\n            case BY_LABEL -> \"ROUND ROBIN BY LABEL\";\r\n        };\r\n    }\r\n\r\n    public boolean isEnabled() {\r\n        return behaviour != Behaviour.UNMODIFIED;\r\n    }\r\n\r\n    public enum Behaviour {\r\n        UNMODIFIED,\r\n        BY_BLOCK,\r\n        BY_LABEL\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\gui\\EditorUtils.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.gui;\r\n\r\npublic class EditorUtils {\r\n    private static int findLineStart(String content, int cursorPos) {\r\n        while (cursorPos > 0 && content.charAt(cursorPos - 1) != '\\n') {\r\n            cursorPos--;\r\n        }\r\n        return cursorPos;\r\n    }\r\n\r\n    private static int findLineEnd(String content, int cursorPos) {\r\n        while (cursorPos < content.length() && content.charAt(cursorPos) != '\\n') {\r\n            cursorPos++;\r\n        }\r\n        return cursorPos;\r\n    }\r\n\r\n    /**\r\n     * Indents the given content, and updates the cursor and selection.\r\n     *\r\n     * @param content            The content to indent\r\n     * @param cursorPos          The index within the string of the cursor\r\n     * @param selectionCursorPos The index within the string of the selection cursor. If equal to cursorPosition, no selection is present.\r\n     * @return The indented content, and the new cursor and selection cursor positions\r\n     */\r\n    public static ManipulationResult indent(String content, int cursorPos, int selectionCursorPos) {\r\n        StringBuilder sb = new StringBuilder(content);\r\n        int lineStart = findLineStart(content, Math.min(cursorPos, selectionCursorPos));\r\n        int lineEnd = findLineEnd(content, Math.max(cursorPos, selectionCursorPos));\r\n        if (lineStart == lineEnd) {\r\n            sb.insert(lineStart, \"    \");\r\n            if (lineStart <= cursorPos) {\r\n                cursorPos += 4;\r\n            }\r\n            if (lineStart <= selectionCursorPos) {\r\n                selectionCursorPos += 4;\r\n            }\r\n        } else {\r\n            while (lineStart < lineEnd) {\r\n                sb.insert(lineStart, \"    \");\r\n                lineEnd += 4;\r\n                if (lineStart < cursorPos) {\r\n                    cursorPos += 4;\r\n                }\r\n                if (lineStart < selectionCursorPos) {\r\n                    selectionCursorPos += 4;\r\n                }\r\n                lineStart = findLineEnd(sb.toString(), lineStart) + 1;\r\n            }\r\n        }\r\n        return new ManipulationResult(sb.toString(), cursorPos, selectionCursorPos);\r\n    }\r\n\r\n    /**\r\n     * Deindents the given content, and updates the cursor and selection.\r\n     *\r\n     * @param content            The content to deindent\r\n     * @param cursorPos          The index within the string of the cursor\r\n     * @param selectionCursorPos The index within the string of the selection cursor. If equal to cursorPosition, no selection is present.\r\n     * @return The deindented content, and the new cursor and selection cursor positions\r\n     */\r\n    public static ManipulationResult deindent(String content, int cursorPos, int selectionCursorPos) {\r\n        StringBuilder sb = new StringBuilder(content);\r\n        int lineStart = findLineStart(content, Math.min(cursorPos, selectionCursorPos));\r\n        int lineEnd = findLineEnd(content, Math.max(cursorPos, selectionCursorPos));\r\n\r\n        while (lineStart < lineEnd) {\r\n            for (int i = 0; i < 4 && lineStart < sb.length() && sb.charAt(lineStart) == ' '; i++) {\r\n                sb.deleteCharAt(lineStart);\r\n                lineEnd--;\r\n                if (lineStart < cursorPos) {\r\n                    cursorPos--;\r\n                }\r\n                if (lineStart < selectionCursorPos) {\r\n                    selectionCursorPos--;\r\n                }\r\n            }\r\n            lineStart = findLineEnd(sb.toString(), lineStart) + 1;\r\n        }\r\n        return new ManipulationResult(sb.toString(), cursorPos, selectionCursorPos);\r\n    }\r\n\r\n    /**\r\n     * Perform the operation for hitting Ctrl+/\r\n     * If the selection contains a line not starting with \"--\", prepend each line with \"--\"\r\n     * If all lines in the selection start with \"--\", trim \"--\" from the start of each line\r\n     *\r\n     * @param content The content in the buffer\r\n     * @param cursorPos The index within the content for the cursor position\r\n     * @param selectionCursorPos The index within the content for the selection cursor. If equal to cursorPosition, no selection is present.\r\n     * @return The modified content, and the new cursor positions accommodating the shifting of said content\r\n     */\r\n    public static ManipulationResult toggleComments(String content, int cursorPos, int selectionCursorPos) {\r\n        StringBuilder sb = new StringBuilder(content);\r\n        int lineStart = findLineStart(content, Math.min(cursorPos, selectionCursorPos));\r\n        int lineEnd = findLineEnd(content, Math.max(cursorPos, selectionCursorPos));\r\n\r\n        boolean allLinesCommented = true;\r\n        while (lineStart < lineEnd) {\r\n            if (lineStart + 2 >= sb.length() || sb.charAt(lineStart) != '-' || sb.charAt(lineStart + 1) != '-') {\r\n                allLinesCommented = false;\r\n                break;\r\n            }\r\n            lineStart = findLineEnd(sb.toString(), lineStart) + 1;\r\n        }\r\n\r\n        lineStart = findLineStart(content, Math.min(cursorPos, selectionCursorPos));\r\n        lineEnd = findLineEnd(content, Math.max(cursorPos, selectionCursorPos));\r\n\r\n        if (allLinesCommented) {\r\n            while (lineStart < lineEnd) {\r\n                sb.delete(lineStart, lineStart + 2);\r\n                lineEnd -= 2;\r\n                if (lineStart < cursorPos) {\r\n                    cursorPos -= 2;\r\n                }\r\n                if (lineStart < selectionCursorPos) {\r\n                    selectionCursorPos -= 2;\r\n                }\r\n                lineStart = findLineEnd(sb.toString(), lineStart) + 1;\r\n            }\r\n        } else {\r\n            while (lineStart < lineEnd) {\r\n                sb.insert(lineStart, \"--\");\r\n                lineEnd += 2;\r\n                if (lineStart <= cursorPos) {\r\n                    cursorPos += 2;\r\n                }\r\n                if (lineStart <= selectionCursorPos) {\r\n                    selectionCursorPos += 2;\r\n                }\r\n                lineStart = findLineEnd(sb.toString(), lineStart) + 1;\r\n            }\r\n        }\r\n        return new ManipulationResult(sb.toString(), cursorPos, selectionCursorPos);\r\n    }\r\n\r\n    public record ManipulationResult(\r\n            String content,\r\n            int cursorPosition,\r\n            int selectionCursorPosition\r\n    ) {\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\DirectionQualifier.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport net.minecraft.core.Direction;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.EnumSet;\r\nimport java.util.stream.Stream;\r\n\r\npublic record DirectionQualifier(EnumSet<Direction> directions) implements ASTNode {\r\n\r\n    public static DirectionQualifier NULL_DIRECTION = new DirectionQualifier(EnumSet.noneOf(Direction.class));\r\n    public static DirectionQualifier EVERY_DIRECTION = new DirectionQualifier(EnumSet.allOf(Direction.class));\r\n\r\n    public static Direction lookup(Side side) {\r\n        return switch (side) {\r\n            case TOP -> Direction.UP;\r\n            case BOTTOM -> Direction.DOWN;\r\n            case NORTH -> Direction.NORTH;\r\n            case SOUTH -> Direction.SOUTH;\r\n            case EAST -> Direction.EAST;\r\n            case WEST -> Direction.WEST;\r\n        };\r\n    }\r\n\r\n    public static String directionToString(@Nullable Direction direction) {\r\n        if (direction == null) return \"\";\r\n        return switch (direction) {\r\n            case UP -> \"TOP\";\r\n            case DOWN -> \"BOTTOM\";\r\n            case NORTH -> \"NORTH\";\r\n            case SOUTH -> \"SOUTH\";\r\n            case EAST -> \"EAST\";\r\n            case WEST -> \"WEST\";\r\n        };\r\n    }\r\n\r\n    public Stream<Direction> stream() {\r\n        if (this == EVERY_DIRECTION)\r\n            return Stream.concat(directions.stream(), Stream.<Direction>builder().add(null).build());\r\n        if (directions.isEmpty()) return Stream.<Direction>builder().add(null).build();\r\n        return directions.stream();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ItemResourceType.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.resourcetype;\r\n\r\nimport net.minecraft.core.Registry;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\nimport net.neoforged.neoforge.items.IItemHandler;\r\n\r\npublic class ItemResourceType extends ResourceType<ItemStack, Item, IItemHandler> {\r\n    public ItemResourceType() {\r\n        super(Capabilities.ITEM_HANDLER);\r\n    }\r\n\r\n    @Override\r\n    public Registry<Item> getRegistry() {\r\n        return BuiltInRegistries.ITEM;\r\n    }\r\n\r\n\r\n    @Override\r\n    public Item getItem(ItemStack itemStack) {\r\n        return itemStack.getItem();\r\n    }\r\n\r\n    @Override\r\n    public ItemStack copy(ItemStack stack) {\r\n        return stack.copy();\r\n    }\r\n\r\n    @Override\r\n    protected ItemStack setCount(ItemStack stack, long amount) {\r\n        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;\r\n        stack.setCount(finalAmount);\r\n        return stack;\r\n    }\r\n\r\n    @Override\r\n    public long getAmount(ItemStack stack) {\r\n        return stack.getCount();\r\n    }\r\n\r\n    @Override\r\n    public ItemStack getStackInSlot(IItemHandler cap, int slot) {\r\n        return cap.getStackInSlot(slot);\r\n    }\r\n\r\n    @Override\r\n    public ItemStack extract(IItemHandler handler, int slot, long amount, boolean simulate) {\r\n        int finalAmount = amount > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) amount;\r\n        // Mekanism bin intentionally only returns 64x stacks without going past the max stack size\r\n        // https://github.com/mekanism/Mekanism/blob/f92b48a49e0766cd3aa78e95c9c4a47ba90402f5/src/main/java/mekanism/common/inventory/slot/BasicInventorySlot.java#L174-L175\r\n        return handler.extractItem(slot, finalAmount, simulate);\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesStackType(Object o) {\r\n        return o instanceof ItemStack;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesCapabilityType(Object o) {\r\n        return o instanceof IItemHandler;\r\n    }\r\n\r\n    @Override\r\n    public int getSlots(IItemHandler handler) {\r\n        return handler.getSlots();\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(ItemStack itemStack) {\r\n        return itemStack.getMaxStackSize();\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(IItemHandler handler, int slot) {\r\n        return handler.getSlotLimit(slot);\r\n    }\r\n\r\n    /**\r\n     * @return remaining stack that was not inserted\r\n     */\r\n    @Override\r\n    public ItemStack insert(IItemHandler handler, int slot, ItemStack stack, boolean simulate) {\r\n        return handler.insertItem(slot, stack, simulate);\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(ItemStack stack) {\r\n        return stack.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public ItemStack getEmptyStack() {\r\n        return ItemStack.EMPTY;\r\n    }\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Limit.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport static ca.teamdman.sfml.ast.ResourceQuantity.IdExpansionBehaviour.NO_EXPAND;\r\n\r\npublic record Limit(\r\n        ResourceQuantity quantity,\r\n        ResourceQuantity retention\r\n) implements ASTNode {\r\n    public static final Limit MAX_QUANTITY_NO_RETENTION = new Limit(\r\n            new ResourceQuantity(new Number(Long.MAX_VALUE), NO_EXPAND),\r\n            new ResourceQuantity(new Number(0), NO_EXPAND)\r\n    );\r\n    public static final Limit MAX_QUANTITY_MAX_RETENTION = new Limit(\r\n            new ResourceQuantity(new Number(Long.MAX_VALUE), NO_EXPAND),\r\n            new ResourceQuantity(new Number(Long.MAX_VALUE), NO_EXPAND)\r\n    );\r\n\r\n    public static final Limit UNSET = new Limit(\r\n            ResourceQuantity.UNSET,\r\n            ResourceQuantity.UNSET\r\n    );\r\n\r\n    public Limit withDefaults(Limit limit) {\r\n        if (quantity() == ResourceQuantity.UNSET && retention() == ResourceQuantity.UNSET) {\r\n            return limit;\r\n        } else if (quantity() == ResourceQuantity.UNSET) {\r\n            return new Limit(\r\n                    limit.quantity(),\r\n                    retention()\r\n            );\r\n        } else if (retention() == ResourceQuantity.UNSET) {\r\n            return new Limit(\r\n                    quantity(),\r\n                    limit.retention()\r\n            );\r\n        }\r\n        return this;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return quantity + \" RETAIN \" + retention;\r\n    }\r\n\r\n    public String toStringCondensed(Limit defaults) {\r\n        StringBuilder sb = new StringBuilder();\r\n        if (!quantity.number().equals(defaults.quantity().number())) {\r\n            sb.append(quantity);\r\n        }\r\n        if (!retention.number().equals(defaults.retention().number())) {\r\n            if (!sb.isEmpty()) sb.append(\" \");\r\n            sb.append(\"RETAIN \").append(retention);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Interval.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\npublic record Interval(int ticks) implements ASTNode {\r\n    public static Interval fromTicks(int ticks) {\r\n        return new Interval(ticks);\r\n    }\r\n\r\n    public static Interval fromSeconds(int seconds) {\r\n        return new Interval(seconds * 20);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ticks + \" TICKS\";\r\n    }\r\n\r\n    public int getTicks() {\r\n        return ticks;\r\n    }\r\n\r\n    public int getSeconds() {\r\n        return ticks / 20;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\LimitedOutputSlot.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\n\r\nimport javax.annotation.Nullable;\r\n\r\npublic class LimitedOutputSlot<STACK, ITEM, CAP> {\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\") // done in init method in constructor\r\n    public ResourceType<STACK, ITEM, CAP> type;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\") // done in init method in constructor\r\n    public CAP capability;\r\n    public int slot;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\") // done in init method in constructor\r\n    public OutputResourceTracker<STACK, ITEM, CAP> tracker;\r\n    private @Nullable STACK stackInSlotCache = null;\r\n\r\n    public LimitedOutputSlot(\r\n            CAP capability, int slot, OutputResourceTracker<STACK, ITEM, CAP> tracker\r\n    ) {\r\n        this.init(capability, slot, tracker);\r\n    }\r\n\r\n    public boolean isDone() {\r\n        if (tracker.isDone()) {\r\n            return true;\r\n        }\r\n        STACK stack = getStackInSlot();\r\n        long count = type.getAmount(stack);\r\n        if (count >= type.getMaxStackSize(capability, slot)) {\r\n            // if the maxStackSize is different, that will be handled by moveTo\r\n            // for the general case, it will be faster to just assume 64 is the max stack size\r\n            return true;\r\n        }\r\n        return count != 0 && !tracker.test(stack);\r\n    }\r\n\r\n    public STACK getStackInSlot() {\r\n        if (stackInSlotCache == null) {\r\n            stackInSlotCache = type.getStackInSlot(capability, slot);\r\n        }\r\n        return stackInSlotCache;\r\n    }\r\n\r\n    public STACK insert(STACK stack, boolean simulate) {\r\n        if (!simulate) stackInSlotCache = null;\r\n        return type.insert(capability, slot, stack, simulate);\r\n    }\r\n\r\n    public void init(CAP handler, int slot, OutputResourceTracker<STACK, ITEM, CAP> tracker) {\r\n        this.stackInSlotCache = null;\r\n        this.capability = handler;\r\n        this.tracker = tracker;\r\n        this.slot = slot;\r\n        //noinspection DataFlowIssue\r\n        this.type = tracker.getLimit().resourceId().getResourceType();\r\n        assert type != null;\r\n        this.tracker.visit(this);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressRecipe.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.recipe;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.PrintingPressBlockEntity;\r\nimport ca.teamdman.sfm.common.item.FormItem;\r\nimport ca.teamdman.sfm.common.registry.SFMRecipeSerializers;\r\nimport ca.teamdman.sfm.common.registry.SFMRecipeTypes;\r\nimport com.google.gson.JsonObject;\r\nimport com.mojang.serialization.Codec;\r\nimport com.mojang.serialization.codecs.RecordCodecBuilder;\r\nimport net.minecraft.core.RegistryAccess;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.crafting.Ingredient;\r\nimport net.minecraft.world.item.crafting.Recipe;\r\nimport net.minecraft.world.item.crafting.RecipeSerializer;\r\nimport net.minecraft.world.item.crafting.RecipeType;\r\nimport net.minecraft.world.level.Level;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Printing press copies a form using ink and paper.\r\n */\r\npublic class PrintingPressRecipe implements Recipe<PrintingPressBlockEntity> {\r\n    public final Ingredient FORM;\r\n    public final Ingredient INK;\r\n    public final Ingredient PAPER;\r\n\r\n    public PrintingPressRecipe(\r\n            Ingredient form,\r\n            Ingredient ink,\r\n            Ingredient paper\r\n    ) {\r\n        this.FORM = form;\r\n        this.INK = ink;\r\n        this.PAPER = paper;\r\n    }\r\n\r\n    @Override\r\n    public boolean matches(PrintingPressBlockEntity pContainer, Level pLevel) {\r\n        return PAPER.test(pContainer.getPaper()) && INK.test(pContainer.getInk()) && FORM.test(FormItem.getReference(\r\n                pContainer.getForm()));\r\n    }\r\n\r\n    @Override\r\n    public ItemStack assemble(PrintingPressBlockEntity pContainer, RegistryAccess p_267165_) {\r\n        ItemStack rtn = FormItem.getReference(pContainer.getForm());\r\n        rtn.setCount(pContainer.getPaper().getCount());\r\n        return rtn;\r\n    }\r\n\r\n    @Override\r\n    public boolean canCraftInDimensions(int pWidth, int pHeight) {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public ItemStack getResultItem(RegistryAccess p_267052_) {\r\n        return ItemStack.EMPTY;\r\n\r\n    }\r\n\r\n    @Override\r\n    public RecipeSerializer<?> getSerializer() {\r\n        return SFMRecipeSerializers.PRINTING_PRESS.get();\r\n    }\r\n\r\n    @Override\r\n    public RecipeType<?> getType() {\r\n        return SFMRecipeTypes.PRINTING_PRESS.get();\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj == this) return true;\r\n        if (obj == null || obj.getClass() != this.getClass()) return false;\r\n        var that = (PrintingPressRecipe) obj;\r\n        return\r\n                Objects.equals(this.FORM, that.FORM) &&\r\n                Objects.equals(this.INK, that.INK) &&\r\n                Objects.equals(this.PAPER, that.PAPER);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(FORM, INK, PAPER);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"PrintingPressRecipe[\" +\r\n               \"form=\" + FORM + \", \" +\r\n               \"ink=\" + INK + \", \" +\r\n               \"paper=\" + PAPER + ']';\r\n    }\r\n\r\n    public static class Serializer implements RecipeSerializer<PrintingPressRecipe> {\r\n        private final Codec<PrintingPressRecipe> CODEC = RecordCodecBuilder.create(instance -> instance.group(\r\n                Ingredient.CODEC.fieldOf(\"form\").forGetter(recipe -> recipe.FORM),\r\n                Ingredient.CODEC.fieldOf(\"ink\").forGetter(recipe -> recipe.INK),\r\n                Ingredient.CODEC.fieldOf(\"paper\").forGetter(recipe -> recipe.PAPER)\r\n        ).apply(instance, PrintingPressRecipe::new));\r\n\r\n        @Override\r\n        public Codec<PrintingPressRecipe> codec() {\r\n            return CODEC;\r\n        }\r\n\r\n        @Override\r\n        public PrintingPressRecipe fromNetwork(FriendlyByteBuf friendlyByteBuf) {\r\n            Ingredient form = Ingredient.fromNetwork(friendlyByteBuf);\r\n            Ingredient ink = Ingredient.fromNetwork(friendlyByteBuf);\r\n            Ingredient paper = Ingredient.fromNetwork(friendlyByteBuf);\r\n            return new PrintingPressRecipe(form, ink, paper);\r\n        }\r\n\r\n        @Override\r\n        public void toNetwork(FriendlyByteBuf pBuffer, PrintingPressRecipe pRecipe) {\r\n            pRecipe.FORM.toNetwork(pBuffer);\r\n            pRecipe.INK.toNetwork(pBuffer);\r\n            pRecipe.PAPER.toNetwork(pBuffer);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\BatteryBlockEntity.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.blockentity;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.capabilities.Capabilities;\r\nimport net.neoforged.neoforge.capabilities.RegisterCapabilitiesEvent;\r\nimport net.neoforged.neoforge.energy.EnergyStorage;\r\nimport net.neoforged.neoforge.energy.IEnergyStorage;\r\n\r\n@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)\r\npublic class BatteryBlockEntity extends BlockEntity {\r\n\r\n    public final IEnergyStorage CONTAINER = new EnergyStorage(\r\n            Integer.MAX_VALUE,\r\n            Integer.MAX_VALUE,\r\n            Integer.MAX_VALUE\r\n    );\r\n\r\n    public BatteryBlockEntity(\r\n            BlockPos pPos,\r\n            BlockState pBlockState\r\n    ) {\r\n        super(SFMBlockEntities.BATTERY_BLOCK_ENTITY.get(), pPos, pBlockState);\r\n    }\r\n\r\n    @SubscribeEvent\r\n    private static void registerCapabilities(RegisterCapabilitiesEvent event) {\r\n        event.registerBlockEntity(\r\n                Capabilities.EnergyStorage.BLOCK,\r\n                SFMBlockEntities.BATTERY_BLOCK_ENTITY.get(),\r\n                (blockEntity, direction) -> blockEntity.CONTAINER\r\n        );\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\WaterTankBlockEntity.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.blockentity;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.block.WaterTankBlock;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.material.Fluids;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.capabilities.Capabilities;\r\nimport net.neoforged.neoforge.capabilities.RegisterCapabilitiesEvent;\r\nimport net.neoforged.neoforge.fluids.FluidStack;\r\nimport net.neoforged.neoforge.fluids.capability.templates.FluidTank;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\n@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)\r\npublic class WaterTankBlockEntity extends BlockEntity {\r\n    public void setConnectedCount(int connectedCount) {\r\n        TANK.setCapacity(connectedCount * 1000);\r\n        TANK.getFluid().setAmount(TANK.getCapacity());\r\n    }\r\n\r\n    @Override\r\n    public void onLoad() {\r\n        super.onLoad();\r\n        ((WaterTankBlock) getBlockState().getBlock()).recount(getLevel(), getBlockPos());\r\n    }\r\n\r\n    // can't fill, only extract\r\n    public final FluidTank TANK = new FluidTank(1000, fluidStack -> false) {\r\n        {\r\n            setFluid(new FluidStack(Fluids.WATER, 1000));\r\n        }\r\n\r\n        @Override\r\n        public @NotNull FluidStack drain(int maxDrain, FluidAction action) {\r\n            if (!getLevel().getBlockState(getBlockPos()).getValue(WaterTankBlock.IN_WATER)) return FluidStack.EMPTY;\r\n            int        drained = Math.min(maxDrain, TANK.getCapacity());\r\n            FluidStack copy    = fluid.copy();\r\n            copy.setAmount(drained);\r\n            return copy;\r\n        }\r\n    };\r\n\r\n    public WaterTankBlockEntity(\r\n            BlockPos pos,\r\n            BlockState state\r\n    ) {\r\n        super(SFMBlockEntities.WATER_TANK_BLOCK_ENTITY.get(), pos, state);\r\n    }\r\n\r\n\r\n    @SubscribeEvent\r\n    private static void registerCapabilities(RegisterCapabilitiesEvent event) {\r\n        event.registerBlockEntity(\r\n                Capabilities.FluidHandler.BLOCK,\r\n                SFMBlockEntities.WATER_TANK_BLOCK_ENTITY.get(),\r\n                (blockEntity, direction) -> blockEntity.TANK\r\n        );\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\package-info.java\r\n\r\n````java\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.compat;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\ExperienceShard.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.item;\r\n\r\nimport net.minecraft.world.item.Item;\r\n\r\npublic class ExperienceShard extends Item {\r\n    public ExperienceShard() {\r\n        super(new Item.Properties());\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\ProgramContext.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetwork;\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;\r\nimport ca.teamdman.sfml.ast.IfStatement;\r\nimport ca.teamdman.sfml.ast.InputStatement;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.world.level.Level;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class ProgramContext {\r\n    private final Program PROGRAM;\r\n    private final ManagerBlockEntity MANAGER;\r\n    private final CableNetwork NETWORK;\r\n    private final List<InputStatement> INPUTS = new ArrayList<>();\r\n    private final Level LEVEL;\r\n    private final ExecutionPolicy EXECUTION_POLICY;\r\n    private final List<Branch> PATH_TAKEN = new ArrayList<>();\r\n    private final int EXPLORATION_BRANCH_INDEX;\r\n    private final int REDSTONE_PULSES;\r\n\r\n    public ProgramContext(Program program, ManagerBlockEntity manager, ExecutionPolicy executionPolicy) {\r\n        this(program, manager, executionPolicy, 0);\r\n    }\r\n\r\n    public ProgramContext(\r\n            Program program,\r\n            ManagerBlockEntity manager,\r\n            ExecutionPolicy executionPolicy,\r\n            int branchIndex\r\n    ) {\r\n        this.PROGRAM = program;\r\n        this.MANAGER = manager;\r\n        //noinspection OptionalGetWithoutIsPresent // program shouldn't be ticking if the network is bad\r\n        NETWORK = CableNetworkManager\r\n                .getOrRegisterNetworkFromManagerPosition(MANAGER)\r\n                .get();\r\n        assert MANAGER.getLevel() != null;\r\n        LEVEL = MANAGER.getLevel();\r\n        REDSTONE_PULSES = MANAGER.getUnprocessedRedstonePulseCount();\r\n        EXECUTION_POLICY = executionPolicy;\r\n        EXPLORATION_BRANCH_INDEX = branchIndex;\r\n    }\r\n\r\n    private ProgramContext(ProgramContext other) {\r\n        PROGRAM = other.PROGRAM;\r\n        MANAGER = other.MANAGER;\r\n        NETWORK = other.NETWORK;\r\n        LEVEL = other.LEVEL;\r\n        REDSTONE_PULSES = other.REDSTONE_PULSES;\r\n        EXECUTION_POLICY = other.EXECUTION_POLICY;\r\n        EXPLORATION_BRANCH_INDEX = other.EXPLORATION_BRANCH_INDEX;\r\n        INPUTS.addAll(other.INPUTS);\r\n    }\r\n\r\n    public ExecutionPolicy getExecutionPolicy() {\r\n        return EXECUTION_POLICY;\r\n    }\r\n\r\n    public List<Branch> getExecutionPath() {\r\n        return PATH_TAKEN;\r\n    }\r\n\r\n    public int getExplorationBranchIndex() {\r\n        return EXPLORATION_BRANCH_INDEX;\r\n    }\r\n\r\n    public Program getProgram() {\r\n        return PROGRAM;\r\n    }\r\n\r\n    public void pushPath(Branch branch) {\r\n        this.PATH_TAKEN.add(branch);\r\n    }\r\n\r\n    public ProgramContext copy() {\r\n        return new ProgramContext(this);\r\n    }\r\n\r\n    public int getRedstonePulses() {\r\n        return REDSTONE_PULSES;\r\n    }\r\n\r\n    public enum ExecutionPolicy {\r\n        EXPLORE_BRANCHES,\r\n        UNRESTRICTED\r\n    }\r\n\r\n    public ManagerBlockEntity getManager() {\r\n        return MANAGER;\r\n    }\r\n\r\n    public void addInput(InputStatement input) {\r\n        INPUTS.add(input);\r\n    }\r\n\r\n    public List<InputStatement> getInputs() {\r\n        return INPUTS;\r\n    }\r\n\r\n\r\n    public CableNetwork getNetwork() {\r\n        return NETWORK;\r\n    }\r\n\r\n    public record Branch(\r\n            IfStatement ifStatement,\r\n            boolean wasTrue\r\n    ) {\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\block\\PrintingPressBlock.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.block;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.PrintingPressBlockEntity;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport com.mojang.serialization.MapCodec;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.Containers;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.InteractionResult;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.*;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockBehaviour;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.phys.BlockHitResult;\r\nimport org.apache.commons.lang3.NotImplementedException;\r\n\r\npublic class PrintingPressBlock extends BaseEntityBlock implements EntityBlock {\r\n\r\n    public PrintingPressBlock() {\r\n        super(BlockBehaviour.Properties.of().strength(5.0F, 6.0F).noOcclusion());\r\n        this.registerDefaultState(this.defaultBlockState());\r\n    }\r\n\r\n    @Override\r\n    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {\r\n        return SFMBlockEntities.PRINTING_PRESS_BLOCK_ENTITY\r\n                .get()\r\n                .create(pos, state);\r\n    }\r\n\r\n    public RenderShape getRenderShape(BlockState state) {\r\n        return RenderShape.MODEL;\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public void neighborChanged(\r\n            BlockState pState,\r\n            Level pLevel,\r\n            BlockPos pPos,\r\n            Block pBlock,\r\n            BlockPos pFromPos,\r\n            boolean pIsMoving\r\n    ) {\r\n        super.neighborChanged(pState, pLevel, pPos, pBlock, pFromPos, pIsMoving);\r\n        if (!pLevel.isClientSide\r\n            && pFromPos.getY() == pPos.getY() + 1\r\n            && pLevel.getBlockState(pFromPos).getBlock() == Blocks.PISTON_HEAD\r\n            && pLevel.getBlockEntity(pPos) instanceof PrintingPressBlockEntity blockEntity) {\r\n            blockEntity.performPrint();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected MapCodec<WaterTankBlock> codec() {\r\n        throw new NotImplementedException(\"This isn't used until 1.20.5 apparently\");\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public InteractionResult use(\r\n            BlockState state,\r\n            Level level,\r\n            BlockPos pos,\r\n            Player player,\r\n            InteractionHand hand,\r\n            BlockHitResult hit\r\n    ) {\r\n        if (!level.isClientSide() && level.getBlockEntity(pos) instanceof PrintingPressBlockEntity blockEntity) {\r\n            var stack = player.getItemInHand(hand);\r\n            player.setItemInHand(hand, blockEntity.acceptStack(stack));\r\n        }\r\n        return InteractionResult.SUCCESS;\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    public void onRemove(BlockState pState, Level pLevel, BlockPos pPos, BlockState pNewState, boolean pIsMoving) {\r\n        if (!pState.is(pNewState.getBlock())) {\r\n            BlockEntity blockentity = pLevel.getBlockEntity(pPos);\r\n            if (blockentity instanceof PrintingPressBlockEntity blockEntity) {\r\n                for (ItemStack itemStack : blockEntity.getStacksToDrop()) {\r\n                    Containers.dropItemStack(pLevel, pPos.getX(), pPos.getY(), pPos.getZ(), itemStack);\r\n                }\r\n                pLevel.updateNeighbourForOutputSignal(pPos, this);\r\n            }\r\n\r\n            super.onRemove(pState, pLevel, pPos, pNewState, pIsMoving);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundLabelInspectionRequestPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport ca.teamdman.sfm.common.registry.SFMItems;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\nimport net.neoforged.neoforge.network.PacketDistributor;\r\n\r\nimport java.util.Set;\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundLabelInspectionRequestPacket(\r\n        String label\r\n) {\r\n    public static void encode(ServerboundLabelInspectionRequestPacket msg, FriendlyByteBuf friendlyByteBuf) {\r\n        friendlyByteBuf.writeUtf(msg.label(), Program.MAX_LABEL_LENGTH);\r\n    }\r\n\r\n    public static ServerboundLabelInspectionRequestPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ServerboundLabelInspectionRequestPacket(\r\n                friendlyByteBuf.readUtf(Program.MAX_LABEL_LENGTH)\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ServerboundLabelInspectionRequestPacket msg,\r\n            NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> {\r\n            // we don't know if the player has the program edit screen open from a manager or a disk in hand\r\n            ServerPlayer player = context.getSender();\r\n            if (player == null) return;\r\n            SFM.LOGGER.info(\"Received label inspection request packet from player \" + player.getStringUUID());\r\n            LabelPositionHolder labelPositionHolder;\r\n            if (player.containerMenu instanceof ManagerContainerMenu mcm) {\r\n                SFM.LOGGER.info(\"Player is using a manager container menu - will append additional info to payload\");\r\n                labelPositionHolder = LabelPositionHolder.from(mcm.CONTAINER.getItem(0));\r\n            } else {\r\n                if (player.getMainHandItem().is(SFMItems.DISK_ITEM.get())) {\r\n                    labelPositionHolder = LabelPositionHolder.from(player.getMainHandItem());\r\n                } else if (player.getOffhandItem().is(SFMItems.DISK_ITEM.get())) {\r\n                    labelPositionHolder = LabelPositionHolder.from(player.getOffhandItem());\r\n                } else {\r\n                    labelPositionHolder = null;\r\n                }\r\n            }\r\n            if (labelPositionHolder == null) {\r\n                SFM.LOGGER.info(\"Label holder wasn't found - aborting\");\r\n                return;\r\n            }\r\n            SFM.LOGGER.info(\"building payload\");\r\n            StringBuilder payload = new StringBuilder();\r\n            payload.append(\"-- Positions for label \\\"\").append(msg.label()).append(\"\\\" --\\n\");\r\n            payload.append(labelPositionHolder.getPositions(msg.label()).size()).append(\" assignments\\n\");\r\n            payload.append(\"-- Summary --\\n\");\r\n            labelPositionHolder.get().getOrDefault(msg.label(), Set.of()).forEach(pos -> {\r\n                payload\r\n                        .append(pos.getX())\r\n                        .append(\",\")\r\n                        .append(pos.getY())\r\n                        .append(\",\")\r\n                        .append(pos.getZ());\r\n                if (player.level().isLoaded(pos)) {\r\n                    payload\r\n                            .append(\" -- \")\r\n                            .append(player.level().getBlockState(pos).getBlock().getName().getString());\r\n                } else {\r\n                    payload\r\n                            .append(\" -- chunk not loaded\");\r\n                }\r\n                payload\r\n                        .append(\"\\n\");\r\n            });\r\n\r\n            payload.append(\"\\n\\n\\n-- Detailed --\\n\");\r\n            for (BlockPos pos : labelPositionHolder.get().getOrDefault(msg.label(), Set.of())) {\r\n                if (payload.length() > 20_000) {\r\n                    payload.append(\"... (truncated)\");\r\n                    break;\r\n                }\r\n                payload\r\n                        .append(pos.getX())\r\n                        .append(\",\")\r\n                        .append(pos.getY())\r\n                        .append(\",\")\r\n                        .append(pos.getZ());\r\n                if (player.level().isLoaded(pos)) {\r\n                    payload\r\n                            .append(\" -- \")\r\n                            .append(player.level().getBlockState(pos).getBlock().getName().getString());\r\n\r\n                    payload.append(\"\\n\").append(ServerboundContainerExportsInspectionRequestPacket\r\n                                                        .buildInspectionResults(player.level(), pos)\r\n                                                        .indent(1));\r\n                } else {\r\n                    payload\r\n                            .append(\" -- chunk not loaded\");\r\n                }\r\n                payload\r\n                        .append(\"\\n\");\r\n            }\r\n            SFM.LOGGER.info(\"Sending payload response length=\"\r\n                            + payload.length()\r\n                            + \" to player \"\r\n                            + player.getStringUUID());\r\n            SFMPackets.INSPECTION_CHANNEL.send(\r\n                    PacketDistributor.PLAYER.with(() -> player),\r\n                    new ClientboundLabelInspectionResultsPacket(\r\n                            payload.toString()\r\n                    )\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\ClientStuff.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.client.gui.screen.LabelGunScreen;\r\nimport ca.teamdman.sfm.client.gui.screen.ProgramEditScreen;\r\nimport ca.teamdman.sfm.client.registry.SFMKeyMappings;\r\nimport ca.teamdman.sfm.client.render.PrintingPressBlockEntityRenderer;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.item.DiskItem;\r\nimport ca.teamdman.sfm.common.net.ClientboundManagerGuiPacket;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport com.mojang.blaze3d.platform.InputConstants;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.multiplayer.ClientLevel;\r\nimport net.minecraft.client.player.LocalPlayer;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.phys.BlockHitResult;\r\nimport net.minecraft.world.phys.HitResult;\r\nimport net.neoforged.api.distmarker.Dist;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.fml.loading.FMLEnvironment;\r\nimport net.neoforged.neoforge.client.event.EntityRenderersEvent;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.function.Consumer;\r\n\r\n@Mod.EventBusSubscriber(modid = SFM.MOD_ID, value = Dist.CLIENT, bus = Mod.EventBusSubscriber.Bus.MOD)\r\npublic class ClientStuff {\r\n    public static void showLabelGunScreen(ItemStack stack, InteractionHand hand) {\r\n        Minecraft\r\n                .getInstance()\r\n                .setScreen(new LabelGunScreen(stack, hand));\r\n    }\r\n\r\n    public static void showProgramEditScreen(String initialContent, Consumer<String> callback) {\r\n        ProgramEditScreen screen = new ProgramEditScreen(initialContent, callback);\r\n        if (Minecraft.getInstance().screen == null) {\r\n            Minecraft\r\n                    .getInstance()\r\n                    .setScreen(screen);\r\n        } else {\r\n            Minecraft\r\n                    .getInstance()\r\n                    .pushGuiLayer(screen);\r\n        }\r\n        screen.scrollToTop();\r\n    }\r\n\r\n    public static void showProgramEditScreen(ItemStack diskItem, Consumer<String> callback) {\r\n        showProgramEditScreen(DiskItem.getProgram(diskItem), callback);\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void onRegisterRenderers(EntityRenderersEvent.RegisterRenderers event) {\r\n        event.registerBlockEntityRenderer(\r\n                SFMBlockEntities.PRINTING_PRESS_BLOCK_ENTITY.get(),\r\n                PrintingPressBlockEntityRenderer::new\r\n        );\r\n    }\r\n\r\n    public static boolean isMoreInfoKeyDown() {\r\n        // special effort is needed to ensure this works properly when the manager screen is open\r\n        // https://github.com/mekanism/Mekanism/blob/f92b48a49e0766cd3aa78e95c9c4a47ba90402f5/src/main/java/mekanism/client/key/MekKeyHandler.java\r\n        long handle = Minecraft.getInstance().getWindow().getWindow();\r\n        return InputConstants.isKeyDown(\r\n                handle,\r\n                SFMKeyMappings.MORE_INFO_TOOLTIP_KEY\r\n                        .get()\r\n                        .getKey()\r\n                        .getValue()\r\n        );\r\n    }\r\n\r\n    public static void updateMenu(ClientboundManagerGuiPacket msg) {\r\n        LocalPlayer player = Minecraft.getInstance().player;\r\n        if (player == null) return;\r\n        var container = player.containerMenu;\r\n        if (container instanceof ManagerContainerMenu menu && container.containerId == msg.windowId()) {\r\n            menu.tickTimeNanos = msg.tickTimes();\r\n            menu.state = msg.state();\r\n            menu.program = msg.program();\r\n        }\r\n    }\r\n\r\n    public static @Nullable BlockEntity getLookBlockEntity() {\r\n        assert FMLEnvironment.dist.isClient();\r\n        ClientLevel level = Minecraft.getInstance().level;\r\n        if (level == null) return null;\r\n        HitResult hr = Minecraft.getInstance().hitResult;\r\n        if (hr == null) return null;\r\n        if (hr.getType() != HitResult.Type.BLOCK) return null;\r\n        var pos = ((BlockHitResult) hr).getBlockPos();\r\n        return level.getBlockEntity(pos);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMPackets.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.net.*;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.inventory.AbstractContainerMenu;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\nimport net.neoforged.neoforge.network.NetworkRegistry;\r\nimport net.neoforged.neoforge.network.simple.SimpleChannel;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.function.BiConsumer;\r\nimport java.util.function.Supplier;\r\n\r\npublic class SFMPackets {\r\n    public static final String MANAGER_CHANNEL_VERSION = \"1\";\r\n    public static final String LABEL_GUN_ITEM_CHANNEL_VERSION = \"1\";\r\n    public static final String DISK_ITEM_CHANNEL_VERSION = \"1\";\r\n    public static final String INSPECTION_CHANNEL_VERSION = \"1\";\r\n    public static final SimpleChannel MANAGER_CHANNEL = NetworkRegistry.newSimpleChannel(\r\n            new ResourceLocation(SFM.MOD_ID, \"manager\"),\r\n            MANAGER_CHANNEL_VERSION::toString,\r\n            MANAGER_CHANNEL_VERSION::equals,\r\n            MANAGER_CHANNEL_VERSION::equals\r\n    );\r\n    public static final SimpleChannel LABEL_GUN_ITEM_CHANNEL = NetworkRegistry.newSimpleChannel(\r\n            new ResourceLocation(SFM.MOD_ID, \"labelgun\"),\r\n            LABEL_GUN_ITEM_CHANNEL_VERSION::toString,\r\n            LABEL_GUN_ITEM_CHANNEL_VERSION::equals,\r\n            LABEL_GUN_ITEM_CHANNEL_VERSION::equals\r\n    );\r\n    public static final SimpleChannel DISK_ITEM_CHANNEL = NetworkRegistry.newSimpleChannel(\r\n            new ResourceLocation(SFM.MOD_ID, \"disk\"),\r\n            DISK_ITEM_CHANNEL_VERSION::toString,\r\n            DISK_ITEM_CHANNEL_VERSION::equals,\r\n            DISK_ITEM_CHANNEL_VERSION::equals\r\n    );\r\n\r\n    public static final SimpleChannel INSPECTION_CHANNEL = NetworkRegistry.newSimpleChannel(\r\n            new ResourceLocation(SFM.MOD_ID, \"inspection\"),\r\n            INSPECTION_CHANNEL_VERSION::toString,\r\n            INSPECTION_CHANNEL_VERSION::equals,\r\n            INSPECTION_CHANNEL_VERSION::equals\r\n    );\r\n\r\n    public static void register() {\r\n        MANAGER_CHANNEL.registerMessage(\r\n                0,\r\n                ServerboundManagerProgramPacket.class,\r\n                ServerboundManagerProgramPacket::encode,\r\n                ServerboundManagerProgramPacket::decode,\r\n                ServerboundManagerProgramPacket::handle\r\n        );\r\n        MANAGER_CHANNEL.registerMessage(\r\n                1,\r\n                ServerboundManagerResetPacket.class,\r\n                ServerboundManagerResetPacket::encode,\r\n                ServerboundManagerResetPacket::decode,\r\n                ServerboundManagerResetPacket::handle\r\n        );\r\n        MANAGER_CHANNEL.registerMessage(\r\n                2,\r\n                ServerboundManagerFixPacket.class,\r\n                ServerboundManagerFixPacket::encode,\r\n                ServerboundManagerFixPacket::decode,\r\n                ServerboundManagerFixPacket::handle\r\n        );\r\n        MANAGER_CHANNEL.registerMessage(\r\n                3,\r\n                ClientboundManagerGuiPacket.class,\r\n                ClientboundManagerGuiPacket::encode,\r\n                ClientboundManagerGuiPacket::decode,\r\n                ClientboundManagerGuiPacket::handle\r\n        );\r\n\r\n\r\n        LABEL_GUN_ITEM_CHANNEL.registerMessage(\r\n                0,\r\n                ServerboundLabelGunUpdatePacket.class,\r\n                ServerboundLabelGunUpdatePacket::encode,\r\n                ServerboundLabelGunUpdatePacket::decode,\r\n                ServerboundLabelGunUpdatePacket::handle\r\n        );\r\n        LABEL_GUN_ITEM_CHANNEL.registerMessage(\r\n                1,\r\n                ServerboundLabelGunPrunePacket.class,\r\n                ServerboundLabelGunPrunePacket::encode,\r\n                ServerboundLabelGunPrunePacket::decode,\r\n                ServerboundLabelGunPrunePacket::handle\r\n        );\r\n        LABEL_GUN_ITEM_CHANNEL.registerMessage(\r\n                2,\r\n                ServerboundLabelGunClearPacket.class,\r\n                ServerboundLabelGunClearPacket::encode,\r\n                ServerboundLabelGunClearPacket::decode,\r\n                ServerboundLabelGunClearPacket::handle\r\n        );\r\n        LABEL_GUN_ITEM_CHANNEL.registerMessage(\r\n                3,\r\n                ServerboundLabelGunUsePacket.class,\r\n                ServerboundLabelGunUsePacket::encode,\r\n                ServerboundLabelGunUsePacket::decode,\r\n                ServerboundLabelGunUsePacket::handle\r\n        );\r\n\r\n        DISK_ITEM_CHANNEL.registerMessage(\r\n                0,\r\n                ServerboundDiskItemSetProgramPacket.class,\r\n                ServerboundDiskItemSetProgramPacket::encode,\r\n                ServerboundDiskItemSetProgramPacket::decode,\r\n                ServerboundDiskItemSetProgramPacket::handle\r\n        );\r\n\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                0,\r\n                ServerboundContainerExportsInspectionRequestPacket.class,\r\n                ServerboundContainerExportsInspectionRequestPacket::encode,\r\n                ServerboundContainerExportsInspectionRequestPacket::decode,\r\n                ServerboundContainerExportsInspectionRequestPacket::handle\r\n        );\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                1,\r\n                ClientboundContainerExportsInspectionResultsPacket.class,\r\n                ClientboundContainerExportsInspectionResultsPacket::encode,\r\n                ClientboundContainerExportsInspectionResultsPacket::decode,\r\n                ClientboundContainerExportsInspectionResultsPacket::handle\r\n        );\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                2,\r\n                ServerboundLabelInspectionRequestPacket.class,\r\n                ServerboundLabelInspectionRequestPacket::encode,\r\n                ServerboundLabelInspectionRequestPacket::decode,\r\n                ServerboundLabelInspectionRequestPacket::handle\r\n        );\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                3,\r\n                ClientboundLabelInspectionResultsPacket.class,\r\n                ClientboundLabelInspectionResultsPacket::encode,\r\n                ClientboundLabelInspectionResultsPacket::decode,\r\n                ClientboundLabelInspectionResultsPacket::handle\r\n        );\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                4,\r\n                ServerboundInputInspectionRequestPacket.class,\r\n                ServerboundInputInspectionRequestPacket::encode,\r\n                ServerboundInputInspectionRequestPacket::decode,\r\n                ServerboundInputInspectionRequestPacket::handle\r\n        );\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                5,\r\n                ClientboundInputInspectionResultsPacket.class,\r\n                ClientboundInputInspectionResultsPacket::encode,\r\n                ClientboundInputInspectionResultsPacket::decode,\r\n                ClientboundInputInspectionResultsPacket::handle\r\n        );\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                6,\r\n                ServerboundOutputInspectionRequestPacket.class,\r\n                ServerboundOutputInspectionRequestPacket::encode,\r\n                ServerboundOutputInspectionRequestPacket::decode,\r\n                ServerboundOutputInspectionRequestPacket::handle\r\n        );\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                7,\r\n                ClientboundOutputInspectionResultsPacket.class,\r\n                ClientboundOutputInspectionResultsPacket::encode,\r\n                ClientboundOutputInspectionResultsPacket::decode,\r\n                ClientboundOutputInspectionResultsPacket::handle\r\n        );\r\n        INSPECTION_CHANNEL.registerMessage(\r\n                8,\r\n                ServerboundNetworkToolUsePacket.class,\r\n                ServerboundNetworkToolUsePacket::encode,\r\n                ServerboundNetworkToolUsePacket::decode,\r\n                ServerboundNetworkToolUsePacket::handle\r\n        );\r\n    }\r\n\r\n    public static <MENU extends AbstractContainerMenu, BE extends BlockEntity> void handleServerboundContainerPacket(\r\n            @Nullable NetworkEvent.Context context,\r\n            Class<MENU> menuClass,\r\n            Class<BE> blockEntityClass,\r\n            BlockPos pos,\r\n            int containerId,\r\n            BiConsumer<MENU, BE> callback\r\n    ) {\r\n        if (context == null) return;\r\n        context.enqueueWork(() -> {\r\n            var sender = context.getSender();\r\n            if (sender == null) return;\r\n            if (sender.isSpectator()) return; // ignore packets from spectators\r\n\r\n            var menu = sender.containerMenu;\r\n            if (!menuClass.isInstance(menu)) return;\r\n            if (menu.containerId != containerId) return;\r\n\r\n            var level = sender.level();\r\n            //noinspection ConstantValue\r\n            if (level == null) return;\r\n            if (!level.isLoaded(pos)) return;\r\n\r\n            var blockEntity = level.getBlockEntity(pos);\r\n            if (!blockEntityClass.isInstance(blockEntity)) return;\r\n            //noinspection unchecked\r\n            callback.accept((MENU) menu, (BE) blockEntity);\r\n        });\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\block\\WaterTankBlock.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.block;\r\n\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.blockentity.WaterTankBlockEntity;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport com.mojang.serialization.MapCodec;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.sounds.SoundEvent;\r\nimport net.minecraft.tags.FluidTags;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.TooltipFlag;\r\nimport net.minecraft.world.item.context.BlockPlaceContext;\r\nimport net.minecraft.world.level.BlockGetter;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.LevelAccessor;\r\nimport net.minecraft.world.level.block.*;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockBehaviour;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.block.state.StateDefinition;\r\nimport net.minecraft.world.level.block.state.properties.BooleanProperty;\r\nimport net.minecraft.world.level.material.Fluid;\r\nimport net.minecraft.world.level.material.FluidState;\r\nimport net.minecraft.world.level.material.Fluids;\r\nimport org.apache.commons.lang3.NotImplementedException;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@SuppressWarnings(\"deprecation\")\r\n\r\npublic class WaterTankBlock extends BaseEntityBlock implements EntityBlock, BucketPickup, LiquidBlockContainer {\r\n    public static final BooleanProperty      IN_WATER = BooleanProperty.create(\"in_water\");\r\n\r\n\r\n    public WaterTankBlock() {\r\n        super(BlockBehaviour.Properties.of().destroyTime(2).sound(SoundType.WOOD));\r\n        registerDefaultState(getStateDefinition().any().setValue(IN_WATER, false));\r\n    }\r\n\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public void onPlace(BlockState pState, Level pLevel, BlockPos pPos, BlockState pOldState, boolean pIsMoving) {\r\n        super.onPlace(pState, pLevel, pPos, pOldState, pIsMoving);\r\n        for (Direction direction : Direction.values()) {\r\n            recount(pLevel, pPos.offset(direction.getNormal()));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public void onRemove(BlockState pState, Level pLevel, BlockPos pPos, BlockState pNewState, boolean pIsMoving) {\r\n        super.onRemove(pState, pLevel, pPos, pNewState, pIsMoving);\r\n        for (Direction direction : Direction.values()) {\r\n            recount(pLevel, pPos.offset(direction.getNormal()));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void appendHoverText(\r\n            ItemStack pStack,\r\n            @Nullable BlockGetter pLevel,\r\n            List<Component> pTooltip,\r\n            TooltipFlag pFlag\r\n    ) {\r\n        pTooltip.add(Constants.LocalizationKeys.WATER_TANK_ITEM_TOOLTIP_1\r\n                             .getComponent()\r\n                             .withStyle(ChatFormatting.GRAY));\r\n        pTooltip.add(Constants.LocalizationKeys.WATER_TANK_ITEM_TOOLTIP_2\r\n                             .getComponent()\r\n                             .withStyle(ChatFormatting.GRAY));\r\n    }\r\n\r\n    public void recount(Level level, BlockPos pos) {\r\n        if (!(level.getBlockEntity(pos) instanceof WaterTankBlockEntity be)) return;\r\n        var tanks = SFMUtils.getRecursiveStream((current, next, results) -> {\r\n            results.accept(current);\r\n            for (var d : Direction.values()) {\r\n                var offset = current.getBlockPos().offset(d.getNormal());\r\n                if (!(level.getBlockEntity(offset) instanceof WaterTankBlockEntity blockEntity)) continue;\r\n                next.accept(blockEntity);\r\n            }\r\n        }, be).toList();\r\n        tanks.forEach(t -> t.setConnectedCount(tanks.size()));\r\n    }\r\n\r\n    @Override\r\n    protected MapCodec<WaterTankBlock> codec() {\r\n        throw new NotImplementedException(\"This isn't used until 1.20.5 apparently\");\r\n    }\r\n\r\n    @Override\r\n    public RenderShape getRenderShape(BlockState state) {\r\n        return RenderShape.MODEL;\r\n    }\r\n\r\n    @Override\r\n    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {\r\n        builder.add(IN_WATER);\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {\r\n        return SFMBlockEntities.WATER_TANK_BLOCK_ENTITY.get().create(pos, state);\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public BlockState getStateForPlacement(BlockPlaceContext context) {\r\n        return defaultBlockState().setValue(\r\n                IN_WATER,\r\n                isActive(context.getLevel(), context.getClickedPos())\r\n        );\r\n    }\r\n\r\n    public boolean isActive(LevelAccessor level, BlockPos pos) {\r\n        int neighbourWaterCount = 0;\r\n        for (Direction direction : Direction.values()) {\r\n            FluidState state = level.getFluidState(pos.relative(direction));\r\n            if (state.isSource() && state.is(FluidTags.WATER)) {\r\n                if (++neighbourWaterCount == 2) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"deprecation\")\r\n    public void neighborChanged(\r\n            BlockState state,\r\n            Level level,\r\n            BlockPos pos,\r\n            Block blockIn,\r\n            BlockPos fromPos,\r\n            boolean isMoving\r\n    ) {\r\n        if (level.isClientSide) return;\r\n        boolean isActive = isActive(level, pos);\r\n        if (state.getValue(IN_WATER) != isActive) {\r\n            BlockState newState = defaultBlockState().setValue(IN_WATER, isActive);\r\n            level.setBlock(\r\n                    pos,\r\n                    newState,\r\n                    1 | 2\r\n            );\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ItemStack pickupBlock(\r\n            @Nullable Player player,\r\n            LevelAccessor levelAccessor,\r\n            BlockPos blockPos,\r\n            BlockState blockState\r\n    ) {\r\n        return blockState.getValue(IN_WATER) ? new ItemStack(Fluids.WATER.getBucket()) : ItemStack.EMPTY;\r\n    }\r\n\r\n    @Override\r\n    public Optional<SoundEvent> getPickupSound() {\r\n        return Fluids.WATER.getPickupSound();\r\n    }\r\n\r\n    @Override\r\n    public boolean canPlaceLiquid(\r\n            @Nullable Player player,\r\n            BlockGetter blockGetter,\r\n            BlockPos blockPos,\r\n            BlockState blockState,\r\n            Fluid fluid\r\n    ) {\r\n        return fluid.isSame(Fluids.WATER);\r\n    }\r\n\r\n    @Override\r\n    public boolean placeLiquid(LevelAccessor level, BlockPos pos, BlockState state, FluidState fluid) {\r\n        return fluid.getType().isSame(Fluids.WATER);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\block\\TestBarrelBlock.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.block;\r\n\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.BarrelBlock;\r\nimport net.minecraft.world.level.block.SoundType;\r\nimport net.minecraft.world.level.block.state.BlockBehaviour;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\n\r\npublic class TestBarrelBlock extends BarrelBlock {\r\n    public TestBarrelBlock() {\r\n        super(BlockBehaviour.Properties.of().strength(2.5F).sound(SoundType.WOOD));\r\n    }\r\n\r\n    @Override\r\n    public void onRemove(BlockState pState, Level pLevel, BlockPos pPos, BlockState pNewState, boolean pIsMoving) {\r\n//        var container = (Container) pLevel.getBlockEntity(pPos);\r\n//        int stacks = IntStream.range(0, container.getContainerSize()).mapToObj(container::getItem).mapToInt(ItemStack::getCount).sum();\r\n//        System.out.println(\"test barrel removed \" + stacks/64);\r\n        if (!pState.is(pNewState.getBlock())) {\r\n            pLevel.removeBlockEntity(pPos);\r\n            super.onRemove(pState, pLevel, pPos, pNewState, pIsMoving);\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\LimitedInputSlotObjectPool.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n/**\r\n * A pool of {@link LimitedInputSlot} objects to avoid the garbage collector\r\n * <p>\r\n * This assumes that the pool will be used in a single thread.\r\n */\r\npublic class LimitedInputSlotObjectPool {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    private LimitedInputSlot[] pool = new LimitedInputSlot[1];\r\n    private int index = -1;\r\n\r\n    /**\r\n     * Acquire a {@link LimitedInputSlot} from the pool, or creates a new one if none available\r\n     */\r\n    public <STACK, ITEM, CAP> LimitedInputSlot<STACK, ITEM, CAP> acquire(\r\n            CAP handler,\r\n            int slot,\r\n            InputResourceTracker<STACK, ITEM, CAP> tracker\r\n    ) {\r\n        if (index == -1) {\r\n            return new LimitedInputSlot<>(handler, slot, tracker);\r\n        } else {\r\n            @SuppressWarnings(\"unchecked\") LimitedInputSlot<STACK, ITEM, CAP> obj = pool[index];\r\n            index--;\r\n            obj.init(handler, slot, tracker);\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release a {@link LimitedInputSlot} back into the pool for it to be reused instead of garbage collected\r\n     */\r\n    public void release(LimitedInputSlot<?, ?, ?> obj) {\r\n        if (index == pool.length - 1) {\r\n            // we need to grow the array\r\n            pool = Arrays.copyOf(pool, pool.length * 2);\r\n        }\r\n        pool[++index] = obj;\r\n    }\r\n\r\n    /**\r\n     * Release a {@link LimitedInputSlot} back into the pool for it to be reused instead of garbage collected\r\n     */\r\n    @SuppressWarnings(\"rawtypes\")\r\n    public void release(List<LimitedInputSlot> slots) {\r\n        // handle resizing\r\n        if (index + slots.size() >= pool.length) {\r\n            int slotsFree = pool.length - index - 1;\r\n            int newLength = pool.length + slots.size() - slotsFree;\r\n            pool = Arrays.copyOf(pool, newLength);\r\n        }\r\n        // add to pool\r\n        for (LimitedInputSlot slot : slots) {\r\n            index++;\r\n            pool[index] = slot;\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\exclude\\GasResourceType.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.resourcetype.exclude;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport mekanism.api.Action;\r\nimport mekanism.api.MekanismAPI;\r\nimport mekanism.api.chemical.gas.Gas;\r\nimport mekanism.api.chemical.gas.GasStack;\r\nimport mekanism.api.chemical.gas.IGasHandler;\r\nimport net.minecraft.core.Registry;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.capabilities.CapabilityManager;\r\nimport net.neoforged.neoforge.common.capabilities.CapabilityToken;\r\nimport org.apache.commons.lang3.NotImplementedException;\r\n\r\npublic class GasResourceType extends ResourceType<GasStack, Gas, IGasHandler> {\r\n    public static final Capability<IGasHandler> CAP = CapabilityManager.get(new CapabilityToken<>() {\r\n    });\r\n\r\n    public GasResourceType() {\r\n        super(CAP);\r\n    }\r\n\r\n    @Override\r\n    public long getAmount(GasStack gasStack) {\r\n        return gasStack.getAmount();\r\n    }\r\n\r\n    @Override\r\n    public GasStack getStackInSlot(IGasHandler iGasHandler, int slot) {\r\n        return iGasHandler.getChemicalInTank(slot);\r\n    }\r\n\r\n    @Override\r\n    public GasStack extract(IGasHandler handler, int slot, long amount, boolean simulate) {\r\n        return handler.extractChemical(slot, amount, simulate ? Action.SIMULATE : Action.EXECUTE);\r\n    }\r\n\r\n    @Override\r\n    public int getSlots(IGasHandler handler) {\r\n        return handler.getTanks();\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(GasStack gasStack) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(IGasHandler handler, int slot) {\r\n        return handler.getTankCapacity(slot);\r\n    }\r\n\r\n    @Override\r\n    public GasStack insert(IGasHandler handler, int slot, GasStack gasStack, boolean simulate) {\r\n        return handler.insertChemical(slot, gasStack, simulate ? Action.SIMULATE : Action.EXECUTE);\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(GasStack gasStack) {\r\n        return gasStack.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public GasStack getEmptyStack() {\r\n        return GasStack.EMPTY;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesStackType(Object o) {\r\n        return o instanceof GasStack;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesCapabilityType(Object o) {\r\n        return o instanceof IGasHandler;\r\n    }\r\n\r\n\r\n    @Override\r\n    public Registry<Gas> getRegistry() {\r\n        throw new NotImplementedException();\r\n//        return MekanismAPI.gasRegistry();\r\n    }\r\n\r\n    @Override\r\n    public Gas getItem(GasStack gasStack) {\r\n        return gasStack.getType();\r\n    }\r\n\r\n    @Override\r\n    public GasStack copy(GasStack gasStack) {\r\n        return gasStack.copy();\r\n    }\r\n\r\n    @Override\r\n    protected GasStack setCount(GasStack gasStack, long amount) {\r\n        gasStack.setAmount(amount);\r\n        return gasStack;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ClientboundInputInspectionResultsPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ClientboundInputInspectionResultsPacket(\r\n        String results\r\n) {\r\n    public static final int MAX_RESULTS_LENGTH = 20480;\r\n\r\n    public static void encode(\r\n            ClientboundInputInspectionResultsPacket msg, FriendlyByteBuf friendlyByteBuf\r\n    ) {\r\n        friendlyByteBuf.writeUtf(msg.results(), MAX_RESULTS_LENGTH);\r\n    }\r\n\r\n    public static ClientboundInputInspectionResultsPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ClientboundInputInspectionResultsPacket(\r\n                friendlyByteBuf.readUtf(MAX_RESULTS_LENGTH)\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ClientboundInputInspectionResultsPacket msg, NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> ClientStuff.showProgramEditScreen(msg.results, next -> {\r\n        }));\r\n        context.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\block\\BatteryBlock.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.block;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.InteractionResult;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraft.world.level.block.EntityBlock;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockBehaviour;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.block.state.StateDefinition;\r\nimport net.minecraft.world.level.block.state.properties.IntegerProperty;\r\nimport net.minecraft.world.phys.BlockHitResult;\r\nimport net.neoforged.neoforge.capabilities.Capabilities;\r\n\r\npublic class BatteryBlock extends Block implements EntityBlock {\r\n    public static final IntegerProperty LEVEL = IntegerProperty.create(\"level\", 0, 10);\r\n\r\n    public BatteryBlock() {\r\n        super(BlockBehaviour.Properties.of().strength(5.0F, 6.0F));\r\n        this.registerDefaultState(this.getStateDefinition().any().setValue(LEVEL, 0));\r\n    }\r\n\r\n    @Override\r\n    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {\r\n        return SFMBlockEntities.BATTERY_BLOCK_ENTITY\r\n                .get()\r\n                .create(pos, state);\r\n    }\r\n\r\n    @Override\r\n    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {\r\n        builder.add(LEVEL);\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Override\r\n    public InteractionResult use(\r\n            BlockState pState,\r\n            Level pLevel,\r\n            BlockPos pPos,\r\n            Player pPlayer,\r\n            InteractionHand pHand,\r\n            BlockHitResult pHit\r\n    ) {\r\n        var cap = pLevel.getCapability(Capabilities.EnergyStorage.BLOCK, pPos, pHit.getDirection());\r\n        if (cap != null) {\r\n            if (pPlayer.isShiftKeyDown()) {\r\n                cap.extractEnergy(1000, false);\r\n            } else {\r\n                cap.receiveEnergy(1000, false);\r\n            }\r\n            SFM.LOGGER.info(\"Energy stored: {}\", cap.getEnergyStored());\r\n        }\r\n        return InteractionResult.SUCCESS;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\ICableBlock.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.cablenetwork;\r\n\r\npublic interface ICableBlock {\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ClientboundManagerGuiPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ClientboundManagerGuiPacket(\r\n        int windowId,\r\n        String program,\r\n        ManagerBlockEntity.State state,\r\n        long[] tickTimes\r\n) {\r\n\r\n    public static void encode(\r\n            ClientboundManagerGuiPacket msg, FriendlyByteBuf friendlyByteBuf\r\n    ) {\r\n        friendlyByteBuf.writeVarInt(msg.windowId());\r\n        friendlyByteBuf.writeUtf(msg.program(), Program.MAX_PROGRAM_LENGTH);\r\n        friendlyByteBuf.writeEnum(msg.state());\r\n        friendlyByteBuf.writeLongArray(msg.tickTimes());\r\n    }\r\n\r\n    public static ClientboundManagerGuiPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ClientboundManagerGuiPacket(\r\n                friendlyByteBuf.readVarInt(),\r\n                friendlyByteBuf.readUtf(Program.MAX_PROGRAM_LENGTH),\r\n                friendlyByteBuf.readEnum(ManagerBlockEntity.State.class),\r\n                friendlyByteBuf.readLongArray()\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ClientboundManagerGuiPacket msg, NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> ClientStuff.updateMenu(msg));\r\n        context.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundManagerFixPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundManagerFixPacket(\r\n        int windowId,\r\n        BlockPos pos\r\n) {\r\n    public static void encode(ServerboundManagerFixPacket msg, FriendlyByteBuf friendlyByteBuf) {\r\n        friendlyByteBuf.writeVarInt(msg.windowId());\r\n        friendlyByteBuf.writeBlockPos(msg.pos());\r\n    }\r\n\r\n    public static ServerboundManagerFixPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ServerboundManagerFixPacket(\r\n                friendlyByteBuf.readVarInt(),\r\n                friendlyByteBuf.readBlockPos()\r\n        );\r\n    }\r\n\r\n    public static void handle(ServerboundManagerFixPacket msg, NetworkEvent.Context context) {\r\n        SFMPackets.handleServerboundContainerPacket(\r\n                context,\r\n                ManagerContainerMenu.class,\r\n                ManagerBlockEntity.class,\r\n                msg.pos,\r\n                msg.windowId,\r\n                (menu, manager) -> manager\r\n                        .getDisk()\r\n                        .ifPresent(disk -> manager\r\n                                .getProgram()\r\n                                .ifPresent(program -> program.fixWarnings(disk, manager)))\r\n        );\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.recipe;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\DiskResetRecipe.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.recipe;\r\n\r\nimport ca.teamdman.sfm.common.item.DiskItem;\r\nimport ca.teamdman.sfm.common.registry.SFMItems;\r\nimport ca.teamdman.sfm.common.registry.SFMRecipeSerializers;\r\nimport net.minecraft.core.RegistryAccess;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.inventory.CraftingContainer;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.crafting.CraftingBookCategory;\r\nimport net.minecraft.world.item.crafting.CustomRecipe;\r\nimport net.minecraft.world.item.crafting.RecipeSerializer;\r\nimport net.minecraft.world.level.Level;\r\n\r\n/**\r\n * Printing press copies a form using ink and paper.\r\n */\r\npublic class DiskResetRecipe extends CustomRecipe {\r\n    public DiskResetRecipe(CraftingBookCategory pGroup) {\r\n        super(pGroup);\r\n    }\r\n\r\n    @Override\r\n    public boolean matches(CraftingContainer pContainer, Level pLevel) {\r\n        int foundDisks = 0;\r\n        for (int i = 0; i < pContainer.getContainerSize(); i++) {\r\n            ItemStack stack = pContainer.getItem(i);\r\n            if (stack.getItem() instanceof DiskItem) {\r\n                foundDisks++;\r\n            } else if (!stack.isEmpty()) {\r\n                return false;\r\n            }\r\n        }\r\n        return foundDisks > 0;\r\n    }\r\n\r\n    @Override\r\n    public ItemStack assemble(CraftingContainer pContainer, RegistryAccess registryAccess) {\r\n        int foundDisks = 0;\r\n        for (int i = 0; i < pContainer.getContainerSize(); i++) {\r\n            ItemStack stack = pContainer.getItem(i);\r\n            if (stack.getItem() instanceof DiskItem) {\r\n                foundDisks++;\r\n            } else if (!stack.isEmpty()) {\r\n                return ItemStack.EMPTY;\r\n            }\r\n        }\r\n        return foundDisks > 0 ? new ItemStack(SFMItems.DISK_ITEM.get(), foundDisks) : ItemStack.EMPTY;\r\n    }\r\n\r\n    @Override\r\n    public boolean canCraftInDimensions(int pWidth, int pHeight) {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public RecipeSerializer<?> getSerializer() {\r\n        return SFMRecipeSerializers.DISK_RESET.get();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\registry\\SFMMenuScreens.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.registry;\r\n\r\nimport ca.teamdman.sfm.client.gui.screen.ManagerScreen;\r\nimport ca.teamdman.sfm.common.registry.SFMMenus;\r\nimport net.minecraft.client.gui.screens.MenuScreens;\r\n\r\npublic class SFMMenuScreens {\r\n    public static void register() {\r\n        MenuScreens.register(SFMMenus.MANAGER_MENU.get(), ManagerScreen::new);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\containermenu\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.containermenu;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ASTNode.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ASTNode {\r\n    default List<Statement> getStatements() {\r\n        return List.of();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\jei\\package-info.java\r\n\r\n````java\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.client.jei;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\LabelGunItem.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.item;\r\n\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.net.ServerboundLabelGunUsePacket;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport ca.teamdman.sfm.common.registry.SFMItems;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.client.gui.screens.Screen;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.InteractionResult;\r\nimport net.minecraft.world.InteractionResultHolder;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.TooltipFlag;\r\nimport net.minecraft.world.item.context.UseOnContext;\r\nimport net.minecraft.world.level.Level;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\n\r\npublic class LabelGunItem extends Item {\r\n    public LabelGunItem() {\r\n        super(new Properties().stacksTo(1));\r\n    }\r\n\r\n    public static void setActiveLabel(ItemStack gun, String label) {\r\n        if (label.isEmpty()) return;\r\n        LabelPositionHolder.from(gun).addReferencedLabel(label).save(gun);\r\n        gun.getOrCreateTag().putString(\"sfm:active_label\", label);\r\n    }\r\n\r\n    public static String getActiveLabel(ItemStack stack) {\r\n        //noinspection DataFlowIssue\r\n        return !stack.hasTag() ? \"\" : stack.getTag().getString(\"sfm:active_label\");\r\n    }\r\n\r\n    public static String getNextLabel(ItemStack gun, int change) {\r\n        var labels = LabelPositionHolder.from(gun).get().keySet().stream().sorted(Comparator.naturalOrder()).toList();\r\n        if (labels.isEmpty()) return \"\";\r\n        var currentLabel = getActiveLabel(gun);\r\n\r\n        int currentLabelIndex = 0;\r\n        for (int i = 0; i < labels.size(); i++) {\r\n            if (labels.get(i).equals(currentLabel)) {\r\n                currentLabelIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        int nextLabelIndex = currentLabelIndex + change;\r\n        // ensure going negative wraps around\r\n        nextLabelIndex = ((nextLabelIndex % labels.size()) + labels.size()) % labels.size();\r\n\r\n        return labels.get(nextLabelIndex);\r\n    }\r\n\r\n    @Override\r\n    public InteractionResult onItemUseFirst(\r\n            ItemStack gun, UseOnContext ctx\r\n    ) {\r\n        var level = ctx.getLevel();\r\n        if (level.isClientSide && ctx.getPlayer() != null) {\r\n            SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunUsePacket(\r\n                    ctx.getHand(),\r\n                    ctx.getClickedPos(),\r\n                    Screen.hasControlDown(),\r\n                    ctx.getPlayer().isShiftKeyDown()\r\n            ));\r\n            return InteractionResult.SUCCESS;\r\n        }\r\n        return InteractionResult.CONSUME;\r\n    }\r\n\r\n    @Override\r\n    public void appendHoverText(\r\n            ItemStack stack, @Nullable Level level, List<Component> lines, TooltipFlag detail\r\n    ) {\r\n        lines.add(Constants.LocalizationKeys.LABEL_GUN_ITEM_TOOLTIP_1.getComponent().withStyle(ChatFormatting.GRAY));\r\n        lines.add(Constants.LocalizationKeys.LABEL_GUN_ITEM_TOOLTIP_2.getComponent().withStyle(ChatFormatting.GRAY));\r\n        lines.add(Constants.LocalizationKeys.LABEL_GUN_ITEM_TOOLTIP_3.getComponent().withStyle(ChatFormatting.GRAY));\r\n        lines.addAll(LabelPositionHolder.from(stack).asHoverText());\r\n    }\r\n\r\n    @Override\r\n    public InteractionResultHolder<ItemStack> use(\r\n            Level level,\r\n            Player player,\r\n            InteractionHand hand\r\n    ) {\r\n        var stack = player.getItemInHand(hand);\r\n        if (level.isClientSide) {\r\n            ClientStuff.showLabelGunScreen(stack, hand);\r\n        }\r\n        return InteractionResultHolder.sidedSuccess(stack, level.isClientSide());\r\n    }\r\n\r\n    @Override\r\n    public Component getName(ItemStack stack) {\r\n        var name = getActiveLabel(stack);\r\n        if (name.isEmpty()) return super.getName(stack);\r\n        return Constants.LocalizationKeys.LABEL_GUN_ITEM_NAME_WITH_LABEL\r\n                .getComponent(name)\r\n                .withStyle(ChatFormatting.AQUA);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\LimitedInputSlot.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\n\r\nimport javax.annotation.Nullable;\r\n\r\npublic class LimitedInputSlot<STACK, ITEM, CAP> {\r\n\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    public ResourceType<STACK, ITEM, CAP> type;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    public CAP handler;\r\n    public int slot;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    public InputResourceTracker<STACK, ITEM, CAP> tracker;\r\n    private boolean done = false;\r\n    private @Nullable STACK extractSimulateCache = null;\r\n\r\n    public LimitedInputSlot(\r\n            CAP handler, int slot, InputResourceTracker<STACK, ITEM, CAP> tracker\r\n    ) {\r\n        this.init(handler, slot, tracker);\r\n    }\r\n\r\n    public boolean isDone() {\r\n        if (done) return true;\r\n        // we don't bother setting done because if this returns true it should be the last time this is called\r\n        if (tracker.isDone()) {\r\n            return true;\r\n        }\r\n        STACK stack = peekExtractPotential();\r\n        if (type.isEmpty(stack)) {\r\n            return true;\r\n        }\r\n        return !tracker.test(stack);\r\n    }\r\n\r\n    public void setDone() {\r\n        this.done = true;\r\n    }\r\n\r\n    public STACK extract(long amount) {\r\n        extractSimulateCache = null;\r\n        return type.extract(handler, slot, amount, false);\r\n    }\r\n\r\n    /**\r\n     * Checks how much could possibly be extracted from this slot.\r\n     * We need to simulate since there are some types of slots we can't undo an extract from.\r\n     * You can't put something back in the output slot of a furnace.\r\n     * This value is cached for performance.\r\n     */\r\n    public STACK peekExtractPotential() {\r\n        if (extractSimulateCache == null) {\r\n            extractSimulateCache = type.extract(handler, slot, Long.MAX_VALUE, true);\r\n        }\r\n        return extractSimulateCache;\r\n    }\r\n\r\n    public void init(CAP handler, int slot, InputResourceTracker<STACK, ITEM, CAP> tracker) {\r\n        this.done = false;\r\n        this.extractSimulateCache = null;\r\n        this.handler = handler;\r\n        this.tracker = tracker;\r\n        this.slot = slot;\r\n        //noinspection DataFlowIssue\r\n        this.type = tracker.getResourceLimit().resourceId().getResourceType();\r\n        assert type != null;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMCapabilityProviderMappers.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.capabilityprovidermapper.BlockEntityCapabilityProviderMapper;\r\nimport ca.teamdman.sfm.common.capabilityprovidermapper.CapabilityProviderMapper;\r\nimport ca.teamdman.sfm.common.capabilityprovidermapper.CauldronCapabilityProviderMapper;\r\nimport net.minecraft.core.Registry;\r\nimport net.minecraft.resources.ResourceKey;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\nimport net.neoforged.neoforge.registries.RegistryBuilder;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic class SFMCapabilityProviderMappers {\r\n    public static final ResourceKey<Registry<CapabilityProviderMapper>> REGISTRY_ID = ResourceKey.createRegistryKey(new ResourceLocation(\r\n            SFM.MOD_ID,\r\n            \"capability_provider_mappers\"\r\n    ));\r\n    private static final DeferredRegister<CapabilityProviderMapper> MAPPERS = DeferredRegister.create(\r\n            REGISTRY_ID,\r\n            SFM.MOD_ID\r\n    );\r\n    public static final Registry<CapabilityProviderMapper> DEFERRED_MAPPERS = MAPPERS.makeRegistry(registryBuilder->{});\r\n\r\n    public static final Supplier<BlockEntityCapabilityProviderMapper> BLOCK_ENTITY_MAPPER = MAPPERS.register(\r\n            \"block_entity\",\r\n            BlockEntityCapabilityProviderMapper::new\r\n    );\r\n\r\n    public static final Supplier<CauldronCapabilityProviderMapper> CAULDRON_MAPPER = MAPPERS.register(\r\n            \"cauldron\",\r\n            CauldronCapabilityProviderMapper::new\r\n    );\r\n\r\n    public static void register(IEventBus bus) {\r\n        MAPPERS.register(bus);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\BoolExpr.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\n\r\nimport java.util.function.Predicate;\r\n\r\npublic record BoolExpr(\r\n        Predicate<ProgramContext> pred,\r\n        String sourceCode\r\n) implements Predicate<ProgramContext>, ASTNode {\r\n\r\n    @Override\r\n    public boolean test(ProgramContext context) {\r\n        return pred.test(context);\r\n    }\r\n\r\n    public BoolExpr negate() {\r\n        return new BoolExpr(pred.negate(), \"NOT \" + sourceCode);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return sourceCode;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\handler\\package-info.java\r\n\r\n````java\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.client.handler;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\handler\\ItemWorldRenderer.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.handler;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.item.LabelGunItem;\r\nimport ca.teamdman.sfm.common.item.NetworkToolItem;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport com.google.common.collect.HashMultimap;\r\nimport com.mojang.blaze3d.platform.GlStateManager;\r\nimport com.mojang.blaze3d.systems.RenderSystem;\r\nimport com.mojang.blaze3d.vertex.*;\r\nimport net.minecraft.client.Camera;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.gui.Font;\r\nimport net.minecraft.client.renderer.GameRenderer;\r\nimport net.minecraft.client.renderer.MultiBufferSource;\r\nimport net.minecraft.client.renderer.RenderStateShard;\r\nimport net.minecraft.client.renderer.RenderType;\r\nimport net.minecraft.client.renderer.texture.TextureAtlas;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.nbt.NbtUtils;\r\nimport net.minecraft.nbt.Tag;\r\nimport net.neoforged.api.distmarker.Dist;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.client.event.RenderLevelStageEvent;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\n@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE, value = Dist.CLIENT)\r\n/*\r\n * This class uses code from tasgon's \"observable\" mod, also using MPLv2\r\n * https://github.com/tasgon/observable/blob/master/common/src/main/kotlin/observable/client/Overlay.kt\r\n */\r\npublic class ItemWorldRenderer {\r\n    private static final int BUFFER_SIZE = 256;\r\n    @SuppressWarnings(\"deprecation\")\r\n    private static final RenderType RENDER_TYPE = RenderType.create(\r\n            \"sfmlabels\",\r\n            DefaultVertexFormat.POSITION_COLOR,\r\n            VertexFormat.Mode.QUADS,\r\n            BUFFER_SIZE,\r\n            false,\r\n            false,\r\n            RenderType.CompositeState\r\n                    .builder()\r\n                    .setTextureState(new RenderStateShard.TextureStateShard(TextureAtlas.LOCATION_BLOCKS, false, false))\r\n                    .setDepthTestState(new RenderStateShard.DepthTestStateShard(\"always\", 519))\r\n                    .setTransparencyState(\r\n                            new RenderStateShard.TransparencyStateShard(\r\n                                    \"src_to_one\",\r\n                                    () -> {\r\n                                        RenderSystem.enableBlend();\r\n                                        RenderSystem.blendFunc(\r\n                                                GlStateManager.SourceFactor.SRC_ALPHA,\r\n                                                GlStateManager.DestFactor.ONE\r\n                                        );\r\n                                    },\r\n                                    () -> {\r\n                                        RenderSystem.disableBlend();\r\n                                        RenderSystem.defaultBlendFunc();\r\n                                    }\r\n                            )\r\n                    )\r\n                    .createCompositeState(true)\r\n    );\r\n    @Nullable\r\n    private static VertexBuffer capabilityProviderVBO;\r\n    @Nullable\r\n    private static VertexBuffer cableVBO;\r\n\r\n    @SubscribeEvent\r\n    public static void renderLabelHighlights(RenderLevelStageEvent event) {\r\n        if (event.getStage() != RenderLevelStageEvent.Stage.AFTER_TRANSLUCENT_BLOCKS) return;\r\n        var player = Minecraft.getInstance().player;\r\n        if (player == null) return;\r\n\r\n        var labelGun = player.getMainHandItem();\r\n        if (!(labelGun.getItem() instanceof LabelGunItem)) labelGun = player.getOffhandItem();\r\n        if (labelGun.getItem() instanceof LabelGunItem) {\r\n            var labels = LabelPositionHolder.from(labelGun);\r\n            var labelPositions = HashMultimap.<BlockPos, String>create();\r\n            labels.forEach((label, pos1) -> labelPositions.put(pos1, label));\r\n\r\n            var poseStack = event.getPoseStack();\r\n            var camera = Minecraft.getInstance().gameRenderer.getMainCamera();\r\n            var bufferSource = Minecraft.getInstance().renderBuffers().bufferSource();\r\n\r\n            RenderSystem.disableDepthTest();\r\n\r\n            poseStack.pushPose();\r\n            poseStack.translate(-camera.getPosition().x, -camera.getPosition().y, -camera.getPosition().z);\r\n\r\n            { // draw labels\r\n                for (var entry : labelPositions.asMap().entrySet()) {\r\n                    drawLabel(poseStack, camera, entry.getKey(), bufferSource, entry.getValue());\r\n                }\r\n            }\r\n            { // draw highlights\r\n                RENDER_TYPE.setupRenderState();\r\n\r\n                if (capabilityProviderVBO == null) {\r\n                    capabilityProviderVBO = new VertexBuffer(VertexBuffer.Usage.STATIC);\r\n                    capabilityProviderVBO.bind();\r\n                    capabilityProviderVBO.upload(createCapabilityProviderVBO());\r\n                } else {\r\n                    capabilityProviderVBO.bind();\r\n                }\r\n\r\n                for (var pos : labelPositions.keySet()) {\r\n                    poseStack.pushPose();\r\n                    poseStack.translate(pos.getX(), pos.getY(), pos.getZ());\r\n\r\n                    //noinspection DataFlowIssue\r\n                    capabilityProviderVBO.drawWithShader(\r\n                            poseStack.last().pose(),\r\n                            event.getProjectionMatrix(),\r\n                            GameRenderer.getPositionColorShader()\r\n                    );\r\n                    poseStack.popPose();\r\n                }\r\n\r\n                VertexBuffer.unbind();\r\n                RENDER_TYPE.clearRenderState();\r\n            }\r\n            bufferSource.endBatch();\r\n            poseStack.popPose();\r\n            RenderSystem.enableDepthTest();\r\n        }\r\n\r\n        var networkTool = player.getMainHandItem();\r\n        if (!(networkTool.getItem() instanceof NetworkToolItem)) networkTool = player.getOffhandItem();\r\n        if (networkTool.getItem() instanceof NetworkToolItem) {\r\n            List<BlockPos> cablePositions = new ArrayList<>();\r\n            List<BlockPos> capabilityProviderPositions = new ArrayList<>();\r\n            // gather network positions from item\r\n            networkTool.getOrCreateTag().getList(\"networks\", Tag.TAG_COMPOUND).forEach(networkTag -> {\r\n                ((CompoundTag) networkTag).getList(\"cable_positions\", Tag.TAG_COMPOUND)\r\n                        .stream()\r\n                        .map(CompoundTag.class::cast)\r\n                        .map(NbtUtils::readBlockPos)\r\n                        .forEach(cablePositions::add);\r\n                ((CompoundTag) networkTag)\r\n                        .getList(\"capability_provider_positions\", Tag.TAG_COMPOUND)\r\n                        .stream()\r\n                        .map(CompoundTag.class::cast)\r\n                        .map(NbtUtils::readBlockPos)\r\n                        .forEach(capabilityProviderPositions::add);\r\n            });\r\n\r\n            var poseStack = event.getPoseStack();\r\n            var camera = Minecraft.getInstance().gameRenderer.getMainCamera();\r\n            var bufferSource = Minecraft.getInstance().renderBuffers().bufferSource();\r\n\r\n            RenderSystem.disableDepthTest();\r\n\r\n            poseStack.pushPose();\r\n            poseStack.translate(\r\n                    -camera.getPosition().x,\r\n                    -camera.getPosition().y,\r\n                    -camera.getPosition().z\r\n            );\r\n\r\n            { // draw highlights\r\n                RENDER_TYPE.setupRenderState();\r\n\r\n                if (capabilityProviderVBO == null) {\r\n                    capabilityProviderVBO = new VertexBuffer(VertexBuffer.Usage.STATIC);\r\n                    capabilityProviderVBO.bind();\r\n                    capabilityProviderVBO.upload(createCapabilityProviderVBO());\r\n                } else {\r\n                    capabilityProviderVBO.bind();\r\n                }\r\n\r\n                for (var blockPos : capabilityProviderPositions) {\r\n                    poseStack.pushPose();\r\n                    poseStack.translate(blockPos.getX(), blockPos.getY(), blockPos.getZ());\r\n\r\n                    //noinspection DataFlowIssue\r\n                    capabilityProviderVBO.drawWithShader(\r\n                            poseStack.last().pose(),\r\n                            event.getProjectionMatrix(),\r\n                            GameRenderer.getPositionColorShader()\r\n                    );\r\n                    poseStack.popPose();\r\n                }\r\n\r\n\r\n                if (cableVBO == null) {\r\n                    cableVBO = new VertexBuffer(VertexBuffer.Usage.STATIC);\r\n                    cableVBO.bind();\r\n                    cableVBO.upload(createCableVBO());\r\n                } else {\r\n                    cableVBO.bind();\r\n                }\r\n\r\n                for (var blockPos : cablePositions) {\r\n                    poseStack.pushPose();\r\n                    poseStack.translate(blockPos.getX(), blockPos.getY(), blockPos.getZ());\r\n\r\n                    //noinspection DataFlowIssue\r\n                    cableVBO.drawWithShader(\r\n                            poseStack.last().pose(),\r\n                            event.getProjectionMatrix(),\r\n                            GameRenderer.getPositionColorShader()\r\n                    );\r\n                    poseStack.popPose();\r\n                }\r\n\r\n                VertexBuffer.unbind();\r\n                RENDER_TYPE.clearRenderState();\r\n            }\r\n            bufferSource.endBatch();\r\n            poseStack.popPose();\r\n            RenderSystem.enableDepthTest();\r\n        }\r\n    }\r\n\r\n    private static void drawLabel(\r\n            PoseStack poseStack,\r\n            Camera camera,\r\n            BlockPos pos,\r\n            MultiBufferSource mbs,\r\n            Collection<String> labels\r\n    ) {\r\n        poseStack.pushPose();\r\n        poseStack.translate(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5);\r\n        poseStack.mulPose(camera.rotation());\r\n        poseStack.scale(-0.025f, -0.025f, 0.025f);\r\n        Font font = Minecraft.getInstance().font;\r\n        poseStack.translate(0, labels.size() * (font.lineHeight + 0.1) / -2f, 0);\r\n        for (var label : labels) {\r\n            font.drawInBatch(\r\n                    label,\r\n                    -font.width(label) / 2f,\r\n                    0,\r\n                    -0x1,\r\n                    false,\r\n                    poseStack.last().pose(),\r\n                    mbs,\r\n                    Font.DisplayMode.SEE_THROUGH,\r\n                    0,\r\n                    0xF000F0\r\n            );\r\n            poseStack.translate(0, font.lineHeight + 0.1, 0);\r\n        }\r\n        poseStack.popPose();\r\n    }\r\n\r\n    public static BufferBuilder.RenderedBuffer createCapabilityProviderVBO() {\r\n        return createShape(100, 0, 255, 100);\r\n    }\r\n\r\n    public static BufferBuilder.RenderedBuffer createCableVBO() {\r\n        return createShape(100, 255, 0, 100);\r\n    }\r\n\r\n    public static BufferBuilder.RenderedBuffer createShape(int r, int g, int b, int a) {\r\n        var builder = new BufferBuilder(4 * 6 * 8);\r\n        builder.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);\r\n\r\n        builder.vertex(0F, 1F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 1F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 1F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 1F, 0F).color(r, g, b, a).endVertex();\r\n\r\n        builder.vertex(0F, 1F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 1F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 0F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 0F, 0F).color(r, g, b, a).endVertex();\r\n\r\n        builder.vertex(1F, 1F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 1F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 0F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 0F, 1F).color(r, g, b, a).endVertex();\r\n\r\n        builder.vertex(0F, 1F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 1F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 0F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 0F, 1F).color(r, g, b, a).endVertex();\r\n\r\n        builder.vertex(1F, 0F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 0F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 1F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 1F, 1F).color(r, g, b, a).endVertex();\r\n\r\n        builder.vertex(1F, 0F, 0F).color(r, g, b, a).endVertex();\r\n        builder.vertex(1F, 0F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 0F, 1F).color(r, g, b, a).endVertex();\r\n        builder.vertex(0F, 0F, 0F).color(r, g, b, a).endVertex();\r\n\r\n        return builder.end();\r\n    }\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\PrintingPressBlockItem.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.item;\r\n\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.registry.SFMBlocks;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.item.BlockItem;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.TooltipFlag;\r\nimport net.minecraft.world.level.Level;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport java.util.List;\r\n\r\npublic class PrintingPressBlockItem extends BlockItem {\r\n    public PrintingPressBlockItem() {\r\n        super(SFMBlocks.PRINTING_PRESS_BLOCK.get(), new Properties());\r\n    }\r\n\r\n    @Override\r\n    public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltip, TooltipFlag pFlag) {\r\n        super.appendHoverText(pStack, pLevel, pTooltip, pFlag);\r\n        pTooltip.add(Constants.LocalizationKeys.PRINTING_PRESS_TOOLTIP.getComponent().withStyle(ChatFormatting.GRAY));\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CableNetworkManager.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.cablenetwork;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.level.Level;\r\nimport net.neoforged.fml.common.Mod;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\n/**\r\n * Helper class to memorize the relevant chains of inventory cables.\r\n * <p>\r\n * Rather than looking up the connected cable blocks for each manager each tick,\r\n * this class aims to keep track of the chains instead.\r\n * Adding or removing cable blocks that invoke the relevant methods for this class\r\n * will help build the network.\r\n * <p>\r\n * Adding cables can do one of:\r\n * - append to existing network\r\n * - cause two existing networks to join\r\n * - create a new network\r\n * <p>\r\n * Removing cables can:\r\n * - Remove it from the network\r\n * - Remove the network if it was the only member\r\n * - Cause a network to split into other networks if it was a \"bridge\" block\r\n */\r\npublic class CableNetworkManager {\r\n\r\n    private static final Map<Level, List<CableNetwork>> NETWORKS = new WeakHashMap<>();\r\n\r\n    /**\r\n     * Remove a block from any networks it is in. Then, prune any empty networks.\r\n     */\r\n    public static void removeCable(Level level, BlockPos cablePos) {\r\n        getNetworkFromCablePosition(level, cablePos).ifPresent(network -> {\r\n            removeNetwork(network);\r\n            var newNetworks = network.withoutCable(cablePos);\r\n            newNetworks.forEach(CableNetworkManager::addNetwork);\r\n        });\r\n    }\r\n\r\n    public static Optional<CableNetwork> getOrRegisterNetworkFromManagerPosition(ManagerBlockEntity tile) {\r\n        return getOrRegisterNetworkFromCablePosition(tile.getLevel(), tile.getBlockPos());\r\n    }\r\n\r\n    public static Optional<CableNetwork> getNetworkFromPosition(Level level, BlockPos pos) {\r\n        return getNetworksForLevel(level)\r\n                .filter(net -> net.CABLE_POSITIONS.contains(pos.asLong())\r\n                               || net.getCapabilityProviderPositions().anyMatch(pos::equals))\r\n                .findFirst();\r\n    }\r\n\r\n    public static Stream<CableNetwork> getNetworksForLevel(Level level) {\r\n        return NETWORKS.getOrDefault(level, Collections.emptyList())\r\n                .stream()\r\n                .filter(net -> net.getLevel().isClientSide() == level.isClientSide());\r\n    }\r\n\r\n    private static Optional<CableNetwork> getNetworkFromCablePosition(Level level, BlockPos pos) {\r\n        return getNetworksForLevel(level)\r\n                .filter(net -> net.containsCablePosition(pos))\r\n                .findFirst();\r\n    }\r\n\r\n    private static void removeNetwork(CableNetwork network) {\r\n        NETWORKS.getOrDefault(network.getLevel(), Collections.emptyList()).remove(network);\r\n    }\r\n\r\n    private static void addNetwork(CableNetwork network) {\r\n        NETWORKS.computeIfAbsent(network.getLevel(), k -> new ArrayList<>()).add(network);\r\n    }\r\n\r\n    /**\r\n     * Finds the set of networks that contain the given position\r\n     */\r\n    private static Set<CableNetwork> getCandidateNetworks(Level level, BlockPos pos) {\r\n        return getNetworksForLevel(level)\r\n                .filter(net -> net.isAdjacentToCable(pos))\r\n                .collect(Collectors.toSet());\r\n    }\r\n\r\n\r\n    private static Optional<CableNetwork> mergeNetworks(Set<CableNetwork> networks) {\r\n        if (networks.isEmpty()) return Optional.empty();\r\n\r\n        Iterator<CableNetwork> iterator = networks.iterator();\r\n        CableNetwork main = iterator.next();\r\n\r\n        // Merge the rest into the first\r\n        iterator.forEachRemaining(other -> {\r\n            main.mergeNetwork(other);\r\n            removeNetwork(other);\r\n        });\r\n\r\n        return Optional.of(main);\r\n    }\r\n\r\n    public static void unregisterNetworkForTestingPurposes(CableNetwork network) {\r\n        removeNetwork(network);\r\n    }\r\n\r\n    /**\r\n     * Gets the cable network object. If none exists and one should, it will create and populate\r\n     * one.\r\n     * <p>\r\n     * Networks should only exist on the server side.\r\n     */\r\n    public static Optional<CableNetwork> getOrRegisterNetworkFromCablePosition(@Nullable Level level, BlockPos pos) {\r\n        if (level == null) return Optional.empty();\r\n        if (level.isClientSide()) return Optional.empty();\r\n\r\n        // only cables define the main spine of a network\r\n        if (!CableNetwork.isCable(level, pos)) return Optional.empty();\r\n\r\n        // discover existing network for this position\r\n        Optional<CableNetwork> existing = getNetworkFromCablePosition(level, pos);\r\n        if (existing.isPresent()) return existing;\r\n\r\n        // find potential networks\r\n        Set<CableNetwork> candidates = getCandidateNetworks(level, pos);\r\n\r\n        // no candidates, create new network\r\n        if (candidates.isEmpty()) {\r\n            CableNetwork network = new CableNetwork(level);\r\n            addNetwork(network);\r\n            // rebuild network from world\r\n            // might be first time used after loading from disk\r\n            network.rebuildNetwork(pos);\r\n            return Optional.of(network);\r\n        }\r\n\r\n        // one candidate exists, add the cable to it\r\n        if (candidates.size() == 1) {\r\n            // Only one network matches this cable, add cable as member\r\n            CableNetwork network = candidates.iterator().next();\r\n            network.addCable(pos);\r\n            return Optional.of(network);\r\n        }\r\n\r\n        // more than one candidate network exists, merge them\r\n        Optional<CableNetwork> result = mergeNetworks(candidates);\r\n        result.ifPresent(net -> net.addCable(pos));\r\n        return result;\r\n    }\r\n\r\n\r\n    public static List<BlockPos> getBadCableCachePositions(Level level) {\r\n        return getNetworksForLevel(level)\r\n                .flatMap(CableNetwork::getCablePositions)\r\n                .filter(pos -> !(level.getBlockState(pos).getBlock() instanceof ICableBlock))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public static void clear() {\r\n        NETWORKS.clear();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ResourceIdentifier.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.program.RegexCache;\r\nimport ca.teamdman.sfm.common.registry.SFMResourceTypes;\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;\r\nimport net.minecraft.ResourceLocationException;\r\nimport net.minecraft.resources.ResourceLocation;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.Optional;\r\nimport java.util.function.Predicate;\r\nimport java.util.regex.Pattern;\r\nimport java.util.regex.PatternSyntaxException;\r\n\r\n// resourceTypeName resourceNamespace, resourceTypeName name, resource resourceNamespace, resource name\r\n// sfm:item:minecraft:stone\r\npublic class ResourceIdentifier<STACK, ITEM, CAP> implements ASTNode, Predicate<Object> {\r\n\r\n    public static final ResourceIdentifier<?, ?, ?> MATCH_ALL = new ResourceIdentifier<>(\r\n            \".*\",\r\n            \".*\"\r\n    );\r\n\r\n    public final String resourceTypeNamespace;\r\n    public final String resourceTypeName;\r\n    public final String resourceNamespace;\r\n    public final String resourceName;\r\n    private @Nullable ResourceType<STACK, ITEM, CAP> resourceTypeCache = null;\r\n\r\n\r\n    private final Predicate<String> resourceNamespacePredicate;\r\n    private final Predicate<String> resourceNamePredicate;\r\n\r\n    public ResourceIdentifier(\r\n            String resourceTypeNamespace,\r\n            String resourceTypeName,\r\n            String resourceNamespace,\r\n            String resourceName\r\n    ) {\r\n        this.resourceTypeNamespace = resourceTypeNamespace;\r\n        this.resourceTypeName = resourceTypeName;\r\n        this.resourceNamespace = resourceNamespace;\r\n        this.resourceName = resourceName;\r\n        this.resourceNamespacePredicate = RegexCache.buildPredicate(resourceNamespace);\r\n        this.resourceNamePredicate = RegexCache.buildPredicate(resourceName);\r\n    }\r\n\r\n    public boolean matchesStack(ResourceLocation stackId) {\r\n        return resourceNamePredicate.test(stackId.getPath()) && resourceNamespacePredicate.test(stackId.getNamespace());\r\n    }\r\n\r\n    public ResourceIdentifier(String value) {\r\n        this(SFM.MOD_ID, \"item\", \".*\", value);\r\n    }\r\n\r\n    public ResourceIdentifier(String namespace, String value) {\r\n        this(SFM.MOD_ID, \"item\", namespace, value);\r\n    }\r\n\r\n    public ResourceIdentifier(String typeName, String resourceNamespace, String resourceName) {\r\n        this(SFM.MOD_ID, typeName, resourceNamespace, resourceName);\r\n    }\r\n\r\n    public static <STACK, ITEM, CAP> ResourceIdentifier<STACK, ITEM, CAP> fromString(String string) {\r\n        var parts = string.split(\":\");\r\n        if (parts.length == 1) {\r\n            return new ResourceIdentifier<>(parts[0]);\r\n        } else if (parts.length == 2) {\r\n            return new ResourceIdentifier<>(parts[0], parts[1]);\r\n        } else if (parts.length == 3) {\r\n            return new ResourceIdentifier<>(parts[0], parts[1], parts[2]);\r\n        } else if (parts.length == 4) {\r\n            return new ResourceIdentifier<>(parts[0], parts[1], parts[2], parts[3]);\r\n        } else {\r\n            throw new IllegalArgumentException(\"bad resource id: \" + string);\r\n        }\r\n    }\r\n\r\n    public void assertValid() throws IllegalArgumentException {\r\n        try {\r\n            if (RegexCache.isRegexPattern(this.resourceNamespace)) {\r\n                Pattern.compile(this.resourceNamespace);\r\n            }\r\n            if (RegexCache.isRegexPattern(this.resourceName)) {\r\n                Pattern.compile(this.resourceName);\r\n            }\r\n        } catch (PatternSyntaxException e) {\r\n            throw new IllegalArgumentException(\"Invalid resource identifier pattern \\\"\"\r\n                                               + this\r\n                                               + \"\\\" - \"\r\n                                               + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public Optional<ResourceLocation> getLocation() {\r\n        try {\r\n            return Optional.of(new ResourceLocation(resourceNamespace, resourceName));\r\n        } catch (ResourceLocationException e) {\r\n            return Optional.empty();\r\n        }\r\n    }\r\n\r\n    private static final Map<ResourceIdentifier<?, ?, ?>, List<ResourceIdentifier<?, ?, ?>>> expansionCache = new Object2ObjectOpenHashMap<>();\r\n\r\n    public boolean test(Object other) {\r\n        ResourceType<STACK, ITEM, CAP> resourceType = getResourceType();\r\n        return resourceType != null && resourceType.matchesStack(this, other);\r\n    }\r\n\r\n    public List<ResourceIdentifier<STACK, ITEM, CAP>> expand() {\r\n        if (this.getResourceType() == SFMResourceTypes.FORGE_ENERGY.get())\r\n            return List.of(new ResourceIdentifier<>(\r\n                    this.resourceTypeNamespace,\r\n                    this.resourceTypeName,\r\n                    \"forge\",\r\n                    \"energy\"\r\n            ));\r\n        if (expansionCache.containsKey(this)) {\r\n            //noinspection unchecked,rawtypes\r\n            return (List<ResourceIdentifier<STACK, ITEM, CAP>>) (List) expansionCache.get(this);\r\n        }\r\n        ResourceType<STACK, ITEM, CAP> resourceType = getResourceType();\r\n        //noinspection DataFlowIssue // if we get here, it should have a registry\r\n        List<ResourceIdentifier<STACK, ITEM, CAP>> rtn = resourceType.getRegistry().keySet()\r\n                .stream()\r\n                .filter(this::matchesStack)\r\n                .map(key -> new ResourceIdentifier<STACK, ITEM, CAP>(\r\n                        resourceTypeNamespace,\r\n                        resourceTypeName,\r\n                        key.getNamespace(),\r\n                        key.getPath()\r\n                )).toList();\r\n        //noinspection unchecked,rawtypes\r\n        expansionCache.put(this, (List) rtn);\r\n        return rtn;\r\n    }\r\n\r\n    public void setResourceTypeCache(@Nullable ResourceType<STACK, ITEM, CAP> resourceTypeCache) {\r\n        this.resourceTypeCache = resourceTypeCache;\r\n    }\r\n\r\n    public @Nullable ResourceType<STACK, ITEM, CAP> getResourceType() {\r\n        if (resourceTypeCache == null) {\r\n            //noinspection unchecked\r\n            setResourceTypeCache((ResourceType<STACK, ITEM, CAP>) SFMResourceTypes.fastLookup(\r\n                    resourceTypeNamespace,\r\n                    resourceTypeName\r\n            ));\r\n        }\r\n        return resourceTypeCache;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return resourceTypeNamespace + \":\" + resourceTypeName + \":\" + resourceNamespace + \":\" + resourceName;\r\n    }\r\n\r\n    public String toStringCondensed() {\r\n        String rtn;\r\n        if (resourceTypeNamespace.equals(SFM.MOD_ID) && resourceTypeName.equals(\"item\")) {\r\n            if (resourceNamespace.equals(\".*\")) {\r\n                rtn = resourceName;\r\n            } else {\r\n                rtn = resourceNamespace + \":\" + resourceName;\r\n            }\r\n        } else if (\r\n                resourceTypeNamespace.equals(SFM.MOD_ID)\r\n                && resourceTypeName.equals(\"forge_energy\")\r\n                && getLocation()\r\n                        .filter(rl -> rl.equals(new ResourceLocation(\"forge\", \"energy\")))\r\n                        .isPresent()\r\n        ) {\r\n            rtn = \"forge_energy::\";\r\n        } else if (resourceTypeNamespace.equals(SFM.MOD_ID)) {\r\n            rtn = resourceTypeName + \":\" + resourceNamespace + \":\" + resourceName;\r\n        } else {\r\n            rtn = resourceTypeNamespace + \":\" + resourceTypeName + \":\" + resourceNamespace + \":\" + resourceName;\r\n        }\r\n        return rtn;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        ResourceIdentifier<?, ?, ?> that = (ResourceIdentifier<?, ?, ?>) o;\r\n        return Objects.equals(resourceTypeNamespace, that.resourceTypeNamespace)\r\n               && Objects.equals(resourceTypeName, that.resourceTypeName)\r\n               && Objects.equals(resourceNamespace, that.resourceNamespace)\r\n               && Objects.equals(resourceName, that.resourceName);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(resourceTypeNamespace, resourceTypeName, resourceNamespace, resourceName);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMItems.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.item.*;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.world.item.BlockItem;\r\nimport net.minecraft.world.item.CreativeModeTab;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic class SFMItems {\r\n\r\n    private static final DeferredRegister<Item> ITEMS = DeferredRegister.create(BuiltInRegistries.ITEM, SFM.MOD_ID);\r\n    public static final Supplier<Item> MANAGER_ITEM = register(\"manager\", SFMBlocks.MANAGER_BLOCK);\r\n    public static final Supplier<Item> CABLE_ITEM = register(\"cable\", SFMBlocks.CABLE_BLOCK);\r\n    //    public static final  Supplier<Item>   BATTERY_ITEM    = register(\"battery\", SFMBlocks.BATTERY_BLOCK);\r\n    public static final Supplier<Item> WATER_TANK_ITEM = register(\"water_tank\", SFMBlocks.WATER_TANK_BLOCK);\r\n    public static final Supplier<Item> DISK_ITEM = ITEMS.register(\"disk\", DiskItem::new);\r\n    public static final Supplier<Item> LABEL_GUN_ITEM = ITEMS.register(\r\n            \"labelgun\",\r\n            LabelGunItem::new\r\n    ); // TODO: rename on a major version update to label_gun\r\n    public static final Supplier<Item> NETWORK_TOOL_ITEM = ITEMS.register(\"network_tool\", NetworkToolItem::new);\r\n\r\n    public static final Supplier<Item> PRINTING_PRESS_ITEM = ITEMS.register(\r\n            \"printing_press\",\r\n            PrintingPressBlockItem::new\r\n    );\r\n\r\n    public static final Supplier<Item> FORM_ITEM = ITEMS.register(\"form\", FormItem::new);\r\n    public static final Supplier<Item> EXPERIENCE_SHARD_ITEM = ITEMS.register(\"xp_shard\", ExperienceShard::new);\r\n    public static final Supplier<Item> EXPERIENCE_GOOP_ITEM = ITEMS.register(\"xp_goop\", ExperienceGoop::new);\r\n\r\n    public static void register(IEventBus bus) {\r\n        ITEMS.register(bus);\r\n    }\r\n\r\n    private static Supplier<Item> register(String name, Supplier<Block> block) {\r\n        return ITEMS.register(name, () -> new BlockItem(block.get(), new Item.Properties()));\r\n    }\r\n\r\n    public static void populateMainCreativeTab(\r\n            @SuppressWarnings(\"unused\") CreativeModeTab.ItemDisplayParameters params,\r\n            CreativeModeTab.Output output\r\n    ) {\r\n        output.acceptAll(SFMItems.ITEMS\r\n                                 .getEntries()\r\n                                 .stream()\r\n                                 .map(Supplier::get)\r\n                                 .map(ItemStack::new)\r\n                                 .toList());\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\InputResourceTracker.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport ca.teamdman.sfml.ast.ResourceIdSet;\r\nimport ca.teamdman.sfml.ast.ResourceLimit;\r\nimport it.unimi.dsi.fastutil.ints.Int2LongArrayMap;\r\n\r\nimport java.util.concurrent.atomic.AtomicLong;\r\nimport java.util.function.Predicate;\r\n\r\npublic class InputResourceTracker<STACK, ITEM, CAP> implements Predicate<Object> {\r\n\r\n    private final ResourceLimit<STACK, ITEM, CAP> RESOURCE_LIMIT;\r\n    private final ResourceIdSet EXCLUSIONS;\r\n    private final Int2LongArrayMap RETENTION_OBLIGATIONS = new Int2LongArrayMap();\r\n    private final AtomicLong TRANSFERRED;\r\n    private final AtomicLong RETENTION_OBLIGATION_PROGRESS;\r\n\r\n    public InputResourceTracker(\r\n            ResourceLimit<STACK, ITEM, CAP> limit,\r\n            ResourceIdSet exclusions,\r\n            AtomicLong transferred,\r\n            AtomicLong retentionObligationProgress\r\n    ) {\r\n        this.RESOURCE_LIMIT = limit;\r\n        this.EXCLUSIONS = exclusions;\r\n        this.TRANSFERRED = transferred;\r\n        this.RETENTION_OBLIGATION_PROGRESS = retentionObligationProgress;\r\n    }\r\n\r\n    public boolean isDone() {\r\n        return TRANSFERRED.get() >= RESOURCE_LIMIT.limit().quantity().number().value();\r\n    }\r\n\r\n    public long getExistingRetentionObligation(int slot) {\r\n        return RETENTION_OBLIGATIONS.getOrDefault(slot, 0);\r\n    }\r\n\r\n    public long getRemainingRetentionObligation() {\r\n        return RESOURCE_LIMIT.limit().retention().number().value() - RETENTION_OBLIGATION_PROGRESS.get();\r\n    }\r\n\r\n    public void trackRetentionObligation(int slot, long promise) {\r\n        this.RETENTION_OBLIGATION_PROGRESS.accumulateAndGet(promise, Long::sum);\r\n        this.RETENTION_OBLIGATIONS.merge(slot, promise, Long::sum);\r\n    }\r\n\r\n    public ResourceLimit<STACK, ITEM, CAP> getResourceLimit() {\r\n        return RESOURCE_LIMIT;\r\n    }\r\n\r\n    public long getMaxTransferable() {\r\n        return RESOURCE_LIMIT.limit().quantity().number().value() - TRANSFERRED.get();\r\n    }\r\n\r\n    public void trackTransfer(long amount) {\r\n        TRANSFERRED.accumulateAndGet(amount, Long::sum);\r\n    }\r\n\r\n    @Override\r\n    public boolean test(Object stack) {\r\n        return RESOURCE_LIMIT.test(stack) && !EXCLUSIONS.test(stack);\r\n    }\r\n\r\n    public boolean matchesCapabilityType(Object capability) {\r\n        ResourceType<STACK, ITEM, CAP> resourceType = RESOURCE_LIMIT.resourceId().getResourceType();\r\n        return resourceType != null && resourceType.matchesCapabilityType(capability);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundInputInspectionRequestPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport ca.teamdman.sfml.ast.InputStatement;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\nimport net.neoforged.neoforge.network.PacketDistributor;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundInputInspectionRequestPacket(\r\n        String programString,\r\n        int inputNodeIndex\r\n) {\r\n    public static void encode(ServerboundInputInspectionRequestPacket msg, FriendlyByteBuf friendlyByteBuf) {\r\n        friendlyByteBuf.writeUtf(msg.programString, Program.MAX_PROGRAM_LENGTH);\r\n        friendlyByteBuf.writeInt(msg.inputNodeIndex());\r\n    }\r\n\r\n    public static ServerboundInputInspectionRequestPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ServerboundInputInspectionRequestPacket(\r\n                friendlyByteBuf.readUtf(Program.MAX_PROGRAM_LENGTH),\r\n                friendlyByteBuf.readInt()\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ServerboundInputInspectionRequestPacket msg, NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> {\r\n            // we don't know if the player has the program edit screen open from a manager or a disk in hand\r\n            ServerPlayer player = context.getSender();\r\n            if (player == null) return;\r\n            ManagerBlockEntity manager;\r\n            if (player.containerMenu instanceof ManagerContainerMenu mcm) {\r\n                if (player.level().getBlockEntity(mcm.MANAGER_POSITION) instanceof ManagerBlockEntity mbe) {\r\n                    manager = mbe;\r\n                } else {\r\n                    return;\r\n                }\r\n            } else {\r\n                //todo: localize\r\n                SFMPackets.INSPECTION_CHANNEL.send(\r\n                        PacketDistributor.PLAYER.with(() -> player),\r\n                        new ClientboundInputInspectionResultsPacket(\r\n                                \"This inspection is only available when editing inside a manager.\")\r\n                );\r\n                return;\r\n            }\r\n            Program.compile(\r\n                    msg.programString,\r\n                    (successProgram, builder) -> builder\r\n                            .getNodeAtIndex(msg.inputNodeIndex)\r\n                            .filter(InputStatement.class::isInstance)\r\n                            .map(InputStatement.class::cast)\r\n                            .ifPresent(inputStatement -> {\r\n                                StringBuilder payload = new StringBuilder();\r\n                                payload\r\n                                        .append(inputStatement.toStringPretty())\r\n                                        .append(\"\\n-- peek results --\\n\");\r\n\r\n                                ProgramContext programContext = new ProgramContext(\r\n                                        successProgram,\r\n                                        manager,\r\n                                        ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES\r\n                                );\r\n                                int preLen = payload.length();\r\n                                inputStatement.gatherSlots(\r\n                                        programContext,\r\n                                        slot -> SFMUtils\r\n                                                .getInputStatementForSlot(\r\n                                                        slot,\r\n                                                        inputStatement.labelAccess()\r\n                                                )\r\n                                                .ifPresent(is -> payload\r\n                                                        .append(is.toStringPretty())\r\n                                                        .append(\"\\n\"))\r\n                                );\r\n                                if (payload.length() == preLen) {\r\n                                    payload.append(\"none\");\r\n                                }\r\n\r\n                                SFMPackets.INSPECTION_CHANNEL.send(\r\n                                        PacketDistributor.PLAYER.with(() -> player),\r\n                                        new ClientboundInputInspectionResultsPacket(\r\n                                                SFMUtils.truncate(\r\n                                                        payload.toString(),\r\n                                                        ClientboundInputInspectionResultsPacket.MAX_RESULTS_LENGTH\r\n                                                ))\r\n                                );\r\n                            }),\r\n                    failure -> {\r\n                    }\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\LabelAccess.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.stream.Collectors;\r\n\r\npublic record LabelAccess(\r\n        List<Label> labels,\r\n        DirectionQualifier directions,\r\n        NumberRangeSet slots,\r\n        RoundRobin roundRobin\r\n) implements ASTNode {\r\n    @Override\r\n    public String toString() {\r\n        StringBuilder builder = new StringBuilder();\r\n        builder.append(labels.stream().map(Objects::toString).collect(Collectors.joining(\", \")));\r\n        if (roundRobin.isEnabled()) {\r\n            builder.append(\" \").append(roundRobin);\r\n        }\r\n        if (!directions.directions().isEmpty()) {\r\n            builder.append(\" \");\r\n            builder\r\n                    .append(directions\r\n                                    .stream()\r\n                                    .map(DirectionQualifier::directionToString)\r\n                                    .collect(Collectors.joining(\", \")))\r\n                    .append(\" SIDE\");\r\n        }\r\n        if (slots.ranges().length > 0) {\r\n            if (slots.ranges().length != 1 || !slots.ranges()[0].equals(NumberRange.MAX_RANGE)) {\r\n                builder.append(\" SLOTS\");\r\n                for (NumberRange range : slots.ranges()) {\r\n                    builder.append(\" \").append(range);\r\n                }\r\n            }\r\n        }\r\n        return builder.toString();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\InputStatement.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.InputResourceTracker;\r\nimport ca.teamdman.sfm.common.program.LimitedInputSlot;\r\nimport ca.teamdman.sfm.common.program.LimitedInputSlotObjectPool;\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\n\r\nimport java.util.List;\r\nimport java.util.function.Consumer;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\npublic record InputStatement(\r\n        LabelAccess labelAccess,\r\n        ResourceLimits resourceLimits,\r\n        boolean each\r\n) implements Statement {\r\n\r\n    @Override\r\n    public void tick(ProgramContext context) {\r\n        context.addInput(this);\r\n    }\r\n\r\n    private static final LimitedInputSlotObjectPool SLOT_POOL = new LimitedInputSlotObjectPool();\r\n\r\n    @SuppressWarnings(\"rawtypes\")\r\n    public static void releaseSlots(List<LimitedInputSlot> slots) {\r\n        SLOT_POOL.release(slots);\r\n    }\r\n\r\n    public static void releaseSlot(LimitedInputSlot<?, ?, ?> slot) {\r\n        SLOT_POOL.release(slot);\r\n    }\r\n\r\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"}) // basically impossible to make this method generic safe\r\n    public void gatherSlots(ProgramContext context, Consumer<LimitedInputSlot<?, ?, ?>> acceptor) {\r\n        Stream<ResourceType> types = resourceLimits\r\n                .resourceLimits()\r\n                .stream()\r\n                .map(ResourceLimit::resourceId)\r\n                .map((ResourceIdentifier x) -> x.getResourceType())\r\n                .distinct();\r\n\r\n        if (!each) {\r\n            // create a single matcher to be shared by all capabilities\r\n            List<InputResourceTracker<?, ?, ?>> inputMatchers = resourceLimits.createInputTrackers();\r\n            for (var type : (Iterable<ResourceType>) types::iterator) {\r\n                for (var capability : (Iterable) type.getCapabilities(context, labelAccess)::iterator) {\r\n                    gatherSlots((ResourceType<Object, Object, Object>) type, capability, inputMatchers, acceptor);\r\n                }\r\n            }\r\n        } else {\r\n            for (ResourceType type : (Iterable<ResourceType>) types::iterator) {\r\n                for (var cap : (Iterable<?>) type.getCapabilities(context, labelAccess)::iterator) {\r\n                    List<InputResourceTracker<?, ?, ?>> inputTrackers = resourceLimits.createInputTrackers();\r\n                    gatherSlots((ResourceType<Object, Object, Object>) type, cap, inputTrackers, acceptor);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private <STACK, ITEM, CAP> void gatherSlots(\r\n            ResourceType<STACK, ITEM, CAP> type,\r\n            CAP capability,\r\n            List<InputResourceTracker<?, ?, ?>> trackers,\r\n            Consumer<LimitedInputSlot<?, ?, ?>> acceptor\r\n    ) {\r\n        for (int slot = 0; slot < type.getSlots(capability); slot++) {\r\n            if (labelAccess.slots().contains(slot)) {\r\n                STACK stack = type.getStackInSlot(capability, slot);\r\n                if (!type.isEmpty(stack)) {\r\n                    for (InputResourceTracker<?, ?, ?> tracker : trackers) {\r\n                        if (tracker.matchesCapabilityType(capability) && tracker.test(stack)) {\r\n                            //noinspection unchecked\r\n                            acceptor.accept(SLOT_POOL.acquire(\r\n                                    capability,\r\n                                    slot,\r\n                                    (InputResourceTracker<STACK, ITEM, CAP>) tracker\r\n                            ));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"INPUT \" + resourceLimits + \" FROM \" + (each ? \"EACH \" : \"\") + labelAccess;\r\n    }\r\n\r\n    public String toStringPretty() {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"INPUT\");\r\n        String rls = resourceLimits.toStringPretty(Limit.MAX_QUANTITY_NO_RETENTION);\r\n        if (rls.lines().count() > 1) {\r\n            sb.append(\"\\n\");\r\n            sb.append(rls.lines().map(s -> \"  \" + s).collect(Collectors.joining(\"\\n\")));\r\n            sb.append(\"\\n\");\r\n        } else {\r\n            sb.append(\" \");\r\n            sb.append(rls);\r\n            sb.append(\" \");\r\n        }\r\n        sb.append(\"FROM \");\r\n        sb.append(each ? \"EACH \" : \"\");\r\n        sb.append(labelAccess);\r\n        return sb.toString();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\util\\SFMUtils.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.util;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.capabilityprovidermapper.CapabilityProviderMapper;\r\nimport ca.teamdman.sfm.common.program.LimitedInputSlot;\r\nimport ca.teamdman.sfm.common.registry.SFMCapabilityProviderMappers;\r\nimport ca.teamdman.sfm.common.registry.SFMResourceTypes;\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport ca.teamdman.sfml.ast.Number;\r\nimport ca.teamdman.sfml.ast.*;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.nbt.ListTag;\r\nimport net.minecraft.nbt.StringTag;\r\nimport net.minecraft.nbt.Tag;\r\nimport net.minecraft.network.chat.contents.TranslatableContents;\r\nimport net.minecraft.resources.ResourceKey;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.level.Level;\r\nimport net.neoforged.neoforge.common.capabilities.ICapabilityProvider;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.*;\r\nimport java.util.function.Consumer;\r\nimport java.util.stream.Stream;\r\n\r\npublic class SFMUtils {\r\n\r\n    /**\r\n     * Gets a stream using a self-feeding mapping function. Prevents the\r\n     * re-traversal of elements that have been visited before.\r\n     *\r\n     * @param operator Consumes queue elements to build the result set and\r\n     *                 append the next queue elements\r\n     * @param first    Initial value, not checked against the filter\r\n     * @param <T>      Type that the mapper consumes and produces\r\n     * @return Stream result after termination of the recursive mapping process\r\n     */\r\n    public static <T> Stream<T> getRecursiveStream(\r\n            RecursiveBuilder<T> operator, T first\r\n    ) {\r\n        Stream.Builder<T> builder = Stream.builder();\r\n        Set<T> debounce = new HashSet<>();\r\n        Deque<T> toVisit = new ArrayDeque<>();\r\n        toVisit.add(first);\r\n        debounce.add(first);\r\n        while (!toVisit.isEmpty()) {\r\n            T current = toVisit.pop();\r\n            operator.accept(current, next -> {\r\n                if (!debounce.contains(next)) {\r\n                    debounce.add(next);\r\n                    toVisit.add(next);\r\n                }\r\n            }, builder::add);\r\n        }\r\n        return builder.build();\r\n    }\r\n\r\n    public static TranslatableContents deserializeTranslation(CompoundTag tag) {\r\n        var key = tag.getString(\"key\");\r\n        var args = tag\r\n                .getList(\"args\", Tag.TAG_STRING)\r\n                .stream()\r\n                .map(StringTag.class::cast)\r\n                .map(StringTag::getAsString)\r\n                .toArray();\r\n        return getTranslatableContents(key, args);\r\n    }\r\n\r\n    public static CompoundTag serializeTranslation(TranslatableContents contents) {\r\n        CompoundTag tag = new CompoundTag();\r\n        tag.putString(\"key\", contents.getKey());\r\n        ListTag args = new ListTag();\r\n        for (var arg : contents.getArgs()) {\r\n            args.add(StringTag.valueOf(arg.toString()));\r\n        }\r\n        tag.put(\"args\", args);\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Helper method to avoid noisy git merges between versions\r\n     */\r\n    public static TranslatableContents getTranslatableContents(String key, Object... args) {\r\n        return new TranslatableContents(key, null, args);\r\n    }\r\n\r\n    /**\r\n     * Helper method to avoid noisy git merges between versions\r\n     */\r\n    public static TranslatableContents getTranslatableContents(String key) {\r\n        return getTranslatableContents(key, new Object[]{});\r\n    }\r\n    public static <STACK, ITEM, CAP> Optional<InputStatement> getInputStatementForSlot(\r\n            LimitedInputSlot<STACK, ITEM, CAP> slot,\r\n            LabelAccess labelAccess\r\n    ) {\r\n        STACK potential = slot.peekExtractPotential();\r\n        if (slot.type.isEmpty(potential)) return Optional.empty();\r\n        long toMove = slot.type.getAmount(potential);\r\n        toMove = Long.min(toMove, slot.tracker.getResourceLimit().limit().quantity().number().value());\r\n        long remainingObligation = slot.tracker.getRemainingRetentionObligation();\r\n        toMove -= Long.min(toMove, remainingObligation);\r\n        potential = slot.type.withCount(potential, toMove);\r\n        STACK stack = potential;\r\n\r\n        return SFMResourceTypes.DEFERRED_TYPES\r\n                .getResourceKey(slot.type)\r\n                .map(x -> {\r\n                    //noinspection unchecked,rawtypes\r\n                    return (ResourceKey<ResourceType<STACK, ITEM, CAP>>) (ResourceKey) x;\r\n                })\r\n                .map((ResourceKey<ResourceType<STACK, ITEM, CAP>> resourceTypeResourceKey) -> SFMUtils.getInputStatementForStack(\r\n                        resourceTypeResourceKey,\r\n                        slot.type,\r\n                        stack,\r\n                        \"temp\",\r\n                        slot.slot,\r\n                        false,\r\n                        null\r\n                ))\r\n                // update the labels\r\n                .map(inputStatement -> new InputStatement(new LabelAccess(\r\n                        labelAccess.labels(),\r\n                        labelAccess.directions(),\r\n                        inputStatement.labelAccess()\r\n                                .slots(),\r\n                        RoundRobin.disabled()\r\n                ), inputStatement.resourceLimits(), inputStatement.each()));\r\n    }\r\n\r\n\r\n    public interface RecursiveBuilder<T> {\r\n\r\n        void accept(T current, Consumer<T> next, Consumer<T> results);\r\n    }\r\n\r\n\r\n    public static <STACK, ITEM, CAP> InputStatement getInputStatementForStack(\r\n            ResourceKey<ResourceType<STACK, ITEM, CAP>> resourceTypeResourceKey,\r\n            ResourceType<STACK, ITEM, CAP> resourceType,\r\n            STACK stack,\r\n            String label,\r\n            int slot,\r\n            boolean each,\r\n            @Nullable Direction direction\r\n    ) {\r\n        LabelAccess labelAccess = new LabelAccess(\r\n                List.of(new Label(label)),\r\n                new DirectionQualifier(\r\n                        direction == null\r\n                        ? EnumSet.noneOf(Direction.class)\r\n                        : EnumSet.of(direction)),\r\n                new NumberRangeSet(\r\n                        new NumberRange[]{new NumberRange(slot, slot)}\r\n                ),\r\n                RoundRobin.disabled()\r\n        );\r\n        Limit limit = new Limit(\r\n                new ResourceQuantity(\r\n                        new Number(resourceType.getAmount(stack)),\r\n                        ResourceQuantity.IdExpansionBehaviour.NO_EXPAND\r\n                ),\r\n                new ResourceQuantity(\r\n                        new Number(0),\r\n                        ResourceQuantity.IdExpansionBehaviour.NO_EXPAND\r\n                )\r\n        );\r\n        ResourceLocation stackId = resourceType.getRegistryKey(stack);\r\n        ResourceIdentifier<STACK, ITEM, CAP> resourceIdentifier = new ResourceIdentifier<>(\r\n                resourceTypeResourceKey.location().getNamespace(),\r\n                resourceTypeResourceKey.location().getPath(),\r\n                stackId.getNamespace(),\r\n                stackId.getPath()\r\n        );\r\n        ResourceLimit<STACK, ITEM, CAP> resourceLimit = new ResourceLimit<>(\r\n                resourceIdentifier, limit\r\n        );\r\n        ResourceLimits resourceLimits = new ResourceLimits(\r\n                List.of(resourceLimit),\r\n                ResourceIdSet.EMPTY\r\n        );\r\n        return new InputStatement(\r\n                labelAccess,\r\n                resourceLimits,\r\n                each\r\n        );\r\n    }\r\n\r\n    public static String truncate(String input, int maxLength) {\r\n        if (input.length() > maxLength) {\r\n            SFM.LOGGER.warn(\r\n                    \"input too big, truncation has occurred! (len={}, max={}, over={})\",\r\n                    input.length(),\r\n                    maxLength,\r\n                    maxLength - input.length()\r\n            );\r\n            String truncationWarning = \"\\n...truncated\";\r\n            return input.substring(0, maxLength - truncationWarning.length()) + truncationWarning;\r\n        }\r\n        return input;\r\n    }\r\n\r\n    /**\r\n     * Find a {@link net.neoforged.neoforge.common.capabilities.CapabilityProvider} as provided by the registered capability provider mappers.\r\n     * If multiple {@link CapabilityProviderMapper}s match, the first one is returned.\r\n     */\r\n    @SuppressWarnings(\"UnstableApiUsage\") // for the javadoc lol\r\n    public static Optional<ICapabilityProvider> discoverCapabilityProvider(Level level, BlockPos pos) {\r\n        if (!level.isLoaded(pos)) return Optional.empty();\r\n        return SFMCapabilityProviderMappers.DEFERRED_MAPPERS\r\n                .stream()\r\n                .map(mapper -> mapper.getProviderFor(level, pos))\r\n                .filter(Optional::isPresent)\r\n                .map(Optional::get)\r\n                .findFirst();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\OutputStatement.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.program.*;\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.function.Consumer;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\npublic class OutputStatement implements Statement {\r\n    private final LabelAccess labelAccess;\r\n    private final ResourceLimits resourceLimits;\r\n    private final boolean each;\r\n\r\n    private int lastInputCapacity = 32;\r\n    private int lastOutputCapacity = 32;\r\n\r\n    public OutputStatement(\r\n            LabelAccess labelAccess,\r\n            ResourceLimits resourceLimits,\r\n            boolean each\r\n    ) {\r\n        this.labelAccess = labelAccess;\r\n        this.resourceLimits = resourceLimits;\r\n        this.each = each;\r\n    }\r\n\r\n    /**\r\n     * Juicy method function here.\r\n     * Given two slots, move as much as possible from one to the other.\r\n     *\r\n     * @param source      The slot to pull from\r\n     * @param destination the slot to push to\r\n     * @param <STACK>     the stack type\r\n     * @param <ITEM>      the item type\r\n     * @param <CAP>       the capability type\r\n     */\r\n    public static <STACK, ITEM, CAP> void moveTo(\r\n            LimitedInputSlot<STACK, ITEM, CAP> source, LimitedOutputSlot<STACK, ITEM, CAP> destination\r\n    ) {\r\n        // always ensure types match\r\n        // items and fluids are incompatible, etc\r\n        if (!source.type.equals(destination.type)) return;\r\n\r\n        // find out what we can pull out\r\n        // should never be empty by the time we get here\r\n        STACK potential = source.peekExtractPotential();\r\n        // ensure the output slot allows this item\r\n        if (!destination.tracker.test(potential)) return;\r\n        // find out how much we can fit\r\n        STACK remainder = destination.insert(potential, true);\r\n\r\n        // how many can we move before accounting for limits\r\n        long toMove = source.type.getAmount(potential) - source.type.getAmount(remainder);\r\n        if (toMove == 0) return;\r\n\r\n        // how many have we promised to RETAIN in this slot\r\n        toMove -= source.tracker.getExistingRetentionObligation(source.slot);\r\n        // how many more need we are obligated to leave to satisfy the remainder of the RETAIN limit\r\n        long remainingObligation = source.tracker.getRemainingRetentionObligation();\r\n        remainingObligation = Long.min(toMove, remainingObligation);\r\n        toMove -= remainingObligation;\r\n\r\n        // update the obligation tracker\r\n        source.tracker.trackRetentionObligation(source.slot, remainingObligation);\r\n\r\n        // if we can't move anything after our retention obligations, we're done\r\n        if (toMove == 0) {\r\n            source.setDone();\r\n            return;\r\n        }\r\n\r\n        // apply output constraints\r\n        toMove = Math.min(toMove, destination.tracker.getMaxTransferable());\r\n\r\n        // apply input constraints\r\n        toMove = Math.min(toMove, source.tracker.getMaxTransferable());\r\n\r\n        // apply resource constraints\r\n        toMove = Math.min(toMove, source.type.getMaxStackSize(potential));\r\n        if (toMove <= 0) return;\r\n\r\n        // extract item for real\r\n        STACK extracted = source.extract(toMove);\r\n        // insert item for real\r\n        remainder = destination.insert(extracted, false);\r\n        var moved = source.type.getAmount(extracted) - source.type.getAmount(remainder);\r\n        // track transfer amounts\r\n        source.tracker.trackTransfer(moved);\r\n        destination.tracker.trackTransfer(moved);\r\n\r\n        // if remainder exists, someone lied.\r\n        // this should never happen\r\n        // will void items if it does\r\n        if (!destination.type.isEmpty(remainder)) {\r\n            SFM.LOGGER.error(\r\n                    \"Failed to move all promised items, took {} but had {} left over after insertion.\",\r\n                    extracted,\r\n                    remainder\r\n            );\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\r\n    @Override\r\n    public void tick(ProgramContext context) {\r\n        if (context.getExecutionPolicy() == ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES) return;\r\n        // gather the input slots from all the input statements, +27 to hopefully avoid resizing\r\n        List<LimitedInputSlot> inputSlots = new ArrayList<>(lastInputCapacity + 27);\r\n        for (var inputStatement : context.getInputs()) {\r\n            inputStatement.gatherSlots(context, inputSlots::add);\r\n        }\r\n        if (inputSlots.isEmpty()) return; // stop if we have nothing to move\r\n        lastInputCapacity = inputSlots.size();\r\n\r\n        // collect the output slots, +27 to hopefully avoid resizing\r\n        List<LimitedOutputSlot> outputSlots = new ArrayList<>(lastOutputCapacity + 27);\r\n        gatherSlots(context, outputSlots::add);\r\n        lastOutputCapacity = outputSlots.size();\r\n\r\n        // try and move resources from input slots to output slots\r\n        var inIt = inputSlots.iterator();\r\n        while (inIt.hasNext()) {\r\n            var in = inIt.next();\r\n            if (in.isDone()) { // this slot is no longer useful\r\n                inIt.remove(); // ensure we only release slots once\r\n                InputStatement.releaseSlot(in); // release the slot to the object pool\r\n                continue;\r\n            }\r\n            var outIt = outputSlots.iterator();\r\n            while (outIt.hasNext()) {\r\n                var out = outIt.next();\r\n                if (out.isDone()) { // this slot is no longer useful\r\n                    outIt.remove(); // ensure we only release slots once\r\n                    LimitedOutputSlotObjectPool.INSTANCE.release(out); // release the slot to the object pool\r\n                    continue;\r\n                }\r\n                moveTo(in, out); // move the contents from the \"in\" slot to the \"out\" slot\r\n                if (in.isDone()) break; // stop processing output slots if we have nothing to move\r\n            }\r\n            if (outputSlots.isEmpty()) break; // stop processing input slots if we have no output slots\r\n        }\r\n\r\n        LimitedOutputSlotObjectPool.INSTANCE.release(outputSlots);\r\n        InputStatement.releaseSlots(inputSlots);\r\n    }\r\n\r\n    /**\r\n     * The output statement contains labels.\r\n     * Each block in the world can have more than one programString.\r\n     * Each block can have a block entity.\r\n     * Each block entity can have 0 or more slots.\r\n     * <p>\r\n     * We want collect the slots from all the labelled blocks.\r\n     */\r\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"}) // basically impossible to make this method generic safe\r\n    public void gatherSlots(ProgramContext context, Consumer<LimitedOutputSlot<?, ?, ?>> acceptor) {\r\n        // find all the types referenced in the output statement\r\n        Stream<ResourceType> types = resourceLimits\r\n                .resourceLimits()\r\n                .stream()\r\n                .map(ResourceLimit::resourceId)\r\n                .map((ResourceIdentifier x) -> x.getResourceType())\r\n                .distinct();\r\n\r\n        if (!each) {\r\n            // create a single matcher to be shared by all capabilities\r\n            List<OutputResourceTracker<?, ?, ?>> outputTracker = resourceLimits.createOutputTrackers();\r\n            for (var type : (Iterable<ResourceType>) types::iterator) {\r\n                for (var cap : (Iterable<?>) type.getCapabilities(context, labelAccess)::iterator) {\r\n                    gatherSlots((ResourceType<Object, Object, Object>) type, cap, outputTracker, acceptor);\r\n                }\r\n            }\r\n        } else {\r\n            for (var type : (Iterable<ResourceType>) types::iterator) {\r\n                for (var cap : (Iterable<?>) type.getCapabilities(context, labelAccess)::iterator) {\r\n                    List<OutputResourceTracker<?, ?, ?>> outputTracker = resourceLimits.createOutputTrackers();\r\n                    gatherSlots((ResourceType<Object, Object, Object>) type, cap, outputTracker, acceptor);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private <STACK, ITEM, CAP> void gatherSlots(\r\n            ResourceType<STACK, ITEM, CAP> type,\r\n            CAP capability,\r\n            List<OutputResourceTracker<?, ?, ?>> trackers,\r\n            Consumer<LimitedOutputSlot<?, ?, ?>> acceptor\r\n    ) {\r\n        for (int slot = 0; slot < type.getSlots(capability); slot++) {\r\n            if (labelAccess.slots().contains(slot)) {\r\n                for (OutputResourceTracker<?, ?, ?> tracker : trackers) {\r\n                    if (tracker.matchesCapabilityType(capability)) {\r\n                        //noinspection unchecked\r\n                        acceptor.accept(LimitedOutputSlotObjectPool.INSTANCE.acquire(\r\n                                capability,\r\n                                slot,\r\n                                (OutputResourceTracker<STACK, ITEM, CAP>) tracker\r\n                        ));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public LabelAccess labelAccess() {\r\n        return labelAccess;\r\n    }\r\n\r\n    public ResourceLimits resourceLimits() {\r\n        return resourceLimits;\r\n    }\r\n\r\n    public boolean each() {\r\n        return each;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj == this) return true;\r\n        if (obj == null || obj.getClass() != this.getClass()) return false;\r\n        var that = (OutputStatement) obj;\r\n        return Objects.equals(this.labelAccess, that.labelAccess) &&\r\n               Objects.equals(this.resourceLimits, that.resourceLimits) &&\r\n               this.each == that.each;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(labelAccess, resourceLimits, each);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"OUTPUT \" + resourceLimits + \" TO \" + (each ? \"EACH \" : \"\") + labelAccess;\r\n    }\r\n\r\n    public String toStringPretty() {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"OUTPUT\");\r\n        String rls = resourceLimits.toStringPretty(Limit.MAX_QUANTITY_MAX_RETENTION);\r\n        if (rls.lines().count() > 1) {\r\n            sb.append(\"\\n\");\r\n            sb.append(rls.lines().map(s -> \"  \" + s).collect(Collectors.joining(\"\\n\")));\r\n            sb.append(\"\\n\");\r\n        } else {\r\n            sb.append(\" \");\r\n            sb.append(rls);\r\n            sb.append(\" \");\r\n        }\r\n        sb.append(\"TO \");\r\n        sb.append(each ? \"EACH \" : \"\");\r\n        sb.append(labelAccess);\r\n        return sb.toString();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CapabilityProviderMapper.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.capabilityprovidermapper;\r\n\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.level.LevelAccessor;\r\nimport net.neoforged.neoforge.common.capabilities.ICapabilityProvider;\r\n\r\nimport java.util.Optional;\r\n\r\npublic interface CapabilityProviderMapper {\r\n    Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos);\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Block.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\n\r\nimport java.util.List;\r\n\r\npublic record Block(List<Statement> statements) implements Statement {\r\n    @Override\r\n    public void tick(ProgramContext context) {\r\n        for (Statement statement : statements) {\r\n            statement.tick(context);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        var rtn = new StringBuilder();\r\n        for (Statement statement : statements) {\r\n            if (statement instanceof InputStatement ins) {\r\n                rtn.append(ins.toStringPretty().strip());\r\n            } else if (statement instanceof OutputStatement outs) {\r\n                rtn.append(outs.toStringPretty().strip());\r\n            } else {\r\n                rtn.append(statement.toString().strip());\r\n            }\r\n            rtn.append(\"\\n\");\r\n        }\r\n        return rtn.toString().strip();\r\n    }\r\n\r\n    @Override\r\n    public List<Statement> getStatements() {\r\n        return statements;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\NumberRangeSet.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\npublic record NumberRangeSet(NumberRange[] ranges) implements ASTNode {\r\n    public static NumberRangeSet MAX_RANGE = new NumberRangeSet(new NumberRange[]{NumberRange.MAX_RANGE});\r\n    public boolean contains(int value) {\r\n        for (NumberRange range : ranges) {\r\n            if (range.contains(value)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\render\\package-info.java\r\n\r\n````java\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.client.render;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.capabilityprovidermapper;\r\n\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.world.level.LevelAccessor;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.minecraft.world.level.block.LayeredCauldronBlock;\r\nimport net.minecraft.world.level.material.Fluids;\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.capabilities.ICapabilityProvider;\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\nimport net.neoforged.neoforge.fluids.FluidStack;\r\nimport net.neoforged.neoforge.fluids.capability.IFluidHandler;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport javax.annotation.Nonnull;\r\nimport java.util.Optional;\r\n\r\npublic class CauldronCapabilityProviderMapper implements CapabilityProviderMapper {\r\n    @Override\r\n    public Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos) {\r\n        var state = level.getBlockState(pos);\r\n        if (state.getBlock() == Blocks.CAULDRON\r\n            || state.getBlock() == Blocks.WATER_CAULDRON\r\n            || state.getBlock() == Blocks.LAVA_CAULDRON) {\r\n            return Optional.of(new CauldronCapabilityProvider(level, pos));\r\n        }\r\n        return Optional.empty();\r\n    }\r\n\r\n    private static class CauldronCapabilityProvider implements ICapabilityProvider {\r\n        private final LazyOptional<IFluidHandler> fluidHandlerLazyOptional;\r\n\r\n\r\n        public CauldronCapabilityProvider(LevelAccessor level, BlockPos pos) {\r\n            this.fluidHandlerLazyOptional = LazyOptional.of(() -> new CauldronFluidHandler(level, pos));\r\n        }\r\n\r\n        @Nonnull\r\n        @Override\r\n        public @NotNull <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {\r\n            if (cap == Capabilities.FLUID_HANDLER) {\r\n                return fluidHandlerLazyOptional.cast();\r\n            }\r\n            return LazyOptional.empty();\r\n        }\r\n    }\r\n\r\n    private record CauldronFluidHandler(\r\n            LevelAccessor level,\r\n            BlockPos pos\r\n    ) implements IFluidHandler {\r\n\r\n        @Override\r\n        public int getTanks() {\r\n            return 1;\r\n        }\r\n\r\n        @Override\r\n        public @NotNull FluidStack getFluidInTank(int tank) {\r\n            var state = level.getBlockState(pos);\r\n            if (state.getBlock() == Blocks.WATER_CAULDRON) {\r\n                int level = state.getValue(LayeredCauldronBlock.LEVEL);\r\n                if (level == 0) {\r\n                    return FluidStack.EMPTY;\r\n                }\r\n                return new FluidStack(Fluids.WATER, level * 250);\r\n            } else if (state.getBlock() == Blocks.LAVA_CAULDRON) {\r\n                return new FluidStack(Fluids.LAVA, 1000);\r\n            }\r\n            return FluidStack.EMPTY;\r\n        }\r\n\r\n        @Override\r\n        public int getTankCapacity(int tank) {\r\n            return 1000;\r\n        }\r\n\r\n        @Override\r\n        public boolean isFluidValid(int tank, @NotNull FluidStack stack) {\r\n            return stack.getFluid() == Fluids.WATER || stack.getFluid() == Fluids.LAVA;\r\n        }\r\n\r\n        @Override\r\n        public int fill(FluidStack resource, FluidAction action) {\r\n            var state = level.getBlockState(pos);\r\n            if (state.getBlock() == Blocks.CAULDRON) { // if empty\r\n                if (resource.getFluid() == Fluids.WATER) {\r\n                    int layers = Math.min(3, resource.getAmount() / 250);\r\n                    if (action.execute()) {\r\n                        level.setBlock(\r\n                                pos,\r\n                                Blocks.WATER_CAULDRON.defaultBlockState().setValue(\r\n                                        LayeredCauldronBlock.LEVEL,\r\n                                        layers\r\n                                ),\r\n                                Block.UPDATE_ALL\r\n                        );\r\n                    }\r\n                    return layers * 250;\r\n                } else if (resource.getFluid() == Fluids.LAVA && resource.getAmount() >= 1000) {\r\n                    if (action.execute()) {\r\n                        level.setBlock(\r\n                                pos,\r\n                                Blocks.LAVA_CAULDRON.defaultBlockState(),\r\n                                Block.UPDATE_ALL\r\n                        );\r\n                    }\r\n                    return 1000;\r\n                }\r\n            } else if (state.getBlock() instanceof LayeredCauldronBlock) {\r\n                int waterLevel = state.getValue(LayeredCauldronBlock.LEVEL);\r\n                if (waterLevel >= 3) {\r\n                    return 0;\r\n                }\r\n                int waterLevelIncrease = Math.min(3 - waterLevel, Math.min(3, resource.getAmount() / 250));\r\n                if (action.execute()) {\r\n                    level.setBlock(\r\n                            pos,\r\n                            state.setValue(LayeredCauldronBlock.LEVEL, waterLevel + waterLevelIncrease),\r\n                            Block.UPDATE_ALL\r\n                    );\r\n                }\r\n                return waterLevelIncrease * 250;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public @NotNull FluidStack drain(FluidStack resource, FluidAction action) {\r\n            var state = level.getBlockState(pos);\r\n            if (state.getBlock() instanceof LayeredCauldronBlock) {\r\n                int waterLevel = state.getValue(LayeredCauldronBlock.LEVEL);\r\n                if (waterLevel == 0) {\r\n                    return FluidStack.EMPTY;\r\n                }\r\n                int waterLevelDrain = Math.min(waterLevel, resource.getAmount() / 250);\r\n                if (action.execute()) {\r\n                    int resultLevel = waterLevel - waterLevelDrain;\r\n                    if (resultLevel == 0) {\r\n                        level.setBlock(\r\n                                pos,\r\n                                Blocks.CAULDRON.defaultBlockState(),\r\n                                Block.UPDATE_ALL\r\n                        );\r\n                    } else {\r\n                        level.setBlock(\r\n                                pos,\r\n                                state.setValue(LayeredCauldronBlock.LEVEL, resultLevel),\r\n                                Block.UPDATE_ALL\r\n                        );\r\n                    }\r\n                }\r\n                return new FluidStack(Fluids.WATER, waterLevelDrain * 250);\r\n            } else if (state.getBlock() == Blocks.LAVA_CAULDRON && resource.getAmount() >= 1000) {\r\n                if (action.execute()) {\r\n                    level.setBlock(\r\n                            pos,\r\n                            Blocks.CAULDRON.defaultBlockState(),\r\n                            Block.UPDATE_ALL\r\n                    );\r\n                }\r\n                return new FluidStack(Fluids.LAVA, 1000);\r\n            }\r\n            return FluidStack.EMPTY;\r\n        }\r\n\r\n        @Override\r\n        public @NotNull FluidStack drain(int maxDrain, FluidAction action) {\r\n            var state = level.getBlockState(pos);\r\n            if (state.getBlock() instanceof LayeredCauldronBlock) {\r\n                int waterLevel = state.getValue(LayeredCauldronBlock.LEVEL);\r\n                if (waterLevel == 0) {\r\n                    return FluidStack.EMPTY;\r\n                }\r\n                int waterLevelDrain = Math.min(waterLevel, maxDrain / 250);\r\n                if (action.execute()) {\r\n                    level.setBlock(\r\n                            pos,\r\n                            state.setValue(LayeredCauldronBlock.LEVEL, waterLevel - waterLevelDrain),\r\n                            Block.UPDATE_ALL\r\n                    );\r\n                }\r\n                return new FluidStack(Fluids.WATER, waterLevelDrain * 250);\r\n            } else if (state.getBlock() == Blocks.LAVA_CAULDRON && maxDrain >= 1000) {\r\n                if (action.execute()) {\r\n                    level.setBlock(\r\n                            pos,\r\n                            Blocks.CAULDRON.defaultBlockState(),\r\n                            Block.UPDATE_ALL\r\n                    );\r\n                }\r\n                return new FluidStack(Fluids.LAVA, 1000);\r\n            }\r\n            return FluidStack.EMPTY;\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\NotContainer.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.recipe;\r\n\r\nimport net.minecraft.world.Container;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\n\r\nimport java.util.Set;\r\nimport java.util.function.Predicate;\r\n\r\n/**\r\n * Recipe stuff wants your block entities to be Containers to do stuff.\r\n * I don't want to use a Container when the block has no GUI.\r\n * This is a hack to make the recipe stuff happy.\r\n */\r\n@SuppressWarnings(\"RedundantMethodOverride\")\r\npublic interface NotContainer extends Container {\r\n\r\n    @Override\r\n    default void clearContent() {\r\n    }\r\n\r\n    @Override\r\n    default int getContainerSize() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    default boolean isEmpty() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    default ItemStack getItem(int pSlot) {\r\n        return ItemStack.EMPTY;\r\n    }\r\n\r\n    @Override\r\n    default ItemStack removeItem(int pSlot, int pAmount) {\r\n        return ItemStack.EMPTY;\r\n\r\n    }\r\n\r\n    @Override\r\n    default ItemStack removeItemNoUpdate(int pSlot) {\r\n        return ItemStack.EMPTY;\r\n    }\r\n\r\n    @Override\r\n    default void setItem(int pSlot, ItemStack pStack) {\r\n    }\r\n\r\n    @Override\r\n    default int getMaxStackSize() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    default void setChanged() {\r\n    }\r\n\r\n    @Override\r\n    default boolean stillValid(Player pPlayer) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    default void startOpen(Player pPlayer) {\r\n    }\r\n\r\n    @Override\r\n    default void stopOpen(Player pPlayer) {\r\n    }\r\n\r\n    @Override\r\n    default boolean canPlaceItem(int pIndex, ItemStack pStack) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    default int countItem(Item pItem) {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    default boolean hasAnyOf(Set<Item> pSet) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    default boolean hasAnyMatching(Predicate<ItemStack> p_216875_) {\r\n        return false;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\jei\\FallingAnvilJEICategory.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.jei;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.item.FormItem;\r\nimport ca.teamdman.sfm.common.registry.SFMItems;\r\nimport mezz.jei.api.gui.builder.IRecipeLayoutBuilder;\r\nimport mezz.jei.api.gui.drawable.IDrawable;\r\nimport mezz.jei.api.helpers.IJeiHelpers;\r\nimport mezz.jei.api.recipe.IFocusGroup;\r\nimport mezz.jei.api.recipe.RecipeIngredientRole;\r\nimport mezz.jei.api.recipe.RecipeType;\r\nimport mezz.jei.api.recipe.category.IRecipeCategory;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.core.registries.Registries;\r\nimport net.minecraft.nbt.ListTag;\r\nimport net.minecraft.nbt.StringTag;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.item.EnchantedBookItem;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.Items;\r\nimport net.minecraft.world.item.crafting.Ingredient;\r\nimport net.minecraft.world.item.enchantment.Enchantment;\r\nimport net.minecraft.world.item.enchantment.EnchantmentInstance;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.neoforged.neoforge.registries.NeoForgeRegistries;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\npublic class FallingAnvilJEICategory implements IRecipeCategory<FallingAnvilRecipe> {\r\n\r\n    public static final RecipeType<FallingAnvilRecipe> RECIPE_TYPE = RecipeType.create(\r\n            SFM.MOD_ID,\r\n            \"falling_anvil\",\r\n            FallingAnvilRecipe.class\r\n    );\r\n    private final IDrawable background;\r\n    private final IDrawable icon;\r\n\r\n    public FallingAnvilJEICategory(IJeiHelpers jeiHelpers) {\r\n        background = jeiHelpers.getGuiHelper().createBlankDrawable(80, 54);\r\n        icon = jeiHelpers.getGuiHelper().createDrawableItemStack(new ItemStack(Blocks.ANVIL));\r\n    }\r\n\r\n    @Override\r\n    public RecipeType<FallingAnvilRecipe> getRecipeType() {\r\n        return RECIPE_TYPE;\r\n    }\r\n\r\n    @Override\r\n    public Component getTitle() {\r\n        return Constants.LocalizationKeys.FALLING_ANVIL_JEI_CATEGORY_TITLE.getComponent();\r\n    }\r\n\r\n    @Override\r\n    public IDrawable getBackground() {\r\n        return background;\r\n    }\r\n\r\n    @Override\r\n    public IDrawable getIcon() {\r\n        return icon;\r\n    }\r\n\r\n    @Override\r\n    public void setRecipe(IRecipeLayoutBuilder builder, FallingAnvilRecipe recipe, IFocusGroup focuses) {\r\n        var anvil = List.of(\r\n                new ItemStack(Items.ANVIL),\r\n                new ItemStack(Items.CHIPPED_ANVIL),\r\n                new ItemStack(Items.DAMAGED_ANVIL)\r\n        );\r\n        if (recipe instanceof FallingAnvilFormRecipe formRecipe) {\r\n            builder.addSlot(RecipeIngredientRole.CATALYST, 0, 0).addItemStacks(anvil);\r\n            builder.addSlot(RecipeIngredientRole.INPUT, 0, 18).addIngredients(formRecipe.PARENT.FORM);\r\n            ItemStack ironBlock = new ItemStack(Blocks.IRON_BLOCK);\r\n            var displayTag = ironBlock.getOrCreateTag().getCompound(\"display\");\r\n            var lore = new ListTag();\r\n            lore.add(StringTag.valueOf(Component.Serializer.toJson(Constants.LocalizationKeys.FALLING_ANVIL_JEI_CONSUMED.getComponent())));\r\n            displayTag.put(\"Lore\", lore);\r\n            ironBlock.getOrCreateTag().put(\"display\", displayTag);\r\n            builder.addSlot(RecipeIngredientRole.INPUT, 0, 36).addItemStack(ironBlock);\r\n            builder\r\n                    .addSlot(RecipeIngredientRole.OUTPUT, 50, 18)\r\n                    .addItemStacks(Arrays.stream(formRecipe.PARENT.FORM.getItems()).map(FormItem::getForm).toList());\r\n        } else if (recipe instanceof FallingAnvilDisenchantRecipe) {\r\n            var tools = List.of(\r\n                    Items.DIAMOND_HELMET,\r\n                    Items.DIAMOND_CHESTPLATE,\r\n                    Items.DIAMOND_LEGGINGS,\r\n                    Items.DIAMOND_BOOTS,\r\n                    Items.DIAMOND_PICKAXE,\r\n                    Items.DIAMOND_SHOVEL,\r\n                    Items.DIAMOND_AXE,\r\n                    Items.DIAMOND_HOE,\r\n                    Items.DIAMOND_SWORD,\r\n                    Items.GOLDEN_HELMET,\r\n                    Items.GOLDEN_CHESTPLATE,\r\n                    Items.GOLDEN_LEGGINGS,\r\n                    Items.GOLDEN_BOOTS,\r\n                    Items.GOLDEN_PICKAXE,\r\n                    Items.GOLDEN_SHOVEL,\r\n                    Items.GOLDEN_AXE,\r\n                    Items.GOLDEN_HOE,\r\n                    Items.GOLDEN_SWORD,\r\n                    Items.IRON_HELMET,\r\n                    Items.IRON_CHESTPLATE,\r\n                    Items.IRON_LEGGINGS,\r\n                    Items.IRON_BOOTS,\r\n                    Items.IRON_PICKAXE,\r\n                    Items.IRON_SHOVEL,\r\n                    Items.IRON_AXE,\r\n                    Items.IRON_HOE,\r\n                    Items.IRON_SWORD,\r\n                    Items.LEATHER_HELMET,\r\n                    Items.LEATHER_CHESTPLATE,\r\n                    Items.LEATHER_LEGGINGS,\r\n                    Items.LEATHER_BOOTS,\r\n                    Items.CHAINMAIL_HELMET,\r\n                    Items.CHAINMAIL_CHESTPLATE,\r\n                    Items.CHAINMAIL_LEGGINGS,\r\n                    Items.CHAINMAIL_BOOTS,\r\n                    Items.WOODEN_PICKAXE,\r\n                    Items.WOODEN_SHOVEL,\r\n                    Items.WOODEN_AXE,\r\n                    Items.WOODEN_HOE,\r\n                    Items.WOODEN_SWORD,\r\n                    Items.BOW\r\n            );\r\n            var enchanted = new ArrayList<ItemStack>();\r\n            var books = new ArrayList<ItemStack>();\r\n            for (Enchantment enchant : BuiltInRegistries.ENCHANTMENT) {\r\n                for (Item tool : tools) {\r\n                    var stack = new ItemStack(tool);\r\n                    if (enchant.canEnchant(stack)) {\r\n                        stack.enchant(enchant, enchant.getMaxLevel());\r\n                        enchanted.add(stack);\r\n                        books.add(EnchantedBookItem.createForEnchantment(new EnchantmentInstance(\r\n                                enchant,\r\n                                enchant.getMaxLevel()\r\n                        )));\r\n                    }\r\n                }\r\n            }\r\n\r\n            builder.addSlot(RecipeIngredientRole.CATALYST, 8, 0).addItemStacks(anvil);\r\n            builder.addSlot(RecipeIngredientRole.INPUT, 0, 18).addItemStacks(enchanted);\r\n            builder.addSlot(RecipeIngredientRole.INPUT, 18, 18).addItemStack(new ItemStack(Items.BOOK));\r\n            ItemStack obsidian = new ItemStack(Blocks.OBSIDIAN);\r\n            var displayTag = obsidian.getOrCreateTag().getCompound(\"display\");\r\n            var lore = new ListTag();\r\n            lore.add(StringTag.valueOf(Component.Serializer.toJson(Constants.LocalizationKeys.FALLING_ANVIL_JEI_NOT_CONSUMED.getComponent())));\r\n            displayTag.put(\"Lore\", lore);\r\n            obsidian.getOrCreateTag().put(\"display\", displayTag);\r\n            builder.addSlot(RecipeIngredientRole.INPUT, 8, 36).addItemStack(obsidian);\r\n            builder.addSlot(RecipeIngredientRole.OUTPUT, 50, 18).addItemStacks(books);\r\n        } else if (recipe instanceof FallingAnvilExperienceShardRecipe) {\r\n            builder.addSlot(RecipeIngredientRole.CATALYST, 0, 0).addItemStacks(anvil);\r\n            builder.addSlot(RecipeIngredientRole.INPUT, 0, 18).addIngredients(Ingredient.of(Items.ENCHANTED_BOOK));\r\n            ItemStack obsidian = new ItemStack(Blocks.OBSIDIAN);\r\n            var displayTag = obsidian.getOrCreateTag().getCompound(\"display\");\r\n            var lore = new ListTag();\r\n            lore.add(StringTag.valueOf(Component.Serializer.toJson(Constants.LocalizationKeys.FALLING_ANVIL_JEI_NOT_CONSUMED.getComponent())));\r\n            displayTag.put(\"Lore\", lore);\r\n            obsidian.getOrCreateTag().put(\"display\", displayTag);\r\n            builder.addSlot(RecipeIngredientRole.INPUT, 0, 36).addItemStack(obsidian);\r\n            builder\r\n                    .addSlot(RecipeIngredientRole.OUTPUT, 50, 18)\r\n                    .addItemStack(new ItemStack(SFMItems.EXPERIENCE_SHARD_ITEM.get()));\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\BlockEntityCapabilityProviderMapper.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.capabilityprovidermapper;\r\n\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.level.LevelAccessor;\r\nimport net.neoforged.neoforge.common.capabilities.ICapabilityProvider;\r\n\r\nimport java.util.Optional;\r\n\r\npublic class BlockEntityCapabilityProviderMapper implements CapabilityProviderMapper {\r\n    @Override\r\n    public Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos) {\r\n        return Optional.ofNullable(level.getBlockEntity(pos));\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ResourceComparer.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic record ResourceComparer<STACK, ITEM, CAP>(\r\n        ComparisonOperator op,\r\n        ResourceQuantity quantity,\r\n        ResourceIdentifier<STACK, ITEM, CAP> res\r\n) implements ASTNode {\r\n    public BoolExpr toBooleanExpression(SetOperator setOp, LabelAccess labelAccess, String sourceCode) {\r\n        return new BoolExpr(\r\n                context -> {\r\n                    ResourceType<STACK, ITEM, CAP> type = res.getResourceType();\r\n                    if (type == null) return false;\r\n                    // get the inventories to check\r\n\r\n                    var handlers = type.getCapabilities(context, labelAccess);\r\n\r\n                    // track how many items seen\r\n                    long overallCount = 0;\r\n                    // track how many inventories satisfied the condition\r\n                    List<Boolean> satisfiedSet = new ArrayList<>();\r\n\r\n                    for (var cap : (Iterable<CAP>) handlers::iterator) {\r\n                        long invCount = 0;\r\n                        for (var stack : (Iterable<STACK>) type.collect(cap, labelAccess)::iterator) {\r\n                            if (this.res.test(stack)) {\r\n                                invCount += type.getAmount(stack);\r\n                                overallCount += type.getAmount(stack);\r\n                            }\r\n                        }\r\n                        satisfiedSet.add(this.op.test(invCount, this.quantity.number().value()));\r\n                    }\r\n                    var isOverallSatisfied = this.op.test(overallCount, this.quantity.number().value());\r\n                    return setOp.test(isOverallSatisfied, satisfiedSet);\r\n                },\r\n                labelAccess + \" HAS \" + sourceCode\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return op().getSourceCode() + \" \" + quantity() + \" \" + res().toStringCondensed();\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\util\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.util;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\gui\\screen\\ManagerScreen.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.gui.screen;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.item.DiskItem;\r\nimport ca.teamdman.sfm.common.net.ServerboundManagerFixPacket;\r\nimport ca.teamdman.sfm.common.net.ServerboundManagerProgramPacket;\r\nimport ca.teamdman.sfm.common.net.ServerboundManagerResetPacket;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport com.mojang.blaze3d.systems.RenderSystem;\r\nimport com.mojang.blaze3d.vertex.BufferBuilder;\r\nimport com.mojang.blaze3d.vertex.DefaultVertexFormat;\r\nimport com.mojang.blaze3d.vertex.Tesselator;\r\nimport com.mojang.blaze3d.vertex.VertexFormat;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.gui.GuiGraphics;\r\nimport net.minecraft.client.gui.components.Tooltip;\r\nimport net.minecraft.client.gui.screens.Screen;\r\nimport net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;\r\nimport net.minecraft.client.player.LocalPlayer;\r\nimport net.minecraft.client.renderer.GameRenderer;\r\nimport net.minecraft.client.resources.language.I18n;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.entity.player.Inventory;\r\nimport net.neoforged.neoforge.client.gui.widget.ExtendedButton;\r\nimport org.joml.Matrix4f;\r\nimport org.lwjgl.glfw.GLFW;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.List;\r\n\r\nimport static ca.teamdman.sfm.common.Constants.LocalizationKeys.*;\r\n\r\npublic class ManagerScreen extends AbstractContainerScreen<ManagerContainerMenu> {\r\n    private static final ResourceLocation BACKGROUND_TEXTURE_LOCATION = new ResourceLocation(\r\n            SFM.MOD_ID,\r\n            \"textures/gui/container/manager.png\"\r\n    );\r\n    private final float STATUS_DURATION = 40;\r\n    private Component status = Component.empty();\r\n    private float statusCountdown = 0;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    private ExtendedButton diagButton;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    private ExtendedButton clipboardPasteButton;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    private ExtendedButton clipboardCopyButton;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    private ExtendedButton resetButton;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    private ExtendedButton editButton;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    private ExtendedButton examplesButton;\r\n\r\n    public List<ExtendedButton> getButtonsForJEIExclusionZones() {\r\n        return List.of(\r\n                clipboardPasteButton,\r\n                editButton,\r\n                examplesButton,\r\n                clipboardCopyButton\r\n        );\r\n    }\r\n\r\n    public ManagerScreen(ManagerContainerMenu menu, Inventory inv, Component title) {\r\n        super(menu, inv, title);\r\n    }\r\n\r\n    public boolean isReadOnly() {\r\n        LocalPlayer player = Minecraft.getInstance().player;\r\n        return player == null || player.isSpectator();\r\n    }\r\n\r\n    public void updateVisibilities() {\r\n        boolean diskPresent = menu.getSlot(0).hasItem();\r\n        diagButton.visible = shouldShowDiagButton();\r\n        clipboardCopyButton.visible = diskPresent;\r\n        clipboardPasteButton.visible = diskPresent && !isReadOnly();\r\n        resetButton.visible = diskPresent && !isReadOnly();\r\n        editButton.visible = diskPresent && !isReadOnly();\r\n    }\r\n\r\n    private Tooltip buildTooltip(LocalizationEntry entry) {\r\n        return Tooltip.create(entry.getComponent());\r\n    }\r\n\r\n    @Override\r\n    protected void init() {\r\n        super.init();\r\n        int buttonWidth = 120;\r\n        clipboardPasteButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(\r\n                (this.width - this.imageWidth) / 2 - buttonWidth,\r\n                (this.height - this.imageHeight) / 2 + 16,\r\n                buttonWidth,\r\n                16,\r\n                MANAGER_GUI_PASTE_FROM_CLIPBOARD_BUTTON.getComponent(),\r\n                button -> this.onLoadClipboard(),\r\n                buildTooltip(MANAGER_GUI_PASTE_FROM_CLIPBOARD_BUTTON_TOOLTIP)\r\n        ));\r\n        editButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(\r\n                (this.width - this.imageWidth) / 2 - buttonWidth,\r\n                (this.height - this.imageHeight) / 2 + 16 + 50,\r\n                buttonWidth,\r\n                16,\r\n                MANAGER_GUI_EDIT_BUTTON.getComponent(),\r\n                button -> onEdit(),\r\n                buildTooltip(MANAGER_GUI_EDIT_BUTTON_TOOLTIP)\r\n        ));\r\n        examplesButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(\r\n                (this.width - this.imageWidth) / 2 - buttonWidth,\r\n                (this.height - this.imageHeight) / 2 + 16 * 2 + 50,\r\n                buttonWidth,\r\n                16,\r\n                MANAGER_GUI_VIEW_EXAMPLES_BUTTON.getComponent(),\r\n                button -> onShowExamples(),\r\n                buildTooltip(MANAGER_GUI_VIEW_EXAMPLES_BUTTON_TOOLTIP)\r\n        ));\r\n        clipboardCopyButton = this.addRenderableWidget(new ExtendedButton(\r\n                (this.width - this.imageWidth) / 2 - buttonWidth,\r\n                (this.height - this.imageHeight) / 2 + 128,\r\n                buttonWidth,\r\n                16,\r\n                MANAGER_GUI_COPY_TO_CLIPBOARD_BUTTON.getComponent(),\r\n                button -> this.onSaveClipboard()\r\n        ));\r\n        resetButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(\r\n                (this.width - this.imageWidth) / 2 + 120,\r\n                (this.height - this.imageHeight) / 2 + 10,\r\n                50,\r\n                12,\r\n                MANAGER_GUI_RESET_BUTTON.getComponent(),\r\n                button -> sendReset(),\r\n                buildTooltip(MANAGER_GUI_RESET_BUTTON_TOOLTIP)\r\n        ));\r\n        diagButton = this.addRenderableWidget(new ExtendedButtonWithTooltip(\r\n                (this.width - this.imageWidth) / 2 + 35,\r\n                (this.height - this.imageHeight) / 2 + 48,\r\n                12,\r\n                14,\r\n                Component.literal(\"!\"),\r\n                button -> {\r\n                    if (Screen.hasShiftDown() && !isReadOnly()) {\r\n                        sendAttemptFix();\r\n                    } else {\r\n                        this.onSaveDiagClipboard();\r\n                    }\r\n                },\r\n                buildTooltip(isReadOnly()\r\n                             ? MANAGER_GUI_WARNING_BUTTON_TOOLTIP_READ_ONLY\r\n                             : MANAGER_GUI_WARNING_BUTTON_TOOLTIP)\r\n        ));\r\n        updateVisibilities();\r\n    }\r\n\r\n    private void onEdit() {\r\n        ClientStuff.showProgramEditScreen(menu.CONTAINER.getItem(0), this::sendProgram);\r\n    }\r\n\r\n    private void onShowExamples() {\r\n        Minecraft\r\n                .getInstance()\r\n                .pushGuiLayer(new ProgramTemplatePickerScreen(template -> ClientStuff.showProgramEditScreen(\r\n                        template,\r\n                        this::sendProgram\r\n                )));\r\n    }\r\n\r\n    private void sendReset() {\r\n        SFMPackets.MANAGER_CHANNEL.sendToServer(new ServerboundManagerResetPacket(\r\n                menu.containerId,\r\n                menu.MANAGER_POSITION\r\n        ));\r\n        status = MANAGER_GUI_STATUS_RESET.getComponent();\r\n        statusCountdown = STATUS_DURATION;\r\n    }\r\n\r\n    private void sendAttemptFix() {\r\n        SFMPackets.MANAGER_CHANNEL.sendToServer(new ServerboundManagerFixPacket(\r\n                menu.containerId,\r\n                menu.MANAGER_POSITION\r\n        ));\r\n        status = MANAGER_GUI_STATUS_FIX.getComponent();\r\n        statusCountdown = STATUS_DURATION;\r\n    }\r\n\r\n    private void sendProgram(String program) {\r\n        SFMPackets.MANAGER_CHANNEL.sendToServer(new ServerboundManagerProgramPacket(\r\n                menu.containerId,\r\n                menu.MANAGER_POSITION,\r\n                program\r\n        ));\r\n        menu.program = program;\r\n        status = MANAGER_GUI_STATUS_LOADED_CLIPBOARD.getComponent();\r\n        statusCountdown = STATUS_DURATION;\r\n    }\r\n\r\n    private void onSaveClipboard() {\r\n        try {\r\n            Minecraft.getInstance().keyboardHandler.setClipboard(menu.program);\r\n            status = MANAGER_GUI_STATUS_SAVED_CLIPBOARD.getComponent();\r\n            statusCountdown = STATUS_DURATION;\r\n        } catch (Throwable t) {\r\n            SFM.LOGGER.error(\"failed to save clipboard\", t);\r\n        }\r\n    }\r\n\r\n    private boolean shouldShowDiagButton() {\r\n        var disk = menu.CONTAINER.getItem(0);\r\n        if (!(disk.getItem() instanceof DiskItem)) return false;\r\n        var errors = DiskItem.getErrors(disk);\r\n        var warnings = DiskItem.getWarnings(disk);\r\n        return !errors.isEmpty() || !warnings.isEmpty();\r\n    }\r\n\r\n    private void onSaveDiagClipboard() {\r\n        try {\r\n            var disk = menu.CONTAINER.getItem(0);\r\n            if (!(disk.getItem() instanceof DiskItem)) return;\r\n            StringBuilder content = new StringBuilder(menu.program);\r\n\r\n            content\r\n                    .append(\"\\n\\n-- Diagnostic info \")\r\n                    .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm.ss\").format(new java.util.Date()))\r\n                    .append(\" --\");\r\n\r\n            var errors = DiskItem.getErrors(disk);\r\n            if (!errors.isEmpty()) {\r\n                content.append(\"\\n\\n-- Errors\\n\");\r\n                for (var error : errors) {\r\n                    content.append(\"-- * \").append(I18n.get(error.getKey(), error.getArgs())).append(\"\\n\");\r\n                }\r\n            }\r\n\r\n            var warnings = DiskItem.getWarnings(disk);\r\n            if (!warnings.isEmpty()) {\r\n                content.append(\"\\n\\n-- Warnings\\n\");\r\n                for (var warning : warnings) {\r\n                    content.append(\"-- * \").append(I18n.get(warning.getKey(), warning.getArgs())).append(\"\\n\");\r\n                }\r\n            }\r\n\r\n            Minecraft.getInstance().keyboardHandler.setClipboard(content.toString());\r\n            status = MANAGER_GUI_STATUS_SAVED_CLIPBOARD.getComponent();\r\n            statusCountdown = STATUS_DURATION;\r\n        } catch (Throwable t) {\r\n            SFM.LOGGER.error(\"failed saving clipboard\", t);\r\n        }\r\n    }\r\n\r\n    private void onLoadClipboard() {\r\n        try {\r\n            String contents = Minecraft.getInstance().keyboardHandler.getClipboard();\r\n            sendProgram(contents);\r\n        } catch (Throwable t) {\r\n            SFM.LOGGER.error(\"failed loading clipboard\", t);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean keyPressed(int pKeyCode, int pScanCode, int pModifiers) {\r\n        if (Screen.isPaste(pKeyCode) && clipboardPasteButton.visible) {\r\n            onLoadClipboard();\r\n            return true;\r\n        } else if (Screen.isCopy(pKeyCode) && clipboardCopyButton.visible) {\r\n            onSaveClipboard();\r\n            return true;\r\n        } else if (pKeyCode == GLFW.GLFW_KEY_E\r\n                   && Screen.hasControlDown()\r\n                   && Screen.hasShiftDown()\r\n                   && examplesButton.visible) {\r\n            onShowExamples();\r\n            return true;\r\n        } else if (pKeyCode == GLFW.GLFW_KEY_E && Screen.hasControlDown() && editButton.visible) {\r\n            onEdit();\r\n            return true;\r\n        }\r\n        return super.keyPressed(pKeyCode, pScanCode, pModifiers);\r\n    }\r\n\r\n    @Override\r\n    protected void renderLabels(GuiGraphics graphics, int mx, int my) {\r\n        // draw title\r\n        super.renderLabels(graphics, mx, my);\r\n\r\n        // draw state string\r\n        var state = menu.state;\r\n        graphics.drawString(\r\n                this.font,\r\n                MANAGER_GUI_STATE.getComponent(state.LOC.getComponent().withStyle(state.COLOR)).withStyle(),\r\n                titleLabelX,\r\n                20,\r\n                0,\r\n                false\r\n        );\r\n\r\n        // draw status string\r\n        if (statusCountdown > 0) {\r\n            graphics.drawString(\r\n                    this.font,\r\n                    status,\r\n                    inventoryLabelX + font.width(playerInventoryTitle.getString()) + 5,\r\n                    inventoryLabelY,\r\n                    0,\r\n                    false\r\n            );\r\n        }\r\n\r\n        // Find the maximum tick time for normalization\r\n        long peakTickTimeNanoseconds = 0;\r\n        for (int i = 0; i < menu.tickTimeNanos.length; i++) {\r\n            peakTickTimeNanoseconds = Long.max(peakTickTimeNanoseconds, menu.tickTimeNanos[i]);\r\n        }\r\n        long yMax = Long.max(peakTickTimeNanoseconds, 50000000); // Start with max at 50ms but allow it to grow\r\n\r\n        // Constants for the plot size and position\r\n        final int plotX = titleLabelX + 45;\r\n        final int plotY = 40;\r\n        final int spaceBetweenPoints = 6;\r\n        final int plotWidth = spaceBetweenPoints * (menu.tickTimeNanos.length - 1);\r\n        final int plotHeight = 30;\r\n\r\n\r\n        // Set up rendering\r\n        RenderSystem.enableBlend();\r\n        RenderSystem.defaultBlendFunc();\r\n        RenderSystem.setShader(GameRenderer::getPositionColorShader);\r\n        Tesselator tesselator = Tesselator.getInstance();\r\n        Matrix4f pose = graphics.pose().last().pose();\r\n        BufferBuilder bufferbuilder;\r\n\r\n        // Draw the plot background\r\n        bufferbuilder = tesselator.getBuilder();\r\n        bufferbuilder.begin(VertexFormat.Mode.DEBUG_LINE_STRIP, DefaultVertexFormat.POSITION_COLOR);\r\n        bufferbuilder.vertex(pose, plotX, plotY, 0).color(0, 0, 0, 0.5f).endVertex();\r\n        bufferbuilder.vertex(pose, plotX + plotWidth, plotY, 0).color(0, 0, 0, 0.5f).endVertex();\r\n        bufferbuilder.vertex(pose, plotX + plotWidth, plotY + plotHeight, 0).color(0, 0, 0, 0.5f).endVertex();\r\n        bufferbuilder.vertex(pose, plotX, plotY + plotHeight, 0).color(0, 0, 0, 0.5f).endVertex();\r\n        bufferbuilder.vertex(pose, plotX, plotY, 0).color(0, 0, 0, 0.5f).endVertex();\r\n        tesselator.end();\r\n\r\n        // Draw lines for each data point\r\n        bufferbuilder = tesselator.getBuilder();\r\n        bufferbuilder.begin(VertexFormat.Mode.DEBUG_LINE_STRIP, DefaultVertexFormat.POSITION_COLOR);\r\n        int mouseTickTimeIndex = -1;\r\n        for (int i = 0; i < menu.tickTimeNanos.length; i++) {\r\n            long y = menu.tickTimeNanos[i];\r\n            float normalizedTickTime = y == 0 ? 0 : (float) (Math.log10(y) / Math.log10(yMax));\r\n            int plotPosY = plotY + plotHeight - (int) (normalizedTickTime * plotHeight);\r\n\r\n            int plotPosX = plotX + spaceBetweenPoints * i;\r\n\r\n            // Color the lines based on their tick times (green to red)\r\n            var c = getMillisecondColour(y / 1_000_000f);\r\n            //noinspection DataFlowIssue\r\n            float red = ((c.getColor() >> 16) & 0xFF) / 255f;\r\n            float green = ((c.getColor() >> 8) & 0xFF) / 255f;\r\n            float blue = (c.getColor() & 0xFF) / 255f;\r\n\r\n            bufferbuilder\r\n                    .vertex(pose, (float) plotPosX, (float) plotPosY, 0f)\r\n                    .color(red, green, blue, 1f)\r\n                    .endVertex();\r\n\r\n            // Check if the mouse is hovering over this line\r\n            if (mx - leftPos >= plotPosX - spaceBetweenPoints / 2\r\n                && mx - leftPos <= plotPosX + spaceBetweenPoints / 2\r\n                && my - topPos >= plotY - 2\r\n                && my - topPos <= plotY + plotHeight + 2) {\r\n                mouseTickTimeIndex = i;\r\n            }\r\n        }\r\n        tesselator.end();\r\n\r\n        // Draw the tick time text\r\n        var format = new DecimalFormat(\"0.000\");\r\n        if (mouseTickTimeIndex != -1) { // We are hovering over the plot\r\n            // Draw the tick time text for the hovered point instead of peak\r\n            long hoveredTickTimeNanoseconds = menu.tickTimeNanos[mouseTickTimeIndex];\r\n            var hoveredTickTimeMilliseconds = hoveredTickTimeNanoseconds / 1_000_000f;\r\n\r\n            graphics.drawString(\r\n                    this.font,\r\n                    MANAGER_GUI_HOVERED_TICK_TIME.getComponent(Component\r\n                                                                       .literal(format.format(\r\n                                                                               hoveredTickTimeMilliseconds))\r\n                                                                       .withStyle(getMillisecondColour(\r\n                                                                               hoveredTickTimeMilliseconds))),\r\n                    titleLabelX,\r\n                    20 + font.lineHeight,\r\n                    0,\r\n                    false\r\n            );\r\n\r\n            // draw a vertical line\r\n            RenderSystem.setShader(GameRenderer::getPositionColorShader);\r\n            tesselator = Tesselator.getInstance();\r\n            bufferbuilder = tesselator.getBuilder();\r\n            bufferbuilder.begin(VertexFormat.Mode.DEBUG_LINE_STRIP, DefaultVertexFormat.POSITION_COLOR);\r\n            pose = graphics.pose().last().pose();\r\n\r\n            int x = plotX + spaceBetweenPoints * mouseTickTimeIndex;\r\n            bufferbuilder\r\n                    .vertex(pose, (float) x, (float) plotY, 0f)\r\n                    .color(1f, 1f, 1f, 1f)\r\n                    .endVertex();\r\n            bufferbuilder\r\n                    .vertex(pose, (float) x, (float) plotY + plotHeight, 0f)\r\n                    .color(1f, 1f, 1f, 1f)\r\n                    .endVertex();\r\n            tesselator.end();\r\n        } else {\r\n            // Draw the tick time text for peak value\r\n            var peakTickTimeMilliseconds = peakTickTimeNanoseconds / 1_000_000f;\r\n            graphics.drawString(\r\n                    this.font,\r\n                    MANAGER_GUI_PEAK_TICK_TIME.getComponent(Component\r\n                                                                    .literal(format.format(peakTickTimeMilliseconds))\r\n                                                                    .withStyle(getMillisecondColour(\r\n                                                                            peakTickTimeMilliseconds))),\r\n                    titleLabelX,\r\n                    20 + font.lineHeight,\r\n                    0,\r\n                    false\r\n            );\r\n        }\r\n\r\n        // Restore stuff\r\n        RenderSystem.disableBlend();\r\n    }\r\n\r\n    public ChatFormatting getMillisecondColour(float ms) {\r\n        if (ms <= 5) {\r\n            return ChatFormatting.GREEN;\r\n        } else if (ms <= 15) {\r\n            return ChatFormatting.YELLOW;\r\n        } else {\r\n            return ChatFormatting.RED;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void render(GuiGraphics graphics, int mx, int my, float partialTicks) {\r\n        this.renderTransparentBackground(graphics);\r\n        super.render(graphics, mx, my, partialTicks);\r\n        this.renderTooltip(graphics, mx, my);\r\n\r\n        updateVisibilities();\r\n\r\n        // update status countdown\r\n        statusCountdown -= partialTicks;\r\n    }\r\n\r\n    @Override\r\n    protected void renderBg(GuiGraphics graphics, float partialTicks, int mx, int my) {\r\n        int i = (this.width - this.imageWidth) / 2;\r\n        int j = (this.height - this.imageHeight) / 2;\r\n        graphics.blit(BACKGROUND_TEXTURE_LOCATION, i, j, 0, 0, this.imageWidth, this.imageHeight);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\handler\\FallingAnvilHandler.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.handler;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.item.FormItem;\r\nimport ca.teamdman.sfm.common.recipe.PrintingPressRecipe;\r\nimport ca.teamdman.sfm.common.registry.SFMItems;\r\nimport ca.teamdman.sfm.common.registry.SFMRecipeTypes;\r\nimport net.minecraft.world.entity.Entity;\r\nimport net.minecraft.world.entity.item.FallingBlockEntity;\r\nimport net.minecraft.world.entity.item.ItemEntity;\r\nimport net.minecraft.world.item.EnchantedBookItem;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.Items;\r\nimport net.minecraft.world.item.crafting.RecipeHolder;\r\nimport net.minecraft.world.item.enchantment.Enchantment;\r\nimport net.minecraft.world.item.enchantment.EnchantmentHelper;\r\nimport net.minecraft.world.item.enchantment.EnchantmentInstance;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.AnvilBlock;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.minecraft.world.phys.AABB;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.event.entity.EntityLeaveLevelEvent;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)\r\npublic class FallingAnvilHandler {\r\n    @SubscribeEvent\r\n    public static void onLeave(EntityLeaveLevelEvent event) {\r\n        if (event.getEntity() instanceof FallingBlockEntity fbe) {\r\n            if (fbe.getBlockState().getBlock() instanceof AnvilBlock) {\r\n                var landPosition = fbe.blockPosition();\r\n                Level level = event.getLevel();\r\n                Block block = level.getBlockState(landPosition.below()).getBlock();\r\n                if (block == Blocks.IRON_BLOCK) { // create a form\r\n                    var recipes = level\r\n                            .getRecipeManager()\r\n                            .getAllRecipesFor(SFMRecipeTypes.PRINTING_PRESS.get());\r\n                    var items = level\r\n                            .getEntitiesOfClass(ItemEntity.class, new AABB(landPosition))\r\n                            .stream()\r\n                            .filter(Entity::isAlive)\r\n                            .filter(e -> !e.getItem().isEmpty())\r\n                            .toList();\r\n                    boolean didForm = false;\r\n\r\n                    for (ItemEntity item : items) {\r\n                        for (RecipeHolder<PrintingPressRecipe> recipe : recipes) {\r\n                            // check if the item can be turned into a form\r\n                            if (recipe.value().FORM.test(item.getItem())) {\r\n                                didForm = true;\r\n                                item.setItem(FormItem.getForm(item.getItem()));\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (didForm) {\r\n                        level.setBlockAndUpdate(landPosition.below(), Blocks.AIR.defaultBlockState());\r\n                    }\r\n                } else if (block == Blocks.OBSIDIAN) { // crush and disenchant items\r\n                    List<ItemEntity> items = level\r\n                            .getEntitiesOfClass(ItemEntity.class, new AABB(landPosition))\r\n                            .stream()\r\n                            .filter(Entity::isAlive)\r\n                            .filter(e -> !e.getItem().isEmpty())\r\n                            .toList();\r\n                    { // crush enchanted books into xp shards\r\n                        items\r\n                                .stream()\r\n                                .filter(e -> e.getItem().is(Items.ENCHANTED_BOOK))\r\n                                .forEach(e -> e.setItem(new ItemStack(\r\n                                        SFMItems.EXPERIENCE_SHARD_ITEM.get(),\r\n                                        e.getItem().getCount()\r\n                                )));\r\n                    }\r\n                    { // remove enchantments from items\r\n                        List<ItemEntity> bookEntities = items.stream().filter(e -> e.getItem().is(Items.BOOK)).toList();\r\n                        int booksAvailable = bookEntities.stream().mapToInt(e -> e.getItem().getCount()).sum();\r\n                        List<ItemEntity> enchanted = items\r\n                                .stream()\r\n                                .filter(e -> !e.getItem().getEnchantmentTags().isEmpty())\r\n                                .toList();\r\n\r\n\r\n                        for (ItemEntity enchItemEntity : enchanted) {\r\n                            ItemStack enchStack = enchItemEntity.getItem();\r\n                            int enchStackSize = enchStack.getCount();\r\n                            Map<Enchantment, Integer> enchantments = EnchantmentHelper.getEnchantments(enchStack);\r\n                            var enchIter = enchantments.entrySet().iterator();\r\n                            while (enchIter.hasNext()) {\r\n                                var entry = enchIter.next();\r\n                                if (booksAvailable < enchStackSize) break;\r\n\r\n                                // Create an enchanted book with the enchantment\r\n                                ItemStack toSpawn = new ItemStack(Items.ENCHANTED_BOOK, enchStackSize);\r\n                                EnchantedBookItem.addEnchantment(\r\n                                        toSpawn,\r\n                                        new EnchantmentInstance(entry.getKey(), entry.getValue())\r\n                                );\r\n                                level.addFreshEntity(new ItemEntity(\r\n                                        level,\r\n                                        landPosition.getX(),\r\n                                        landPosition.getY(),\r\n                                        landPosition.getZ(),\r\n                                        toSpawn\r\n                                ));\r\n\r\n                                // Remove the enchantment from the item\r\n                                enchIter.remove();\r\n                                EnchantmentHelper.setEnchantments(enchantments, enchStack);\r\n                                booksAvailable -= enchStackSize;\r\n                                if (enchantments.isEmpty()) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        for (ItemEntity bookEntity : bookEntities) {\r\n                            bookEntity.kill();\r\n                        }\r\n                        while (booksAvailable > 0) {\r\n                            int toSpawn = Math.min(booksAvailable, 64);\r\n                            level.addFreshEntity(new ItemEntity(\r\n                                    level,\r\n                                    landPosition.getX(),\r\n                                    landPosition.getY(),\r\n                                    landPosition.getZ(),\r\n                                    new ItemStack(Items.BOOK, toSpawn)\r\n                            ));\r\n                            booksAvailable -= toSpawn;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\ProgramSyntaxHighlightingHelper.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client;\r\n\r\nimport ca.teamdman.sfml.SFMLLexer;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.network.chat.MutableComponent;\r\nimport net.minecraft.network.chat.Style;\r\nimport org.antlr.v4.runtime.CharStreams;\r\nimport org.antlr.v4.runtime.CommonTokenStream;\r\nimport org.antlr.v4.runtime.Token;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class ProgramSyntaxHighlightingHelper {\r\n\r\n    public static List<MutableComponent> withSyntaxHighlighting(String programString, boolean showContextActionHints) {\r\n        SFMLLexer lexer = new SFMLLexer(CharStreams.fromString(programString));\r\n        lexer.INCLUDE_UNUSED = true;\r\n        CommonTokenStream tokens = new CommonTokenStream(lexer) {\r\n            // This is a hack to make hidden tokens show up in the token stream\r\n            @Override\r\n            public List<Token> getHiddenTokensToRight(int tokenIndex, int channel) {\r\n                if (channel == Token.DEFAULT_CHANNEL) {\r\n                    return getHiddenTokensToRight(tokenIndex, Token.HIDDEN_CHANNEL);\r\n                } else {\r\n                    return super.getHiddenTokensToRight(tokenIndex, channel);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public List<Token> getHiddenTokensToLeft(int tokenIndex, int channel) {\r\n                if (channel == Token.DEFAULT_CHANNEL) {\r\n                    return getHiddenTokensToLeft(tokenIndex, Token.HIDDEN_CHANNEL);\r\n                } else {\r\n                    return super.getHiddenTokensToLeft(tokenIndex, channel);\r\n                }\r\n            }\r\n        };\r\n        List<MutableComponent> textComponents = new ArrayList<>();\r\n        MutableComponent lineComponent = Component.empty();\r\n        tokens.fill();\r\n        for (Token token : tokens.getTokens()) {\r\n            if (token.getType() == SFMLLexer.EOF) break;\r\n            // the token may contain newlines in it, so we need to split it up\r\n            String[] lines = token.getText().split(\"\\n\", -1);\r\n            for (int i = 0; i < lines.length; i++) {\r\n                if (i != 0) {\r\n                    textComponents.add(lineComponent);\r\n                    lineComponent = Component.empty();\r\n                }\r\n                String line = lines[i];\r\n                if (!line.isEmpty()) {\r\n                    var text = Component.literal(line).withStyle(getStyle(token, showContextActionHints));\r\n                    lineComponent = lineComponent.append(text);\r\n                }\r\n            }\r\n        }\r\n        textComponents.add(lineComponent);\r\n\r\n        return textComponents;\r\n    }\r\n\r\n    private static Style getStyle(Token token, boolean showContextActionHints) {\r\n        Style style = Style.EMPTY;\r\n        style = style.withColor(getColour(token));\r\n        if (showContextActionHints && ProgramTokenContextActions.hasContextAction(token)) {\r\n            style = style.withUnderlined(true);\r\n        }\r\n        return style;\r\n    }\r\n\r\n    private static ChatFormatting getColour(Token token) {\r\n        //noinspection EnhancedSwitchMigration\r\n        switch (token.getType()) {\r\n            case SFMLLexer.SIDE:\r\n            case SFMLLexer.TOP:\r\n            case SFMLLexer.BOTTOM:\r\n            case SFMLLexer.NORTH:\r\n            case SFMLLexer.SOUTH:\r\n            case SFMLLexer.EAST:\r\n            case SFMLLexer.WEST:\r\n            case SFMLLexer.EACH:\r\n                return ChatFormatting.DARK_PURPLE;\r\n            case SFMLLexer.LINE_COMMENT:\r\n                return ChatFormatting.GRAY;\r\n            case SFMLLexer.INPUT:\r\n            case SFMLLexer.FROM:\r\n            case SFMLLexer.TO:\r\n            case SFMLLexer.OUTPUT:\r\n            case SFMLLexer.FORGET:\r\n                return ChatFormatting.LIGHT_PURPLE;\r\n            case SFMLLexer.NAME:\r\n            case SFMLLexer.EVERY:\r\n            case SFMLLexer.END:\r\n            case SFMLLexer.DO:\r\n            case SFMLLexer.IF:\r\n            case SFMLLexer.ELSE:\r\n            case SFMLLexer.THEN:\r\n            case SFMLLexer.HAS:\r\n            case SFMLLexer.TRUE:\r\n            case SFMLLexer.FALSE:\r\n            case SFMLLexer.NOT:\r\n                return ChatFormatting.BLUE;\r\n            case SFMLLexer.IDENTIFIER:\r\n            case SFMLLexer.STRING:\r\n                return ChatFormatting.GREEN;\r\n            case SFMLLexer.TICKS:\r\n            case SFMLLexer.SLOTS:\r\n            case SFMLLexer.EXCEPT:\r\n            case SFMLLexer.RETAIN:\r\n            case SFMLLexer.LONE:\r\n            case SFMLLexer.ONE:\r\n            case SFMLLexer.OVERALL:\r\n            case SFMLLexer.SOME:\r\n            case SFMLLexer.AND:\r\n                return ChatFormatting.GOLD;\r\n            case SFMLLexer.NUMBER:\r\n            case SFMLLexer.GT:\r\n            case SFMLLexer.LT:\r\n            case SFMLLexer.EQ:\r\n            case SFMLLexer.GE:\r\n            case SFMLLexer.LE:\r\n            case SFMLLexer.GT_SYMBOL:\r\n            case SFMLLexer.LT_SYMBOL:\r\n            case SFMLLexer.EQ_SYMBOL:\r\n            case SFMLLexer.GE_SYMBOL:\r\n            case SFMLLexer.LE_SYMBOL:\r\n                return ChatFormatting.AQUA;\r\n            case SFMLLexer.UNUSED:\r\n            case SFMLLexer.REDSTONE:\r\n            case SFMLLexer.PULSE:\r\n                return ChatFormatting.RED;\r\n            case SFMLLexer.ROUND:\r\n            case SFMLLexer.ROBIN:\r\n            case SFMLLexer.BY:\r\n            case SFMLLexer.BLOCK:\r\n            case SFMLLexer.LABEL:\r\n                return ChatFormatting.YELLOW;\r\n            default:\r\n                return ChatFormatting.WHITE;\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.blockentity;\r\n\r\nimport ca.teamdman.sfm.common.recipe.NotContainer;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport ca.teamdman.sfm.common.registry.SFMItems;\r\nimport ca.teamdman.sfm.common.registry.SFMRecipeTypes;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.network.Connection;\r\nimport net.minecraft.network.protocol.Packet;\r\nimport net.minecraft.network.protocol.game.ClientGamePacketListener;\r\nimport net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.crafting.RecipeManager;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\nimport net.neoforged.neoforge.items.IItemHandler;\r\nimport net.neoforged.neoforge.items.ItemStackHandler;\r\nimport net.neoforged.neoforge.items.wrapper.CombinedInvWrapper;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\n/**\r\n * Accepts a paper item and a form item.\r\n * When a piston is pressed on top of this block, it will print the form onto the paper.\r\n */\r\npublic class PrintingPressBlockEntity extends BlockEntity implements NotContainer {\r\n\r\n    private final ItemStackHandler FORM = new ItemStackHandler(1) {\r\n        @Override\r\n        protected void onContentsChanged(int slot) {\r\n            setChanged();\r\n            if (level != null)\r\n                level.sendBlockUpdated(worldPosition, getBlockState(), getBlockState(), Block.UPDATE_ALL);\r\n        }\r\n\r\n        @Override\r\n        public int getSlotLimit(int slot) {\r\n            return 1;\r\n        }\r\n\r\n        @Override\r\n        public boolean isItemValid(int slot, ItemStack stack) {\r\n            return stack.getItem() == SFMItems.FORM_ITEM.get();\r\n        }\r\n    };\r\n\r\n    private final ItemStackHandler INK = new ItemStackHandler(1) {\r\n        @Override\r\n        protected void onContentsChanged(int slot) {\r\n            setChanged();\r\n            if (level != null)\r\n                level.sendBlockUpdated(worldPosition, getBlockState(), getBlockState(), Block.UPDATE_ALL);\r\n        }\r\n\r\n        @Override\r\n        public boolean isItemValid(int slot, ItemStack stack) {\r\n            if (getLevel() == null) return false;\r\n            return getLevel().getRecipeManager()\r\n                    .getAllRecipesFor(SFMRecipeTypes.PRINTING_PRESS.get()).stream().anyMatch(r -> r.value().INK.test(stack));\r\n        }\r\n    };\r\n\r\n    private final ItemStackHandler PAPER = new ItemStackHandler(1) {\r\n        @Override\r\n        protected void onContentsChanged(int slot) {\r\n            setChanged();\r\n            if (level != null)\r\n                level.sendBlockUpdated(worldPosition, getBlockState(), getBlockState(), Block.UPDATE_ALL);\r\n        }\r\n\r\n        @Override\r\n        public int getSlotLimit(int slot) {\r\n            return 1;\r\n        }\r\n\r\n        @Override\r\n        public boolean isItemValid(int slot, ItemStack stack) {\r\n            if (getLevel() == null) return false;\r\n            return getLevel().getRecipeManager()\r\n                    .getAllRecipesFor(SFMRecipeTypes.PRINTING_PRESS.get()).stream().anyMatch(r -> r.value().PAPER.test(stack));\r\n        }\r\n    };\r\n    private final LazyOptional<IItemHandler> ITEMS_CAPABILITY = LazyOptional.of(() -> new CombinedInvWrapper(\r\n            FORM,\r\n            INK,\r\n            PAPER\r\n    ));\r\n\r\n    public PrintingPressBlockEntity(\r\n            BlockPos pPos, BlockState pBlockState\r\n    ) {\r\n        super(SFMBlockEntities.PRINTING_PRESS_BLOCK_ENTITY.get(), pPos, pBlockState);\r\n    }\r\n\r\n    @Override\r\n    public void load(CompoundTag tag) {\r\n        super.load(tag);\r\n        readItems(tag);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void saveAdditional(CompoundTag tag) {\r\n        super.saveAdditional(tag);\r\n        writeItems(tag);\r\n    }\r\n\r\n    private void writeItems(CompoundTag tag) {\r\n        tag.put(\"form\", FORM.serializeNBT());\r\n        tag.put(\"paper\", PAPER.serializeNBT());\r\n        tag.put(\"ink\", INK.serializeNBT());\r\n    }\r\n\r\n    private void readItems(CompoundTag tag) {\r\n        INK.deserializeNBT(tag.getCompound(\"ink\"));\r\n        PAPER.deserializeNBT(tag.getCompound(\"paper\"));\r\n        FORM.deserializeNBT(tag.getCompound(\"form\"));\r\n    }\r\n\r\n    @Override\r\n    public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {\r\n        if (cap == Capabilities.ITEM_HANDLER) {\r\n            return ITEMS_CAPABILITY.cast();\r\n        }\r\n        return super.getCapability(cap, side);\r\n    }\r\n\r\n    public ItemStack acceptStack(ItemStack stack) {\r\n        ItemStack remainder;\r\n        if (!stack.isEmpty()) {\r\n            remainder = FORM.insertItem(0, stack.copy(), false);\r\n            if (remainder.getCount() < stack.getCount()) {\r\n                stack.shrink(stack.getCount() - remainder.getCount());\r\n                return stack;\r\n            }\r\n            remainder = INK.insertItem(0, stack.copy(), false);\r\n            if (remainder.getCount() < stack.getCount()) {\r\n                stack.shrink(stack.getCount() - remainder.getCount());\r\n                return stack;\r\n            }\r\n            remainder = PAPER.insertItem(0, stack.copy(), false);\r\n            if (remainder.getCount() < stack.getCount()) {\r\n                stack.shrink(stack.getCount() - remainder.getCount());\r\n                return stack;\r\n            }\r\n        } else {\r\n            ItemStack found;\r\n            found = PAPER.extractItem(0, 64, false);\r\n            if (!found.isEmpty()) {\r\n                return found;\r\n            }\r\n            found = FORM.extractItem(0, 64, false);\r\n            if (!found.isEmpty()) {\r\n                return found;\r\n            }\r\n            found = INK.extractItem(0, 64, false);\r\n            if (!found.isEmpty()) {\r\n                return found;\r\n            }\r\n        }\r\n        return stack;\r\n    }\r\n\r\n    @Override\r\n    public CompoundTag getUpdateTag() {\r\n        var tag = super.getUpdateTag();\r\n        writeItems(tag);\r\n        return tag;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public Packet<ClientGamePacketListener> getUpdatePacket() {\r\n        return ClientboundBlockEntityDataPacket.create(this);\r\n    }\r\n\r\n    @Override\r\n    public void onDataPacket(Connection net, ClientboundBlockEntityDataPacket pkt) {\r\n        super.onDataPacket(net, pkt);\r\n        CompoundTag tag = pkt.getTag();\r\n        if (tag != null)\r\n            readItems(tag);\r\n    }\r\n\r\n    public ItemStack getPaper() {\r\n        return PAPER.getStackInSlot(0);\r\n    }\r\n\r\n    public ItemStack getInk() {\r\n        return INK.getStackInSlot(0);\r\n    }\r\n\r\n    public ItemStack getForm() {\r\n        return FORM.getStackInSlot(0);\r\n    }\r\n\r\n    public void performPrint() {\r\n        if (getLevel() == null) return;\r\n        RecipeManager recipeManager = getLevel().getRecipeManager();\r\n        recipeManager.getRecipeFor(SFMRecipeTypes.PRINTING_PRESS.get(), this, getLevel()).ifPresent(recipe -> {\r\n            ItemStack paper = getPaper();\r\n            ItemStack ink = getInk();\r\n            ItemStack form = getForm();\r\n            if (paper.isEmpty() || ink.isEmpty() || form.isEmpty()) {\r\n                return;\r\n            }\r\n            paper = recipe.value().assemble(this, getLevel().registryAccess());\r\n            PAPER.setStackInSlot(0, paper);\r\n            ink.shrink(1);\r\n            INK.setStackInSlot(0, ink);\r\n        });\r\n    }\r\n\r\n    public ItemStack[] getStacksToDrop() {\r\n        return new ItemStack[]{getPaper(), getInk(), getForm()};\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\SFM.java\r\n\r\n````java\r\npackage ca.teamdman.sfm;\r\n\r\nimport ca.teamdman.sfm.client.registry.SFMMenuScreens;\r\nimport ca.teamdman.sfm.common.registry.*;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.fml.event.lifecycle.FMLClientSetupEvent;\r\nimport net.neoforged.fml.event.lifecycle.FMLCommonSetupEvent;\r\nimport net.neoforged.fml.javafmlmod.FMLJavaModLoadingContext;\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\n@Mod(\"sfm\")\r\npublic class SFM {\r\n    public static final String MOD_ID = \"sfm\";\r\n    public static final Logger LOGGER = LogManager.getLogger(SFM.MOD_ID);\r\n\r\n    public SFM() {\r\n        var bus = FMLJavaModLoadingContext\r\n                .get()\r\n                .getModEventBus();\r\n        SFMBlocks.register(bus);\r\n        SFMItems.register(bus);\r\n        SFMCreativeTabs.register(bus);\r\n        SFMResourceTypes.register(bus);\r\n        SFMBlockEntities.register(bus);\r\n        SFMCapabilityProviderMappers.register(bus);\r\n        SFMMenus.register(bus);\r\n        SFMRecipeTypes.register(bus);\r\n        SFMRecipeSerializers.register(bus);\r\n        bus.addListener((FMLClientSetupEvent e) -> SFMMenuScreens.register());\r\n        bus.addListener((FMLCommonSetupEvent e) -> SFMPackets.register());\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\NumberRange.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\npublic record NumberRange(\r\n        long start,\r\n        long end\r\n) implements ASTNode {\r\n    public static final NumberRange MAX_RANGE = new NumberRange(Long.MIN_VALUE, Long.MAX_VALUE);\r\n\r\n    /**\r\n     * Inclusive\r\n     */\r\n    public boolean contains(int value) {\r\n        return value >= start && value <= end;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        if (start == end) return String.valueOf(start);\r\n        return start + \"-\" + end;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\RedstoneTrigger.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\n\r\npublic record RedstoneTrigger(\r\n        Block block\r\n) implements Trigger {\r\n    @Override\r\n    public Block getBlock() {\r\n        return block;\r\n    }\r\n\r\n    @Override\r\n    public void tick(ProgramContext context) {\r\n        for (int i = 0; i < context.getRedstonePulses(); i++) {\r\n            block.tick(context);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldTick(ProgramContext context) {\r\n        if (context.getExecutionPolicy() == ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES) return true;\r\n        return context.getManager().getUnprocessedRedstonePulseCount() > 0;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\block\\CableBlock.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.block;\r\n\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;\r\nimport ca.teamdman.sfm.common.cablenetwork.ICableBlock;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraft.world.level.block.SoundType;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.block.state.properties.NoteBlockInstrument;\r\n\r\npublic class CableBlock extends Block implements ICableBlock {\r\n\r\n    public CableBlock() {\r\n        super(Block.Properties.of()\r\n                      .instrument(NoteBlockInstrument.BASS)\r\n                      .destroyTime(1f)\r\n                      .sound(SoundType.METAL));\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Override\r\n    public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean isMoving) {\r\n        CableNetworkManager.getOrRegisterNetworkFromCablePosition(world, pos);\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Override\r\n    public void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean isMoving) {\r\n        CableNetworkManager.removeCable(level, pos);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.item;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\package-info.java\r\n\r\n````java\r\n\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\gui\\screen\\ProgramEditScreen.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.gui.screen;\r\n\r\nimport ca.teamdman.sfm.client.ProgramSyntaxHighlightingHelper;\r\nimport ca.teamdman.sfm.client.ProgramTokenContextActions;\r\nimport ca.teamdman.sfm.client.gui.EditorUtils;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport com.mojang.blaze3d.vertex.PoseStack;\r\nimport ca.teamdman.sfm.common.item.DiskItem;\r\nimport com.mojang.blaze3d.vertex.Tesselator;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.gui.Font;\r\nimport net.minecraft.client.gui.GuiGraphics;\r\nimport net.minecraft.client.gui.components.MultiLineEditBox;\r\nimport net.minecraft.client.gui.components.MultilineTextField;\r\nimport net.minecraft.client.gui.components.Tooltip;\r\nimport net.minecraft.client.gui.screens.ConfirmScreen;\r\nimport net.minecraft.client.gui.components.Whence;\r\nimport net.minecraft.client.gui.screens.Screen;\r\nimport net.minecraft.client.renderer.LightTexture;\r\nimport net.minecraft.client.renderer.MultiBufferSource;\r\nimport net.minecraft.network.chat.CommonComponents;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.network.chat.MutableComponent;\r\nimport net.minecraft.network.chat.Style;\r\nimport org.joml.Matrix4f;\r\nimport org.lwjgl.glfw.GLFW;\r\n\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.function.Consumer;\r\n\r\nimport static ca.teamdman.sfm.common.Constants.LocalizationKeys.PROGRAM_EDIT_SCREEN_DONE_BUTTON_TOOLTIP;\r\n\r\npublic class ProgramEditScreen extends Screen {\r\n    private final String INITIAL_CONTENT;\r\n    private final Consumer<String> CALLBACK;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    private MyMultiLineEditBox textarea;\r\n    private String lastProgram = \"\";\r\n    private List<MutableComponent> lastProgramWithSyntaxHighlighting = Collections.emptyList();\r\n\r\n    public ProgramEditScreen(String initialContent, Consumer<String> callback) {\r\n        super(Constants.LocalizationKeys.PROGRAM_EDIT_SCREEN_TITLE.getComponent());\r\n        this.INITIAL_CONTENT = initialContent;\r\n        this.CALLBACK = callback;\r\n    }\r\n\r\n    public static MutableComponent substring(MutableComponent component, int start, int end) {\r\n        var rtn = Component.empty();\r\n        AtomicInteger seen = new AtomicInteger(0);\r\n        component.visit((style, content) -> {\r\n            int contentStart = Math.max(start - seen.get(), 0);\r\n            int contentEnd = Math.min(end - seen.get(), content.length());\r\n\r\n            if (contentStart < contentEnd) {\r\n                rtn.append(Component.literal(content.substring(contentStart, contentEnd)).withStyle(style));\r\n            }\r\n            seen.addAndGet(content.length());\r\n            return Optional.empty();\r\n        }, Style.EMPTY);\r\n        return rtn;\r\n    }\r\n\r\n    public void scrollToTop() {\r\n        this.textarea.scrollToTop();\r\n    }\r\n\r\n    @Override\r\n    protected void init() {\r\n        super.init();\r\n        assert this.minecraft != null;\r\n        this.textarea = this.addRenderableWidget(new MyMultiLineEditBox());\r\n        textarea.setValue(INITIAL_CONTENT);\r\n        this.setInitialFocus(textarea);\r\n\r\n        this.addRenderableWidget(new ExtendedButtonWithTooltip(\r\n                this.width / 2 - 2 - 150,\r\n                this.height / 2 - 100 + 195,\r\n                300,\r\n                20,\r\n                CommonComponents.GUI_DONE,\r\n                (p_97691_) -> this.onClosePerformCallback(),\r\n                Tooltip.create(PROGRAM_EDIT_SCREEN_DONE_BUTTON_TOOLTIP.getComponent())\r\n        ));\r\n    }\r\n\r\n    public void onClosePerformCallback() {\r\n        CALLBACK.accept(textarea.getValue());\r\n\r\n        assert this.minecraft != null;\r\n        this.minecraft.popGuiLayer();\r\n    }\r\n\r\n    @Override\r\n    public void onClose() {\r\n        if (!INITIAL_CONTENT.equals(textarea.getValue())) {\r\n            // if content changed => ask to save\r\n            assert this.minecraft != null;\r\n            // push confirm screen\r\n            this.minecraft.pushGuiLayer(new ConfirmScreen(\r\n                    doSave -> {\r\n                        this.minecraft.popGuiLayer();\r\n                        if (doSave) {\r\n                            onClosePerformCallback();\r\n                        } else {\r\n                            this.minecraft.popGuiLayer();\r\n                        }\r\n                    },\r\n                    Constants.LocalizationKeys.SAVE_CHANGES_CONFIRM_SCREEN_TITLE.getComponent(),\r\n                    Constants.LocalizationKeys.SAVE_CHANGES_CONFIRM_SCREEN_MESSAGE.getComponent(),\r\n                    Constants.LocalizationKeys.SAVE_CHANGES_CONFIRM_SCREEN_YES_BUTTON.getComponent(),\r\n                    Constants.LocalizationKeys.SAVE_CHANGES_CONFIRM_SCREEN_NO_BUTTON.getComponent()\r\n            ));\r\n        } else {\r\n            super.onClose();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean keyReleased(int pKeyCode, int pScanCode, int pModifiers) {\r\n        if (pKeyCode == GLFW.GLFW_KEY_LEFT_CONTROL || pKeyCode == GLFW.GLFW_KEY_RIGHT_CONTROL) {\r\n            // if control released => update syntax highlighting\r\n            textarea.rebuild(Screen.hasControlDown());\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean charTyped(char pCodePoint, int pModifiers) {\r\n        if (Screen.hasControlDown() && pCodePoint == ' ') {\r\n            return true;\r\n        }\r\n        return super.charTyped(pCodePoint, pModifiers);\r\n    }\r\n\r\n    @Override\r\n    public boolean keyPressed(int pKeyCode, int pScanCode, int pModifiers) {\r\n        if ((pKeyCode == GLFW.GLFW_KEY_ENTER || pKeyCode == GLFW.GLFW_KEY_KP_ENTER) && Screen.hasShiftDown()) {\r\n            onClosePerformCallback();\r\n            return true;\r\n        }\r\n        if (pKeyCode == GLFW.GLFW_KEY_TAB) {\r\n            // if tab pressed with no selection and not holding shift => insert 4 spaces\r\n            // if tab pressed with no selection and holding shift => de-indent current line\r\n            // if tab pressed with selection and not holding shift => de-indent lines containing selection 4 spaces\r\n            // if tab pressed with selection and holding shift => indent lines containing selection 4 spaces\r\n            String content = textarea.getValue();\r\n            int cursor = textarea.getCursorPosition();\r\n            int selectionCursor = textarea.getSelectionCursorPosition();\r\n            EditorUtils.ManipulationResult result;\r\n            if (Screen.hasShiftDown()) { // de-indent\r\n                result = EditorUtils.deindent(content, cursor, selectionCursor);\r\n            } else { // indent\r\n                result = EditorUtils.indent(content, cursor, selectionCursor);\r\n            }\r\n            textarea.setValue(result.content());\r\n            textarea.setCursorPosition(result.cursorPosition());\r\n            textarea.setSelectionCursorPosition(result.selectionCursorPosition());\r\n            return true;\r\n        }\r\n        if (pKeyCode == GLFW.GLFW_KEY_LEFT_CONTROL || pKeyCode == GLFW.GLFW_KEY_RIGHT_CONTROL) {\r\n            // if control pressed => update syntax highlighting\r\n            textarea.rebuild(Screen.hasControlDown());\r\n            return true;\r\n        }\r\n        if (pKeyCode == GLFW.GLFW_KEY_SLASH && Screen.hasControlDown()) {\r\n            // toggle line comments for selected lines\r\n            String content = textarea.getValue();\r\n            int cursor = textarea.getCursorPosition();\r\n            int selectionCursor = textarea.getSelectionCursorPosition();\r\n            EditorUtils.ManipulationResult result = EditorUtils.toggleComments(content, cursor, selectionCursor);\r\n            textarea.setValue(result.content());\r\n            textarea.setCursorPosition(result.cursorPosition());\r\n            textarea.setSelectionCursorPosition(result.selectionCursorPosition());\r\n            return true;\r\n        }\r\n        if (pKeyCode == GLFW.GLFW_KEY_SPACE && Screen.hasControlDown()) {\r\n            ProgramTokenContextActions.getContextAction(\r\n                            textarea.getValue(),\r\n                            textarea.getCursorPosition()\r\n                    )\r\n                    .ifPresent(Runnable::run);\r\n\r\n            // disable the underline since it doesn't refresh when the context action closes\r\n            textarea.rebuild(false);\r\n            return true;\r\n        }\r\n        return super.keyPressed(pKeyCode, pScanCode, pModifiers);\r\n    }\r\n\r\n    @Override\r\n    public void resize(Minecraft mc, int x, int y) {\r\n        var prev = this.textarea.getValue();\r\n        init(mc, x, y);\r\n        super.resize(mc, x, y);\r\n        this.textarea.setValue(prev);\r\n    }\r\n\r\n    @Override\r\n    public void render(GuiGraphics graphics, int mx, int my, float partialTicks) {\r\n        this.renderTransparentBackground(graphics);\r\n        super.render(graphics, mx, my, partialTicks);\r\n    }\r\n\r\n    private class MyMultiLineEditBox extends MultiLineEditBox {\r\n        private int frame = 0;\r\n        public MyMultiLineEditBox() {\r\n            super(\r\n                    ProgramEditScreen.this.font,\r\n                    ProgramEditScreen.this.width / 2 - 200,\r\n                    ProgramEditScreen.this.height / 2 - 110,\r\n                    400,\r\n                    200,\r\n                    Component.literal(\"\"),\r\n                    Component.literal(\"\")\r\n            );\r\n        }\r\n\r\n        public void scrollToTop() {\r\n            this.setScrollAmount(0);\r\n        }\r\n\r\n        public int getCursorPosition() {\r\n            return this.textField.cursor;\r\n        }\r\n\r\n        public void setCursorPosition(int cursor) {\r\n            this.textField.cursor = cursor;\r\n        }\r\n\r\n        @Override\r\n        public boolean mouseClicked(double pMouseX, double pMouseY, int pButton) {\r\n            // we need to override the default behaviour because Mojang broke it\r\n            // if it's not scrolling, it should return false for cursor click movement\r\n            boolean rtn;\r\n            if (!this.visible) {\r\n                rtn = false;\r\n            } else {\r\n                //noinspection unused\r\n                boolean flag = this.withinContentAreaPoint(pMouseX, pMouseY);\r\n                boolean flag1 = this.scrollbarVisible()\r\n                                && pMouseX >= (double) (this.getX() + this.width)\r\n                                && pMouseX <= (double) (this.getX() + this.width + 8)\r\n                                && pMouseY >= (double) this.getY()\r\n                                && pMouseY < (double) (this.getY() + this.height);\r\n                if (flag1 && pButton == 0) {\r\n                    this.scrolling = true;\r\n                    rtn = true;\r\n                } else {\r\n                    //1.19.4 behaviour:\r\n                    //rtn=flag || flag1;\r\n                    // instead, we want to return false if we're not scrolling\r\n                    // (like how it was in 1.19.2)\r\n                    // https://bugs.mojang.com/browse/MC-262754\r\n                    rtn = false;\r\n                }\r\n            }\r\n\r\n            if (rtn) {\r\n                return true;\r\n            } else if (this.withinContentAreaPoint(pMouseX, pMouseY) && pButton == 0) {\r\n                this.textField.setSelecting(Screen.hasShiftDown());\r\n                this.seekCursorScreen(pMouseX, pMouseY);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        public int getSelectionCursorPosition() {\r\n            return this.textField.selectCursor;\r\n        }\r\n\r\n        public void setSelectionCursorPosition(int cursor) {\r\n            this.textField.selectCursor = cursor;\r\n        }\r\n\r\n        private void rebuild(boolean showContextActionHints) {\r\n            lastProgram = this.textField.value();\r\n            lastProgramWithSyntaxHighlighting = ProgramSyntaxHighlightingHelper.withSyntaxHighlighting(\r\n                    lastProgram,\r\n                    showContextActionHints\r\n            );\r\n        }\r\n\r\n        @Override\r\n        protected void renderContents(GuiGraphics graphics, int mx, int my, float partialTicks) {\r\n            Matrix4f matrix4f = graphics.pose().last().pose();\r\n            if (!lastProgram.equals(this.textField.value())) {\r\n                rebuild(Screen.hasControlDown());\r\n            }\r\n            List<MutableComponent> lines = lastProgramWithSyntaxHighlighting;\r\n            boolean isCursorVisible = this.isFocused() && this.frame++ / 60 % 2 == 0;\r\n            boolean isCursorAtEndOfLine = false;\r\n            int cursorIndex = textField.cursor();\r\n            int lineX = this.getX() + this.innerPadding();\r\n            int lineY = this.getY() + this.innerPadding();\r\n            int charCount = 0;\r\n            int cursorX = 0;\r\n            int cursorY = 0;\r\n            MultilineTextField.StringView selectedRange = this.textField.getSelected();\r\n            int selectionStart = selectedRange.beginIndex();\r\n            int selectionEnd = selectedRange.endIndex();\r\n\r\n            for (int line = 0; line < lines.size(); ++line) {\r\n                var componentColoured = lines.get(line);\r\n                int lineLength = componentColoured.getString().length();\r\n                int lineHeight = this.font.lineHeight + (line == 0 ? 2 : 0);\r\n                boolean cursorOnThisLine = isCursorVisible\r\n                                           && cursorIndex >= charCount\r\n                                           && cursorIndex <= charCount + lineLength;\r\n                var buffer = MultiBufferSource.immediate(Tesselator.getInstance().getBuilder());\r\n\r\n                if (cursorOnThisLine) {\r\n                    isCursorAtEndOfLine = cursorIndex == charCount + lineLength;\r\n                    cursorY = lineY;\r\n                    // we draw the raw before coloured in case of token recognition errors\r\n                    // draw before cursor\r\n                    cursorX = this.font.drawInBatch(\r\n                            substring(componentColoured, 0, cursorIndex - charCount),\r\n                            lineX,\r\n                            lineY,\r\n                            -1,\r\n                            true,\r\n                            matrix4f,\r\n                            buffer,\r\n                            Font.DisplayMode.NORMAL,\r\n                            0,\r\n                            LightTexture.FULL_BRIGHT\r\n                    ) - 1;\r\n                    this.font.drawInBatch(\r\n                            substring(componentColoured, cursorIndex - charCount, lineLength),\r\n                            cursorX,\r\n                            lineY,\r\n                            -1,\r\n                            true,\r\n                            matrix4f,\r\n                            buffer,\r\n                            Font.DisplayMode.NORMAL,\r\n                            0,\r\n                            LightTexture.FULL_BRIGHT\r\n                    );\r\n                } else {\r\n                    this.font.drawInBatch(\r\n                            componentColoured,\r\n                            lineX,\r\n                            lineY,\r\n                            -1,\r\n                            true,\r\n                            matrix4f,\r\n                            buffer,\r\n                            Font.DisplayMode.NORMAL,\r\n                            0,\r\n                            LightTexture.FULL_BRIGHT\r\n                    );\r\n                }\r\n                buffer.endBatch();\r\n\r\n                // Check if the selection is within the current line\r\n                if (selectionStart <= charCount + lineLength && selectionEnd > charCount) {\r\n                    int lineSelectionStart = Math.max(selectionStart - charCount, 0);\r\n                    int lineSelectionEnd = Math.min(selectionEnd - charCount, lineLength);\r\n\r\n                    int highlightStartX = this.font.width(substring(componentColoured, 0, lineSelectionStart));\r\n                    int highlightEndX = this.font.width(substring(componentColoured, 0, lineSelectionEnd));\r\n\r\n                    this.renderHighlight(\r\n                            graphics,\r\n                            lineX + highlightStartX,\r\n                            lineY,\r\n                            lineX + highlightEndX,\r\n                            lineY + lineHeight\r\n                    );\r\n                }\r\n\r\n                lineY += lineHeight;\r\n                charCount += lineLength + 1;\r\n            }\r\n\r\n            if (isCursorAtEndOfLine) {\r\n                graphics.drawString(this.font, \"_\", cursorX, cursorY, -1);\r\n            } else {\r\n                graphics.fill(cursorX, cursorY - 1, cursorX + 1, cursorY + 1 + 9, -1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\handler\\ContainerScreenInspectorHandler.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.handler;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport ca.teamdman.sfm.client.registry.SFMKeyMappings;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.net.ServerboundContainerExportsInspectionRequestPacket;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport com.mojang.blaze3d.platform.InputConstants;\r\nimport com.mojang.blaze3d.vertex.PoseStack;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.gui.GuiGraphics;\r\nimport net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.entity.player.Inventory;\r\nimport net.minecraft.world.inventory.AbstractContainerMenu;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.neoforged.api.distmarker.Dist;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.client.event.ScreenEvent;\r\nimport net.neoforged.neoforge.client.gui.widget.ExtendedButton;\r\n\r\nimport javax.annotation.Nullable;\r\n\r\n@Mod.EventBusSubscriber(modid = SFM.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE, value = Dist.CLIENT)\r\npublic class ContainerScreenInspectorHandler {\r\n    private static boolean visible = false;\r\n    @Nullable\r\n    private static AbstractContainerScreen<?> lastScreen = null;\r\n    private static final ExtendedButton exportInspectorButton = new ExtendedButton(\r\n            5,\r\n            50,\r\n            100,\r\n            20,\r\n            Constants.LocalizationKeys.CONTAINER_INSPECTOR_SHOW_EXPORTS_BUTTON.getComponent(),\r\n            (button) -> {\r\n                BlockEntity lookBlockEntity = ClientStuff.getLookBlockEntity();\r\n                if (lastScreen != null && lookBlockEntity != null) {\r\n                    SFMPackets.INSPECTION_CHANNEL.sendToServer(new ServerboundContainerExportsInspectionRequestPacket(\r\n                            lastScreen.getMenu().containerId,\r\n                            lookBlockEntity.getBlockPos()\r\n                    ));\r\n                }\r\n            }\r\n    );\r\n\r\n    @SubscribeEvent\r\n    public static void onMouseClick(ScreenEvent.KeyPressed.MouseButtonPressed.Pre event) {\r\n        boolean shouldCapture = Minecraft.getInstance().screen instanceof AbstractContainerScreen<?>;\r\n        if (shouldCapture && visible && exportInspectorButton.clicked(event.getMouseX(), event.getMouseY())) {\r\n            exportInspectorButton.playDownSound(Minecraft.getInstance().getSoundManager());\r\n            exportInspectorButton.onClick(event.getMouseX(), event.getMouseY());\r\n            event.setCanceled(true);\r\n        }\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void onGuiRender(ScreenEvent.Render.Post event) {\r\n        if (!visible) return;\r\n        if (event.getScreen() instanceof AbstractContainerScreen<?> acs) {\r\n            lastScreen = acs;\r\n            AbstractContainerMenu menu = acs.getMenu();\r\n            int containerSlotCount = 0;\r\n            int inventorySlotCount = 0;\r\n            GuiGraphics graphics = event.getGuiGraphics();\r\n            PoseStack poseStack = graphics.pose();\r\n            poseStack.pushPose();\r\n            poseStack.translate(0, 0, 350); // render text over the items but under the tooltips\r\n\r\n            // draw the button\r\n            exportInspectorButton.render(graphics, event.getMouseX(), event.getMouseY(), event.getPartialTick());\r\n\r\n\r\n            // draw index on each slot\r\n            for (var slot : menu.slots) {\r\n                int colour;\r\n                if (slot.container instanceof Inventory) {\r\n                    //noinspection DataFlowIssue\r\n                    colour = ChatFormatting.YELLOW.getColor();\r\n                    inventorySlotCount++;\r\n                } else {\r\n                    colour = 0xFFF;\r\n                    containerSlotCount++;\r\n                }\r\n                graphics.drawString(\r\n                        Minecraft.getInstance().font,\r\n                        Component.literal(Integer.toString(slot.getSlotIndex())),\r\n                        acs.getGuiLeft() + slot.x,\r\n                        acs.getGuiTop() + slot.y,\r\n                        colour,\r\n                        false\r\n                );\r\n            }\r\n\r\n            // draw text for slot totals\r\n            graphics.drawString(\r\n                    Minecraft.getInstance().font,\r\n                    Constants.LocalizationKeys.CONTAINER_INSPECTOR_CONTAINER_SLOT_COUNT.getComponent(Component\r\n                                                                                                             .literal(\r\n                                                                                                                     String.valueOf(\r\n                                                                                                                             containerSlotCount))\r\n                                                                                                             .withStyle(\r\n                                                                                                                     ChatFormatting.BLUE)),\r\n                    5,\r\n                    5,\r\n                    0xFFFFFF,\r\n                    true\r\n            );\r\n            graphics.drawString(\r\n                    Minecraft.getInstance().font,\r\n                    Constants.LocalizationKeys.CONTAINER_INSPECTOR_INVENTORY_SLOT_COUNT.getComponent(Component\r\n                                                                                                             .literal(\r\n                                                                                                                     String.valueOf(\r\n                                                                                                                             inventorySlotCount))\r\n                                                                                                             .withStyle(\r\n                                                                                                                     ChatFormatting.YELLOW)),\r\n                    5,\r\n                    25,\r\n                    0xFFFFFF,\r\n                    true\r\n            );\r\n            poseStack.popPose();\r\n        }\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void onKeyDown(ScreenEvent.KeyPressed.Pre event) {\r\n        var toggleKey = SFMKeyMappings.CONTAINER_INSPECTOR_KEY.get();\r\n        var toggleKeyPressed = toggleKey.isActiveAndMatches(InputConstants.Type.KEYSYM.getOrCreate(event.getKeyCode()));\r\n        if (toggleKeyPressed) {\r\n            visible = !visible;\r\n            event.setCanceled(true);\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\render\\PrintingPressBlockEntityRenderer.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.render;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.PrintingPressBlockEntity;\r\nimport com.mojang.blaze3d.vertex.PoseStack;\r\nimport com.mojang.math.Axis;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.renderer.MultiBufferSource;\r\nimport net.minecraft.client.renderer.blockentity.BlockEntityRenderer;\r\nimport net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;\r\nimport net.minecraft.world.item.ItemDisplayContext;\r\nimport net.minecraft.world.item.ItemStack;\r\n\r\npublic class PrintingPressBlockEntityRenderer implements BlockEntityRenderer<PrintingPressBlockEntity> {\r\n    public PrintingPressBlockEntityRenderer(BlockEntityRendererProvider.Context pContext) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void render(\r\n            PrintingPressBlockEntity blockEntity,\r\n            float partialTick,\r\n            PoseStack poseStack,\r\n            MultiBufferSource buf,\r\n            int packedLight,\r\n            int packedOverlay\r\n    ) {\r\n        var paper = blockEntity.getPaper();\r\n        var dye = blockEntity.getInk();\r\n        var form = blockEntity.getForm();\r\n        var depthAxis = Axis.XP;\r\n        poseStack.pushPose();\r\n        poseStack.translate(0.5, 1, 0.6);\r\n        poseStack.mulPose(depthAxis.rotationDegrees(-90));\r\n\r\n        for (var stack : new ItemStack[]{form, paper, dye}) {\r\n            if (!stack.isEmpty()) {\r\n                Minecraft\r\n                        .getInstance()\r\n                        .getItemRenderer()\r\n                        .renderStatic(\r\n                                stack,\r\n                                ItemDisplayContext.GROUND,\r\n                                packedLight,\r\n                                packedOverlay,\r\n                                poseStack,\r\n                                buf,\r\n                                blockEntity.getLevel(),\r\n                                (int) blockEntity.getBlockPos().asLong()\r\n                        );\r\n                poseStack.translate(0.01, 0.01, 0.03);\r\n            }\r\n        }\r\n        poseStack.popPose();\r\n\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundContainerExportsInspectionRequestPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.compat.SFMCompat;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfm.common.registry.SFMResourceTypes;\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport ca.teamdman.sfml.ast.*;\r\nimport it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;\r\nimport it.unimi.dsi.fastutil.ints.Int2ObjectMap;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.resources.ResourceKey;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.inventory.AbstractContainerMenu;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\nimport net.neoforged.neoforge.network.PacketDistributor;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.EnumSet;\r\nimport java.util.List;\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundContainerExportsInspectionRequestPacket(\r\n        int windowId,\r\n        BlockPos pos\r\n) {\r\n    public static void encode(ServerboundContainerExportsInspectionRequestPacket msg, FriendlyByteBuf friendlyByteBuf) {\r\n        friendlyByteBuf.writeVarInt(msg.windowId());\r\n        friendlyByteBuf.writeBlockPos(msg.pos());\r\n    }\r\n\r\n    public static ServerboundContainerExportsInspectionRequestPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ServerboundContainerExportsInspectionRequestPacket(\r\n                friendlyByteBuf.readVarInt(),\r\n                friendlyByteBuf.readBlockPos()\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ServerboundContainerExportsInspectionRequestPacket msg,\r\n            NetworkEvent.Context context\r\n    ) {\r\n        SFMPackets.handleServerboundContainerPacket(\r\n                context,\r\n                AbstractContainerMenu.class,\r\n                BlockEntity.class,\r\n                msg.pos,\r\n                msg.windowId,\r\n                (menu, blockEntity) -> {\r\n                    assert blockEntity.getLevel() != null;\r\n                    String payload = buildInspectionResults(blockEntity.getLevel(), blockEntity.getBlockPos());\r\n                    var player = context.getSender();\r\n\r\n                    SFMPackets.INSPECTION_CHANNEL.send(\r\n                            PacketDistributor.PLAYER.with(() -> player),\r\n                            new ClientboundContainerExportsInspectionResultsPacket(\r\n                                    msg.windowId,\r\n                                    SFMUtils.truncate(\r\n                                            payload,\r\n                                            ClientboundContainerExportsInspectionResultsPacket.MAX_RESULTS_LENGTH\r\n                                    )\r\n                            )\r\n                    );\r\n                }\r\n        );\r\n    }\r\n\r\n\r\n    public static String buildInspectionResults(Level level, BlockPos pos) {\r\n        StringBuilder sb = new StringBuilder();\r\n        Direction[] dirs = Arrays.copyOf(Direction.values(), Direction.values().length + 1);\r\n        dirs[dirs.length - 1] = null;\r\n        for (Direction direction : dirs) {\r\n            sb.append(\"-- \").append(direction).append(\"\\n\");\r\n            int len = sb.length();\r\n            //noinspection unchecked,rawtypes\r\n            SFMResourceTypes.DEFERRED_TYPES\r\n                    .entrySet()\r\n                    .forEach(entry -> sb.append(buildInspectionResults(\r\n                            (ResourceKey) entry.getKey(),\r\n                            entry.getValue(),\r\n                            level,\r\n                            pos,\r\n                            direction\r\n                    )));\r\n            if (sb.length() == len) {\r\n                sb.append(\"No exports found\");\r\n            }\r\n            sb.append(\"\\n\");\r\n        }\r\n\r\n        if (SFMCompat.isMekanismLoaded()) {\r\n            BlockEntity be = level.getBlockEntity(pos);\r\n            if (be != null) {\r\n//                sb.append(ca.teamdman.sfm.common.compat.SFMMekanismCompat.gatherInspectionResults(be)).append(\"\\n\");\r\n            }\r\n        }\r\n\r\n        return sb.toString();\r\n    }\r\n\r\n    public static <STACK, ITEM, CAP> String buildInspectionResults(\r\n            ResourceKey<ResourceType<STACK, ITEM, CAP>> resourceTypeResourceKey,\r\n            ResourceType<STACK, ITEM, CAP> resourceType,\r\n            Level level,\r\n            BlockPos pos,\r\n            @Nullable\r\n            Direction direction\r\n    ) {\r\n        StringBuilder sb = new StringBuilder();\r\n        SFMUtils\r\n                .discoverCapabilityProvider(level, pos)\r\n                .ifPresent(prov -> prov.getCapability(resourceType.CAPABILITY_KIND, direction).ifPresent(cap -> {\r\n                    int slots = resourceType.getSlots(cap);\r\n                    Int2ObjectMap<STACK> slotContents = new Int2ObjectArrayMap<>(slots);\r\n                    for (int slot = 0; slot < slots; slot++) {\r\n                        STACK stack = resourceType.getStackInSlot(cap, slot);\r\n                        if (!resourceType.isEmpty(stack)) {\r\n                            slotContents.put(slot, stack);\r\n                        }\r\n                    }\r\n\r\n                    if (!slotContents.isEmpty()) {\r\n                        slotContents.forEach((slot, stack) -> {\r\n                            InputStatement inputStatement = SFMUtils.getInputStatementForStack(\r\n                                    resourceTypeResourceKey,\r\n                                    resourceType,\r\n                                    stack,\r\n                                    \"target\",\r\n                                    slot,\r\n                                    false,\r\n                                    direction\r\n                            );\r\n                            sb.append(inputStatement.toStringPretty()).append(\"\\n\");\r\n                        });\r\n\r\n                        List<ResourceLimit<STACK, ITEM, CAP>> resourceLimitList = new ArrayList<>();\r\n                        slotContents.forEach((slot, stack) -> {\r\n                            ResourceLocation stackId = resourceType.getRegistryKey(stack);\r\n                            ResourceIdentifier<STACK, ITEM, CAP> resourceIdentifier = new ResourceIdentifier<>(\r\n                                    resourceTypeResourceKey.location().getNamespace(),\r\n                                    resourceTypeResourceKey.location().getPath(),\r\n                                    stackId.getNamespace(),\r\n                                    stackId.getPath()\r\n                            );\r\n                            ResourceLimit<STACK, ITEM, CAP> resourceLimit = new ResourceLimit<>(\r\n                                    resourceIdentifier,\r\n                                    Limit.MAX_QUANTITY_NO_RETENTION\r\n                            );\r\n                            resourceLimitList.add(resourceLimit);\r\n                        });\r\n                        InputStatement inputStatement = new InputStatement(\r\n                                new LabelAccess(\r\n                                        List.of(new Label(\"target\")),\r\n                                        new DirectionQualifier(direction == null\r\n                                                               ? EnumSet.noneOf(Direction.class)\r\n                                                               : EnumSet.of(direction)),\r\n                                        NumberRangeSet.MAX_RANGE,\r\n                                        RoundRobin.disabled()\r\n                                ),\r\n                                new ResourceLimits(\r\n                                        resourceLimitList.stream().distinct().toList(),\r\n                                        ResourceIdSet.EMPTY\r\n                                ),\r\n                                false\r\n                        );\r\n                        sb.append(inputStatement.toStringPretty());\r\n                    }\r\n                }));\r\n        String result = sb.toString();\r\n        if (!result.isBlank()) {\r\n            BlockEntity be = level.getBlockEntity(pos);\r\n            //noinspection DataFlowIssue\r\n            if (be != null && direction == null && BuiltInRegistries.BLOCK_ENTITY_TYPE\r\n                    .getKey(be.getType())\r\n                    .getNamespace()\r\n                    .equals(\"mekanism\")) {\r\n                return \"-- \"\r\n                       + Constants.LocalizationKeys.CONTAINER_INSPECTOR_MEKANISM_NULL_DIRECTION_WARNING.getString()\r\n                       + \"\\n\"\r\n                       + result;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ResourceIdSet.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport java.util.Set;\r\nimport java.util.function.Predicate;\r\n\r\npublic record ResourceIdSet(\r\n        Set<ResourceIdentifier<?, ?, ?>> resourceIds\r\n) implements ASTNode, Predicate<Object> {\r\n    public static final ResourceIdSet EMPTY = new ResourceIdSet(Set.of());\r\n\r\n    public boolean test(Object stack) {\r\n        for (ResourceIdentifier<?, ?, ?> exclude : resourceIds) {\r\n            if (exclude.test(stack)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ResourceLimits.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.InputResourceTracker;\r\nimport ca.teamdman.sfm.common.program.OutputResourceTracker;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic record ResourceLimits(\r\n        List<? extends ResourceLimit<?, ?, ?>> resourceLimits,\r\n        ResourceIdSet exclusions\r\n) implements ASTNode {\r\n    public List<InputResourceTracker<?, ?, ?>> createInputTrackers() {\r\n        List<InputResourceTracker<?, ?, ?>> rtn = new ArrayList<>();\r\n        resourceLimits.forEach(rl -> rl.gatherInputTrackers(rtn::add, exclusions));\r\n        return rtn;\r\n    }\r\n\r\n    public List<OutputResourceTracker<?, ?, ?>> createOutputTrackers() {\r\n        List<OutputResourceTracker<?, ?, ?>> rtn = new ArrayList<>();\r\n        resourceLimits.forEach(rl -> rl.gatherOutputTrackers(rtn::add, exclusions));\r\n        return rtn;\r\n    }\r\n\r\n    public ResourceLimits withDefaults(Limit limit) {\r\n        return new ResourceLimits(resourceLimits.stream().map(il -> il.withDefaults(limit)).toList(), exclusions);\r\n    }\r\n\r\n    public ResourceLimits withExclusions(ResourceIdSet exclusions) {\r\n        return new ResourceLimits(resourceLimits, exclusions);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String rtn = this.resourceLimits.stream()\r\n                .map(ResourceLimit::toString)\r\n                .collect(Collectors.joining(\",\\n\"));\r\n        if (!exclusions.resourceIds().isEmpty()) {\r\n            rtn += \"\\nEXCEPT\\n\" + exclusions.resourceIds().stream()\r\n                    .map(ResourceIdentifier::toString)\r\n                    .collect(Collectors.joining(\",\\n\"));\r\n        }\r\n        return rtn;\r\n    }\r\n\r\n    public String toStringPretty(Limit defaults) {\r\n        String rtn = resourceLimits.stream()\r\n                .map(rl -> rl.toStringCondensed(defaults))\r\n                .map(x -> resourceLimits.size() == 1 ? x : x + \",\")\r\n                .collect(Collectors.joining(\"\\n\"));\r\n        if (!exclusions.resourceIds().isEmpty()) {\r\n            rtn += \"\\nEXCEPT\\n\" + exclusions.resourceIds().stream()\r\n                    .map(ResourceIdentifier::toStringCondensed)\r\n                    .collect(Collectors.joining(\",\\n\"));\r\n        }\r\n        return rtn;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\FormItem.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.item;\r\n\r\nimport ca.teamdman.sfm.client.render.FormItemExtensions;\r\nimport ca.teamdman.sfm.common.registry.SFMItems;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.TooltipFlag;\r\nimport net.minecraft.world.level.Level;\r\nimport net.neoforged.neoforge.client.extensions.common.IClientItemExtensions;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport java.util.List;\r\nimport java.util.function.Consumer;\r\n\r\npublic class FormItem extends Item {\r\n    public FormItem() {\r\n        super(new Item.Properties());\r\n    }\r\n\r\n    public static ItemStack getForm(ItemStack stack) {\r\n        var formStack = new ItemStack(SFMItems.FORM_ITEM.get());\r\n        formStack.getOrCreateTag().put(\"reference\", stack.serializeNBT());\r\n        return formStack;\r\n    }\r\n\r\n    public static ItemStack getReference(ItemStack stack) {\r\n        return ItemStack.of(stack.getOrCreateTag().getCompound(\"reference\"));\r\n    }\r\n\r\n    @Override\r\n    public void initializeClient(Consumer<IClientItemExtensions> consumer) {\r\n        consumer.accept(new FormItemExtensions());\r\n    }\r\n\r\n    @Override\r\n    public void appendHoverText(\r\n            ItemStack pStack,\r\n            @Nullable Level pLevel,\r\n            List<Component> pTooltipComponents,\r\n            TooltipFlag pIsAdvanced\r\n    ) {\r\n        if (pStack.hasTag()) {\r\n            var reference = getReference(pStack);\r\n            if (!reference.isEmpty()) {\r\n                pTooltipComponents.add(reference.getHoverName());\r\n                reference.getItem().appendHoverText(reference, pLevel, pTooltipComponents, pIsAdvanced);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\util\\SFMContainerUtil.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.util;\r\n\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\n\r\npublic class SFMContainerUtil {\r\n    public static boolean stillValid(BlockEntity blockEntity, Player player) {\r\n        var level = blockEntity.getLevel();\r\n        if (level == null) return false;\r\n        var pos   = blockEntity.getBlockPos();\r\n        if (level.getBlockEntity(pos) != blockEntity) return false;\r\n        double dist = player.distanceToSqr(\r\n                (double) pos.getX() + 0.5D,\r\n                (double) pos.getY() + 0.5D,\r\n                (double) pos.getZ() + 0.5D\r\n        );\r\n        return dist <= 64.0D;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\gui\\screen\\LabelGunScreen.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.gui.screen;\r\n\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.net.ServerboundLabelGunClearPacket;\r\nimport ca.teamdman.sfm.common.net.ServerboundLabelGunPrunePacket;\r\nimport ca.teamdman.sfm.common.net.ServerboundLabelGunUpdatePacket;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.gui.GuiGraphics;\r\nimport net.minecraft.client.gui.components.Button;\r\nimport net.minecraft.client.gui.components.EditBox;\r\nimport net.minecraft.client.gui.screens.Screen;\r\nimport net.minecraft.network.chat.CommonComponents;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport org.lwjgl.glfw.GLFW;\r\n\r\nimport java.util.Comparator;\r\n\r\npublic class LabelGunScreen extends Screen {\r\n    private final InteractionHand HAND;\r\n    private final LabelPositionHolder LABEL_HOLDER;\r\n    @SuppressWarnings(\"NotNullFieldNotInitialized\")\r\n    private EditBox labelField;\r\n    private boolean shouldRebuildWidgets = false;\r\n\r\n    public LabelGunScreen(ItemStack labelGunStack, InteractionHand hand) {\r\n        super(Constants.LocalizationKeys.LABEL_GUN_GUI_TITLE.getComponent());\r\n        LABEL_HOLDER = LabelPositionHolder.from(labelGunStack);\r\n        HAND = hand;\r\n    }\r\n\r\n    @Override\r\n    protected void init() {\r\n        super.init();\r\n        assert this.minecraft != null;\r\n        this.labelField = addRenderableWidget(new EditBox(\r\n                this.font,\r\n                this.width / 2 - 150,\r\n                50,\r\n                300,\r\n                20,\r\n                Constants.LocalizationKeys.LABEL_GUN_GUI_LABEL_PLACEHOLDER.getComponent()\r\n        ));\r\n        this.setInitialFocus(labelField);\r\n        this.setFocused(labelField);\r\n\r\n        this.addRenderableWidget(new Button.Builder(\r\n                                         Constants.LocalizationKeys.LABEL_GUN_GUI_CLEAR_BUTTON.getComponent(),\r\n                                         __ -> {\r\n                                             SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunClearPacket(HAND));\r\n                                             LABEL_HOLDER.clear();\r\n                                             shouldRebuildWidgets = true;\r\n                                         }\r\n                                 )\r\n                                         .pos(this.width / 2 - 210, 50)\r\n                                         .size(50, 20).build()\r\n        );\r\n        this.addRenderableWidget(new Button.Builder(\r\n                Constants.LocalizationKeys.LABEL_GUN_GUI_PRUNE_BUTTON.getComponent(),\r\n                (btn) -> {\r\n                    SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunPrunePacket(HAND));\r\n                    LABEL_HOLDER.prune();\r\n                    shouldRebuildWidgets = true;\r\n                }\r\n        )\r\n                                         .pos(this.width / 2 + 160, 50)\r\n                                         .size(50, 20).build());\r\n        this.addRenderableWidget(new Button.Builder(CommonComponents.GUI_DONE, __ -> this.onDone())\r\n                                         .pos(this.width / 2 - 2 - 150, this.height - 50)\r\n                                         .size(300, 20)\r\n                                         .build());\r\n        {\r\n            var labels = LABEL_HOLDER.get().keySet().stream().sorted(Comparator.naturalOrder()).toList();\r\n            int i = 0;\r\n            int buttonWidth = LABEL_HOLDER.get()\r\n                                      .entrySet()\r\n                                      .stream()\r\n                                      .map(entry -> Constants.LocalizationKeys.LABEL_GUN_GUI_LABEL_BUTTON.getComponent(\r\n                                              entry.getKey(),\r\n                                              entry.getValue().size()\r\n                                      ).getString())\r\n                                      .mapToInt(this.font::width)\r\n                                      .max().orElse(50) + 10;\r\n            int buttonHeight = 20;\r\n            int paddingX = 5;\r\n            int paddingY = 5;\r\n            int buttonsPerRow = this.width / (buttonWidth + paddingX);\r\n            for (var label : labels) {\r\n                int x = (this.width - (buttonWidth + paddingX) * Math.min(buttonsPerRow, labels.size())) / 2\r\n                        + paddingX\r\n                        + (i % buttonsPerRow) * (\r\n                        buttonWidth\r\n                        + paddingX\r\n                );\r\n                int y = 80 + (i / buttonsPerRow) * (buttonHeight + paddingY);\r\n                int count = LABEL_HOLDER.getPositions(label).size();\r\n                this.addRenderableWidget(new Button.Builder(\r\n                                                 Constants.LocalizationKeys.LABEL_GUN_GUI_LABEL_BUTTON.getComponent(label, count),\r\n                                                 (btn) -> {\r\n                                                     this.labelField.setValue(label);\r\n                                                     this.onDone();\r\n                                                 }\r\n                                         )\r\n                                                 .pos(x, y)\r\n                                                 .size(buttonWidth, buttonHeight).build()\r\n                );\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean keyPressed(int key, int mod1, int mod2) {\r\n        if (super.keyPressed(key, mod1, mod2)) return true;\r\n        if (key != GLFW.GLFW_KEY_ENTER && key != GLFW.GLFW_KEY_KP_ENTER) return false;\r\n        onDone();\r\n        return true;\r\n    }\r\n\r\n    public void onDone() {\r\n        SFMPackets.LABEL_GUN_ITEM_CHANNEL.sendToServer(new ServerboundLabelGunUpdatePacket(\r\n                labelField.getValue(),\r\n                HAND\r\n        ));\r\n        onClose();\r\n    }\r\n\r\n    @Override\r\n    public void resize(Minecraft mc, int x, int y) {\r\n        var prev = this.labelField.getValue();\r\n        init(mc, x, y);\r\n        super.resize(mc, x, y);\r\n        this.labelField.setValue(prev);\r\n    }\r\n\r\n    @Override\r\n    public void render(GuiGraphics graphics, int mx, int my, float partialTicks) {\r\n        if (shouldRebuildWidgets) {\r\n            // we delay this because focus gets reset _after_ the button event handler\r\n            // we want to end with the label input field focused\r\n            shouldRebuildWidgets = false;\r\n            rebuildWidgets();\r\n        }\r\n        this.renderTransparentBackground(graphics);\r\n        super.render(graphics, mx, my, partialTicks);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\OutputResourceTracker.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport ca.teamdman.sfml.ast.ResourceIdSet;\r\nimport ca.teamdman.sfml.ast.ResourceLimit;\r\n\r\nimport java.util.concurrent.atomic.AtomicLong;\r\nimport java.util.function.Predicate;\r\n\r\npublic class OutputResourceTracker<STACK, ITEM, CAP> implements Predicate<Object> {\r\n    private final ResourceLimit<STACK, ITEM, CAP> LIMIT;\r\n    private final ResourceIdSet EXCLUSIONS;\r\n    private final AtomicLong TRANSFERRED;\r\n    private final AtomicLong RETENTION_OBLIGATION_PROGRESS;\r\n\r\n    public OutputResourceTracker(\r\n            ResourceLimit<STACK, ITEM, CAP> resourceLimit,\r\n            ResourceIdSet exclusions,\r\n            AtomicLong transferred,\r\n            AtomicLong retentionObligationProgress\r\n    ) {\r\n        this.LIMIT = resourceLimit;\r\n        this.EXCLUSIONS = exclusions;\r\n        this.TRANSFERRED = transferred;\r\n        this.RETENTION_OBLIGATION_PROGRESS = retentionObligationProgress;\r\n    }\r\n\r\n    /**\r\n     * Done when we have reached the transfer limit, or when the retention is satisfied\r\n     */\r\n    public boolean isDone() {\r\n        return TRANSFERRED.get() >= LIMIT.limit().quantity().number().value()\r\n               || RETENTION_OBLIGATION_PROGRESS.get() >= LIMIT.limit().retention().number().value();\r\n    }\r\n\r\n    /**\r\n     * Update obligation progress as new limited slots are prepared\r\n     */\r\n    public void visit(LimitedOutputSlot<STACK, ITEM, CAP> slot) {\r\n        var stack = slot.getStackInSlot();\r\n        if (test(stack)) {\r\n            RETENTION_OBLIGATION_PROGRESS.accumulateAndGet(slot.type.getAmount(stack), Long::sum);\r\n        }\r\n    }\r\n\r\n    public void trackTransfer(long amount) {\r\n        TRANSFERRED.accumulateAndGet(amount, Long::sum);\r\n        RETENTION_OBLIGATION_PROGRESS.accumulateAndGet(amount, Long::sum);\r\n    }\r\n\r\n    /**\r\n     * How much more are we allowed to move\r\n     */\r\n    public long getMaxTransferable() {\r\n        long remainingRetentionRoom = LIMIT.limit().retention().number().value() - RETENTION_OBLIGATION_PROGRESS.get();\r\n        long unusedQuantity = LIMIT.limit().quantity().number().value() - TRANSFERRED.get();\r\n        return Math.min(unusedQuantity, remainingRetentionRoom);\r\n    }\r\n\r\n    public boolean matchesCapabilityType(Object capability) {\r\n        ResourceType<STACK, ITEM, CAP> resourceType = LIMIT.resourceId().getResourceType();\r\n        return resourceType != null && resourceType.matchesCapabilityType(capability);\r\n    }\r\n\r\n    @Override\r\n    public boolean test(Object stack) {\r\n        return LIMIT.test(stack) && !EXCLUSIONS.test(stack);\r\n    }\r\n\r\n    public ResourceLimit<STACK, ITEM, CAP> getLimit() {\r\n        return LIMIT;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMRecipeSerializers.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.recipe.DiskResetRecipe;\r\nimport ca.teamdman.sfm.common.recipe.PrintingPressRecipe;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.world.item.crafting.RecipeSerializer;\r\nimport net.minecraft.world.item.crafting.SimpleCraftingRecipeSerializer;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic class SFMRecipeSerializers {\r\n    private static final DeferredRegister<RecipeSerializer<?>> RECIPE_SERIALIZERS = DeferredRegister.create(\r\n            BuiltInRegistries.RECIPE_SERIALIZER,\r\n            SFM.MOD_ID\r\n    );\r\n\r\n    public static final Supplier<RecipeSerializer<PrintingPressRecipe>> PRINTING_PRESS = RECIPE_SERIALIZERS.register(\r\n            \"printing_press\",\r\n            PrintingPressRecipe.Serializer::new\r\n    );\r\n\r\n    public static final Supplier<SimpleCraftingRecipeSerializer<DiskResetRecipe>> DISK_RESET = RECIPE_SERIALIZERS.register(\r\n            \"disk_reset\",\r\n            () -> new SimpleCraftingRecipeSerializer<>(DiskResetRecipe::new)\r\n    );\r\n\r\n    public static void register(IEventBus bus) {\r\n        RECIPE_SERIALIZERS.register(bus);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundLabelGunPrunePacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.item.LabelGunItem;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundLabelGunPrunePacket(\r\n        InteractionHand hand\r\n) {\r\n    public static void encode(ServerboundLabelGunPrunePacket msg, FriendlyByteBuf buf) {\r\n        buf.writeEnum(msg.hand);\r\n    }\r\n\r\n    public static ServerboundLabelGunPrunePacket decode(\r\n            FriendlyByteBuf buf\r\n    ) {\r\n        return new ServerboundLabelGunPrunePacket(buf.readEnum(InteractionHand.class));\r\n    }\r\n\r\n    public static void handle(\r\n            ServerboundLabelGunPrunePacket msg, NetworkEvent.Context ctx\r\n    ) {\r\n        ctx.enqueueWork(() -> {\r\n            var sender = ctx.getSender();\r\n            if (sender == null) {\r\n                return;\r\n            }\r\n            var stack = sender.getItemInHand(msg.hand);\r\n            if (stack.getItem() instanceof LabelGunItem) {\r\n                LabelPositionHolder.from(stack).prune().save(stack);\r\n            }\r\n        });\r\n        ctx.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ForgetStatement.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.stream.Collectors;\r\n\r\npublic record ForgetStatement(\r\n        List<Label> labels\r\n) implements Statement {\r\n    @Override\r\n    public void tick(ProgramContext context) {\r\n        // map-replace existing inputs with ones that exclude the union of the label access\r\n        var newInputs = context.getInputs()\r\n                .stream()\r\n                .map(input -> new InputStatement(\r\n                        new LabelAccess(\r\n                                input.labelAccess().labels().stream()\r\n                                        .filter(label -> !this.labels.contains(label))\r\n                                        .collect(Collectors.toList()),\r\n                                input.labelAccess().directions(),\r\n                                input.labelAccess().slots(),\r\n                                input.labelAccess().roundRobin()\r\n                        ),\r\n                        input.resourceLimits(),\r\n                        input.each()\r\n                ))\r\n                .filter(input -> !input.labelAccess().labels().isEmpty())\r\n                .toList();\r\n        context.getInputs().clear();\r\n        context.getInputs().addAll(newInputs);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"FORGET \" + labels.stream().map(Objects::toString).collect(Collectors.joining(\", \"));\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ComparisonOperator.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport java.util.Locale;\r\nimport java.util.function.BiPredicate;\r\n\r\npublic enum ComparisonOperator implements ASTNode, BiPredicate<Long, Long> {\r\n    GREATER((a, b) -> a > b),\r\n    LESSER((a, b) -> a < b),\r\n    EQUALS(Long::equals),\r\n    LESSER_OR_EQUAL((a, b) -> a <= b),\r\n    GREATER_OR_EQUAL((a, b) -> a >= b);\r\n\r\n    private final BiPredicate<Long, Long> PRED;\r\n\r\n    ComparisonOperator(BiPredicate<Long, Long> pred) {\r\n        this.PRED = pred;\r\n    }\r\n\r\n    public static ComparisonOperator from(String text) {\r\n        return switch (text.toUpperCase(Locale.ROOT)) {\r\n            case \"GT\", \">\" -> GREATER;\r\n            case \"LT\", \"<\" -> LESSER;\r\n            case \"EQ\", \"=\" -> EQUALS;\r\n            case \"LE\", \"<=\" -> LESSER_OR_EQUAL;\r\n            case \"GE\", \">=\" -> GREATER_OR_EQUAL;\r\n            default -> throw new IllegalArgumentException(\"Invalid comparison operator: \" + text);\r\n        };\r\n    }\r\n\r\n    public String getSourceCode() {\r\n        return switch (this) {\r\n            case GREATER -> \">\";\r\n            case LESSER -> \"<\";\r\n            case EQUALS -> \"=\";\r\n            case LESSER_OR_EQUAL -> \"<=\";\r\n            case GREATER_OR_EQUAL -> \">=\";\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public boolean test(Long a, Long b) {\r\n        return PRED.test(a, b);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\util\\OpenContainerTracker.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.util;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.minecraft.world.inventory.AbstractContainerMenu;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.event.entity.player.PlayerContainerEvent;\r\n\r\nimport java.util.Map;\r\nimport java.util.WeakHashMap;\r\nimport java.util.stream.Stream;\r\n\r\n@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.FORGE, modid = SFM.MOD_ID)\r\npublic class OpenContainerTracker {\r\n    private static final Map<ServerPlayer, AbstractContainerMenu> OPEN_CONTAINERS = new WeakHashMap<>();\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static <T extends AbstractContainerMenu> Stream<Map.Entry<ServerPlayer, T>> getPlayersWithOpenContainer(Class<T> menuClass) {\r\n        return OPEN_CONTAINERS.entrySet().stream()\r\n                .filter(e -> menuClass.isInstance(e.getValue()))\r\n                .map(e -> (Map.Entry<ServerPlayer, T>) e);\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void onOpenContainer(PlayerContainerEvent.Open event) {\r\n        if (event.getEntity() instanceof ServerPlayer serverPlayer) {\r\n            OPEN_CONTAINERS.put(serverPlayer, event.getContainer());\r\n        }\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void onCloseContainer(PlayerContainerEvent.Close event) {\r\n        if (event.getEntity() instanceof ServerPlayer serverPlayer) {\r\n            OPEN_CONTAINERS.remove(serverPlayer);\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.cablenetwork;\r\n\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport it.unimi.dsi.fastutil.longs.Long2ObjectMap;\r\nimport it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\r\nimport it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.world.level.Level;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.stream.Stream;\r\n\r\npublic class CapabilityCache {\r\n    private final Long2ObjectMap<Object2ObjectOpenHashMap<Capability<?>, Object2ObjectOpenHashMap<Direction, LazyOptional<?>>>> CACHE = new Long2ObjectOpenHashMap<>();\r\n\r\n    public void clear() {\r\n        CACHE.clear();\r\n    }\r\n\r\n    public int size() {\r\n        return CACHE.values().stream().flatMap(x -> x.values().stream()).mapToInt(Object2ObjectOpenHashMap::size).sum();\r\n    }\r\n\r\n    public void overwriteFromOther(BlockPos pos, CapabilityCache other) {\r\n        var found = other.CACHE.get(pos.asLong());\r\n        if (found != null) {\r\n            CACHE.put(pos.asLong(), new Object2ObjectOpenHashMap<>(found));\r\n        }\r\n    }\r\n\r\n    public <CAP> @Nullable LazyOptional<CAP> getCapability(\r\n            BlockPos pos,\r\n            Capability<CAP> capKind,\r\n            @Nullable Direction direction\r\n    ) {\r\n        if (CACHE.containsKey(pos.asLong())) {\r\n            var capMap = CACHE.get(pos.asLong());\r\n            if (capMap.containsKey(capKind)) {\r\n                var dirMap = capMap.get(capKind);\r\n                if (dirMap.containsKey(direction)) {\r\n                    var found = dirMap.get(direction);\r\n                    if (found == null) {\r\n                        return null;\r\n                    } else {\r\n                        //noinspection unchecked\r\n                        return (LazyOptional<CAP>) found;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @SuppressWarnings({\"CodeBlock2Expr\", \"rawtypes\", \"unchecked\"})\r\n    public void putAll(CapabilityCache other) {\r\n        other.CACHE.forEach((pos, capMap) -> {\r\n            capMap.forEach((capKind, dirMap) -> {\r\n                dirMap.forEach((direction, cap) -> {\r\n                    putCapability(BlockPos.of(pos), (Capability) capKind, direction, cap);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public Stream<BlockPos> getPositions() {\r\n        return CACHE.keySet().longStream().mapToObj(BlockPos::of);\r\n    }\r\n\r\n    public <CAP> LazyOptional<CAP> getOrDiscoverCapability(\r\n            Level level,\r\n            BlockPos pos,\r\n            Capability<CAP> capKind,\r\n            @Nullable Direction direction\r\n    ) {\r\n        // Check cache\r\n        var found = getCapability(pos, capKind, direction);\r\n        if (found != null) {\r\n            return found;\r\n        }\r\n\r\n        // No capability found, discover it\r\n        var provider = SFMUtils.discoverCapabilityProvider(level, pos);\r\n        if (provider.isPresent()) {\r\n            var lazyOptional = provider.get().getCapability(capKind, direction);\r\n            putCapability(pos, capKind, direction, lazyOptional);\r\n            lazyOptional.addListener(x -> remove(pos, capKind, direction));\r\n            return lazyOptional;\r\n        }\r\n\r\n        // Fallback to empty\r\n        return LazyOptional.empty();\r\n    }\r\n\r\n    public void remove(\r\n            BlockPos pos,\r\n            Capability<?> capKind,\r\n            @Nullable Direction direction\r\n    ) {\r\n        if (CACHE.containsKey(pos.asLong())) {\r\n            var capMap = CACHE.get(pos.asLong());\r\n            if (capMap.containsKey(capKind)) {\r\n                var dirMap = capMap.get(capKind);\r\n                dirMap.remove(direction);\r\n                if (dirMap.isEmpty()) {\r\n                    capMap.remove(capKind);\r\n                    if (capMap.isEmpty()) {\r\n                        CACHE.remove(pos.asLong());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public <CAP> void putCapability(\r\n            BlockPos pos,\r\n            Capability<CAP> capKind,\r\n            @Nullable Direction direction,\r\n            LazyOptional<CAP> cap\r\n    ) {\r\n        var capMap = CACHE.computeIfAbsent(pos.asLong(), k -> new Object2ObjectOpenHashMap<>());\r\n        var dirMap = capMap.computeIfAbsent(capKind, k -> new Object2ObjectOpenHashMap<>());\r\n        dirMap.put(direction, cap);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\jei\\FallingAnvilDisenchantRecipe.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.jei;\r\n\r\npublic class FallingAnvilDisenchantRecipe extends FallingAnvilRecipe {\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\Program.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;\r\nimport ca.teamdman.sfm.common.item.DiskItem;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport ca.teamdman.sfml.SFMLLexer;\r\nimport ca.teamdman.sfml.SFMLParser;\r\nimport net.minecraft.ResourceLocationException;\r\nimport net.minecraft.network.chat.contents.TranslatableContents;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.neoforged.fml.loading.FMLEnvironment;\r\nimport org.antlr.v4.runtime.*;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.*;\r\nimport java.util.function.BiConsumer;\r\nimport java.util.function.Consumer;\r\n\r\npublic record Program(\r\n        String name,\r\n        List<Trigger> triggers,\r\n        Set<String> referencedLabels,\r\n        Set<ResourceIdentifier<?, ?, ?>> referencedResources\r\n) implements Statement {\r\n    public static final int MAX_PROGRAM_LENGTH = 80960;\r\n    public static final int MAX_LABEL_LENGTH = 256;\r\n\r\n    public static void compile(\r\n            String programString,\r\n            BiConsumer<Program, ASTBuilder> onSuccess,\r\n            Consumer<List<TranslatableContents>> onFailure\r\n    ) {\r\n        SFMLLexer lexer = new SFMLLexer(CharStreams.fromString(programString));\r\n        CommonTokenStream tokens = new CommonTokenStream(lexer);\r\n        SFMLParser parser = new SFMLParser(tokens);\r\n        ASTBuilder builder = new ASTBuilder();\r\n\r\n        // set up error capturing\r\n        lexer.removeErrorListeners();\r\n        parser.removeErrorListeners();\r\n        List<TranslatableContents> errors = new ArrayList<>();\r\n        List<String> buildErrors = new ArrayList<>();\r\n        ListErrorListener listener = new ListErrorListener(buildErrors);\r\n        lexer.addErrorListener(listener);\r\n        parser.addErrorListener(listener);\r\n\r\n        // initial parse\r\n        SFMLParser.ProgramContext context = parser.program();\r\n        buildErrors.stream().map(Constants.LocalizationKeys.PROGRAM_ERROR_LITERAL::get).forEach(errors::add);\r\n\r\n        // build AST\r\n        Program program = null;\r\n        try {\r\n            program = builder.visitProgram(context);\r\n            // make sure all referenced resources exist now during compilation instead of waiting for the program to tick\r\n\r\n            for (ResourceIdentifier<?, ?, ?> referencedResource : program.referencedResources) {\r\n                try {\r\n                    ResourceType<?, ?, ?> resourceType = referencedResource.getResourceType();\r\n                    if (resourceType == null) {\r\n                        errors.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNKNOWN_RESOURCE_TYPE.get(\r\n                                referencedResource));\r\n                    }\r\n                } catch (ResourceLocationException e) {\r\n                    errors.add(Constants.LocalizationKeys.PROGRAM_ERROR_MALFORMED_RESOURCE_TYPE.get(referencedResource));\r\n                }\r\n            }\r\n        } catch (ResourceLocationException | IllegalArgumentException | AssertionError e) {\r\n            errors.add(Constants.LocalizationKeys.PROGRAM_ERROR_LITERAL.get(e.getMessage()));\r\n        } catch (Throwable t) {\r\n            errors.add(Constants.LocalizationKeys.PROGRAM_ERROR_COMPILE_FAILED.get());\r\n            SFM.LOGGER.error(\"Encountered unhandled error while compiling program\", t);\r\n            if (!FMLEnvironment.production) {\r\n                var message = t.getMessage();\r\n                if (message != null) {\r\n                    errors.add(SFMUtils.getTranslatableContents(t.getClass().getSimpleName() + \": \" + message));\r\n                } else {\r\n                    errors.add(SFMUtils.getTranslatableContents(t.getClass().getSimpleName()));\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (errors.isEmpty()) {\r\n            onSuccess.accept(program, builder);\r\n        } else {\r\n            onFailure.accept(errors);\r\n        }\r\n    }\r\n\r\n    public ArrayList<TranslatableContents> gatherWarnings(ItemStack disk, @Nullable ManagerBlockEntity manager) {\r\n        var warnings = new ArrayList<TranslatableContents>();\r\n        var labels = LabelPositionHolder.from(disk);\r\n        // labels in code but not in world\r\n        for (String label : referencedLabels) {\r\n            var isUsed = !labels.getPositions(label).isEmpty();\r\n            if (!isUsed) {\r\n                warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNUSED_LABEL.get(label));\r\n            }\r\n        }\r\n\r\n        // labels used in world but not defined in code\r\n        labels.get().keySet()\r\n                .stream()\r\n                .filter(x -> !referencedLabels.contains(x))\r\n                .forEach(label -> warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNDEFINED_LABEL.get(label)));\r\n\r\n        var level = manager != null ? manager.getLevel() : null;\r\n        if (level != null) {\r\n            // labels in world but not connected via cables\r\n            CableNetworkManager\r\n                    .getOrRegisterNetworkFromManagerPosition(manager)\r\n                    .ifPresent(network -> labels.forEach((label, pos) -> {\r\n                        var adjacent = network.isAdjacentToCable(pos);\r\n                        if (!adjacent) {\r\n                            warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_DISCONNECTED_LABEL.get(\r\n                                    label,\r\n                                    String.format(\r\n                                            \"[%d,%d,%d]\",\r\n                                            pos.getX(),\r\n                                            pos.getY(),\r\n                                            pos.getZ()\r\n                                    )\r\n                            ));\r\n                        }\r\n                        var viable = SFMUtils.discoverCapabilityProvider(level, pos).isPresent();\r\n                        if (!viable && adjacent) {\r\n                                warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_CONNECTED_BUT_NOT_VIABLE_LABEL.get(\r\n                                        label,\r\n                                        String.format(\r\n                                                \"[%d,%d,%d]\",\r\n                                                pos.getX(),\r\n                                                pos.getY(),\r\n                                                pos.getZ()\r\n                                        )\r\n                                ));\r\n                        }\r\n                    }));\r\n        }\r\n\r\n        // try and validate that references resources exist\r\n        for (var resource : referencedResources) {\r\n            // skip regex resources\r\n            Optional<ResourceLocation> loc = resource.getLocation();\r\n            if (loc.isEmpty()) continue;\r\n\r\n            // make sure resource type is registered\r\n            var type = resource.getResourceType();\r\n            if (type == null) {\r\n                warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNKNOWN_RESOURCE_TYPE.get(\r\n                        resource.resourceTypeNamespace\r\n                        + \":\"\r\n                        + resource.resourceTypeName,\r\n                        resource\r\n                ));\r\n                continue;\r\n            }\r\n\r\n            // make sure resource exists in the registry\r\n            if (!type.registryKeyExists(loc.get())) {\r\n                warnings.add(Constants.LocalizationKeys.PROGRAM_WARNING_UNKNOWN_RESOURCE_ID.get(resource));\r\n            }\r\n        }\r\n        return warnings;\r\n    }\r\n\r\n    public void fixWarnings(ItemStack disk, ManagerBlockEntity manager) {\r\n        var labels = LabelPositionHolder.from(disk);\r\n        // remove labels not defined in code\r\n        labels.removeIf(label -> !referencedLabels.contains(label));\r\n\r\n        // remove labels not connected via cables\r\n        CableNetworkManager\r\n                .getOrRegisterNetworkFromManagerPosition(manager)\r\n                .ifPresent(network -> labels.removeIf((label, pos) -> !network.isAdjacentToCable(pos)));\r\n        labels.save(disk);\r\n\r\n        // update warnings\r\n        DiskItem.setWarnings(disk, gatherWarnings(disk, manager));\r\n    }\r\n\r\n    public boolean tick(ManagerBlockEntity manager) {\r\n        // update warnings on disk item every 20 seconds\r\n        if (manager.getTick() % 20 == 0) {\r\n            manager.getDisk().ifPresent(disk -> DiskItem.setWarnings(disk, gatherWarnings(disk, manager)));\r\n        }\r\n\r\n        // build the context and tick the program\r\n        var context = new ProgramContext(this, manager, ProgramContext.ExecutionPolicy.UNRESTRICTED);\r\n        tick(context);\r\n\r\n        manager.clearRedstonePulseQueue();\r\n        //noinspection UnnecessaryLocalVariable\r\n        boolean didSomething = triggers.stream().anyMatch(t -> t.shouldTick(context));\r\n        return didSomething;\r\n    }\r\n\r\n    @Override\r\n    public List<Statement> getStatements() {\r\n        return triggers.stream().map(x -> (Statement) x).toList();\r\n    }\r\n\r\n    @Override\r\n    public void tick(ProgramContext context) {\r\n        for (Trigger t : triggers) {\r\n            if (t.shouldTick(context)) {\r\n                t.tick(context.copy());\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        var rtn = new StringBuilder();\r\n        rtn.append(\"NAME \\\"\").append(name).append(\"\\\"\\n\");\r\n        for (Trigger trigger : triggers) {\r\n            rtn.append(trigger).append(\"\\n\");\r\n        }\r\n        return rtn.toString();\r\n    }\r\n\r\n    public void replaceOutputStatement(OutputStatement oldStatement, OutputStatement newStatement) {\r\n        Deque<Statement> toPatch = new ArrayDeque<>();\r\n        toPatch.add(this);\r\n        while (!toPatch.isEmpty()) {\r\n            Statement statement = toPatch.pollFirst();\r\n            List<Statement> children = statement.getStatements();\r\n            for (int i = 0; i < children.size(); i++) {\r\n                Statement child = children.get(i);\r\n                if (child == oldStatement) {\r\n                    children.set(i, newStatement);\r\n                } else {\r\n                    toPatch.add(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public int getConditionIndex(IfStatement statement) {\r\n        Deque<Statement> toVisit = new ArrayDeque<>();\r\n        toVisit.add(this);\r\n        int seen = 0;\r\n        while (!toVisit.isEmpty()) {\r\n            Statement current = toVisit.pollFirst();\r\n            if (current instanceof IfStatement ifStatement) {\r\n                if (ifStatement == statement) {\r\n                    return seen;\r\n                }\r\n                seen++;\r\n            }\r\n            toVisit.addAll(current.getStatements());\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public int getConditionCount() {\r\n        Deque<Statement> toVisit = new ArrayDeque<>();\r\n        toVisit.add(this);\r\n        int seen = 0;\r\n        while (!toVisit.isEmpty()) {\r\n            Statement current = toVisit.pollFirst();\r\n            if (current instanceof IfStatement) {\r\n                seen++;\r\n            }\r\n            toVisit.addAll(current.getStatements());\r\n        }\r\n        return seen;\r\n    }\r\n\r\n    public static class ListErrorListener extends BaseErrorListener {\r\n        private final List<String> errors;\r\n\r\n        public ListErrorListener(List<String> errors) {\r\n            this.errors = errors;\r\n        }\r\n\r\n        @Override\r\n        public void syntaxError(\r\n                Recognizer<?, ?> recognizer,\r\n                Object offendingSymbol,\r\n                int line,\r\n                int charPositionInLine,\r\n                String msg,\r\n                RecognitionException e\r\n        ) {\r\n            errors.add(\"line \" + line + \":\" + charPositionInLine + \" \" + msg);\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\render\\FormItemExtensions.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.render;\r\n\r\nimport net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer;\r\nimport net.neoforged.neoforge.client.extensions.common.IClientItemExtensions;\r\n\r\npublic class FormItemExtensions implements IClientItemExtensions {\r\n    private final BlockEntityWithoutLevelRenderer RENDERER = new FormItemRenderer();\r\n\r\n    @Override\r\n    public BlockEntityWithoutLevelRenderer getCustomRenderer() {\r\n        return RENDERER;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ResourceType.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.resourcetype;\r\n\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetwork;\r\nimport ca.teamdman.sfm.common.program.LabelPositionHolder;\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\nimport ca.teamdman.sfml.ast.LabelAccess;\r\nimport ca.teamdman.sfml.ast.ResourceIdentifier;\r\nimport com.mojang.datafixers.util.Pair;\r\nimport it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.core.Registry;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\n\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.Optional;\r\nimport java.util.stream.Stream;\r\n\r\npublic abstract class ResourceType<STACK, ITEM, CAP> {\r\n    private final Map<ITEM, ResourceLocation> registryKeyCache = new Object2ObjectOpenHashMap<>();\r\n\r\n\r\n    public final Capability<CAP> CAPABILITY_KIND;\r\n\r\n    public ResourceType(Capability<CAP> CAPABILITY_KIND) {\r\n        this.CAPABILITY_KIND = CAPABILITY_KIND;\r\n    }\r\n\r\n\r\n    public abstract long getAmount(STACK stack);\r\n\r\n    public abstract STACK getStackInSlot(CAP cap, int slot);\r\n\r\n    public abstract STACK extract(CAP cap, int slot, long amount, boolean simulate);\r\n\r\n    public abstract int getSlots(CAP handler);\r\n\r\n    public abstract long getMaxStackSize(STACK stack);\r\n\r\n    public abstract long getMaxStackSize(CAP cap, int slot);\r\n\r\n\r\n    public abstract STACK insert(CAP cap, int slot, STACK stack, boolean simulate);\r\n\r\n    public abstract boolean isEmpty(STACK stack);\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    public abstract STACK getEmptyStack();\r\n\r\n    public abstract boolean matchesStackType(Object o);\r\n\r\n    public boolean matchesStack(ResourceIdentifier<STACK, ITEM, CAP> resourceId, Object stack) {\r\n        if (!matchesStackType(stack)) return false;\r\n        @SuppressWarnings(\"unchecked\") STACK stack_ = (STACK) stack;\r\n        if (isEmpty(stack_)) return false;\r\n        var stackId = getRegistryKey(stack_);\r\n        return resourceId.matchesStack(stackId);\r\n    }\r\n\r\n    public abstract boolean matchesCapabilityType(Object o);\r\n\r\n    public Stream<CAP> getCapabilities(\r\n            ProgramContext programContext, LabelAccess labelAccess\r\n    ) {\r\n        // Get labels from disk\r\n        Optional<ItemStack> disk = programContext.getManager().getDisk();\r\n        if (disk.isEmpty()) return Stream.empty();\r\n        LabelPositionHolder labelPositions = LabelPositionHolder.from(disk.get());\r\n\r\n        // Get positions\r\n        Stream<BlockPos> positions = labelAccess.roundRobin().gather(labelAccess, labelPositions);\r\n\r\n        // Expand positions to (pos,direction) pairs\r\n        Stream<Pair<BlockPos, Direction>> position_direction_pairs = positions.flatMap(pos -> labelAccess\r\n                .directions()\r\n                .stream()\r\n                .map(dir -> Pair.of(pos, dir)));\r\n\r\n        // Get capability from the network\r\n        CableNetwork network = programContext.getNetwork();\r\n        Stream<LazyOptional<CAP>> caps = position_direction_pairs\r\n                .map(pair -> {\r\n                    BlockPos pos = pair.getFirst();\r\n                    Direction dir = pair.getSecond();\r\n                    return network.getCapability(CAPABILITY_KIND, pos, dir);\r\n                });\r\n\r\n        // Unwrap\r\n        // We use isPresent check to detect validity\r\n        // We use orElse with null to unwrap\r\n        //noinspection ConstantValue,DataFlowIssue\r\n        return caps\r\n                .filter(LazyOptional::isPresent)\r\n                .map(x -> x.orElse(null))\r\n                .filter(Objects::nonNull);\r\n    }\r\n\r\n    public Stream<STACK> collect(CAP cap, LabelAccess labelAccess) {\r\n        var rtn = Stream.<STACK>builder();\r\n        for (int slot = 0; slot < getSlots(cap); slot++) {\r\n            if (!labelAccess.slots().contains(slot)) continue;\r\n            var stack = getStackInSlot(cap, slot);\r\n            if (!isEmpty(stack)) {\r\n                rtn.add(stack);\r\n            }\r\n        }\r\n        return rtn.build();\r\n    }\r\n\r\n    public boolean registryKeyExists(ResourceLocation location) {\r\n        return getRegistry().containsKey(location);\r\n    }\r\n\r\n    public ResourceLocation getRegistryKey(STACK stack) {\r\n        ITEM item = getItem(stack);\r\n        var found = registryKeyCache.get(item);\r\n        if (found != null) return found;\r\n        found = getRegistry().getKey(item);\r\n        assert found != null;\r\n        registryKeyCache.put(item, found);\r\n        return found;\r\n    }\r\n\r\n    public abstract Registry<ITEM> getRegistry();\r\n\r\n    public abstract ITEM getItem(STACK stack);\r\n\r\n    public abstract STACK copy(STACK stack);\r\n\r\n    protected abstract STACK setCount(STACK stack, long amount);\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    public STACK withCount(STACK stack, long count) {\r\n        return setCount(copy(stack), count);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\program\\LabelPositionHolder.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.program;\r\n\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.nbt.*;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.item.ItemStack;\r\n\r\nimport java.util.*;\r\nimport java.util.function.BiConsumer;\r\nimport java.util.function.BiPredicate;\r\nimport java.util.function.Predicate;\r\nimport java.util.stream.Collectors;\r\n\r\n@SuppressWarnings(\"UnusedReturnValue\")\r\npublic class LabelPositionHolder {\r\n    private final Map<String, Set<BlockPos>> LABELS = new HashMap<>();\r\n\r\n    private LabelPositionHolder() {\r\n\r\n    }\r\n\r\n    public static LabelPositionHolder empty() {\r\n        return new LabelPositionHolder();\r\n    }\r\n\r\n    public static LabelPositionHolder from(ItemStack stack) {\r\n        var labels = LabelPositionHolder.empty();\r\n        var tag = stack.getOrCreateTag().getCompound(\"sfm:labels\");\r\n        for (var label : tag.getAllKeys()) {\r\n            // old: storing BlockPos as long\r\n            labels.addAll(label, tag.getList(label, Tag.TAG_LONG).stream()\r\n                    .map(LongTag.class::cast)\r\n                    .mapToLong(LongTag::getAsLong)\r\n                    .mapToObj(BlockPos::of).collect(Collectors.toList()));\r\n\r\n            // new: storing BlockPos as compound\r\n            labels.addAll(label, tag.getList(label, Tag.TAG_COMPOUND).stream()\r\n                    .map(CompoundTag.class::cast)\r\n                    .map(NbtUtils::readBlockPos)\r\n                    .collect(Collectors.toList()));\r\n        }\r\n        return labels;\r\n    }\r\n\r\n    public CompoundTag serialize() {\r\n        var tag = new CompoundTag();\r\n        for (var label : get().keySet()) {\r\n            var list = new ListTag();\r\n            list.addAll(LABELS.get(label)\r\n                                .stream()\r\n                                .map(NbtUtils::writeBlockPos)\r\n                                .toList());\r\n            tag.put(label, list);\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    public boolean contains(String label, BlockPos pos) {\r\n        return LABELS.getOrDefault(label, Collections.emptySet()).contains(pos);\r\n    }\r\n\r\n    public LabelPositionHolder toggle(String label, BlockPos pos) {\r\n        if (contains(label, pos)) {\r\n            remove(label, pos);\r\n        } else {\r\n            add(label, pos);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public Map<String, Set<BlockPos>> get() {\r\n        return LABELS;\r\n    }\r\n\r\n    public Set<BlockPos> getPositions(String label) {\r\n        return LABELS.computeIfAbsent(label, s -> new HashSet<>());\r\n    }\r\n\r\n    public LabelPositionHolder addAll(String label, Collection<BlockPos> positions) {\r\n        getPositions(label).addAll(positions);\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder addReferencedLabel(String label) {\r\n        getPositions(label);\r\n        return this;\r\n    }\r\n\r\n    public List<Component> asHoverText() {\r\n        var rtn = new ArrayList<Component>();\r\n        if (LABELS.isEmpty()) return rtn;\r\n        rtn.add(Constants.LocalizationKeys.DISK_ITEM_TOOLTIP_LABEL_HEADER\r\n                        .getComponent()\r\n                        .withStyle(ChatFormatting.UNDERLINE));\r\n        for (var entry : LABELS.entrySet()) {\r\n            rtn.add(Constants.LocalizationKeys.DISK_ITEM_TOOLTIP_LABEL.getComponent(\r\n                    entry.getKey(),\r\n                    entry.getValue().size()\r\n            ).withStyle(ChatFormatting.GRAY));\r\n        }\r\n        return rtn;\r\n    }\r\n\r\n    public LabelPositionHolder remove(BlockPos value) {\r\n        LABELS.values().forEach(list -> list.remove(value));\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder prune() {\r\n        LABELS.entrySet().removeIf(entry -> entry.getValue().isEmpty());\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder clear() {\r\n        LABELS.clear();\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder add(String label, BlockPos position) {\r\n        getPositions(label).add(position);\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder remove(String label, BlockPos pos) {\r\n        getPositions(label).remove(pos);\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder save(ItemStack stack) {\r\n        stack.getOrCreateTag().put(\"sfm:labels\", serialize());\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder removeIf(BiPredicate<String, BlockPos> predicate) {\r\n        LABELS.forEach((key, value) -> value.removeIf(pos -> predicate.test(key, pos)));\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder removeIf(Predicate<String> predicate) {\r\n        LABELS.keySet().removeIf(predicate);\r\n        return this;\r\n    }\r\n\r\n    public LabelPositionHolder forEach(BiConsumer<String, BlockPos> consumer) {\r\n        LABELS.forEach((key, value) -> value.forEach(pos -> consumer.accept(key, pos)));\r\n        return this;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\ManagerBlockEntity.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.blockentity;\r\n\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.item.DiskItem;\r\nimport ca.teamdman.sfm.common.net.ClientboundManagerGuiPacket;\r\nimport ca.teamdman.sfm.common.registry.SFMBlockEntities;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfm.common.util.OpenContainerTracker;\r\nimport ca.teamdman.sfm.common.util.SFMContainerUtil;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.NonNullList;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.world.ContainerHelper;\r\nimport net.minecraft.world.entity.player.Inventory;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.inventory.AbstractContainerMenu;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.entity.BaseContainerBlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.neoforged.neoforge.network.PacketDistributor;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.Collections;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\npublic class ManagerBlockEntity extends BaseContainerBlockEntity {\r\n    public static final int TICK_TIME_HISTORY_SIZE = 20;\r\n    private final NonNullList<ItemStack> ITEMS = NonNullList.withSize(1, ItemStack.EMPTY);\r\n    private final long[] tickTimeNanos = new long[TICK_TIME_HISTORY_SIZE];\r\n    private @Nullable Program program = null;\r\n    private int tick = 0;\r\n    private int unprocessedRedstonePulses = 0; // used by redstone trigger\r\n    private boolean shouldRebuildProgram = false;\r\n    private int tickIndex = 0;\r\n\r\n    public ManagerBlockEntity(BlockPos blockPos, BlockState blockState) {\r\n        super(SFMBlockEntities.MANAGER_BLOCK_ENTITY.get(), blockPos, blockState);\r\n    }\r\n\r\n    public static void serverTick(\r\n            @SuppressWarnings(\"unused\") Level level,\r\n            @SuppressWarnings(\"unused\") BlockPos pos,\r\n            @SuppressWarnings(\"unused\") BlockState state,\r\n            ManagerBlockEntity tile\r\n    ) {\r\n        long start = System.nanoTime();\r\n        tile.tick++;\r\n        if (tile.shouldRebuildProgram) {\r\n            tile.rebuildProgramAndUpdateDisk();\r\n            tile.shouldRebuildProgram = false;\r\n        }\r\n        if (tile.program != null) {\r\n            boolean didSomething = tile.program.tick(tile);\r\n            if (didSomething) {\r\n                long nanoTimePassed = Long.min(System.nanoTime() - start, Integer.MAX_VALUE);\r\n                tile.tickTimeNanos[tile.tickIndex] = (int) nanoTimePassed;\r\n                tile.tickIndex = (tile.tickIndex + 1) % tile.tickTimeNanos.length;\r\n                tile.sendUpdatePacket();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void sendUpdatePacket() {\r\n        OpenContainerTracker.getPlayersWithOpenContainer(ManagerContainerMenu.class)\r\n                .filter(entry -> entry.getValue().MANAGER_POSITION.equals(getBlockPos()))\r\n                .forEach(entry -> SFMPackets.MANAGER_CHANNEL.send(\r\n                        PacketDistributor.PLAYER.with(entry::getKey),\r\n                        new ClientboundManagerGuiPacket(\r\n                                entry.getValue().containerId,\r\n                                getProgramString().orElse(\"\"),\r\n                                getState(),\r\n                                getTickTimeNanos()\r\n                        )\r\n                ));\r\n    }\r\n\r\n    public int getTick() {\r\n        return tick;\r\n    }\r\n\r\n    public Optional<Program> getProgram() {\r\n        return Optional.ofNullable(program);\r\n    }\r\n\r\n    public void setProgram(String program) {\r\n        getDisk().ifPresent(disk -> {\r\n            DiskItem.setProgram(disk, program);\r\n            rebuildProgramAndUpdateDisk();\r\n            setChanged();\r\n        });\r\n    }\r\n\r\n    public void trackRedstonePulseUnprocessed() {\r\n        unprocessedRedstonePulses++;\r\n    }\r\n\r\n    public void clearRedstonePulseQueue() {\r\n        unprocessedRedstonePulses = 0;\r\n    }\r\n\r\n    public int getUnprocessedRedstonePulseCount() {\r\n        return unprocessedRedstonePulses;\r\n    }\r\n\r\n    public State getState() {\r\n        if (getDisk().isEmpty()) return State.NO_DISK;\r\n        if (getProgramString().isEmpty()) return State.NO_PROGRAM;\r\n        if (program == null) return State.INVALID_PROGRAM;\r\n        return State.RUNNING;\r\n    }\r\n\r\n    public Optional<String> getProgramString() {\r\n        return getDisk().map(DiskItem::getProgram).filter(prog -> !prog.isBlank());\r\n    }\r\n\r\n    public Set<String> getReferencedLabels() {\r\n        if (program == null) return Collections.emptySet();\r\n        return program.referencedLabels();\r\n    }\r\n\r\n    public Optional<ItemStack> getDisk() {\r\n        var item = getItem(0);\r\n        if (item.getItem() instanceof DiskItem) return Optional.of(item);\r\n        return Optional.empty();\r\n    }\r\n\r\n    public void rebuildProgramAndUpdateDisk() {\r\n        if (level != null && level.isClientSide()) return;\r\n        this.program = getDisk()\r\n                .flatMap(itemStack -> DiskItem.updateDetails(itemStack, this))\r\n                .orElse(null);\r\n        sendUpdatePacket();\r\n    }\r\n\r\n    @Override\r\n    protected Component getDefaultName() {\r\n        return Constants.LocalizationKeys.MANAGER_CONTAINER.getComponent();\r\n    }\r\n\r\n    @Override\r\n    protected AbstractContainerMenu createMenu(int windowId, Inventory inv) {\r\n        return new ManagerContainerMenu(windowId, inv, this);\r\n    }\r\n\r\n    @Override\r\n    public int getContainerSize() {\r\n        return ITEMS.size();\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty() {\r\n        return ITEMS.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public ItemStack getItem(int slot) {\r\n        if (slot < 0 || slot >= ITEMS.size()) return ItemStack.EMPTY;\r\n        return ITEMS.get(slot);\r\n    }\r\n\r\n    @Override\r\n    public ItemStack removeItem(int slot, int amount) {\r\n        var result = ContainerHelper.removeItem(ITEMS, slot, amount);\r\n        if (slot == 0) rebuildProgramAndUpdateDisk();\r\n        setChanged();\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public ItemStack removeItemNoUpdate(int slot) {\r\n        var result = ContainerHelper.takeItem(ITEMS, slot);\r\n        if (slot == 0) rebuildProgramAndUpdateDisk();\r\n        setChanged();\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void setItem(int slot, ItemStack stack) {\r\n        if (slot < 0 || slot >= ITEMS.size()) return;\r\n        ITEMS.set(slot, stack);\r\n        if (slot == 0) rebuildProgramAndUpdateDisk();\r\n        setChanged();\r\n    }\r\n\r\n    @Override\r\n    public int getMaxStackSize() {\r\n        return 1;\r\n    }\r\n\r\n    @Override\r\n    public boolean canPlaceItem(int slot, ItemStack stack) {\r\n        return stack.getItem() instanceof DiskItem;\r\n    }\r\n\r\n    @Override\r\n    public boolean stillValid(Player player) {\r\n        return SFMContainerUtil.stillValid(this, player);\r\n    }\r\n\r\n    @Override\r\n    public void load(CompoundTag tag) {\r\n        super.load(tag);\r\n        ContainerHelper.loadAllItems(tag, ITEMS);\r\n        this.shouldRebuildProgram = true;\r\n    }\r\n\r\n    @Override\r\n    protected void saveAdditional(CompoundTag tag) {\r\n        super.saveAdditional(tag);\r\n        ContainerHelper.saveAllItems(tag, ITEMS);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void clearContent() {\r\n        ITEMS.clear();\r\n    }\r\n\r\n    public void reset() {\r\n        getDisk().ifPresent(disk -> {\r\n            disk.setTag(null);\r\n            setItem(0, disk);\r\n            setChanged();\r\n        });\r\n    }\r\n\r\n    public long[] getTickTimeNanos() {\r\n        // tickTimeNanos is used as a cyclical buffer, transform it to have the first index be the most recent tick\r\n        long[] result = new long[tickTimeNanos.length];\r\n        System.arraycopy(tickTimeNanos, tickIndex, result, 0, tickTimeNanos.length - tickIndex);\r\n        System.arraycopy(tickTimeNanos, 0, result, tickTimeNanos.length - tickIndex, tickIndex);\r\n        return result;\r\n    }\r\n\r\n    public enum State {\r\n        NO_PROGRAM(\r\n                ChatFormatting.RED,\r\n                Constants.LocalizationKeys.MANAGER_GUI_STATE_NO_PROGRAM\r\n        ), NO_DISK(\r\n                ChatFormatting.RED,\r\n                Constants.LocalizationKeys.MANAGER_GUI_STATE_NO_DISK\r\n        ), RUNNING(ChatFormatting.GREEN, Constants.LocalizationKeys.MANAGER_GUI_STATE_RUNNING), INVALID_PROGRAM(\r\n                ChatFormatting.DARK_RED,\r\n                Constants.LocalizationKeys.MANAGER_GUI_STATE_INVALID_PROGRAM\r\n        );\r\n\r\n        public final ChatFormatting COLOR;\r\n        public final Constants.LocalizationKeys.LocalizationEntry LOC;\r\n\r\n        State(ChatFormatting color, Constants.LocalizationKeys.LocalizationEntry loc) {\r\n            COLOR = color;\r\n            LOC = loc;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundOutputInspectionRequestPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.program.LimitedInputSlot;\r\nimport ca.teamdman.sfm.common.program.ProgramContext;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfm.common.registry.SFMResourceTypes;\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport ca.teamdman.sfml.ast.Number;\r\nimport ca.teamdman.sfml.ast.*;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.resources.ResourceKey;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\nimport net.neoforged.neoforge.network.PacketDistributor;\r\nimport org.antlr.v4.runtime.misc.Pair;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.ListIterator;\r\nimport java.util.Optional;\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundOutputInspectionRequestPacket(\r\n        String programString,\r\n        int outputNodeIndex\r\n) {\r\n    public static void encode(ServerboundOutputInspectionRequestPacket msg, FriendlyByteBuf friendlyByteBuf) {\r\n        friendlyByteBuf.writeUtf(msg.programString, Program.MAX_PROGRAM_LENGTH);\r\n        friendlyByteBuf.writeInt(msg.outputNodeIndex());\r\n    }\r\n\r\n    public static ServerboundOutputInspectionRequestPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ServerboundOutputInspectionRequestPacket(\r\n                friendlyByteBuf.readUtf(Program.MAX_PROGRAM_LENGTH),\r\n                friendlyByteBuf.readInt()\r\n        );\r\n    }\r\n\r\n    private static <STACK, ITEM, CAP> ResourceLimit<STACK, ITEM, CAP> getSlotResource(\r\n            LimitedInputSlot<STACK, ITEM, CAP> limitedInputSlot\r\n    ) {\r\n        ResourceType<STACK, ITEM, CAP> resourceType = limitedInputSlot.type;\r\n        //noinspection OptionalGetWithoutIsPresent\r\n        ResourceKey<ResourceType<STACK, ITEM, CAP>> resourceTypeResourceKey = SFMResourceTypes.DEFERRED_TYPES\r\n                .getResourceKey(limitedInputSlot.type)\r\n                .map(x -> {\r\n                    //noinspection unchecked,rawtypes\r\n                    return (ResourceKey<ResourceType<STACK, ITEM, CAP>>) (ResourceKey) x;\r\n                })\r\n                .get();\r\n        STACK stack = limitedInputSlot.peekExtractPotential();\r\n        long amount = limitedInputSlot.type.getAmount(stack);\r\n        amount = Long.min(amount, limitedInputSlot.tracker.getResourceLimit().limit().quantity().number().value());\r\n        long remainingObligation = limitedInputSlot.tracker.getRemainingRetentionObligation();\r\n        amount -= Long.min(amount, remainingObligation);\r\n        Limit amountLimit = new Limit(\r\n                new ResourceQuantity(new Number(amount), ResourceQuantity.IdExpansionBehaviour.NO_EXPAND),\r\n                ResourceQuantity.MAX_QUANTITY\r\n        );\r\n        ResourceLocation stackId = resourceType.getRegistryKey(stack);\r\n        ResourceIdentifier<STACK, ITEM, CAP> resourceIdentifier = new ResourceIdentifier<>(\r\n                resourceTypeResourceKey.location().getNamespace(),\r\n                resourceTypeResourceKey.location().getPath(),\r\n                stackId.getNamespace(),\r\n                stackId.getPath()\r\n        );\r\n        return new ResourceLimit<>(\r\n                resourceIdentifier,\r\n                amountLimit\r\n        );\r\n    }\r\n\r\n\r\n    public static void handle(\r\n            ServerboundOutputInspectionRequestPacket msg,\r\n            NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> {\r\n            // we don't know if the player has the program edit screen open from a manager or a disk in hand\r\n            ServerPlayer player = context.getSender();\r\n            if (player == null) return;\r\n            ManagerBlockEntity manager;\r\n            if (player.containerMenu instanceof ManagerContainerMenu mcm) {\r\n                if (player.level().getBlockEntity(mcm.MANAGER_POSITION) instanceof ManagerBlockEntity mbe) {\r\n                    manager = mbe;\r\n                } else {\r\n                    return;\r\n                }\r\n            } else {\r\n                //todo: localize\r\n                SFMPackets.INSPECTION_CHANNEL.send(\r\n                        PacketDistributor.PLAYER.with(() -> player),\r\n                        new ClientboundInputInspectionResultsPacket(\r\n                                \"This inspection is only available when editing inside a manager.\")\r\n                );\r\n                return;\r\n            }\r\n            Program.compile(\r\n                    msg.programString,\r\n                    (successProgram, builder) -> builder\r\n                            .getNodeAtIndex(msg.outputNodeIndex)\r\n                            .filter(OutputStatement.class::isInstance)\r\n                            .map(OutputStatement.class::cast)\r\n                            .ifPresent(outputStatement -> {\r\n                                StringBuilder payload = new StringBuilder();\r\n                                payload.append(outputStatement.toStringPretty()).append(\"\\n\");\r\n                                payload.append(\"-- predictions may differ from actual execution results\\n\");\r\n\r\n                                successProgram.replaceOutputStatement(outputStatement, new OutputStatement(\r\n                                        outputStatement.labelAccess(),\r\n                                        outputStatement.resourceLimits(),\r\n                                        outputStatement.each()\r\n                                ) {\r\n                                    @Override\r\n                                    public void tick(ProgramContext context) {\r\n                                        StringBuilder branchPayload = new StringBuilder();\r\n\r\n                                        if (!context.getExecutionPath().isEmpty()) {\r\n                                            payload\r\n                                                    .append(\"-- POSSIBILITY \")\r\n                                                    .append(context.getExplorationBranchIndex())\r\n                                                    .append(\" --\\n\");\r\n                                            context.getExecutionPath().forEach(branch -> {\r\n                                                if (branch.wasTrue()) {\r\n                                                    payload\r\n                                                            .append(branch.ifStatement().condition().sourceCode())\r\n                                                            .append(\" -- true\");\r\n                                                } else {\r\n                                                    payload.append(branch\r\n                                                                           .ifStatement()\r\n                                                                           .condition()\r\n                                                                           .negate()\r\n                                                                           .sourceCode());\r\n                                                }\r\n                                                payload.append(\"\\n\");\r\n                                            });\r\n                                            payload.append(\"\\n\");\r\n                                        }\r\n\r\n                                        branchPayload.append(\"-- predicted inputs:\\n\");\r\n                                        List<Pair<LimitedInputSlot<?, ?, ?>, LabelAccess>> inputSlots = new ArrayList<>();\r\n                                        context\r\n                                                .getInputs()\r\n                                                .forEach(inputStatement -> inputStatement.gatherSlots(\r\n                                                        context,\r\n                                                        slot -> inputSlots.add(new Pair<>(\r\n                                                                slot,\r\n                                                                inputStatement.labelAccess()\r\n                                                        ))\r\n                                                ));\r\n                                        List<InputStatement> inputStatements = inputSlots.stream()\r\n                                                .map(slot -> SFMUtils.getInputStatementForSlot(slot.a, slot.b))\r\n                                                .filter(Optional::isPresent)\r\n                                                .map(Optional::get)\r\n                                                .toList();\r\n                                        if (inputStatements.isEmpty()) {\r\n                                            branchPayload.append(\"none\\n-- predicted outputs:\\nnone\");\r\n                                        } else {\r\n                                            inputStatements.stream()\r\n                                                    .map(InputStatement::toStringPretty)\r\n                                                    .map(x -> x + \"\\n\")\r\n                                                    .forEach(branchPayload::append);\r\n\r\n                                            branchPayload.append(\r\n                                                    \"-- predicted outputs:\\n\");\r\n                                            ResourceLimits condensedResourceLimits;\r\n                                            {\r\n                                                ResourceLimits resourceLimits = new ResourceLimits(\r\n                                                        inputSlots\r\n                                                                .stream()\r\n                                                                .map(slot -> slot.a)\r\n                                                                .map(ServerboundOutputInspectionRequestPacket::getSlotResource)\r\n                                                                .toList(),\r\n                                                        ResourceIdSet.EMPTY\r\n                                                );\r\n                                                List<ResourceLimit<?, ?, ?>> condensedResourceLimitList = new ArrayList<>();\r\n                                                for (ResourceLimit<?, ?, ?> resourceLimit : resourceLimits.resourceLimits()) {\r\n                                                    // check if an existing resource limit has the same resource identifier\r\n                                                    condensedResourceLimitList\r\n                                                            .stream()\r\n                                                            .filter(x -> x\r\n                                                                    .resourceId()\r\n                                                                    .equals(resourceLimit.resourceId()))\r\n                                                            .findFirst()\r\n                                                            .ifPresentOrElse(found -> {\r\n                                                                int i = condensedResourceLimitList.indexOf(found);\r\n                                                                ResourceLimit<?, ?, ?> newLimit = found.withLimit(new Limit(\r\n                                                                        found\r\n                                                                                .limit()\r\n                                                                                .quantity()\r\n                                                                                .add(resourceLimit.limit().quantity()),\r\n                                                                        ResourceQuantity.MAX_QUANTITY\r\n                                                                ));\r\n                                                                condensedResourceLimitList.set(i, newLimit);\r\n                                                            }, () -> condensedResourceLimitList.add(resourceLimit));\r\n                                                }\r\n                                                {\r\n                                                    // prune items not covered by the output resource limits\r\n                                                    ListIterator<ResourceLimit<?, ?, ?>> iter = condensedResourceLimitList.listIterator();\r\n                                                    while (iter.hasNext()) {\r\n                                                        ResourceLimit<?, ?, ?> resourceLimit = iter.next();\r\n                                                        // because these resource limits were generated from resource stacks\r\n                                                        // they should always be valid resource locations (not patterns)\r\n                                                        ResourceLocation resourceLimitLocation = new ResourceLocation(\r\n                                                                resourceLimit.resourceId().resourceNamespace,\r\n                                                                resourceLimit.resourceId().resourceName\r\n                                                        );\r\n                                                        long accept = outputStatement\r\n                                                                .resourceLimits()\r\n                                                                .resourceLimits()\r\n                                                                .stream()\r\n                                                                .filter(outputResourceLimit -> outputResourceLimit\r\n                                                                                                       .resourceId()\r\n                                                                                                       .matchesStack(\r\n                                                                                                               resourceLimitLocation)\r\n                                                                                               && outputStatement\r\n                                                                                                       .resourceLimits()\r\n                                                                                                       .exclusions()\r\n                                                                                                       .resourceIds()\r\n                                                                                                       .stream()\r\n                                                                                                       .noneMatch(\r\n                                                                                                               exclusion -> exclusion.matchesStack(\r\n                                                                                                                       resourceLimitLocation)))\r\n                                                                .mapToLong(rl -> rl.limit().quantity().number().value())\r\n                                                                .max()\r\n                                                                .orElse(0);\r\n                                                        if (accept == 0) {\r\n                                                            iter.remove();\r\n                                                        } else {\r\n                                                            iter.set(resourceLimit.withLimit(new Limit(\r\n                                                                    new ResourceQuantity(new Number(Long.min(\r\n                                                                            accept,\r\n                                                                            resourceLimit\r\n                                                                                    .limit()\r\n                                                                                    .quantity()\r\n                                                                                    .number()\r\n                                                                                    .value()\r\n                                                                    )), resourceLimit.limit().quantity()\r\n                                                                                                 .idExpansionBehaviour()),\r\n                                                                    ResourceQuantity.MAX_QUANTITY\r\n                                                            )));\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                condensedResourceLimits = new ResourceLimits(\r\n                                                        condensedResourceLimitList,\r\n                                                        ResourceIdSet.EMPTY\r\n                                                );\r\n                                            }\r\n                                            if (condensedResourceLimits.resourceLimits().isEmpty()) {\r\n                                                branchPayload.append(\"none\\n\");\r\n                                            } else {\r\n                                                branchPayload\r\n                                                        .append(new OutputStatement(\r\n                                                                outputStatement.labelAccess(),\r\n                                                                condensedResourceLimits,\r\n                                                                outputStatement.each()\r\n                                                        ).toStringPretty());\r\n                                            }\r\n\r\n                                        }\r\n                                        branchPayload.append(\"\\n\");\r\n                                        if (successProgram.getConditionCount() == 0) {\r\n                                            payload.append(branchPayload);\r\n                                        } else {\r\n                                            payload.append(branchPayload.toString().indent(4));\r\n                                        }\r\n                                    }\r\n                                });\r\n\r\n                                // run the program down each possible if-branch combination\r\n                                for (\r\n                                        int branchIndex = 0;\r\n                                        branchIndex < Math.pow(2, successProgram.getConditionCount());\r\n                                        branchIndex++\r\n                                ) {\r\n                                    successProgram.tick(new ProgramContext(\r\n                                            successProgram,\r\n                                            manager,\r\n                                            ProgramContext.ExecutionPolicy.EXPLORE_BRANCHES,\r\n                                            branchIndex\r\n                                    ));\r\n                                }\r\n\r\n\r\n                                SFMPackets.INSPECTION_CHANNEL.send(\r\n                                        PacketDistributor.PLAYER.with(() -> player),\r\n                                        new ClientboundOutputInspectionResultsPacket(payload.toString().strip())\r\n                                );\r\n                            }),\r\n                    failure -> {\r\n                        //todo: translate\r\n                        SFMPackets.INSPECTION_CHANNEL.send(\r\n                                PacketDistributor.PLAYER.with(() -> player),\r\n                                new ClientboundOutputInspectionResultsPacket(\"failed to compile program\")\r\n                        );\r\n                    }\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ASTBuilder.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\nimport ca.teamdman.sfml.SFMLBaseVisitor;\r\nimport ca.teamdman.sfml.SFMLParser;\r\nimport org.antlr.v4.runtime.ParserRuleContext;\r\nimport org.antlr.v4.runtime.misc.Pair;\r\nimport org.antlr.v4.runtime.tree.ParseTree;\r\n\r\nimport javax.annotation.Nullable;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ASTBuilder extends SFMLBaseVisitor<ASTNode> {\r\n    private final Set<Label> USED_LABELS = new HashSet<>();\r\n    private final Set<ResourceIdentifier<?, ?, ?>> USED_RESOURCES = new HashSet<>();\r\n    private final List<Pair<ASTNode, ParserRuleContext>> AST_NODE_CONTEXTS = new LinkedList<>();\r\n\r\n    public List<Pair<ASTNode, ParserRuleContext>> getNodesUnderCursor(int cursorPos) {\r\n        return AST_NODE_CONTEXTS\r\n                .stream()\r\n                .filter(pair -> pair.b != null)\r\n                .filter(pair -> pair.b.start.getStartIndex() <= cursorPos && pair.b.stop.getStopIndex() >= cursorPos)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public Optional<ASTNode> getNodeAtIndex(int index) {\r\n        if (index < 0 || index >= AST_NODE_CONTEXTS.size()) return Optional.empty();\r\n        return Optional.ofNullable(AST_NODE_CONTEXTS.get(index).a);\r\n    }\r\n\r\n    public int getIndexForNode(ASTNode node) {\r\n        return AST_NODE_CONTEXTS\r\n                .stream()\r\n                .filter(pair -> pair.a == node)\r\n                .map(AST_NODE_CONTEXTS::indexOf)\r\n                .findFirst()\r\n                .orElse(-1);\r\n    }\r\n\r\n    @Override\r\n    public StringHolder visitName(@Nullable SFMLParser.NameContext ctx) {\r\n        if (ctx == null) return new StringHolder(\"\");\r\n        StringHolder name = visitString(ctx.string());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(name, ctx));\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    public ASTNode visitResource(SFMLParser.ResourceContext ctx) {\r\n        var str = ctx\r\n                .children\r\n                .stream()\r\n                .map(ParseTree::getText)\r\n                .collect(Collectors.joining())\r\n                .replaceAll(\"::\", \":*:\")\r\n                .replaceAll(\":$\", \":*\")\r\n                .replaceAll(\"\\\\*\", \".*\");\r\n        var rtn = ResourceIdentifier.fromString(str);\r\n        USED_RESOURCES.add(rtn);\r\n        rtn.assertValid();\r\n        AST_NODE_CONTEXTS.add(new Pair<>(rtn, ctx));\r\n        return rtn;\r\n    }\r\n\r\n    @Override\r\n    public ResourceIdentifier<?, ?, ?> visitStringResource(SFMLParser.StringResourceContext ctx) {\r\n        var rtn = ResourceIdentifier.fromString(visitString(ctx.string()).value());\r\n        USED_RESOURCES.add(rtn);\r\n        rtn.assertValid();\r\n        AST_NODE_CONTEXTS.add(new Pair<>(rtn, ctx));\r\n        return rtn;\r\n    }\r\n\r\n    @Override\r\n    public StringHolder visitString(SFMLParser.StringContext ctx) {\r\n        var content = ctx.getText();\r\n        StringHolder str = new StringHolder(content.substring(1, content.length() - 1));\r\n        AST_NODE_CONTEXTS.add(new Pair<>(str, ctx));\r\n        return str;\r\n    }\r\n\r\n    @Override\r\n    public Label visitRawLabel(SFMLParser.RawLabelContext ctx) {\r\n        var label = new Label(ctx.getText());\r\n        if (label.name().length() > Program.MAX_LABEL_LENGTH) {\r\n            throw new IllegalArgumentException(\"Label name cannot be longer than \"\r\n                                               + Program.MAX_LABEL_LENGTH\r\n                                               + \" characters.\");\r\n        }\r\n        USED_LABELS.add(label);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(label, ctx));\r\n        return label;\r\n    }\r\n\r\n    @Override\r\n    public Label visitStringLabel(SFMLParser.StringLabelContext ctx) {\r\n        var label = new Label(visitString(ctx.string()).value());\r\n        if (label.name().length() > Program.MAX_LABEL_LENGTH) {\r\n            throw new IllegalArgumentException(\"Label name cannot be longer than \"\r\n                                               + Program.MAX_LABEL_LENGTH\r\n                                               + \" characters.\");\r\n        }\r\n        USED_LABELS.add(label);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(label, ctx));\r\n        return label;\r\n    }\r\n\r\n    @Override\r\n    public Program visitProgram(SFMLParser.ProgramContext ctx) {\r\n        var name = visitName(ctx.name());\r\n        var triggers = ctx\r\n                .trigger()\r\n                .stream()\r\n                .map(this::visit)\r\n                .map(Trigger.class::cast)\r\n                .collect(Collectors.toList());\r\n        var labels = USED_LABELS\r\n                .stream()\r\n                .map(Label::name)\r\n                .collect(Collectors.toSet());\r\n        Program program = new Program(name.value(), triggers, labels, USED_RESOURCES);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(program, ctx));\r\n        return program;\r\n    }\r\n\r\n    @Override\r\n    public ASTNode visitTimerTrigger(SFMLParser.TimerTriggerContext ctx) {\r\n        var time = (Interval) visit(ctx.interval());\r\n        if (time.getSeconds() < 1) throw new IllegalArgumentException(\"Minimum trigger interval is 1 second.\");\r\n        var block = visitBlock(ctx.block());\r\n        TimerTrigger timerTrigger = new TimerTrigger(time, block);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(timerTrigger, ctx));\r\n        return timerTrigger;\r\n    }\r\n\r\n    @Override\r\n    public ASTNode visitBooleanRedstone(SFMLParser.BooleanRedstoneContext ctx) {\r\n        ComparisonOperator comp = ComparisonOperator.GREATER_OR_EQUAL;\r\n        Number num = new Number(0);\r\n        if (ctx.comparisonOp() != null && ctx.number() != null) {\r\n            comp = visitComparisonOp(ctx.comparisonOp());\r\n            num = visitNumber(ctx.number());\r\n        }\r\n\r\n        ComparisonOperator finalComp = comp;\r\n        assert num.value() <= Integer.MAX_VALUE;\r\n        int finalNum = (int) num.value();\r\n        //noinspection DataFlowIssue // if the program is ticking, level shouldn't be null\r\n        BoolExpr boolExpr = new BoolExpr(\r\n                programContext -> finalComp.test(\r\n                        (long) programContext\r\n                                .getManager()\r\n                                .getLevel()\r\n                                .getBestNeighborSignal(programContext\r\n                                                               .getManager()\r\n                                                               .getBlockPos()),\r\n                        (long) finalNum\r\n                ),\r\n                ctx.getText()\r\n        );\r\n        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));\r\n        return boolExpr;\r\n    }\r\n\r\n    @Override\r\n    public ASTNode visitPulseTrigger(SFMLParser.PulseTriggerContext ctx) {\r\n        var block = visitBlock(ctx.block());\r\n        RedstoneTrigger redstoneTrigger = new RedstoneTrigger(block);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(redstoneTrigger, ctx));\r\n        return redstoneTrigger;\r\n    }\r\n\r\n    @Override\r\n    public Number visitNumber(SFMLParser.NumberContext ctx) {\r\n        Number number = new Number(Long.parseLong(ctx.getText()));\r\n        AST_NODE_CONTEXTS.add(new Pair<>(number, ctx));\r\n        return number;\r\n    }\r\n\r\n    @Override\r\n    public Interval visitTicks(SFMLParser.TicksContext ctx) {\r\n        var num = visitNumber(ctx.number());\r\n        assert num.value() <= Integer.MAX_VALUE;\r\n        Interval interval = Interval.fromTicks((int) num.value());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(interval, ctx));\r\n        return interval;\r\n    }\r\n\r\n    @Override\r\n    public Interval visitSeconds(SFMLParser.SecondsContext ctx) {\r\n        var num = visitNumber(ctx.number());\r\n        assert num.value() <= Integer.MAX_VALUE;\r\n        Interval interval = Interval.fromSeconds((int) num.value());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(interval, ctx));\r\n        return interval;\r\n    }\r\n\r\n    @Override\r\n    public InputStatement visitInputStatementStatement(SFMLParser.InputStatementStatementContext ctx) {\r\n        InputStatement input = (InputStatement) visit(ctx.inputstatement());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(input, ctx));\r\n        return input;\r\n    }\r\n\r\n    @Override\r\n    public OutputStatement visitOutputStatementStatement(SFMLParser.OutputStatementStatementContext ctx) {\r\n        OutputStatement output = (OutputStatement) visit(ctx.outputstatement());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(output, ctx));\r\n        return output;\r\n    }\r\n\r\n    @Override\r\n    public InputStatement visitInputstatement(SFMLParser.InputstatementContext ctx) {\r\n        var labelAccess = visitLabelaccess(ctx.labelaccess());\r\n        var matchers = visitInputmatchers(ctx.inputmatchers());\r\n        var exclusions = visitResourceexclusion(ctx.resourceexclusion());\r\n        var each = ctx.EACH() != null;\r\n        InputStatement inputStatement = new InputStatement(labelAccess, matchers.withExclusions(exclusions), each);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(inputStatement, ctx));\r\n        return inputStatement;\r\n    }\r\n\r\n    @Override\r\n    public OutputStatement visitOutputstatement(SFMLParser.OutputstatementContext ctx) {\r\n        var labelAccess = visitLabelaccess(ctx.labelaccess());\r\n        var matchers = visitOutputmatchers(ctx.outputmatchers());\r\n        var exclusions = visitResourceexclusion(ctx.resourceexclusion());\r\n        var each = ctx.EACH() != null;\r\n        OutputStatement outputStatement = new OutputStatement(labelAccess, matchers.withExclusions(exclusions), each);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(outputStatement, ctx));\r\n        return outputStatement;\r\n    }\r\n\r\n    @Override\r\n    public LabelAccess visitLabelaccess(SFMLParser.LabelaccessContext ctx) {\r\n        LabelAccess labelAccess = new LabelAccess(\r\n                ctx.label().stream().map(this::visit).map(Label.class::cast).collect(Collectors.toList()),\r\n                visitSidequalifier(ctx.sidequalifier()),\r\n                visitSlotqualifier(ctx.slotqualifier()),\r\n                visitRoundrobin(ctx.roundrobin())\r\n        );\r\n        AST_NODE_CONTEXTS.add(new Pair<>(labelAccess, ctx));\r\n        return labelAccess;\r\n    }\r\n\r\n    @Override\r\n    public RoundRobin visitRoundrobin(@Nullable SFMLParser.RoundrobinContext ctx) {\r\n        if (ctx == null) return RoundRobin.disabled();\r\n        return ctx.BLOCK() != null\r\n               ? new RoundRobin(RoundRobin.Behaviour.BY_BLOCK)\r\n               : new RoundRobin(RoundRobin.Behaviour.BY_LABEL);\r\n    }\r\n\r\n    @Override\r\n    public IfStatement visitIfstatement(SFMLParser.IfstatementContext ctx) {\r\n        var conditions = ctx\r\n                .boolexpr()\r\n                .stream()\r\n                .map(this::visit)\r\n                .map(BoolExpr.class::cast)\r\n                .collect(Collectors.toCollection(ArrayDeque::new));\r\n        var blocks = ctx.block().stream()\r\n                .map(this::visitBlock)\r\n                .collect(Collectors.toCollection(ArrayDeque::new));\r\n\r\n        IfStatement nestedStatement;\r\n        if (conditions.size() < blocks.size()) {\r\n            Block elseBlock = blocks.removeLast();\r\n            Block ifBlock = blocks.removeLast();\r\n            nestedStatement = new IfStatement(\r\n                    conditions.removeLast(),\r\n                    ifBlock,\r\n                    elseBlock\r\n            );\r\n        } else {\r\n            nestedStatement = new IfStatement(\r\n                    conditions.removeLast(),\r\n                    blocks.removeLast(),\r\n                    new Block(List.of())\r\n            );\r\n        }\r\n        while (!blocks.isEmpty()) {\r\n            nestedStatement = new IfStatement(\r\n                    conditions.removeLast(),\r\n                    blocks.removeLast(),\r\n                    new Block(List.of(nestedStatement))\r\n            );\r\n        }\r\n        assert conditions.isEmpty();\r\n\r\n        AST_NODE_CONTEXTS.add(new Pair<>(nestedStatement, ctx));\r\n        return nestedStatement;\r\n    }\r\n\r\n    @Override\r\n    public IfStatement visitIfStatementStatement(SFMLParser.IfStatementStatementContext ctx) {\r\n        IfStatement ifStatement = visitIfstatement(ctx.ifstatement());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(ifStatement, ctx));\r\n        return ifStatement;\r\n    }\r\n\r\n    @Override\r\n    public BoolExpr visitBooleanTrue(SFMLParser.BooleanTrueContext ctx) {\r\n        BoolExpr boolExpr = new BoolExpr(__ -> true, \"TRUE\");\r\n        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));\r\n        return boolExpr;\r\n    }\r\n\r\n    @Override\r\n    public BoolExpr visitBooleanHas(SFMLParser.BooleanHasContext ctx) {\r\n        var setOp = visitSetOp(ctx.setOp());\r\n        var labelAccess = visitLabelaccess(ctx.labelaccess());\r\n        var comparison = visitResourcecomparison(ctx.resourcecomparison());\r\n        BoolExpr booleanExpression = comparison.toBooleanExpression(\r\n                setOp,\r\n                labelAccess,\r\n                setOp.name().toUpperCase() + \" \" + labelAccess + \" HAS \" + comparison\r\n        );\r\n        AST_NODE_CONTEXTS.add(new Pair<>(booleanExpression, ctx));\r\n        return booleanExpression;\r\n    }\r\n\r\n    @Override\r\n    public SetOperator visitSetOp(@Nullable SFMLParser.SetOpContext ctx) {\r\n        if (ctx == null) return SetOperator.OVERALL;\r\n        SetOperator from = SetOperator.from(ctx.getText());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(from, ctx));\r\n        return from;\r\n    }\r\n\r\n    @Override\r\n    public ResourceComparer<?, ?, ?> visitResourcecomparison(SFMLParser.ResourcecomparisonContext ctx) {\r\n        ComparisonOperator op = visitComparisonOp(ctx.comparisonOp());\r\n        Number num = visitNumber(ctx.number());\r\n        ResourceQuantity quantity = new ResourceQuantity(num, ResourceQuantity.IdExpansionBehaviour.NO_EXPAND);\r\n        ResourceIdentifier<?, ?, ?> item = (ResourceIdentifier<?, ?, ?>) visit(ctx.resourceid());\r\n        ResourceComparer<?, ?, ?> resourceComparer = new ResourceComparer<>(op, quantity, item);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(resourceComparer, ctx));\r\n        return resourceComparer;\r\n    }\r\n\r\n    @Override\r\n    public ComparisonOperator visitComparisonOp(SFMLParser.ComparisonOpContext ctx) {\r\n        ComparisonOperator from = ComparisonOperator.from(ctx.getText());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(from, ctx));\r\n        return from;\r\n    }\r\n\r\n    @Override\r\n    public BoolExpr visitBooleanConjunction(SFMLParser.BooleanConjunctionContext ctx) {\r\n        var left = (BoolExpr) visit(ctx.boolexpr(0));\r\n        var right = (BoolExpr) visit(ctx.boolexpr(1));\r\n        BoolExpr boolExpr = new BoolExpr(left.and(right), left.sourceCode() + \" AND \" + right.sourceCode());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));\r\n        return boolExpr;\r\n    }\r\n\r\n    @Override\r\n    public BoolExpr visitBooleanDisjunction(SFMLParser.BooleanDisjunctionContext ctx) {\r\n        var left = (BoolExpr) visit(ctx.boolexpr(0));\r\n        var right = (BoolExpr) visit(ctx.boolexpr(1));\r\n        BoolExpr boolExpr = new BoolExpr(left.or(right), left.sourceCode() + \" OR \" + right.sourceCode());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));\r\n        return boolExpr;\r\n    }\r\n\r\n    @Override\r\n    public BoolExpr visitBooleanFalse(SFMLParser.BooleanFalseContext ctx) {\r\n        BoolExpr boolExpr = new BoolExpr(__ -> false, \"FALSE\");\r\n        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));\r\n        return boolExpr;\r\n    }\r\n\r\n    @Override\r\n    public BoolExpr visitBooleanParen(SFMLParser.BooleanParenContext ctx) {\r\n        BoolExpr expr = (BoolExpr) visit(ctx.boolexpr());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(expr, ctx));\r\n        return expr;\r\n    }\r\n\r\n    @Override\r\n    public BoolExpr visitBooleanNegation(SFMLParser.BooleanNegationContext ctx) {\r\n        var x = (BoolExpr) visit(ctx.boolexpr());\r\n        BoolExpr boolExpr = new BoolExpr(x.negate(), \"NOT \" + x.sourceCode());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(boolExpr, ctx));\r\n        return boolExpr;\r\n    }\r\n\r\n    @Override\r\n    public Limit visitQuantityRetentionLimit(SFMLParser.QuantityRetentionLimitContext ctx) {\r\n        var quantity = visitQuantity(ctx.quantity());\r\n        var retain = visitRetention(ctx.retention());\r\n        Limit limit = new Limit(quantity, retain);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(limit, ctx));\r\n        return limit;\r\n    }\r\n\r\n    @Override\r\n    public ResourceIdSet visitResourceexclusion(@Nullable SFMLParser.ResourceexclusionContext ctx) {\r\n        if (ctx == null) return ResourceIdSet.EMPTY;\r\n        ResourceIdSet resourceIdSet = new ResourceIdSet(ctx\r\n                                                                .resourceid()\r\n                                                                .stream()\r\n                                                                .map(this::visit)\r\n                                                                .map(ResourceIdentifier.class::cast)\r\n                                                                .collect(HashSet::new, HashSet::add, HashSet::addAll));\r\n        AST_NODE_CONTEXTS.add(new Pair<>(resourceIdSet, ctx));\r\n        return resourceIdSet;\r\n    }\r\n\r\n    @Override\r\n    public ResourceLimits visitInputmatchers(@Nullable SFMLParser.InputmatchersContext ctx) {\r\n        if (ctx == null) {\r\n            return new ResourceLimits(List.of(ResourceLimit.TAKE_ALL_LEAVE_NONE), ResourceIdSet.EMPTY);\r\n        }\r\n        ResourceLimits resourceLimits = ((ResourceLimits) visit(ctx.movement())).withDefaults(Limit.MAX_QUANTITY_NO_RETENTION);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimits, ctx));\r\n        return resourceLimits;\r\n    }\r\n\r\n\r\n    @Override\r\n    public ResourceLimits visitOutputmatchers(@Nullable SFMLParser.OutputmatchersContext ctx) {\r\n        if (ctx == null) {\r\n            return new ResourceLimits(List.of(ResourceLimit.ACCEPT_ALL_WITHOUT_RESTRAINT), ResourceIdSet.EMPTY);\r\n        }\r\n        ResourceLimits resourceLimits = ((ResourceLimits) visit(ctx.movement())).withDefaults(Limit.MAX_QUANTITY_MAX_RETENTION);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimits, ctx));\r\n        return resourceLimits;\r\n    }\r\n\r\n    @Override\r\n    public ASTNode visitResourceLimitMovement(SFMLParser.ResourceLimitMovementContext ctx) {\r\n        ResourceLimits resourceLimits = new ResourceLimits(\r\n                ctx.resourcelimit().stream()\r\n                        .map(this::visitResourcelimit)\r\n                        .collect(Collectors.toList()),\r\n                ResourceIdSet.EMPTY\r\n        );\r\n        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimits, ctx));\r\n        return resourceLimits;\r\n    }\r\n\r\n    @Override\r\n    public ResourceLimits visitLimitMovement(SFMLParser.LimitMovementContext ctx) {\r\n        ResourceLimits resourceLimits = new ResourceLimits(\r\n                List.of(new ResourceLimit<>(\r\n                        ResourceIdentifier.MATCH_ALL, (Limit) this.visit(ctx.limit())\r\n                )),\r\n                ResourceIdSet.EMPTY\r\n        );\r\n        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimits, ctx));\r\n        return resourceLimits;\r\n    }\r\n\r\n    @Override\r\n    public ResourceLimit<?, ?, ?> visitResourcelimit(SFMLParser.ResourcelimitContext ctx) {\r\n\r\n        var res = (ResourceIdentifier<?, ?, ?>) visit(ctx.resourceid());\r\n\r\n        if (ctx.limit() == null)\r\n            return new ResourceLimit<>(res, Limit.UNSET);\r\n\r\n        var limit = (Limit) visit(ctx.limit());\r\n        ResourceLimit<?, ?, ?> resourceLimit = new ResourceLimit<>(res, limit);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(resourceLimit, ctx));\r\n        return resourceLimit;\r\n    }\r\n\r\n    @Override\r\n    public NumberRangeSet visitSlotqualifier(@Nullable SFMLParser.SlotqualifierContext ctx) {\r\n        NumberRangeSet numberRangeSet = visitRangeset(ctx == null ? null : ctx.rangeset());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(numberRangeSet, ctx));\r\n        return numberRangeSet;\r\n    }\r\n\r\n    @Override\r\n    public ASTNode visitForgetStatementStatement(SFMLParser.ForgetStatementStatementContext ctx) {\r\n        ForgetStatement statement = (ForgetStatement) visit(ctx.forgetstatement());\r\n        AST_NODE_CONTEXTS.add(new Pair<>(statement, ctx));\r\n        return statement;\r\n    }\r\n\r\n    @Override\r\n    public ForgetStatement visitForgetstatement(SFMLParser.ForgetstatementContext ctx) {\r\n        List<Label> labels = ctx\r\n                .label()\r\n                .stream()\r\n                .map(this::visit)\r\n                .map(Label.class::cast)\r\n                .collect(Collectors.toList());\r\n        if (labels.isEmpty()) {\r\n            labels = USED_LABELS.stream().toList();\r\n        }\r\n        return new ForgetStatement(labels);\r\n    }\r\n\r\n    @Override\r\n    public NumberRangeSet visitRangeset(@Nullable SFMLParser.RangesetContext ctx) {\r\n        if (ctx == null) return NumberRangeSet.MAX_RANGE;\r\n        NumberRangeSet numberRangeSet = new NumberRangeSet(ctx\r\n                                                                   .range()\r\n                                                                   .stream()\r\n                                                                   .map(this::visitRange)\r\n                                                                   .toArray(NumberRange[]::new));\r\n        AST_NODE_CONTEXTS.add(new Pair<>(numberRangeSet, ctx));\r\n        return numberRangeSet;\r\n    }\r\n\r\n    @Override\r\n    public NumberRange visitRange(SFMLParser.RangeContext ctx) {\r\n        var iter = ctx.number().stream().map(this::visitNumber).mapToLong(Number::value).iterator();\r\n        var start = iter.next();\r\n        if (iter.hasNext()) {\r\n            var end = iter.next();\r\n            NumberRange numberRange = new NumberRange(start, end);\r\n            AST_NODE_CONTEXTS.add(new Pair<>(numberRange, ctx));\r\n            return numberRange;\r\n        } else {\r\n            NumberRange numberRange = new NumberRange(start, start);\r\n            AST_NODE_CONTEXTS.add(new Pair<>(numberRange, ctx));\r\n            return numberRange;\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public Limit visitRetentionLimit(SFMLParser.RetentionLimitContext ctx) {\r\n        var retain = visitRetention(ctx.retention());\r\n        Limit limit = new Limit(ResourceQuantity.UNSET, retain);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(limit, ctx));\r\n        return limit;\r\n    }\r\n\r\n    @Override\r\n    public Limit visitQuantityLimit(SFMLParser.QuantityLimitContext ctx) {\r\n        var quantity = visitQuantity(ctx.quantity());\r\n        Limit limit = new Limit(quantity, ResourceQuantity.UNSET);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(limit, ctx));\r\n        return limit;\r\n    }\r\n\r\n    @Override\r\n    public ResourceQuantity visitRetention(@Nullable SFMLParser.RetentionContext ctx) {\r\n        if (ctx == null)\r\n            return ResourceQuantity.UNSET;\r\n        ResourceQuantity quantity = new ResourceQuantity(\r\n                visitNumber(ctx.number()),\r\n                ctx.EACH() != null\r\n                ? ResourceQuantity.IdExpansionBehaviour.EXPAND\r\n                : ResourceQuantity.IdExpansionBehaviour.NO_EXPAND\r\n        );\r\n        AST_NODE_CONTEXTS.add(new Pair<>(quantity, ctx));\r\n        return quantity;\r\n    }\r\n\r\n    @Override\r\n    public ResourceQuantity visitQuantity(@Nullable SFMLParser.QuantityContext ctx) {\r\n        if (ctx == null) return ResourceQuantity.MAX_QUANTITY;\r\n        ResourceQuantity quantity = new ResourceQuantity(\r\n                visitNumber(ctx.number()),\r\n                ctx.EACH() != null\r\n                ? ResourceQuantity.IdExpansionBehaviour.EXPAND\r\n                : ResourceQuantity.IdExpansionBehaviour.NO_EXPAND\r\n        );\r\n        AST_NODE_CONTEXTS.add(new Pair<>(quantity, ctx));\r\n        return quantity;\r\n    }\r\n\r\n    @Override\r\n    public DirectionQualifier visitSidequalifier(@Nullable SFMLParser.SidequalifierContext ctx) {\r\n        if (ctx == null) return DirectionQualifier.NULL_DIRECTION;\r\n        DirectionQualifier directionQualifier = new DirectionQualifier(\r\n                EnumSet.copyOf(ctx.side().stream()\r\n                                       .map(this::visitSide)\r\n                                       .map(DirectionQualifier::lookup)\r\n                                       .toList())\r\n        );\r\n        AST_NODE_CONTEXTS.add(new Pair<>(directionQualifier, ctx));\r\n        return directionQualifier;\r\n    }\r\n\r\n    @Override\r\n    public Side visitSide(SFMLParser.SideContext ctx) {\r\n        Side side = Side.valueOf(ctx.getText().toUpperCase(Locale.ROOT));\r\n        AST_NODE_CONTEXTS.add(new Pair<>(side, ctx));\r\n        return side;\r\n    }\r\n\r\n    @Override\r\n    public Block visitBlock(@Nullable SFMLParser.BlockContext ctx) {\r\n        if (ctx == null) return new Block(Collections.emptyList());\r\n        var statements = ctx\r\n                .statement()\r\n                .stream()\r\n                .map(this::visit)\r\n                .map(Statement.class::cast)\r\n                .collect(Collectors.toList());\r\n        Block block = new Block(statements);\r\n        AST_NODE_CONTEXTS.add(new Pair<>(block, ctx));\r\n        return block;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfml\\ast\\ResourceQuantity.java\r\n\r\n````java\r\npackage ca.teamdman.sfml.ast;\r\n\r\npublic record ResourceQuantity(\r\n        Number number,\r\n        IdExpansionBehaviour idExpansionBehaviour\r\n) implements ASTNode {\r\n    @SuppressWarnings(\"DataFlowIssue\")\r\n    public static ResourceQuantity UNSET = new ResourceQuantity(null, IdExpansionBehaviour.NO_EXPAND);\r\n    public static ResourceQuantity MAX_QUANTITY = new ResourceQuantity(\r\n            new Number(Long.MAX_VALUE),\r\n            IdExpansionBehaviour.NO_EXPAND\r\n    );\r\n\r\n    public ResourceQuantity add(ResourceQuantity quantity) {\r\n        return new ResourceQuantity(\r\n                number.add(quantity.number),\r\n                idExpansionBehaviour\r\n        );\r\n    }\r\n\r\n    public enum IdExpansionBehaviour {\r\n        EXPAND,\r\n        NO_EXPAND\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return number + (idExpansionBehaviour == IdExpansionBehaviour.EXPAND ? \" EACH\" : \"\");\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\jei\\SFMJEIPlugin.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.jei;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.client.gui.screen.ManagerScreen;\r\nimport ca.teamdman.sfm.common.recipe.PrintingPressRecipe;\r\nimport ca.teamdman.sfm.common.registry.SFMBlocks;\r\nimport ca.teamdman.sfm.common.registry.SFMRecipeTypes;\r\nimport mezz.jei.api.IModPlugin;\r\nimport mezz.jei.api.JeiPlugin;\r\nimport mezz.jei.api.gui.handlers.IGuiContainerHandler;\r\nimport mezz.jei.api.registration.IGuiHandlerRegistration;\r\nimport mezz.jei.api.registration.IRecipeCatalystRegistration;\r\nimport mezz.jei.api.registration.IRecipeCategoryRegistration;\r\nimport mezz.jei.api.registration.IRecipeRegistration;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.renderer.Rect2i;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.crafting.RecipeManager;\r\nimport net.minecraft.world.level.block.Blocks;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@JeiPlugin\r\npublic class SFMJEIPlugin implements IModPlugin {\r\n    @Override\r\n    public ResourceLocation getPluginUid() {\r\n        return new ResourceLocation(SFM.MOD_ID, \"sfm\");\r\n    }\r\n\r\n    @Override\r\n    public void registerCategories(IRecipeCategoryRegistration registration) {\r\n        registration.addRecipeCategories(\r\n                new PrintingPressJEICategory(registration.getJeiHelpers()),\r\n                new FallingAnvilJEICategory(registration.getJeiHelpers())\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public void registerRecipeCatalysts(IRecipeCatalystRegistration registration) {\r\n        registration.addRecipeCatalyst(\r\n                new ItemStack(SFMBlocks.PRINTING_PRESS_BLOCK.get()),\r\n                PrintingPressJEICategory.RECIPE_TYPE\r\n        );\r\n        registration.addRecipeCatalyst(\r\n                new ItemStack(Blocks.ANVIL),\r\n                FallingAnvilJEICategory.RECIPE_TYPE\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public void registerRecipes(IRecipeRegistration registration) {\r\n        List<PrintingPressRecipe> printingPressRecipes = new ArrayList<>();\r\n        List<FallingAnvilRecipe> fallingAnvilRecipes = new ArrayList<>();\r\n        var level = Minecraft.getInstance().level;\r\n        assert level != null;\r\n        RecipeManager recipeManager = level.getRecipeManager();\r\n        recipeManager.getAllRecipesFor(SFMRecipeTypes.PRINTING_PRESS.get()).forEach(r -> {\r\n            printingPressRecipes.add(r.value());\r\n            fallingAnvilRecipes.add(new FallingAnvilFormRecipe(r.value()));\r\n        });\r\n        fallingAnvilRecipes.add(new FallingAnvilDisenchantRecipe());\r\n        fallingAnvilRecipes.add(new FallingAnvilExperienceShardRecipe());\r\n        registration.addRecipes(PrintingPressJEICategory.RECIPE_TYPE, printingPressRecipes);\r\n        registration.addRecipes(FallingAnvilJEICategory.RECIPE_TYPE, fallingAnvilRecipes);\r\n    }\r\n\r\n    @Override\r\n    public void registerGuiHandlers(IGuiHandlerRegistration registration) {\r\n        registration.addGuiContainerHandler(ManagerScreen.class, new IGuiContainerHandler<>() {\r\n            @Override\r\n            public List<Rect2i> getGuiExtraAreas(ManagerScreen screen) {\r\n                var buttons = screen.getButtonsForJEIExclusionZones();\r\n                return buttons\r\n                        .stream()\r\n                        .filter(b -> b.visible)\r\n                        .map(b -> new Rect2i(b.getX(), b.getY(), b.getWidth(), b.getHeight()))\r\n                        .toList();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\command\\SFMCommand.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.command;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.cablenetwork.CableNetworkManager;\r\nimport net.minecraft.commands.Commands;\r\nimport net.minecraft.commands.arguments.blocks.BlockInput;\r\nimport net.minecraft.commands.arguments.blocks.BlockStateArgument;\r\nimport net.minecraft.server.level.ServerLevel;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.neoforged.bus.api.SubscribeEvent;\r\nimport net.neoforged.fml.common.Mod;\r\nimport net.neoforged.neoforge.event.RegisterCommandsEvent;\r\n\r\nimport static com.mojang.brigadier.Command.SINGLE_SUCCESS;\r\n\r\n@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.FORGE, modid = SFM.MOD_ID)\r\npublic class SFMCommand {\r\n    @SubscribeEvent\r\n    public static void onRegisterCommand(final RegisterCommandsEvent event) {\r\n        var command = Commands.literal(\"sfm\");\r\n        command.then(Commands.literal(\"bust_cable_network_cache\")\r\n                             .requires(source -> source.hasPermission(2))\r\n                             .executes(ctx -> {\r\n                                 SFM.LOGGER.info(\"Busting cable networks\");\r\n                                 CableNetworkManager.clear();\r\n                                 return SINGLE_SUCCESS;\r\n                             }));\r\n        command.then(Commands.literal(\"show_bad_cable_cache_entries\")\r\n                             .requires(source -> source.hasPermission(2))\r\n                             .then(Commands.argument(\"block\", BlockStateArgument.block(event.getBuildContext()))\r\n                                           .executes(ctx -> {\r\n                                               ServerLevel level = ctx.getSource().getLevel();\r\n                                               CableNetworkManager.getBadCableCachePositions(level).forEach(pos -> {\r\n                                                   BlockInput block = BlockStateArgument\r\n                                                           .getBlock(\r\n                                                                   ctx,\r\n                                                                   \"block\"\r\n                                                           );\r\n                                                   block.place(\r\n                                                           level,\r\n                                                           pos,\r\n                                                           Block.UPDATE_ALL\r\n                                                   );\r\n                                               });\r\n                                               return SINGLE_SUCCESS;\r\n                                           })));\r\n        event.getDispatcher().register(command);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\jei\\FallingAnvilFormRecipe.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.jei;\r\n\r\nimport ca.teamdman.sfm.common.recipe.PrintingPressRecipe;\r\n\r\npublic class FallingAnvilFormRecipe extends FallingAnvilRecipe {\r\n    public final PrintingPressRecipe PARENT;\r\n\r\n    public FallingAnvilFormRecipe(PrintingPressRecipe parent) {\r\n        this.PARENT = parent;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ClientboundContainerExportsInspectionResultsPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.client.ClientStuff;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.player.LocalPlayer;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ClientboundContainerExportsInspectionResultsPacket(\r\n        int windowId,\r\n        String results\r\n) {\r\n    public static final int MAX_RESULTS_LENGTH = 20480;\r\n\r\n    public static void encode(\r\n            ClientboundContainerExportsInspectionResultsPacket msg, FriendlyByteBuf friendlyByteBuf\r\n    ) {\r\n        friendlyByteBuf.writeVarInt(msg.windowId());\r\n        friendlyByteBuf.writeUtf(msg.results(), MAX_RESULTS_LENGTH);\r\n    }\r\n\r\n    public static ClientboundContainerExportsInspectionResultsPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ClientboundContainerExportsInspectionResultsPacket(\r\n                friendlyByteBuf.readVarInt(),\r\n                friendlyByteBuf.readUtf(MAX_RESULTS_LENGTH)\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ClientboundContainerExportsInspectionResultsPacket msg, NetworkEvent.Context context\r\n    ) {\r\n        context.enqueueWork(() -> {\r\n            LocalPlayer player = Minecraft.getInstance().player;\r\n            if (player == null) return;\r\n            var container = player.containerMenu;\r\n            if (container.containerId != msg.windowId) return;\r\n            ClientStuff.showProgramEditScreen(msg.results, next -> {\r\n            });\r\n        });\r\n        context.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\Constants.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.registry.SFMBlocks;\r\nimport ca.teamdman.sfm.common.registry.SFMItems;\r\nimport ca.teamdman.sfm.common.util.SFMUtils;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.client.resources.language.I18n;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.network.chat.MutableComponent;\r\nimport net.minecraft.network.chat.contents.TranslatableContents;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.function.Supplier;\r\n\r\npublic class Constants {\r\n    public static final class LocalizationKeys {\r\n        public static final LocalizationEntry PROGRAM_EDIT_SCREEN_TITLE = new LocalizationEntry(\r\n                \"gui.sfm.text_editor.title\",\r\n                \"Text Editor\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_EDIT_SCREEN_DONE_BUTTON_TOOLTIP = new LocalizationEntry(\r\n                \"gui.sfm.text_editor.done_button.tooltip\",\r\n                \"Shift+Enter to submit\"\r\n        );\r\n        public static final LocalizationEntry SAVE_CHANGES_CONFIRM_SCREEN_TITLE = new LocalizationEntry(\r\n                \"gui.sfm.save_changes_confirm.title\",\r\n                \"Save changes\"\r\n        );\r\n        public static final LocalizationEntry SAVE_CHANGES_CONFIRM_SCREEN_MESSAGE = new LocalizationEntry(\r\n                \"gui.sfm.save_changes_confirm.message\",\r\n                \"Do you want to save before exiting?\"\r\n        );\r\n        public static final LocalizationEntry SAVE_CHANGES_CONFIRM_SCREEN_YES_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.save_changes_confirm.yes_button\",\r\n                \"Save changes\"\r\n        );\r\n        public static final LocalizationEntry SAVE_CHANGES_CONFIRM_SCREEN_NO_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.save_changes_confirm.no_button\",\r\n                \"Don't save\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry MOD_NAME = new LocalizationEntry(\r\n                \"mod.name\",\r\n                \"Super Factory Manager\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n\r\n\r\n        public static LocalizationEntry ITEM_GROUP       = new LocalizationEntry(\r\n                \"item_group.sfm.main\",\r\n                \"Super Factory Manager\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry CABLE_BLOCK = new LocalizationEntry(\r\n                () -> SFMBlocks.CABLE_BLOCK.get().getDescriptionId(),\r\n                () -> \"Inventory Cable\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry MANAGER_BLOCK = new LocalizationEntry(\r\n                () -> SFMBlocks.MANAGER_BLOCK.get().getDescriptionId(),\r\n                () -> \"Factory Manager\"\r\n        );\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry PRINTING_PRESS_BLOCK = new LocalizationEntry(\r\n                () -> SFMBlocks.PRINTING_PRESS_BLOCK.get().getDescriptionId(),\r\n                () -> \"Printing Press\"\r\n        );\r\n\r\n        public static final LocalizationEntry PRINTING_PRESS_JEI_CATEGORY_TITLE = new LocalizationEntry(\r\n                \"gui.jei.category.sfm.printing_press\",\r\n                \"Printing Press\"\r\n        );\r\n\r\n        public static final LocalizationEntry FALLING_ANVIL_JEI_CATEGORY_TITLE = new LocalizationEntry(\r\n                \"gui.jei.category.sfm.falling_anvil\",\r\n                \"Falling Anvil\"\r\n        );\r\n\r\n        public static final LocalizationEntry FALLING_ANVIL_JEI_CONSUMED = new LocalizationEntry(\r\n                \"gui.jei.category.sfm.falling_anvil.consumed\",\r\n                \"Gets consumed\"\r\n        );\r\n        public static final LocalizationEntry FALLING_ANVIL_JEI_NOT_CONSUMED = new LocalizationEntry(\r\n                \"gui.jei.category.sfm.falling_anvil.not_consumed\",\r\n                \"Not consumed\"\r\n        );\r\n\r\n        public static final LocalizationEntry PRINTING_PRESS_TOOLTIP = new LocalizationEntry(\r\n                () -> SFMItems.PRINTING_PRESS_ITEM.get().getDescriptionId() + \".tooltip\",\r\n                () -> \"Place with an air gap below a downward facing piston. Extend the piston to use.\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry TEST_BARREL_BLOCK = new LocalizationEntry(\r\n                () -> SFMBlocks.TEST_BARREL_BLOCK.get().getDescriptionId(),\r\n                () -> \"Test Barrel\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry WATER_TANK_BLOCK = new LocalizationEntry(\r\n                () -> SFMBlocks.WATER_TANK_BLOCK.get().getDescriptionId(),\r\n                () -> \"Water Tank\"\r\n        );\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry BATTERY_BLOCK = new LocalizationEntry(\r\n                () -> SFMBlocks.BATTERY_BLOCK.get().getDescriptionId(),\r\n                () -> \"Battery (WIP)\"\r\n        );\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry DISK_ITEM = new LocalizationEntry(\r\n                () -> SFMItems.DISK_ITEM.get().getDescriptionId(),\r\n                () -> \"Factory Manager Program Disk\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry EXPERIENCE_GOOP_ITEM = new LocalizationEntry(\r\n                () -> SFMItems.EXPERIENCE_GOOP_ITEM.get().getDescriptionId(),\r\n                () -> \"Experience Goop\"\r\n        );\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry EXPERIENCE_SHARD_ITEM = new LocalizationEntry(\r\n                () -> SFMItems.EXPERIENCE_SHARD_ITEM.get().getDescriptionId(),\r\n                () -> \"Experience Shard\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry FORM_ITEM = new LocalizationEntry(\r\n                () -> SFMItems.FORM_ITEM.get().getDescriptionId(),\r\n                () -> \"Printing Form\"\r\n        );\r\n\r\n        public static final LocalizationEntry DISK_ITEM_TOOLTIP_LABEL_HEADER = new LocalizationEntry(\r\n                () -> SFMItems.DISK_ITEM.get().getDescriptionId() + \".tooltip.label_section.header\",\r\n                () -> \"Labels\"\r\n        );\r\n        public static final LocalizationEntry DISK_ITEM_TOOLTIP_LABEL = new LocalizationEntry(\r\n                () -> SFMItems.DISK_ITEM.get().getDescriptionId() + \".tooltip.label_section.entry\",\r\n                () -> \" - %s: %d blocks\"\r\n        );\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry LABEL_GUN_ITEM = new LocalizationEntry(\r\n                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId(),\r\n                () -> \"Label Gun\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_CHAT_PULLED = new LocalizationEntry(\r\n                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + \".chat.pulled\",\r\n                () -> \"Pulled labels from the manager.\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_CHAT_PUSHED = new LocalizationEntry(\r\n                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + \".chat.pushed\",\r\n                () -> \"Pushed labels to the manager.\"\r\n        );\r\n\r\n        @SuppressWarnings(\"unused\") // used by minecraft without us having to directly reference\r\n        public static LocalizationEntry NETWORK_TOOL_ITEM = new LocalizationEntry(\r\n                () -> SFMItems.NETWORK_TOOL_ITEM.get().getDescriptionId(),\r\n                () -> \"Network Tool\"\r\n        );\r\n\r\n        public static final LocalizationEntry NETWORK_TOOL_ITEM_TOOLTIP_1 = new LocalizationEntry(\r\n                () -> SFMItems.NETWORK_TOOL_ITEM.get().getDescriptionId() + \".tooltip.1\",\r\n                () -> \"Shows cables through walls when held.\"\r\n        );\r\n        public static final LocalizationEntry NETWORK_TOOL_ITEM_TOOLTIP_2 = new LocalizationEntry(\r\n                () -> SFMItems.NETWORK_TOOL_ITEM.get().getDescriptionId() + \".tooltip.2\",\r\n                () -> \"Right click a block face to view diagnostic info.\"\r\n        );\r\n        public static final LocalizationEntry NETWORK_TOOL_ITEM_TOOLTIP_3 = new LocalizationEntry(\r\n                () -> SFMItems.NETWORK_TOOL_ITEM.get().getDescriptionId() + \".tooltip.3\",\r\n                () -> ChatFormatting.GRAY\r\n                      + \"You might not need this, don't forget you can press \"\r\n                      + ChatFormatting.AQUA\r\n                      + \"%s\"\r\n                      + ChatFormatting.GRAY\r\n                      + \" in an inventory to toggle the inspector.\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_ITEM_TOOLTIP_1 = new LocalizationEntry(\r\n                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + \".tooltip.1\",\r\n                () -> \"Right click a Factory Manager to push labels.\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_ITEM_TOOLTIP_2 = new LocalizationEntry(\r\n                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + \".tooltip.2\",\r\n                () -> \"Right click a Factory Manager while sneaking to pull labels.\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_ITEM_TOOLTIP_3 = new LocalizationEntry(\r\n                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + \".tooltip.3\",\r\n                () -> \"Hold control to apply labels to blocks of the same type adjacent to cables.\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_ITEM_NAME_WITH_LABEL = new LocalizationEntry(\r\n                () -> SFMItems.LABEL_GUN_ITEM.get().getDescriptionId() + \".with_label\",\r\n                () -> \"Label Gun: \\\"%s\\\"\"\r\n        );\r\n        public static final LocalizationEntry WATER_TANK_ITEM_TOOLTIP_1 = new LocalizationEntry(\r\n                () -> SFMBlocks.WATER_TANK_BLOCK.get().getDescriptionId() + \".tooltip.1\",\r\n                () -> \"Requires two adjacent water sources\"\r\n        );\r\n        public static final LocalizationEntry WATER_TANK_ITEM_TOOLTIP_2 = new LocalizationEntry(\r\n                () -> SFMBlocks.WATER_TANK_BLOCK.get().getDescriptionId() + \".tooltip.2\",\r\n                () -> \"More effective when also adjacent to other water tanks\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_GUI_TITLE = new LocalizationEntry(\r\n                \"gui.sfm.title.labelgun\",\r\n                \"Label Gun\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_TEMPLATE_PICKER_GUI_WARNING_1 = new LocalizationEntry(\r\n                \"gui.sfm.program_template_picker.warning1\",\r\n                \"Hitting \\\"Done\\\" will on the next screen will overwrite your existing program!\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_TEMPLATE_PICKER_GUI_WARNING_2 = new LocalizationEntry(\r\n                \"gui.sfm.program_template_picker.warning2\",\r\n                \"Hit <esc> to cancel instead.\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_TEMPLATE_PICKER_GUI_TITLE = new LocalizationEntry(\r\n                \"gui.sfm.title.program_template_picker\",\r\n                \"Program Template Picker\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_GUI_LABEL_PLACEHOLDER = new LocalizationEntry(\r\n                \"gui.sfm.label_gun.placeholder\",\r\n                \"Label\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_GUI_LABEL_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.label_gun.label_button\",\r\n                \"%s (%d)\"\r\n        );\r\n\r\n        public static final LocalizationEntry LABEL_GUN_GUI_PRUNE_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.label_gun.prune_button\",\r\n                \"Prune\"\r\n        );\r\n        public static final LocalizationEntry LABEL_GUN_GUI_CLEAR_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.label_gun.clear_button\",\r\n                \"Clear\"\r\n        );\r\n\r\n\r\n        public static final LocalizationEntry MANAGER_GUI_PASTE_FROM_CLIPBOARD_BUTTON_TOOLTIP = new LocalizationEntry(\r\n                \"gui.sfm.manager.tooltip.paste\",\r\n                \"Press Ctrl+V to paste.\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_EDIT_BUTTON_TOOLTIP = new LocalizationEntry(\r\n                \"gui.sfm.manager.edit_button.tooltip\",\r\n                \"Press Ctrl+E to edit.\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_EDIT_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.manager.edit_button\",\r\n                \"Edit\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_RESET_BUTTON_TOOLTIP = new LocalizationEntry(\r\n                \"gui.sfm.manager.tooltip.reset\",\r\n                \"Wipes ALL disk data.\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_CONTAINER = new LocalizationEntry(\r\n                \"container.sfm.manager\",\r\n                \"Factory Manager\"\r\n        );\r\n\r\n        public static final LocalizationEntry PROGRAM_WARNING_UNUSED_LABEL = new LocalizationEntry(\r\n                \"program.sfm.warnings.unused_label\",\r\n                \"Label \\\"%s\\\" is used in code but not assigned in the world.\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_WARNING_UNKNOWN_RESOURCE_TYPE = new LocalizationEntry(\r\n                \"program.sfm.warnings.unknown_resource_type\",\r\n                \"The resource type \\\"%s\\\" in \\\"%s\\\" is not supported.\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_WARNING_UNKNOWN_RESOURCE_ID = new LocalizationEntry(\r\n                \"program.sfm.warnings.unknown_resource_id\",\r\n                \"Resource \\\"%s\\\" was not found.\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_WARNING_UNDEFINED_LABEL = new LocalizationEntry(\r\n                \"program.sfm.warnings.undefined_label\",\r\n                \"Label \\\"%s\\\" is assigned in the world but not defined in code.\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_WARNING_DISCONNECTED_LABEL = new LocalizationEntry(\r\n                \"program.sfm.warnings.disconnected_label\",\r\n                \"Label \\\"%s\\\" is assigned in the world at %s but not connected by cables.\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_WARNING_CONNECTED_BUT_NOT_VIABLE_LABEL = new LocalizationEntry(\r\n                \"program.sfm.warnings.adjacent_but_disconnected_label\",\r\n                \"Label \\\"%s\\\" is assigned in the world at %s and is connected by cables but is not detected as a valid inventory.\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_ERROR_COMPILE_FAILED = new LocalizationEntry(\r\n                \"program.sfm.error.compile_failed\",\r\n                \"Failed to compile.\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_ERROR_LITERAL = new LocalizationEntry(\r\n                \"program.sfm.error.literal\",\r\n                \"%s\"\r\n        );\r\n        public static final LocalizationEntry PROGRAM_ERROR_MALFORMED_RESOURCE_TYPE = new LocalizationEntry(\r\n                \"program.sfm.error.malformed_resource_type\",\r\n                \"Program has a malformed resource type \\\"%s\\\".\\nReminder: Resource types must be literals, not wildcards.\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_STATE_NO_PROGRAM = new LocalizationEntry(\r\n                \"gui.sfm.manager.state.no_program\",\r\n                \"no program\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_STATE = new LocalizationEntry(\r\n                \"gui.sfm.manager.state\",\r\n                \"State: %s\"\r\n        );\r\n\r\n        public static final LocalizationEntry CONTAINER_INSPECTOR_SHOW_EXPORTS_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.container_inspector.show_exports_button\",\r\n                \"Export Inspector\"\r\n        );\r\n        public static final LocalizationEntry CONTAINER_INSPECTOR_MEKANISM_NULL_DIRECTION_WARNING = new LocalizationEntry(\r\n                \"gui.sfm.container_inspector.mekanism_null_direction_warning\",\r\n                \"MEKANISM BLOCKS ARE READ-ONLY FROM THE NULL DIRECTION!!!!!!\"\r\n        );\r\n        public static final LocalizationEntry CONTAINER_INSPECTOR_MEKANISM_MACHINE_INPUTS = new LocalizationEntry(\r\n                \"gui.sfm.container_inspector.mekanism_machine_inputs\",\r\n                \"The following are based on the MACHINE'S input config\"\r\n        );\r\n        public static final LocalizationEntry CONTAINER_INSPECTOR_MEKANISM_MACHINE_OUTPUTS = new LocalizationEntry(\r\n                \"gui.sfm.container_inspector.mekanism_machine_outputs\",\r\n                \"The following are based on the MACHINE'S output config\"\r\n        );\r\n\r\n        public static final LocalizationEntry CONTAINER_INSPECTOR_CONTAINER_SLOT_COUNT = new LocalizationEntry(\r\n                \"gui.sfm.container_inspector.container_slot_count\",\r\n                \"Container Slots: %d\"\r\n        );\r\n        public static final LocalizationEntry CONTAINER_INSPECTOR_INVENTORY_SLOT_COUNT = new LocalizationEntry(\r\n                \"gui.sfm.container_inspector.inventory_slot_count\",\r\n                \"Inventory Slots: %d\"\r\n        );\r\n\r\n\r\n        public static final LocalizationEntry MANAGER_GUI_PEAK_TICK_TIME = new LocalizationEntry(\r\n                \"gui.sfm.manager.peak_tick_time\",\r\n                \"Peak tick time: %s ms\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_HOVERED_TICK_TIME = new LocalizationEntry(\r\n                \"gui.sfm.manager.hovered_tick_time\",\r\n                \"Hovered tick time: %s ms\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_STATE_NO_DISK = new LocalizationEntry(\r\n                \"gui.sfm.manager.state.no_disk\",\r\n                \"missing disk\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_STATE_RUNNING = new LocalizationEntry(\r\n                \"gui.sfm.manager.state.running\",\r\n                \"running\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_STATE_INVALID_PROGRAM = new LocalizationEntry(\r\n                \"gui.sfm.manager.state.invalid_program\",\r\n                \"invalid program\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_PASTE_FROM_CLIPBOARD_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.manager.button.paste_clipboard\",\r\n                \"Paste from clipboard\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_COPY_TO_CLIPBOARD_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.manager.button.copy_to_clipboard\",\r\n                \"Copy to clipboard\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_VIEW_EXAMPLES_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.manager.button.view_examples\",\r\n                \"View examples\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_VIEW_EXAMPLES_BUTTON_TOOLTIP = new LocalizationEntry(\r\n                \"gui.sfm.manager.button.view_examples.tooltip\",\r\n                \"Press Ctrl+Shift+E to view examples.\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_RESET_BUTTON = new LocalizationEntry(\r\n                \"gui.sfm.manager.button.reset\",\r\n                \"Reset\"\r\n        );\r\n\r\n        public static final LocalizationEntry MANAGER_GUI_WARNING_BUTTON_TOOLTIP = new LocalizationEntry(\r\n                \"gui.sfm.manager.button.warning.tooltip\",\r\n                \"Click to copy code with warnings and errors.\\nShift-click to attempt to fix warnings.\"\r\n        );\r\n\r\n        public static final LocalizationEntry MANAGER_GUI_WARNING_BUTTON_TOOLTIP_READ_ONLY = new LocalizationEntry(\r\n                \"gui.sfm.manager.button.warning.tooltip.read_only\",\r\n                \"Click to copy code with warnings and errors.\"\r\n        );\r\n\r\n        public static final LocalizationEntry MANAGER_GUI_STATUS_LOADED_CLIPBOARD = new LocalizationEntry(\r\n                \"gui.sfm.manager.status.loaded_clipboard\",\r\n                \"Loaded from clipboard!\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_STATUS_SAVED_CLIPBOARD = new LocalizationEntry(\r\n                \"gui.sfm.manager.status.saved_clipboard\",\r\n                \"Saved to clipboard!\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_STATUS_RESET = new LocalizationEntry(\r\n                \"gui.sfm.manager.status.reset\",\r\n                \"Reset program and labels!\"\r\n        );\r\n        public static final LocalizationEntry MANAGER_GUI_STATUS_FIX = new LocalizationEntry(\r\n                \"gui.sfm.manager.status.fix\",\r\n                \"Cleaning up labels!\"\r\n        );\r\n\r\n        public static final LocalizationEntry GUI_ADVANCED_TOOLTIP_HINT = new LocalizationEntry(\r\n                \"gui.sfm.advanced.tooltip.hint\",\r\n                ChatFormatting.GRAY + \"Hold \" + ChatFormatting.AQUA + \"%s\" + ChatFormatting.GRAY + \" for more info\"\r\n        );\r\n\r\n        public static final LocalizationEntry MORE_HOVER_INFO_KEY = new LocalizationEntry(\r\n                \"key.sfm.more_info\",\r\n                \"Show More Item Hover Info\"\r\n        );\r\n\r\n        public static final LocalizationEntry CONTAINER_INSPECTOR_TOGGLE_KEY = new LocalizationEntry(\r\n                \"key.sfm.container_inspector.activation_key\",\r\n                \"Toggle Container Inspector\"\r\n        );\r\n\r\n        public static final LocalizationEntry SFM_KEY_CATEGORY = new LocalizationEntry(\r\n                \"key.categories.sfm\",\r\n                \"Super Factory Manager\"\r\n        );\r\n\r\n        public static List<LocalizationEntry> getEntries() {\r\n            // use reflection to get all the public static LocalizationEntry fields\r\n            var rtn = new ArrayList<LocalizationEntry>();\r\n            for (var field : Constants.LocalizationKeys.class.getFields()) {\r\n                if (field.getType() == LocalizationEntry.class) {\r\n                    try {\r\n                        rtn.add((LocalizationEntry) field.get(null));\r\n                    } catch (IllegalAccessException e) {\r\n                        SFM.LOGGER.error(\"Failed reading entry field\", e);\r\n                    }\r\n                }\r\n            }\r\n            return rtn;\r\n        }\r\n\r\n        public record LocalizationEntry(\r\n                Supplier<String> key,\r\n                Supplier<String> value\r\n        ) {\r\n            public LocalizationEntry(String key, String value) {\r\n                this(() -> key, () -> value);\r\n            }\r\n\r\n            public TranslatableContents get(Object... args) {\r\n                return SFMUtils.getTranslatableContents(key.get(), args);\r\n            }\r\n\r\n            public TranslatableContents get() {\r\n                return SFMUtils.getTranslatableContents(key.get());\r\n            }\r\n\r\n            public String getString() {\r\n                return I18n.get(key.get());\r\n            }\r\n\r\n            public String getString(Object... args) {\r\n                return I18n.get(key.get(), args);\r\n            }\r\n\r\n            public MutableComponent getComponent() {\r\n                return Component.translatable(key.get());\r\n            }\r\n\r\n            public MutableComponent getComponent(Object... args) {\r\n                return Component.translatable(key.get(), args);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\registry\\package-info.java\r\n\r\n````java\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.client.registry;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\SFMMekanismCompat.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.compat;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.Constants;\r\nimport ca.teamdman.sfm.common.registry.SFMResourceTypes;\r\nimport ca.teamdman.sfm.common.resourcetype.*;\r\nimport ca.teamdman.sfm.common.resourcetype.exclude.GasResourceType;\r\nimport ca.teamdman.sfm.common.resourcetype.exclude.InfuseResourceType;\r\nimport ca.teamdman.sfm.common.resourcetype.exclude.PigmentResourceType;\r\nimport ca.teamdman.sfm.common.resourcetype.exclude.SlurryResourceType;\r\nimport ca.teamdman.sfml.ast.DirectionQualifier;\r\nimport mekanism.api.RelativeSide;\r\nimport mekanism.common.lib.transmitter.TransmissionType;\r\nimport mekanism.common.tile.component.TileComponentConfig;\r\nimport mekanism.common.tile.component.config.ConfigInfo;\r\nimport mekanism.common.tile.component.config.DataType;\r\nimport mekanism.common.tile.interfaces.ISideConfiguration;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class SFMMekanismCompat {\r\n    @SuppressWarnings(\"DataFlowIssue\")\r\n    public static Optional<ResourceType<?, ?, ?>> getResourceType(TransmissionType trans) {\r\n        return switch (trans) {\r\n            case ITEM -> Optional.of(SFMResourceTypes.ITEM.get());\r\n            case FLUID -> Optional.of(SFMResourceTypes.FLUID.get());\r\n            case GAS -> Optional.of(SFMResourceTypes.DEFERRED_TYPES\r\n                                            .get(new ResourceLocation(SFM.MOD_ID, \"gas\")));\r\n            case INFUSION -> Optional.of(SFMResourceTypes.DEFERRED_TYPES\r\n                                                 .get(new ResourceLocation(SFM.MOD_ID, \"infusion\")));\r\n            case PIGMENT -> Optional.of(SFMResourceTypes.DEFERRED_TYPES\r\n                                                .get(new ResourceLocation(SFM.MOD_ID, \"pigment\")));\r\n            case SLURRY -> Optional.of(SFMResourceTypes.DEFERRED_TYPES\r\n                                               .get(new ResourceLocation(SFM.MOD_ID, \"slurry\")));\r\n            default -> Optional.empty();\r\n        };\r\n    }\r\n\r\n    public static String gatherInspectionResults(BlockEntity blockEntity) {\r\n        if (!(blockEntity instanceof ISideConfiguration sideConfiguration)) {\r\n            return \"\";\r\n        }\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"-- Mekanism stuff\\n\");\r\n        TileComponentConfig config = sideConfiguration.getConfig();\r\n        for (TransmissionType type : TransmissionType.values()) {\r\n            getResourceType(type)\r\n                    .flatMap(SFMResourceTypes.DEFERRED_TYPES::getResourceKey)\r\n                    .ifPresent(resourceTypeKey -> {\r\n                        ConfigInfo info = config.getConfig(type);\r\n                        if (info != null) {\r\n                            Set<Direction> outputSides = info.getSides(DataType::canOutput);\r\n                            if (!outputSides.isEmpty()) {\r\n                                sb\r\n                                        .append(\"-- \")\r\n                                        .append(Constants.LocalizationKeys.CONTAINER_INSPECTOR_MEKANISM_MACHINE_OUTPUTS.getString())\r\n                                        .append(\"\\n\");\r\n                                sb.append(\"INPUT \").append(resourceTypeKey.location()).append(\":: FROM target \");\r\n                                sb.append(outputSides\r\n                                                  .stream()\r\n                                                  .map(DirectionQualifier::directionToString)\r\n                                                  .collect(Collectors.joining(\", \")));\r\n                                sb.append(\" SIDE\\n\");\r\n                            }\r\n\r\n                            Set<Direction> inputSides = new HashSet<>();\r\n                            for (RelativeSide side : RelativeSide.values()) {\r\n                                DataType dataType = info.getDataType(side);\r\n                                if (dataType == DataType.INPUT\r\n                                    || dataType == DataType.INPUT_1\r\n                                    || dataType == DataType.INPUT_2\r\n                                    || dataType == DataType.INPUT_OUTPUT) {\r\n                                    inputSides.add(side.getDirection(sideConfiguration.getDirection()));\r\n                                }\r\n                            }\r\n                            if (!inputSides.isEmpty()) {\r\n                                sb\r\n                                        .append(\"-- \")\r\n                                        .append(Constants.LocalizationKeys.CONTAINER_INSPECTOR_MEKANISM_MACHINE_INPUTS.getString())\r\n                                        .append(\"\\n\");\r\n                                sb.append(\"OUTPUT \").append(resourceTypeKey.location()).append(\":: TO target \");\r\n                                sb.append(inputSides\r\n                                                  .stream()\r\n                                                  .map(DirectionQualifier::directionToString)\r\n                                                  .collect(Collectors.joining(\", \")));\r\n                                sb.append(\" SIDE\\n\");\r\n                            }\r\n                        }\r\n                    });\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static void register(DeferredRegister<ResourceType<?, ?, ?>> types) {\r\n        types.register(\r\n                \"gas\",\r\n                GasResourceType::new\r\n        );\r\n        types.register(\r\n                \"infusion\",\r\n                InfuseResourceType::new\r\n        );\r\n\r\n        types.register(\r\n                \"pigment\",\r\n                PigmentResourceType::new\r\n        );\r\n        types.register(\r\n                \"slurry\",\r\n                SlurryResourceType::new\r\n        );\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\client\\gui\\screen\\ExtendedButtonWithTooltip.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.client.gui.screen;\r\n\r\nimport net.minecraft.client.gui.components.Tooltip;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.neoforged.neoforge.client.gui.widget.ExtendedButton;\r\n\r\npublic class ExtendedButtonWithTooltip extends ExtendedButton {\r\n    public ExtendedButtonWithTooltip(\r\n            int xPos,\r\n            int yPos,\r\n            int width,\r\n            int height,\r\n            Component displayString,\r\n            OnPress handler,\r\n            Tooltip tooltip\r\n    ) {\r\n        super(xPos, yPos, width, height, displayString, handler);\r\n        setTooltip(tooltip);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundDiskItemSetProgramPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.item.DiskItem;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundDiskItemSetProgramPacket(\r\n        String programString,\r\n        InteractionHand hand\r\n) {\r\n\r\n    public static void encode(ServerboundDiskItemSetProgramPacket msg, FriendlyByteBuf buf) {\r\n        buf.writeUtf(msg.programString, Program.MAX_PROGRAM_LENGTH);\r\n        buf.writeEnum(msg.hand);\r\n    }\r\n\r\n    public static ServerboundDiskItemSetProgramPacket decode(\r\n            FriendlyByteBuf buf\r\n    ) {\r\n        return new ServerboundDiskItemSetProgramPacket(\r\n                buf.readUtf(Program.MAX_PROGRAM_LENGTH),\r\n                buf.readEnum(InteractionHand.class)\r\n        );\r\n    }\r\n\r\n    public static void handle(\r\n            ServerboundDiskItemSetProgramPacket msg, NetworkEvent.Context ctx\r\n    ) {\r\n        ctx.enqueueWork(() -> {\r\n            var sender = ctx.getSender();\r\n            if (sender == null) {\r\n                return;\r\n            }\r\n            var stack = sender.getItemInHand(msg.hand);\r\n            if (stack.getItem() instanceof DiskItem) {\r\n                DiskItem.setProgram(stack, msg.programString);\r\n                DiskItem.updateDetails(stack, null);\r\n            }\r\n\r\n        });\r\n        ctx.setPacketHandled(true);\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMBlocks.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.block.*;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\n\r\nimport java.util.function.Supplier;\r\n\r\n\r\npublic class SFMBlocks {\r\n    private static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(BuiltInRegistries.BLOCK, SFM.MOD_ID);\r\n    public static final Supplier<Block> MANAGER_BLOCK = BLOCKS.register(\"manager\", ManagerBlock::new);\r\n    public static final Supplier<Block> PRINTING_PRESS_BLOCK = BLOCKS.register(\r\n            \"printing_press\",\r\n            PrintingPressBlock::new\r\n    );\r\n    public static final Supplier<Block> WATER_TANK_BLOCK = BLOCKS.register(\"water_tank\", WaterTankBlock::new);\r\n    public static final Supplier<Block> CABLE_BLOCK = BLOCKS.register(\"cable\", CableBlock::new);\r\n    public static final Supplier<Block> BATTERY_BLOCK = BLOCKS.register(\"battery\", BatteryBlock::new);\r\n    public static final Supplier<Block> TEST_BARREL_BLOCK = BLOCKS.register(\"test_barrel\", TestBarrelBlock::new);\r\n\r\n    public static void register(IEventBus bus) {\r\n        BLOCKS.register(bus);\r\n    }\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\command\\package-info.java\r\n\r\n````java\r\n\r\n@ParametersAreNonnullByDefault\r\n@MethodsReturnNonnullByDefault\r\n@FieldsAreNonnullByDefault\r\npackage ca.teamdman.sfm.common.command;\r\n\r\nimport net.minecraft.FieldsAreNonnullByDefault;\r\nimport net.minecraft.MethodsReturnNonnullByDefault;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\registry\\SFMBlockEntities.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.registry;\r\n\r\n\r\nimport ca.teamdman.sfm.SFM;\r\nimport ca.teamdman.sfm.common.blockentity.BatteryBlockEntity;\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.blockentity.PrintingPressBlockEntity;\r\nimport ca.teamdman.sfm.common.blockentity.WaterTankBlockEntity;\r\nimport net.minecraft.core.registries.BuiltInRegistries;\r\nimport net.minecraft.world.level.block.entity.BlockEntityType;\r\nimport net.neoforged.bus.api.IEventBus;\r\nimport net.neoforged.neoforge.registries.DeferredRegister;\r\n\r\nimport java.util.function.Supplier;\r\n\r\n@SuppressWarnings(\"DataFlowIssue\")\r\npublic final class SFMBlockEntities {\r\n\r\n    private static final DeferredRegister<BlockEntityType<?>> BLOCK_ENTITY_TYPES = DeferredRegister.create(\r\n            BuiltInRegistries.BLOCK_ENTITY_TYPE,\r\n            SFM.MOD_ID\r\n    );\r\n\r\n    public static void register(IEventBus bus) {\r\n        BLOCK_ENTITY_TYPES.register(bus);\r\n    }\r\n\r\n    public static final Supplier<BlockEntityType<ManagerBlockEntity>> MANAGER_BLOCK_ENTITY = BLOCK_ENTITY_TYPES.register(\r\n            \"manager\",\r\n            () -> BlockEntityType.Builder\r\n                    .of(ManagerBlockEntity::new, SFMBlocks.MANAGER_BLOCK.get())\r\n                    .build(null)\r\n    );\r\n    public static final Supplier<BlockEntityType<PrintingPressBlockEntity>> PRINTING_PRESS_BLOCK_ENTITY = BLOCK_ENTITY_TYPES.register(\r\n            \"printing_press\",\r\n            () -> BlockEntityType.Builder\r\n                    .of(PrintingPressBlockEntity::new, SFMBlocks.PRINTING_PRESS_BLOCK.get())\r\n                    .build(null)\r\n    );\r\n\r\n    public static final Supplier<BlockEntityType<WaterTankBlockEntity>> WATER_TANK_BLOCK_ENTITY = BLOCK_ENTITY_TYPES.register(\r\n            \"water_tank\",\r\n            () -> BlockEntityType.Builder\r\n                    .of(WaterTankBlockEntity::new, SFMBlocks.WATER_TANK_BLOCK.get())\r\n                    .build(null)\r\n    );\r\n\r\n    public static final Supplier<BlockEntityType<BatteryBlockEntity>> BATTERY_BLOCK_ENTITY = BLOCK_ENTITY_TYPES.register(\r\n            \"battery\",\r\n            () -> BlockEntityType.Builder\r\n                    .of(BatteryBlockEntity::new, SFMBlocks.BATTERY_BLOCK.get())\r\n                    .build(null)\r\n    );\r\n\r\n\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\net\\ServerboundManagerProgramPacket.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.net;\r\n\r\nimport ca.teamdman.sfm.common.blockentity.ManagerBlockEntity;\r\nimport ca.teamdman.sfm.common.containermenu.ManagerContainerMenu;\r\nimport ca.teamdman.sfm.common.registry.SFMPackets;\r\nimport ca.teamdman.sfml.ast.Program;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.neoforged.neoforge.network.NetworkEvent;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic record ServerboundManagerProgramPacket(\r\n        int windowId,\r\n        BlockPos pos,\r\n        String program\r\n) {\r\n\r\n    public static void encode(ServerboundManagerProgramPacket msg, FriendlyByteBuf friendlyByteBuf) {\r\n        friendlyByteBuf.writeVarInt(msg.windowId());\r\n        friendlyByteBuf.writeBlockPos(msg.pos());\r\n        friendlyByteBuf.writeUtf(msg.program(), Program.MAX_PROGRAM_LENGTH);\r\n    }\r\n\r\n    public static ServerboundManagerProgramPacket decode(FriendlyByteBuf friendlyByteBuf) {\r\n        return new ServerboundManagerProgramPacket(\r\n                friendlyByteBuf.readVarInt(),\r\n                friendlyByteBuf.readBlockPos(),\r\n                friendlyByteBuf.readUtf(Program.MAX_PROGRAM_LENGTH)\r\n        );\r\n    }\r\n\r\n    public static void handle(ServerboundManagerProgramPacket msg, NetworkEvent.Context context) {\r\n        SFMPackets.handleServerboundContainerPacket(\r\n                context,\r\n                ManagerContainerMenu.class,\r\n                ManagerBlockEntity.class,\r\n                msg.pos,\r\n                msg.windowId,\r\n                (menu, manager) -> manager.setProgram(msg.program())\r\n        );\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n## D:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\exclude\\PigmentResourceType.java\r\n\r\n````java\r\npackage ca.teamdman.sfm.common.resourcetype.exclude;\r\n\r\nimport ca.teamdman.sfm.common.resourcetype.ResourceType;\r\nimport mekanism.api.Action;\r\nimport mekanism.api.MekanismAPI;\r\nimport mekanism.api.chemical.pigment.IPigmentHandler;\r\nimport mekanism.api.chemical.pigment.Pigment;\r\nimport mekanism.api.chemical.pigment.PigmentStack;\r\nimport net.minecraft.core.Registry;\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\nimport net.neoforged.neoforge.common.capabilities.CapabilityManager;\r\nimport net.neoforged.neoforge.common.capabilities.CapabilityToken;\r\nimport org.apache.commons.lang3.NotImplementedException;\r\n\r\npublic class PigmentResourceType extends ResourceType<PigmentStack, Pigment, IPigmentHandler> {\r\n    public static final Capability<IPigmentHandler> CAP = CapabilityManager.get(new CapabilityToken<>() {\r\n    });\r\n\r\n    public PigmentResourceType() {\r\n        super(CAP);\r\n    }\r\n\r\n    @Override\r\n    public long getAmount(PigmentStack stack) {\r\n        return stack.getAmount();\r\n    }\r\n\r\n    @Override\r\n    public PigmentStack getStackInSlot(IPigmentHandler handler, int slot) {\r\n        return handler.getChemicalInTank(slot);\r\n    }\r\n\r\n    @Override\r\n    public PigmentStack extract(IPigmentHandler handler, int slot, long amount, boolean simulate) {\r\n        return handler.extractChemical(slot, amount, simulate ? Action.SIMULATE : Action.EXECUTE);\r\n    }\r\n\r\n    @Override\r\n    public int getSlots(IPigmentHandler handler) {\r\n        return handler.getTanks();\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(PigmentStack stack) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n\r\n    @Override\r\n    public long getMaxStackSize(IPigmentHandler handler, int slot) {\r\n        return handler.getTankCapacity(slot);\r\n    }\r\n\r\n    @Override\r\n    public PigmentStack insert(\r\n            IPigmentHandler handler,\r\n            int slot,\r\n            PigmentStack stack,\r\n            boolean simulate\r\n    ) {\r\n        return handler.insertChemical(slot, stack, simulate ? Action.SIMULATE : Action.EXECUTE);\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(PigmentStack stack) {\r\n        return stack.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public PigmentStack getEmptyStack() {\r\n        return PigmentStack.EMPTY;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesStackType(Object o) {\r\n        return o instanceof PigmentStack;\r\n    }\r\n\r\n    @Override\r\n    public boolean matchesCapabilityType(Object o) {\r\n        return o instanceof IPigmentHandler;\r\n    }\r\n\r\n\r\n    @Override\r\n    public Registry<Pigment> getRegistry() {\r\n        throw new NotImplementedException();\r\n//        return MekanismAPI.pigmentRegistry();\r\n    }\r\n\r\n    @Override\r\n    public Pigment getItem(PigmentStack stack) {\r\n        return stack.getType();\r\n    }\r\n\r\n    @Override\r\n    public PigmentStack copy(PigmentStack stack) {\r\n        return stack.copy();\r\n    }\r\n\r\n    @Override\r\n    protected PigmentStack setCount(PigmentStack stack, long amount) {\r\n        stack.setAmount(amount);\r\n        return stack;\r\n    }\r\n}\r\n\r\n````\r\n\r\n\r\n```https://neoforged.net/news/2023-retrospection/\r\n\r\n2023: The Good, The Bad... and The Fork\r\nNeoForged Team avatar NeoForged Team  January 01, 2024News\r\n2023 was certainly an eventful year for the Forge community. \ud83d\ude05\r\n\r\nNow that we\u2019re entering 2024, it\u2019s time we, the NeoForged team, do some retrospection on what\u2019s happened in the past 6 months.\r\n\r\nThe Fork\r\nLet\u2019s begin with addressing the elephant in the room: who even are we?\r\n\r\nNeoForge is a fork of the Minecraft Forge project. It was officially announced (ahead of schedule) on July 12, 2023, and nearly everyone from the original Forge team has joined NeoForged, with one obvious exception: LexManos.\r\n\r\nThere were many motivations and reasons which caused the fork; the most obvious ones were disagreements between the team (particularly the triage team) and the management. Some of the lesser reasons were the freedom to play around with and refactor much of the internal structure and surrounding infrastructure, from the modding API to the modloading system. These changes diverge drastically with Forge, which historically has held strict stances against changes to certain areas and against larger reworks in general, so starting with a \u201ccleaner\u201d slate was easier.\r\n\r\nThe Good\r\nOur team has grown by 6 members, but we are still in search of more members such as maintainers of our repositories. (Interested? Apply by filling up our application form.)\r\n\r\nSince the fork, we have worked on improving several areas of the codebase. For instance, we have rewritten our Gradle plugin and now provide support for Parchment by default.\r\n\r\nAnd as a result, we have made various changes to the NeoForge API:\r\n\r\nOur first refactors were suffered (in the good sense of the word) by EventBus (our fork of EventBus), improving its performance and internals, alongside some modder-facing benefits like preventing (accidentally) listening to abstract classes;\r\nIn 1.20.2, the first major overhaul landed: the registry system was significantly overhauled (#257), simplifying its internals and improving consistency with vanilla;\r\nSince 1.20.2 we are shipping MixinExtras by default (#303) so that modders can write more compatible mixins;\r\nTransitioning to 1.20.3, the Capabilities system has been reworked (#73) as our second major overhaul, splitting them into data attachments and API providers, and addressing some long-standing flaws of the old system (for example, the old system didn\u2019t support Block capabilities. Yes, you can now use your favourite pipe mod to extract fluids from cauldrons);\r\n1.20.4 was full of changes too:\r\n\r\nA test framework (#291) was added, making the process of testing Neo features more straightforward, and integrating nicely with Mojang\u2019s GameTest system, improving as such the long-term stability of the platform. This framework will be made available to mods in the future;\r\nA way for mods to mark themselves as incompatible with other mods was also introduced (#397);\r\nThe chunk pre-generation command /neoforged generate (#364) was faced with various improvements, especially performance ones. (For those unaware, the command can be used by server owners to pre-generate chunks, so gameplay doesn\u2019t cause worldgen between all players simultaneously.) We would like to thank Jasmine and Gegy for allowing us to use their mod as a basis for the new command;\r\nWe have set up a Crowdin project where you can submit translations for different languages (and request new languages to be translated to); and\r\nOur third major overhaul: The Networking Refactor.\r\nWe have additionally made several performance improvements to ModLauncher and its sister projects, including work on reducing start-up times.\r\n\r\nThese changes are accompanied by some major infrastructure changes too:\r\n\r\nWe have also introduced a system for Publishing PRs to GitHub Packages that will make testing changes easier (for users and modders) before they\u2019re merged properly into the version everyone uses.\r\nMost (if not all, baring one exception) of our projects are now built with GitHub Actions.\r\nWe\u2019re currently planning to overhaul our infrastructure to a new server setup in the somewhat-near future.\r\nOn the Discord server side, we relaxed our rules regarding coremods and older versions; you can now discuss and receive support for those freely. Additionally, discussion of other loaders is no longer banned\u2014it\u2019s encouraged even, as long as it is productive. After all, NeoForge doesn\u2019t exist in a vacuum, and all APIs have their objective downsides and upsides.\r\n\r\nAdoption\r\nEven though it is too early to draw conclusions (as 1.20.1 is the de facto target for modpacks in the 1.20 lifecycle), we are seeing more and more mods using NeoForge starting with 1.20.4.\r\n\r\nWe are also happy to report that CurseForge, Modrinth, Prism and FTB have all added support for NeoForge in their launchers, which we\u2019re grateful for!\r\n\r\nTime for some stats - in classic Wrapped style\r\nNeoForged has obviously not existed for a full year, but here are some stats on the 173 days since our public departure in 2023:\r\n\r\nWe have served an average of a terabyte\u2019s (1000 gigabytes) worth of Maven artifacts every month, with 10 million requests just in December.\r\nOver 200 PRs have been merged. That\u2019s more than a PR per day!\r\nOver 95 issues have been closed as completed. That\u2019s one every two days!\r\nThe bad\r\nThe world, however, isn\u2019t only pink and bright. We\u2019ve made mistakes, and we own up to them.\r\n\r\nWe apologise for the sudden, disorganized and confusing rebranding of the Discord server. For reasons not worth going into (nor relevant in this post), we had to go public months before we anticipated, so we were caught off guard. It was a mess, and if we could turn back time and do it better, we would.\r\n\r\nWe also apologise for not providing the stable 1.20.1 environment we promised. After 1.20.2 was released, we neglected 1.20.1 and still are. Development efforts on 1.20.1 are better spent on Forge rather than NeoForge.\r\n\r\nDocumentation (or lack thereof) is something Forge has always had problems with, and we too suffer from a pressing lack of documentation all around the toolchain and the API too. We have made several changes in the past months, while letting our existing documentation slowly get outdated. In 2024, we\u2019ll look at improving this sensitive yet important area of the project.\r\n\r\nWe had to find our pace one way or another, but in the end we\u2019re sorry you all had to see us fight and argue. We hope to improve and learn from our mistakes in the year that comes.\r\n\r\nSo\u2026 what\u2019s next?\r\nWe don\u2019t have a lot of plans for 2024, but some of the more pressing matters include:\r\n\r\nWith all refactors taken care of, a stable 1.20.4 release can be expected within the first two weeks of 2024, if not sooner;\r\nA rework of FML\u2014a beast of complexity that we are trying to simplify\u2014has been due for a long while. You can follow the progress and provide your ideas in the FML Clean-up Discord thread;\r\nWe are collaborating with Mumfrey to hopefully get Mixin out of its 2-year-long stagnation. If that doesn\u2019t pan out, we will be open to alternative;\r\nWe are working on improving the caching of NeoGradle, to reduce build times;\r\n1.21 is expected to unify the tag namespace between NeoForge and Fabric through TelepathicGrunt\u2019s efforts via the unification PR;\r\nAs we\u2019ve already mentioned: docs, docs, and more docs!\r\nSome potential changes to the transfer (IItemHandler, IFluidHandler, IEnergyStorage) capabilities are also being discussed in the Transfer rework thread;\r\nReplacing JavaScript coremods with Java-based coremods is also on the table, at the Coremod changes thread.\r\nAs always, we appreciate your input, and we\u2019d be grateful if you would provide us with feedback or ideas in our Discord server or in a GitHub Discussion.\r\n\r\n\u2026and thanks for all the fish\r\nNow, for the fun part you were all waiting for: the thanking!\r\n\r\nNeoForge wouldn\u2019t have been possible without the team members that left Forge with us, for which we thank them.\r\n\r\nWe thank all of our contributors to our many projects during the last 6 months, and we wholeheartedly thank YOU for your support - our achievements are thanks to the community feedback and the people who give us the chance to make errors and bounce back, only to grow stronger and stronger.\r\n\r\nHappy 2024, everyone, and as always, happy porting! \ud83c\udf89\r\n```\r\n\r\n```https://neoforged.net/news/20.3capability-rework/\r\nThe Capability rework\r\nTechnici4n avatar Technici4n  December 05, 2023News\r\nIntroduction\r\nOur initial 20.3 release comes with a fundamental redesign of the capability system, with the goal of fixing all the issues that were found in the previous iteration after years of usage.\r\n\r\nMost importantly, there are now two different systems to replace what was previously known as \u201ccapabilities\u201d:\r\n\r\nData attachments allow adding arbitrary data to block entities, chunks, entities, and item stacks.\r\nCapabilities allow querying behavior instances from blocks, entities, and item stacks.\r\nData attachments\r\nThe attachment system allows mods to attach arbitrary data objects to block entities, chunks, entities, and stacks.\r\n\r\nTo use the system, you need to register an AttachmentType. The attachment type contains:\r\n\r\na default value supplier to create the instance when the data is first accessed, or to compare stacks that have the data and stacks that don\u2019t have it;\r\nan optional serializer if the attachment should be persisted;\r\nadditional configuration options for the attachment, for example the copyOnDeath flag.\r\nThere are a few ways to provide an attachment serializer: directly implementing IAttachmentSerializer, implementing INBTSerializable and using the static AttachmentSerializer.serializable() method to create the builder, or providing a codec to the builder. (This latter option is not recommended for item stacks due to relatively slowness).\r\n\r\nIn any case, we recommend using a DeferredRegister for registration:\r\n\r\n// Create the DeferredRegister for attachment types\r\nprivate static final DeferredRegister<AttachmentType<?>> ATTACHMENT_TYPES = DeferredRegister.create(NeoForgeRegistries.Keys.ATTACHMENT_TYPES, MOD_ID);\r\n\r\n// Serialization via INBTSerializable\r\nprivate static final Supplier<AttachmentType<ItemStackHandler>> HANDLER = ATTACHMENT_TYPES.register(\r\n        \"handler\", () -> AttachmentType.serializable(() -> new ItemStackHandler(1)).build());\r\n// Serialization via codec\r\nprivate static final Supplier<AttachmentType<Integer>> MANA = ATTACHMENT_TYPES.register(\r\n        \"mana\", () -> AttachmentType.builder(() -> 0).serialize(Codec.INT).build());\r\n// No serialization\r\nprivate static final Supplier<AttachmentType<SomeCache>> SOME_CACHE = ATTACHMENT_TYPES.register(\r\n        \"some_cache\", () -> AttachmentType.builder(() -> new SomeCache()).build()\r\n);\r\n\r\n// Don't forget to register the DeferredRegister to your mod bus:\r\nATTACHMENT_TYPES.register(modBus);\r\nOnce the attachment type is registered, it can be used on any holder object. Calling getData if no data is present will attach a new default instance.\r\n\r\n// Get the ItemStackHandler if it already exists, else attach a new one:\r\nItemStackHandler stackHandler = stack.getData(HANDLER);\r\n// Get the current player mana if it is available, else attach 0:\r\nint playerMana = player.getData(MANA);\r\n// And so on...\r\nIf attaching a default instance is not desired, a hasData check can be added:\r\n\r\n// Check if the stack has the HANDLER attachment before doing anything.\r\nif (stack.hasData(HANDLER)) {\r\n    ItemStackHandler stackHandler = stack.getData(HANDLER);\r\n    // Do something with stack.getData(HANDLER).\r\n}\r\nThe data can also be updated with setData:\r\n\r\n// Increment mana by 10.\r\nplayer.setData(MANA, player.getData(MANA) + 10);\r\nUsually, block entities and chunks need to be marked as dirty when they are modified (with setChanged and setUnsaved(true)). This is done automatically for calls to setData:\r\n\r\nchunk.setData(MANA, chunk.getData(MANA) + 10); // will call setUnsaved automatically\r\nbut if you modify some data that you obtained from getData then you must mark block entities and chunks as dirty explicitly:\r\n\r\nvar mana = chunk.getData(MUTABLE_MANA);\r\nmana.set(10);\r\nchunk.setUnsaved(true); // must be done manually because we did not use setData\r\nBefore we move on to capabilities, here are a few points to take note of with respect to the data attachment system:\r\n\r\nLevel attachments were removed: please use SavedData instead.\r\nSerializable item stack attachments are always synced with the client now.\r\nEntity attachments are copied when a player is teleported back from the end. (Previously this was not the case).\r\nEntity attachments that have copyOnDeath set in their builder will automatically be copied on player death (and on mob conversion).\r\nFuture work for attachments\r\nWe have plans to work on the following improvements to the attachment system over the coming weeks:\r\n\r\nAttachments in recipe JSONs: Just like we add support for count and NBT to recipe results, we will add support to specify data attachments in recipe result JSONs.\r\nSyncable data attachments: Currently, all serializable item stack attachments are synced automatically from the logical server to the logical client. We will look into opt-in syncing for block entity, chunk, and entity attachments in the future.\r\nCustom copy handler: Currently, all data attachments are copied by serializing to NBT and then deserializing a new copy. This is a good default, but we want to allow modders to provide their own copy implementation for better performance.\r\nWe are open to other suggestions as well, don\u2019t hesitate to get in touch!\r\n\r\nCapabilities\r\nCapabilities are designed to separate what a block, entity or item stack can do from how it does it. If you are wondering whether capabilities are the right tool for a job, ask yourself the following questions:\r\n\r\nDo I only care about what a block, entity or item stack can do, but not about how it does it?\r\nIs the what, the behavior, only available for some blocks, entities, or item stacks, but not all of them?\r\nIs the how, the implementation of that behavior, dependent on the specific block, entity or item stack?\r\nHere are a few examples of good capability usage:\r\n\r\n\u201cI want to count how many items are in some entity, but I do not know how the entity might store them.\u201d - Yes, use the IItemHandler capability.\r\n\u201cI want to fill some item stack with power, but I do not know how the item stack might store it.\u201d - Yes, use the IEnergyStorage capability.\r\n\u201cI want to apply some color to whatever block a player is currently targeting, but I do not know how the block will be transformed\u201d. - Yes. NeoForge does not provide a capability to color blocks, but you can implement one yourself.\r\nHere is an example of discouraged capability usage:\r\n\r\n\u201cI want to check if an entity is within the range of my machine.\u201d - No, use a helper method instead.\r\nNeoForge supports capabilities for blocks, entities, and item stacks.\r\n\r\nCapabilities allow looking up implementations of some APIs with some dispatching logic. The following kinds of capabilities are implemented in NeoForge:\r\n\r\nBlockCapability: capabilities for blocks and block entities; behavior depends on the specific Block.\r\nEntityCapability: capabilities for entities: behavior dependends on the specific EntityType.\r\nItemCapability: capabilities for item stacks: behavior depends on the specific Item.\r\nCreating capabilities\r\nNeoForge already defines common capabilities, which we recommend for compatibility with other mods. For example:\r\n\r\n// Standard item handler BlockCapability\r\nCapabilities.ItemHandler.BLOCK\r\n// Standard item handler ItemCapability\r\nCapabilities.ItemHandler.ITEM\r\n\r\n// See the `Capabilities` class for the full list.\r\nIf these are not sufficient, you can create your own capabilities. Creating a capability is a single function call, and the resulting object should be stored in a static final field. The following parameters must be provided:\r\n\r\nThe name of the capability. Creating a capability with the same name multiple times will always return the same object. Capabilities with different names are completely independent, and can be used for different purposes.\r\nThe behavior type that is being queried. This is the T type parameter.\r\nThe type for additional context in the query. This is the C type parameter.\r\nFor example, here is how a capability for side-aware block IItemHandlers might be declared:\r\n\r\npublic static final BlockCapability<IItemHandler, @Nullable Direction> ITEM_HANDLER_BLOCK =\r\n    BlockCapability.create(\r\n        // Provide a name to uniquely identify the capability.\r\n        new ResourceLocation(\"mymod\", \"item_handler\"),\r\n        // Provide the queried type. Here, we want to look up `IItemHandler` instances.\r\n        IItemHandler.class,\r\n        // Provide the context type. We will allow the query to receive an extra `Direction side` parameter.\r\n        Direction.class);\r\nA @Nullable Direction is so common for blocks that there is a dedicated helper:\r\n\r\npublic static final BlockCapability<IItemHandler, @Nullable Direction> ITEM_HANDLER_BLOCK =\r\n    BlockCapability.createSided(\r\n        // Provide a name to uniquely identify the capability.\r\n        new ResourceLocation(\"mymod\", \"item_handler\"),\r\n        // Provide the queried type. Here, we want to look up `IItemHandler` instances.\r\n        IItemHandler.class);\r\nIf no context is required, Void should be used. There is also a dedicated helper for context-less capabilities:\r\n\r\npublic static final BlockCapability<IItemHandler, Void> ITEM_HANDLER_NO_CONTEXT =\r\n    BlockCapability.createVoid(\r\n        // Provide a name to uniquely identify the capability.\r\n        new ResourceLocation(\"mymod\", \"item_handler_no_context\"),\r\n        // Provide the queried type. Here, we want to look up `IItemHandler` instances.\r\n        IItemHandler.class);\r\nFor entities and item stacks, similar methods exist in EntityCapability and ItemCapability respectively.\r\n\r\nQuerying capabilities\r\nOnce we have our BlockCapability, EntityCapability, or ItemCapability object in a static field, we can query a capability.\r\n\r\nEntities and item stacks have essentially the same API as before, but with a @Nullable T return type instead of LazyOptional<T>. Simply call getCapability with the capability object and the context:\r\n\r\nvar object = entity.getCapability(CAP, context);\r\nif (object != null) {\r\n    // Use object\r\n}\r\nvar object = stack.getCapability(CAP, context);\r\nif (object != null) {\r\n    // Use object\r\n}\r\nBlock capabilities are used differently, to accommodate for capabilities provided by blocks without block entities. The query is performed on a level:\r\n\r\nvar object = level.getCapability(CAP, pos, context);\r\nif (object != null) {\r\n    // Use object\r\n}\r\nIf the block entity and/or the block state is known, they can be passed to save on query time:\r\n\r\nvar object = level.getCapability(CAP, pos, blockState, blockEntity, context);\r\nif (object != null) {\r\n    // Use object\r\n}\r\nTo give a more concrete example, here is how one might query an IItemHandler capability for a block, from the Direction.NORTH side:\r\n\r\nIItemHandler handler = level.getCapability(Capabilities.ItemHandler.BLOCK, pos, Direction.NORTH);\r\nif (handler != null) {\r\n    // Use the handler for some item-related operation.\r\n}\r\nBlock capability caching\r\nFor efficient queries and automatic caching, use BlockCapabilityCache instead of directly calling level.getCapability. This is a more powerful replacement for the old LazyOptional invalidation system.\r\n\r\nWhen a capability is looked up, the system will perform the following steps under the hood:\r\n\r\nFetch block entity and block state if they were not supplied.\r\nFetch registered capability providers. (More on this below).\r\nIterate the providers and ask them if they can provide the capability.\r\nOne of the providers will return a capability instance, potentially allocating a new object.\r\nThe implementation is rather efficient, but for queries that are performed frequently, for example every game tick, these steps can take a significant amount of server time. The BlockCapabilityCache system provides a dramatic speedup for capabilities that are frequently queried at a given position.\r\n\r\nGenerally, a BlockCapabilityCache will be created once and then stored in a field of the object performing frequent capability queries. When exactly you store the cache is up to you. The cache must be provided with the capability to query, the level, the position, and the query context.\r\n\r\n// Declare the field:\r\nprivate BlockCapabilityCache<IItemHandler, @Nullable Direction> capCache;\r\n\r\n// Later, for example in `onLoad` for a block entity:\r\nthis.capCache = BlockCapabilityCache.create(\r\n        Capabilities.ItemHandler.BLOCK, // capability to cache\r\n        level, // level\r\n        pos, // target position\r\n        Direction.NORTH // context\r\n);\r\nQuerying the cache is then done with getCapability():\r\n\r\nIItemHandler handler = this.capCache.getCapability();\r\nif (handler != null) {\r\n    // Use the handler for some item-related operation.\r\n}\r\nThe cache is automatically cleared by the garbage collector, there is no need to unregister it.\r\n\r\nIt is also possible to receive notifications when the capability object changes! This includes capabilities changing (oldHandler != newHandler), becoming unavailable (null) or becoming available again (not null anymore).\r\n\r\nThe cache then needs to be created with two additional parameters:\r\n\r\nA validity check, that is used to determine if the cache is still valid. In the simplest usage as a block entity field, () -> !this.isRemoved() will do.\r\nAn invalidation listener, that is called when the capability changes. This is where you can react to capability changes, removals, or appearances.\r\n// With optional invalidation listener:\r\nthis.capCache = BlockCapabilityCache.create(\r\n        Capabilities.ItemHandler.BLOCK, // capability to cache\r\n        level, // level\r\n        pos, // target position\r\n        Direction.NORTH, // context\r\n        () -> !this.isRemoved(), // validity check (because the cache might outlive the object it belongs to)\r\n        () -> onCapInvalidate() // invalidation listener\r\n);\r\nFor this system to work, modders must call level.invalidateCapabilities(pos) whenever a capability changes, appears, or disappears.\r\n\r\n// whenever a capability changes, appears, or disappears:\r\nlevel.invalidateCapabilities(pos);\r\nNeoForge already handles common cases such as chunk load/unloads and block entity creation/removal, but other cases need to be handled explicitly by modders. For example, modders must invalidate capabilities in the following cases:\r\n\r\nIf the configuration of a capability-providing block entity changes.\r\nIf a capability-providing block (without a block entity) is placed or changes state, by overriding onPlace.\r\nIf a capability-providing block (without a block entity) is removed, by overriding onRemove.\r\nFor a plain block example, refer to the ComposterBlock.java file.\r\n\r\nFor more information, refer to the javadoc of IBlockCapabilityProvider.\r\n\r\nRegistering capabilities\r\nA capability provider is what ultimately supplies a capability. A capability provider is function that can either return a capability instance, or null if it cannot provide the capability. Providers are specific to:\r\n\r\nthe given capability that they are providing for, and\r\nthe block instance, block entity type, entity type, or item instance that they are providing for.\r\nThey need to be registered in the RegisterCapabilitiesEvent.\r\n\r\nBlock providers are registered with registerBlock. For example:\r\n\r\nprivate static void registerCapabilities(RegisterCapabilitiesEvent event) {\r\n    event.registerBlock(\r\n        Capabilities.ItemHandler.BLOCK, // capability to register for\r\n        (level, pos, state, be, side) -> <return the IItemHandler>,\r\n        // blocks to register for\r\n        MY_ITEM_HANDLER_BLOCK,\r\n        MY_OTHER_ITEM_HANDLER_BLOCK);\r\n}\r\nIn general, registration will be specific to some block entity types, so the registerBlockEntity helper method is provided as well:\r\n\r\n    event.registerBlockEntity(\r\n        Capabilities.ItemHandler.BLOCK, // capability to register for\r\n        MY_BLOCK_ENTITY_TYPE, // block entity type to register for\r\n        (myBlockEntity, side) -> <return the IItemHandler for myBlockEntity and side>);\r\nEntity registration is similar, using registerEntity:\r\n\r\nevent.registerEntity(\r\n    Capabilities.ItemHandler.ENTITY, // capability to register for\r\n    MY_ENTITY_TYPE, // entity type to register for\r\n    (myEntity, context) -> <return the IItemHandler for myEntity>);\r\nItem registration is similar too. Note that the provider receives the stack:\r\n\r\nevent.registerItem(\r\n    Capabilities.ItemHandler.ITEM, // capability to register for\r\n    (itemStack, context) -> <return the IItemHandler for the itemStack>,\r\n    // items to register for\r\n    MY_ITEM,\r\n    MY_OTHER_ITEM);\r\nIf for some reason you need to register a provider for all blocks, entities, or items, you will need to iterate the corresponding registry and register the provider for each object.\r\n\r\nFor example, NeoForge uses this system to register a fluid handler capability for all buckets:\r\n\r\n// For reference, you can find this code in the `CapabilityHooks` class.\r\nfor (Item item : BuiltInRegistries.ITEM) {\r\n    if (item.getClass() == BucketItem.class) {\r\n        event.registerItem(Capabilities.FluidHandler.ITEM, (stack, ctx) -> new FluidBucketWrapper(stack), item);\r\n    }\r\n}\r\nProviders are asked for a capability in the order that they are registered. Should you want to run before a provider that NeoForge already registers for one of your objects, register your RegisterCapabilitiesEvent handler with a higher priority. For example:\r\n\r\nmodBus.addListener(RegisterCapabilitiesEvent.class, event -> {\r\n    event.registerItem(\r\n        Capabilities.FluidHandler.ITEM,\r\n        (stack, ctx) -> new MyCustomFluidBucketWrapper(stack),\r\n        // blocks to register for\r\n        MY_CUSTOM_BUCKET);\r\n}, EventPriority.HIGH); // use HIGH priority to register before NeoForge!\r\nSee CapabilityHooks for a list of the providers registered by NeoForge itself.\r\n\r\nEntities, IItemHandler and Direction\r\nYou can skip this section if you don\u2019t use the item handler entity capability.\r\n\r\nThere are now two capabilities for item handlers on entities:\r\n\r\nCapabilities.ItemHandler.ENTITY: exposes the full inventory of some entity.\r\nCapabilities.ItemHandler.ENTITY_AUTOMATION: exposes the automation-accessible inventory. Hoppers and droppers are patched to support that capability.\r\nHere is a migration guide from the old system that used a single capability, and distinguished using the Direction parameter:\r\n\r\nMinecart and chest inventories\r\nIf you want to support automation-aware inventories:\r\n\r\nOld Syntax\tNew Syntax\r\nentity.getCapability(...)\tentity.getCapability(Capabilities.ItemHandler.ENTITY_AUTOMATION)\r\nOtherwise:\r\n\r\nOld Syntax\tNew Syntax\r\nentity.getCapability(...)\tentity.getCapability(Capabilities.ItemHandler.ENTITY)\r\nHorse inventory\r\nOld Syntax\tNew Syntax\r\nhorse.getCapability(..., ...)\thorse.getCapability(Capabilities.ItemHandler.ENTITY)\r\nLiving entities\r\nOld Syntax\tNew Syntax\r\nentity.getCapability(..., any vertical direction)\tnew EntityHandsInvWrapper(livingEntity)\r\nentity.getCapability(..., any horizontal direction)\tnew EntityArmorInvWrapper(livingEntity)\r\nentity.getCapability(..., null)\tlivingEntity.getCapability(Capabilities.ItemHandler.ENTITY)\r\nPlayers\r\nOld Syntax\tNew Syntax\r\nplayer.getCapability(..., any vertical direction)\tnew PlayerMainInvWrapper(player.getInventory())\r\nplayer.getCapability(..., any horizontal direction)\tnew CombinedInvWrapper(new PlayerArmorInvWrapper(player.getInventory()), new PlayerOffhandInvWrapper(player.getInventory()))\r\nplayer.getCapability(..., null)\tplayer.getCapability(Capabilities.ItemHandler.ENTITY)\r\nFuture plans for capabilities\r\nComposters now support the item handler capability. However, cauldrons still do not support the fluid handler capability. This will be addressed in the coming weeks, and mods using the block fluid handler capability will work with cauldrons out of the box.\r\n\r\nWe have reviewed and tested this capability overhaul extensively. Nonetheless, we expect that issues will be discovered after the release. Please don\u2019t hesitate to get in touch with us, be it on Discord or GitHub!\r\n\r\nThat\u2019s all for now, happy porting!\r\n```\r\n\r\n\r\n```BUILD OUTPUT\r\n12:52:12 p.m.: Executing ':gametestClasses :datagenClasses :classes :testClasses :generatedClasses'...\r\n\r\n> Task :generateGrammarSource UP-TO-DATE\r\n> Task :cacheLauncherMetadata UP-TO-DATE\r\n> Task :cacheVersionManifest1.20.3 UP-TO-DATE\r\n> Task :cacheVersionExecutableClient1.20.3 UP-TO-DATE\r\n> Task :cacheVersionExecutableServer1.20.3 UP-TO-DATE\r\n> Task :cacheVersionMappingsClient1.20.3 UP-TO-DATE\r\n> Task :cacheVersionMappingsServer1.20.3 UP-TO-DATE\r\n> Task :neoFormForgesAccessTransformerProvider_script_neoforge.cfg UP-TO-DATE\r\n> Task :neoFormForgesAccessTransformerProvideraccesstransformer.cfg UP-TO-DATE\r\n> Task :neoFormListLibraries UP-TO-DATE\r\n> Task :neoFormStripClient UP-TO-DATE\r\n> Task :neoFormExtractServer UP-TO-DATE\r\n> Task :neoFormStripServer UP-TO-DATE\r\n> Task :neoFormMerge UP-TO-DATE\r\n> Task :neoFormMergeMappings UP-TO-DATE\r\n> Task :neoFormRename UP-TO-DATE\r\n> Task :neoFormApplyForgesAccessTransformer UP-TO-DATE\r\n> Task :neoFormUserAccessTransformerProvideraccesstransformer.cfg UP-TO-DATE\r\n> Task :neoFormApplyUserAccessTransformer UP-TO-DATE\r\n> Task :neoFormDecompile UP-TO-DATE\r\n> Task :neoFormInject UP-TO-DATE\r\n> Task :neoFormPatch UP-TO-DATE\r\n> Task :neoFormPatchUserDev UP-TO-DATE\r\n> Task :neoFormDownloadForgesSources UP-TO-DATE\r\n> Task :neoFormUnzipForgesSources UP-TO-DATE\r\n> Task :neoFormInjectForgesSources UP-TO-DATE\r\n> Task :neoFormDownloadForgeUniversal UP-TO-DATE\r\n> Task :neoFormUnzipForgeUniversal UP-TO-DATE\r\n> Task :neoFormInjectForgeResources UP-TO-DATE\r\n> Task :neoFormApplyOfficialMappings UP-TO-DATE\r\n> Task :create1.20.3ClientExtraJar UP-TO-DATE\r\n> Task :selectRawArtifactNet.minecraft_client_1.20.3_client-extra UP-TO-DATE\r\n> Task :neoFormRecompile UP-TO-DATE\r\n> Task :supplyRawJarForneoFormJoined1.20.3-20231205.165107 UP-TO-DATE\r\n> Task :neoFormSelectRawArtifactNet.neoforged_neoforge_20.3.8-beta_ UP-TO-DATE\r\n\r\n> Task :compileJava FAILED\r\n36 actionable tasks: 1 executed, 35 up-to-date\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ResourceType.java:15: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ResourceType.java:16: error: cannot find symbol\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\n                                         ^\r\n  symbol:   class LazyOptional\r\n  location: package net.neoforged.neoforge.common.util\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ResourceType.java:27: error: cannot find symbol\r\n    public final Capability<CAP> CAPABILITY_KIND;\r\n                 ^\r\n  symbol:   class Capability\r\n  location: class ResourceType<STACK,ITEM,CAP>\r\n  where STACK,ITEM,CAP are type-variables:\r\n    STACK extends Object declared in class ResourceType\r\n    ITEM extends Object declared in class ResourceType\r\n    CAP extends Object declared in class ResourceType\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ResourceType.java:29: error: cannot find symbol\r\n    public ResourceType(Capability<CAP> CAPABILITY_KIND) {\r\n                        ^\r\n  symbol:   class Capability\r\n  location: class ResourceType<STACK,ITEM,CAP>\r\n  where STACK,ITEM,CAP are type-variables:\r\n    STACK extends Object declared in class ResourceType\r\n    ITEM extends Object declared in class ResourceType\r\n    CAP extends Object declared in class ResourceType\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CableNetwork.java:9: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CableNetwork.java:10: error: cannot find symbol\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\n                                         ^\r\n  symbol:   class LazyOptional\r\n  location: package net.neoforged.neoforge.common.util\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:10: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:11: error: cannot find symbol\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\n                                         ^\r\n  symbol:   class LazyOptional\r\n  location: package net.neoforged.neoforge.common.util\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CableNetwork.java:122: error: cannot find symbol\r\n            Capability<CAP> cap,\r\n            ^\r\n  symbol:   class Capability\r\n  location: class CableNetwork\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CableNetwork.java:121: error: cannot find symbol\r\n    public <CAP> @Nonnull LazyOptional<CAP> getCapability(\r\n                          ^\r\n  symbol:   class LazyOptional\r\n  location: class CableNetwork\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:17: error: cannot find symbol\r\n    private final Long2ObjectMap<Object2ObjectOpenHashMap<Capability<?>, Object2ObjectOpenHashMap<Direction, LazyOptional<?>>>> CACHE = new Long2ObjectOpenHashMap<>();\r\n                                                          ^\r\n  symbol:   class Capability\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:17: error: cannot find symbol\r\n    private final Long2ObjectMap<Object2ObjectOpenHashMap<Capability<?>, Object2ObjectOpenHashMap<Direction, LazyOptional<?>>>> CACHE = new Long2ObjectOpenHashMap<>();\r\n                                                                                                             ^\r\n  symbol:   class LazyOptional\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:36: error: cannot find symbol\r\n            Capability<CAP> capKind,\r\n            ^\r\n  symbol:   class Capability\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:34: error: cannot find symbol\r\n    public <CAP> @Nullable LazyOptional<CAP> getCapability(\r\n                           ^\r\n  symbol:   class LazyOptional\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:76: error: cannot find symbol\r\n            Capability<CAP> capKind,\r\n            ^\r\n  symbol:   class Capability\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:73: error: cannot find symbol\r\n    public <CAP> LazyOptional<CAP> getOrDiscoverCapability(\r\n                 ^\r\n  symbol:   class LazyOptional\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:100: error: cannot find symbol\r\n            Capability<?> capKind,\r\n            ^\r\n  symbol:   class Capability\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:120: error: cannot find symbol\r\n            Capability<CAP> capKind,\r\n            ^\r\n  symbol:   class Capability\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:122: error: cannot find symbol\r\n            LazyOptional<CAP> cap\r\n            ^\r\n  symbol:   class LazyOptional\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:19: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:20: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:21: error: cannot find symbol\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\n                                         ^\r\n  symbol:   class LazyOptional\r\n  location: package net.neoforged.neoforge.common.util\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:89: error: cannot find symbol\r\n    private final LazyOptional<IItemHandler> ITEMS_CAPABILITY = LazyOptional.of(() -> new CombinedInvWrapper(\r\n                  ^\r\n  symbol:   class LazyOptional\r\n  location: class PrintingPressBlockEntity\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:127: error: cannot find symbol\r\n    public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {\r\n                                                               ^\r\n  symbol:   class Capability\r\n  location: class PrintingPressBlockEntity\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:127: error: cannot find symbol\r\n    public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {\r\n                        ^\r\n  symbol:   class LazyOptional\r\n  location: class PrintingPressBlockEntity\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\BlockEntityCapabilityProviderMapper.java:5: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.ICapabilityProvider;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CapabilityProviderMapper.java:5: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.ICapabilityProvider;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\BlockEntityCapabilityProviderMapper.java:11: error: cannot find symbol\r\n    public Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos) {\r\n                    ^\r\n  symbol:   class ICapabilityProvider\r\n  location: class BlockEntityCapabilityProviderMapper\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CapabilityProviderMapper.java:10: error: cannot find symbol\r\n    Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos);\r\n             ^\r\n  symbol:   class ICapabilityProvider\r\n  location: interface CapabilityProviderMapper\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:10: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:11: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:12: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.ICapabilityProvider;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:13: error: cannot find symbol\r\nimport net.neoforged.neoforge.common.util.LazyOptional;\r\n                                         ^\r\n  symbol:   class LazyOptional\r\n  location: package net.neoforged.neoforge.common.util\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:24: error: cannot find symbol\r\n    public Optional<ICapabilityProvider> getProviderFor(LevelAccessor level, BlockPos pos) {\r\n                    ^\r\n  symbol:   class ICapabilityProvider\r\n  location: class CauldronCapabilityProviderMapper\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:34: error: cannot find symbol\r\n    private static class CauldronCapabilityProvider implements ICapabilityProvider {\r\n                                                               ^\r\n  symbol:   class ICapabilityProvider\r\n  location: class CauldronCapabilityProviderMapper\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:35: error: cannot find symbol\r\n        private final LazyOptional<IFluidHandler> fluidHandlerLazyOptional;\r\n                      ^\r\n  symbol:   class LazyOptional\r\n  location: class CauldronCapabilityProvider\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:44: error: cannot find symbol\r\n        public @NotNull <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {\r\n                                                                   ^\r\n  symbol:   class Capability\r\n  location: class CauldronCapabilityProvider\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:44: error: cannot find symbol\r\n        public @NotNull <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {\r\n                            ^\r\n  symbol:   class LazyOptional\r\n  location: class CauldronCapabilityProvider\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\SFMCompat.java:4: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\SFMCompat.java:5: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capability;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\SFMCompat.java:14: error: cannot find symbol\r\n    public static List<Capability<?>> getCapabilities() {\r\n                       ^\r\n  symbol:   class Capability\r\n  location: class SFMCompat\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:6: error: cannot find symbol\r\nimport net.minecraft.data.recipes.FinishedRecipe;\r\n                                 ^\r\n  symbol:   class FinishedRecipe\r\n  location: package net.minecraft.data.recipes\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:12: error: cannot find symbol\r\npublic class PrintingPressFinishedRecipe implements FinishedRecipe {\r\n                                                    ^\r\n  symbol: class FinishedRecipe\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\FluidResourceType.java:6: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ForgeEnergyResourceType.java:5: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ItemResourceType.java:7: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.Capabilities;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\util\\SFMUtils.java:21: error: package net.neoforged.neoforge.common.capabilities does not exist\r\nimport net.neoforged.neoforge.common.capabilities.ICapabilityProvider;\r\n                                                 ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\util\\SFMUtils.java:210: error: cannot find symbol\r\n    public static Optional<ICapabilityProvider> discoverCapabilityProvider(Level level, BlockPos pos) {\r\n                           ^\r\n  symbol:   class ICapabilityProvider\r\n  location: class SFMUtils\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ResourceType.java:85: error: cannot find symbol\r\n        Stream<LazyOptional<CAP>> caps = position_direction_pairs\r\n               ^\r\n  symbol:   class LazyOptional\r\n  location: class ResourceType<STACK,ITEM,CAP>\r\n  where STACK,ITEM,CAP are type-variables:\r\n    STACK extends Object declared in class ResourceType\r\n    ITEM extends Object declared in class ResourceType\r\n    CAP extends Object declared in class ResourceType\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ResourceType.java:97: error: cannot find symbol\r\n                .filter(LazyOptional::isPresent)\r\n                        ^\r\n  symbol:   variable LazyOptional\r\n  location: class ResourceType<STACK,ITEM,CAP>\r\n  where STACK,ITEM,CAP are type-variables:\r\n    STACK extends Object declared in class ResourceType\r\n    ITEM extends Object declared in class ResourceType\r\n    CAP extends Object declared in class ResourceType\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:24: error: incompatible types: invalid method reference\r\n        return CACHE.values().stream().flatMap(x -> x.values().stream()).mapToInt(Object2ObjectOpenHashMap::size).sum();\r\n                                                                                  ^\r\n    method size in class Object2ObjectOpenHashMap<K,V> cannot be applied to given types\r\n      required: no arguments\r\n      found:    Object\r\n      reason: actual and formal argument lists differ in length\r\n  where K,V are type-variables:\r\n    K extends Object declared in class Object2ObjectOpenHashMap\r\n    V extends Object declared in class Object2ObjectOpenHashMap\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:49: error: cannot find symbol\r\n                        return (LazyOptional<CAP>) found;\r\n                                ^\r\n  symbol:   class LazyOptional\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:63: error: cannot find symbol\r\n                    putCapability(BlockPos.of(pos), (Capability) capKind, direction, cap);\r\n                                                     ^\r\n  symbol:   class Capability\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\cablenetwork\\CapabilityCache.java:95: error: cannot find symbol\r\n        return LazyOptional.empty();\r\n               ^\r\n  symbol:   variable LazyOptional\r\n  location: class CapabilityCache\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:89: error: cannot find symbol\r\n    private final LazyOptional<IItemHandler> ITEMS_CAPABILITY = LazyOptional.of(() -> new CombinedInvWrapper(\r\n                                                                ^\r\n  symbol:   variable LazyOptional\r\n  location: class PrintingPressBlockEntity\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:126: error: method does not override or implement a method from a supertype\r\n    @Override\r\n    ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\blockentity\\PrintingPressBlockEntity.java:128: error: cannot find symbol\r\n        if (cap == Capabilities.ITEM_HANDLER) {\r\n                   ^\r\n  symbol:   variable Capabilities\r\n  location: class PrintingPressBlockEntity\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:39: error: cannot find symbol\r\n            this.fluidHandlerLazyOptional = LazyOptional.of(() -> new CauldronFluidHandler(level, pos));\r\n                                            ^\r\n  symbol:   variable LazyOptional\r\n  location: class CauldronCapabilityProvider\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:43: error: method does not override or implement a method from a supertype\r\n        @Override\r\n        ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:45: error: cannot find symbol\r\n            if (cap == Capabilities.FLUID_HANDLER) {\r\n                       ^\r\n  symbol:   variable Capabilities\r\n  location: class CauldronCapabilityProvider\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\capabilityprovidermapper\\CauldronCapabilityProviderMapper.java:48: error: cannot find symbol\r\n            return LazyOptional.empty();\r\n                   ^\r\n  symbol:   variable LazyOptional\r\n  location: class CauldronCapabilityProvider\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\SFMCompat.java:16: error: cannot find symbol\r\n                Capabilities.ITEM_HANDLER,\r\n                ^\r\n  symbol:   variable Capabilities\r\n  location: class SFMCompat\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\SFMCompat.java:17: error: cannot find symbol\r\n                Capabilities.FLUID_HANDLER,\r\n                ^\r\n  symbol:   variable Capabilities\r\n  location: class SFMCompat\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\compat\\SFMCompat.java:18: error: cannot find symbol\r\n                Capabilities.ENERGY\r\n                ^\r\n  symbol:   variable Capabilities\r\n  location: class SFMCompat\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\item\\FormItem.java:23: error: cannot find symbol\r\n        formStack.getOrCreateTag().put(\"reference\", stack.serializeNBT());\r\n                                                         ^\r\n  symbol:   method serializeNBT()\r\n  location: variable stack of type ItemStack\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:30: error: method does not override or implement a method from a supertype\r\n    @Override\r\n    ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:32: error: cannot find symbol\r\n        json.add(\"form\", form.toJson(false));\r\n                             ^\r\n  symbol:   method toJson(boolean)\r\n  location: variable form of type Ingredient\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:33: error: cannot find symbol\r\n        json.add(\"ink\", ink.toJson(false));\r\n                           ^\r\n  symbol:   method toJson(boolean)\r\n  location: variable ink of type Ingredient\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:34: error: cannot find symbol\r\n        json.add(\"paper\", paper.toJson(false));\r\n                               ^\r\n  symbol:   method toJson(boolean)\r\n  location: variable paper of type Ingredient\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:37: error: method does not override or implement a method from a supertype\r\n    @Override\r\n    ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:42: error: method does not override or implement a method from a supertype\r\n    @Override\r\n    ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:47: error: method does not override or implement a method from a supertype\r\n    @Override\r\n    ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:49: error: cannot find symbol\r\n        return FinishedRecipe.super.serializeRecipe();\r\n               ^\r\n  symbol:   class FinishedRecipe\r\n  location: class PrintingPressFinishedRecipe\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\recipe\\PrintingPressFinishedRecipe.java:53: error: method does not override or implement a method from a supertype\r\n    @Override\r\n    ^\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\FluidResourceType.java:12: error: cannot find symbol\r\n        super(Capabilities.FLUID_HANDLER);\r\n              ^\r\n  symbol:   variable Capabilities\r\n  location: class FluidResourceType\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ForgeEnergyResourceType.java:11: error: cannot find symbol\r\n        super(Capabilities.ENERGY);\r\n              ^\r\n  symbol:   variable Capabilities\r\n  location: class ForgeEnergyResourceType\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\resourcetype\\ItemResourceType.java:12: error: cannot find symbol\r\n        super(Capabilities.ITEM_HANDLER);\r\n              ^\r\n  symbol:   variable Capabilities\r\n  location: class ItemResourceType\r\nD:\\Repos\\Minecraft\\Forge\\SuperFactoryManager\\src\\main\\java\\ca\\teamdman\\sfm\\common\\util\\SFMUtils.java:215: error: incompatible types: invalid method reference\r\n                .filter(Optional::isPresent)\r\n                        ^\r\n    method isPresent in class Optional<T> cannot be applied to given types\r\n      required: no arguments\r\n      found:    Object\r\n      reason: actual and formal argument lists differ in length\r\n  where T is a type-variable:\r\n    T extends Object declared in class Optional\r\nNote: Some input files use unchecked or unsafe operations.\r\nNote: Recompile with -Xlint:unchecked for details.\r\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\r\n78 errors\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':compileJava'.\r\n> Compilation failed; see the compiler error output for details.\r\n\r\n* Try:\r\n> Run with --stacktrace option to get the stack trace.\r\n> Run with --info or --debug option to get more log output.\r\n> Run with --scan to get full insights.\r\n\r\n* Get more help at https://help.gradle.org\r\n\r\nBUILD FAILED in 6s\r\n12:52:19 p.m.: Execution finished ':gametestClasses :datagenClasses :classes :testClasses :generatedClasses'.\r\n```\r\n\r\nHere is a tree view of the libraries\r\n\r\n```\r\ncom\r\nmcp\r\nnet\r\ncom\\mojang\r\ncom\\mojang\\blaze3d\r\ncom\\mojang\\math\r\ncom\\mojang\\realmsclient\r\ncom\\mojang\\blaze3d\\audio\r\ncom\\mojang\\blaze3d\\font\r\ncom\\mojang\\blaze3d\\pipeline\r\ncom\\mojang\\blaze3d\\platform\r\ncom\\mojang\\blaze3d\\preprocessor\r\ncom\\mojang\\blaze3d\\shaders\r\ncom\\mojang\\blaze3d\\systems\r\ncom\\mojang\\blaze3d\\vertex\r\ncom\\mojang\\blaze3d\\Blaze3D.java\r\ncom\\mojang\\blaze3d\\DontObfuscate.java\r\ncom\\mojang\\blaze3d\\FieldsAreNonnullByDefault.java\r\ncom\\mojang\\blaze3d\\MethodsReturnNonnullByDefault.java\r\ncom\\mojang\\blaze3d\\package-info.java\r\ncom\\mojang\\blaze3d\\audio\\Channel.java\r\ncom\\mojang\\blaze3d\\audio\\Library.java\r\ncom\\mojang\\blaze3d\\audio\\Listener.java\r\ncom\\mojang\\blaze3d\\audio\\ListenerTransform.java\r\ncom\\mojang\\blaze3d\\audio\\OggAudioStream.java\r\ncom\\mojang\\blaze3d\\audio\\OpenAlUtil.java\r\ncom\\mojang\\blaze3d\\audio\\package-info.java\r\ncom\\mojang\\blaze3d\\audio\\SoundBuffer.java\r\ncom\\mojang\\blaze3d\\font\\GlyphInfo.java\r\ncom\\mojang\\blaze3d\\font\\GlyphProvider.java\r\ncom\\mojang\\blaze3d\\font\\package-info.java\r\ncom\\mojang\\blaze3d\\font\\SheetGlyphInfo.java\r\ncom\\mojang\\blaze3d\\font\\SpaceProvider.java\r\ncom\\mojang\\blaze3d\\font\\TrueTypeGlyphProvider.java\r\ncom\\mojang\\blaze3d\\pipeline\\MainTarget.java\r\ncom\\mojang\\blaze3d\\pipeline\\package-info.java\r\ncom\\mojang\\blaze3d\\pipeline\\RenderCall.java\r\ncom\\mojang\\blaze3d\\pipeline\\RenderPipeline.java\r\ncom\\mojang\\blaze3d\\pipeline\\RenderTarget.java\r\ncom\\mojang\\blaze3d\\pipeline\\TextureTarget.java\r\ncom\\mojang\\blaze3d\\platform\\ClipboardManager.java\r\ncom\\mojang\\blaze3d\\platform\\DebugMemoryUntracker.java\r\ncom\\mojang\\blaze3d\\platform\\DisplayData.java\r\ncom\\mojang\\blaze3d\\platform\\GlConst.java\r\ncom\\mojang\\blaze3d\\platform\\GlDebug.java\r\ncom\\mojang\\blaze3d\\platform\\GlStateManager.java\r\ncom\\mojang\\blaze3d\\platform\\GlUtil.java\r\ncom\\mojang\\blaze3d\\platform\\GLX.java\r\ncom\\mojang\\blaze3d\\platform\\IconSet.java\r\ncom\\mojang\\blaze3d\\platform\\InputConstants.java\r\ncom\\mojang\\blaze3d\\platform\\Lighting.java\r\ncom\\mojang\\blaze3d\\platform\\MacosUtil.java\r\ncom\\mojang\\blaze3d\\platform\\MemoryTracker.java\r\ncom\\mojang\\blaze3d\\platform\\Monitor.java\r\ncom\\mojang\\blaze3d\\platform\\MonitorCreator.java\r\ncom\\mojang\\blaze3d\\platform\\NativeImage.java\r\ncom\\mojang\\blaze3d\\platform\\package-info.java\r\ncom\\mojang\\blaze3d\\platform\\ScreenManager.java\r\ncom\\mojang\\blaze3d\\platform\\TextureUtil.java\r\ncom\\mojang\\blaze3d\\platform\\VideoMode.java\r\ncom\\mojang\\blaze3d\\platform\\Window.java\r\ncom\\mojang\\blaze3d\\platform\\WindowEventHandler.java\r\ncom\\mojang\\blaze3d\\preprocessor\\GlslPreprocessor.java\r\ncom\\mojang\\blaze3d\\preprocessor\\package-info.java\r\ncom\\mojang\\blaze3d\\shaders\\AbstractUniform.java\r\ncom\\mojang\\blaze3d\\shaders\\BlendMode.java\r\ncom\\mojang\\blaze3d\\shaders\\Effect.java\r\ncom\\mojang\\blaze3d\\shaders\\EffectProgram.java\r\ncom\\mojang\\blaze3d\\shaders\\FogShape.java\r\ncom\\mojang\\blaze3d\\shaders\\package-info.java\r\ncom\\mojang\\blaze3d\\shaders\\Program.java\r\ncom\\mojang\\blaze3d\\shaders\\ProgramManager.java\r\ncom\\mojang\\blaze3d\\shaders\\Shader.java\r\ncom\\mojang\\blaze3d\\shaders\\Uniform.java\r\ncom\\mojang\\blaze3d\\systems\\package-info.java\r\ncom\\mojang\\blaze3d\\systems\\RenderSystem.java\r\ncom\\mojang\\blaze3d\\systems\\TimerQuery.java\r\ncom\\mojang\\blaze3d\\vertex\\BufferBuilder.java\r\ncom\\mojang\\blaze3d\\vertex\\BufferUploader.java\r\ncom\\mojang\\blaze3d\\vertex\\BufferVertexConsumer.java\r\ncom\\mojang\\blaze3d\\vertex\\DefaultedVertexConsumer.java\r\ncom\\mojang\\blaze3d\\vertex\\DefaultVertexFormat.java\r\ncom\\mojang\\blaze3d\\vertex\\package-info.java\r\ncom\\mojang\\blaze3d\\vertex\\PoseStack.java\r\ncom\\mojang\\blaze3d\\vertex\\SheetedDecalTextureGenerator.java\r\ncom\\mojang\\blaze3d\\vertex\\Tesselator.java\r\ncom\\mojang\\blaze3d\\vertex\\VertexBuffer.java\r\ncom\\mojang\\blaze3d\\vertex\\VertexConsumer.java\r\ncom\\mojang\\blaze3d\\vertex\\VertexFormat.java\r\ncom\\mojang\\blaze3d\\vertex\\VertexFormatElement.java\r\ncom\\mojang\\blaze3d\\vertex\\VertexMultiConsumer.java\r\ncom\\mojang\\blaze3d\\vertex\\VertexSorting.java\r\ncom\\mojang\\math\\Axis.java\r\ncom\\mojang\\math\\Constants.java\r\ncom\\mojang\\math\\Divisor.java\r\ncom\\mojang\\math\\FieldsAreNonnullByDefault.java\r\ncom\\mojang\\math\\GivensParameters.java\r\ncom\\mojang\\math\\MatrixUtil.java\r\ncom\\mojang\\math\\MethodsReturnNonnullByDefault.java\r\ncom\\mojang\\math\\OctahedralGroup.java\r\ncom\\mojang\\math\\package-info.java\r\ncom\\mojang\\math\\SymmetricGroup3.java\r\ncom\\mojang\\math\\Transformation.java\r\ncom\\mojang\\realmsclient\\client\r\ncom\\mojang\\realmsclient\\dto\r\ncom\\mojang\\realmsclient\\exception\r\ncom\\mojang\\realmsclient\\gui\r\ncom\\mojang\\realmsclient\\util\r\ncom\\mojang\\realmsclient\\package-info.java\r\ncom\\mojang\\realmsclient\\RealmsAvailability.java\r\ncom\\mojang\\realmsclient\\RealmsMainScreen.java\r\ncom\\mojang\\realmsclient\\Unit.java\r\ncom\\mojang\\realmsclient\\client\\FileDownload.java\r\ncom\\mojang\\realmsclient\\client\\FileUpload.java\r\ncom\\mojang\\realmsclient\\client\\package-info.java\r\ncom\\mojang\\realmsclient\\client\\Ping.java\r\ncom\\mojang\\realmsclient\\client\\RealmsClient.java\r\ncom\\mojang\\realmsclient\\client\\RealmsClientConfig.java\r\ncom\\mojang\\realmsclient\\client\\RealmsError.java\r\ncom\\mojang\\realmsclient\\client\\Request.java\r\ncom\\mojang\\realmsclient\\client\\UploadStatus.java\r\ncom\\mojang\\realmsclient\\dto\\Backup.java\r\ncom\\mojang\\realmsclient\\dto\\BackupList.java\r\ncom\\mojang\\realmsclient\\dto\\GuardedSerializer.java\r\ncom\\mojang\\realmsclient\\dto\\Ops.java\r\ncom\\mojang\\realmsclient\\dto\\package-info.java\r\ncom\\mojang\\realmsclient\\dto\\PendingInvite.java\r\ncom\\mojang\\realmsclient\\dto\\PendingInvitesList.java\r\ncom\\mojang\\realmsclient\\dto\\PingResult.java\r\ncom\\mojang\\realmsclient\\dto\\PlayerInfo.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsDescriptionDto.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsNews.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsNotification.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsServer.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsServerAddress.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsServerList.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsServerPing.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsServerPlayerList.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsServerPlayerLists.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsText.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsWorldOptions.java\r\ncom\\mojang\\realmsclient\\dto\\RealmsWorldResetDto.java\r\ncom\\mojang\\realmsclient\\dto\\ReflectionBasedSerialization.java\r\ncom\\mojang\\realmsclient\\dto\\RegionPingResult.java\r\ncom\\mojang\\realmsclient\\dto\\ServerActivity.java\r\ncom\\mojang\\realmsclient\\dto\\ServerActivityList.java\r\ncom\\mojang\\realmsclient\\dto\\Subscription.java\r\ncom\\mojang\\realmsclient\\dto\\UploadInfo.java\r\ncom\\mojang\\realmsclient\\dto\\ValueObject.java\r\ncom\\mojang\\realmsclient\\dto\\WorldDownload.java\r\ncom\\mojang\\realmsclient\\dto\\WorldTemplate.java\r\ncom\\mojang\\realmsclient\\dto\\WorldTemplatePaginatedList.java\r\ncom\\mojang\\realmsclient\\exception\\package-info.java\r\ncom\\mojang\\realmsclient\\exception\\RealmsDefaultUncaughtExceptionHandler.java\r\ncom\\mojang\\realmsclient\\exception\\RealmsHttpException.java\r\ncom\\mojang\\realmsclient\\exception\\RealmsServiceException.java\r\ncom\\mojang\\realmsclient\\exception\\RetryCallException.java\r\ncom\\mojang\\realmsclient\\gui\\screens\r\ncom\\mojang\\realmsclient\\gui\\task\r\ncom\\mojang\\realmsclient\\gui\\package-info.java\r\ncom\\mojang\\realmsclient\\gui\\RealmsDataFetcher.java\r\ncom\\mojang\\realmsclient\\gui\\RealmsNewsManager.java\r\ncom\\mojang\\realmsclient\\gui\\RealmsServerList.java\r\ncom\\mojang\\realmsclient\\gui\\RealmsWorldSlotButton.java\r\ncom\\mojang\\realmsclient\\gui\\RowButton.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\package-info.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsBackupInfoScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsBackupScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsBrokenWorldScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsClientOutdatedScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsConfigureWorldScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsConfirmScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsCreateRealmScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsDownloadLatestWorldScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsGenericErrorScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsInviteScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsLongConfirmationScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsLongRunningMcoTaskScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsLongRunningMcoTickTaskScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsNotificationsScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsParentalConsentScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsPendingInvitesScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsPlayerScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsPopupScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsResetNormalWorldScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsResetWorldScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsSelectFileToUploadScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsSelectWorldTemplateScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsSettingsScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsSlotOptionsScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsSubscriptionInfoScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsTermsScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\RealmsUploadScreen.java\r\ncom\\mojang\\realmsclient\\gui\\screens\\UploadResult.java\r\ncom\\mojang\\realmsclient\\gui\\task\\DataFetcher.java\r\ncom\\mojang\\realmsclient\\gui\\task\\package-info.java\r\ncom\\mojang\\realmsclient\\gui\\task\\RepeatedDelayStrategy.java\r\ncom\\mojang\\realmsclient\\util\\task\r\ncom\\mojang\\realmsclient\\util\\JsonUtils.java\r\ncom\\mojang\\realmsclient\\util\\LevelType.java\r\ncom\\mojang\\realmsclient\\util\\package-info.java\r\ncom\\mojang\\realmsclient\\util\\RealmsPersistence.java\r\ncom\\mojang\\realmsclient\\util\\RealmsTextureManager.java\r\ncom\\mojang\\realmsclient\\util\\RealmsUtil.java\r\ncom\\mojang\\realmsclient\\util\\TextRenderingUtils.java\r\ncom\\mojang\\realmsclient\\util\\UploadTokenCache.java\r\ncom\\mojang\\realmsclient\\util\\WorldGenerationInfo.java\r\ncom\\mojang\\realmsclient\\util\\task\\CloseServerTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\ConnectTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\CreateSnapshotRealmTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\DownloadTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\GetServerDetailsTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\LongRunningTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\OpenServerTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\package-info.java\r\ncom\\mojang\\realmsclient\\util\\task\\ResettingGeneratedWorldTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\ResettingTemplateWorldTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\ResettingWorldTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\RestoreTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\SwitchMinigameTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\SwitchSlotTask.java\r\ncom\\mojang\\realmsclient\\util\\task\\WorldCreationTask.java\r\nmcp\\client\r\nmcp\\client\\Start.java\r\nnet\\minecraft\r\nnet\\neoforged\r\nnet\\minecraft\\advancements\r\nnet\\minecraft\\client\r\nnet\\minecraft\\commands\r\nnet\\minecraft\\core\r\nnet\\minecraft\\data\r\nnet\\minecraft\\gametest\r\nnet\\minecraft\\locale\r\nnet\\minecraft\\nbt\r\nnet\\minecraft\\network\r\nnet\\minecraft\\obfuscate\r\nnet\\minecraft\\realms\r\nnet\\minecraft\\recipebook\r\nnet\\minecraft\\references\r\nnet\\minecraft\\resources\r\nnet\\minecraft\\server\r\nnet\\minecraft\\sounds\r\nnet\\minecraft\\stats\r\nnet\\minecraft\\tags\r\nnet\\minecraft\\util\r\nnet\\minecraft\\world\r\nnet\\minecraft\\BlockUtil.java\r\nnet\\minecraft\\CharPredicate.java\r\nnet\\minecraft\\ChatFormatting.java\r\nnet\\minecraft\\CrashReport.java\r\nnet\\minecraft\\CrashReportCategory.java\r\nnet\\minecraft\\CrashReportDetail.java\r\nnet\\minecraft\\DefaultUncaughtExceptionHandler.java\r\nnet\\minecraft\\DefaultUncaughtExceptionHandlerWithName.java\r\nnet\\minecraft\\DetectedVersion.java\r\nnet\\minecraft\\FieldsAreNonnullByDefault.java\r\nnet\\minecraft\\FileUtil.java\r\nnet\\minecraft\\MethodsReturnNonnullByDefault.java\r\nnet\\minecraft\\Optionull.java\r\nnet\\minecraft\\package-info.java\r\nnet\\minecraft\\ReportedException.java\r\nnet\\minecraft\\ResourceLocationException.java\r\nnet\\minecraft\\SharedConstants.java\r\nnet\\minecraft\\SystemReport.java\r\nnet\\minecraft\\Util.java\r\nnet\\minecraft\\WorldVersion.java\r\nnet\\minecraft\\advancements\\critereon\r\nnet\\minecraft\\advancements\\Advancement.java\r\nnet\\minecraft\\advancements\\AdvancementHolder.java\r\nnet\\minecraft\\advancements\\AdvancementNode.java\r\nnet\\minecraft\\advancements\\AdvancementProgress.java\r\nnet\\minecraft\\advancements\\AdvancementRequirements.java\r\nnet\\minecraft\\advancements\\AdvancementRewards.java\r\nnet\\minecraft\\advancements\\AdvancementTree.java\r\nnet\\minecraft\\advancements\\AdvancementType.java\r\nnet\\minecraft\\advancements\\CriteriaTriggers.java\r\nnet\\minecraft\\advancements\\Criterion.java\r\nnet\\minecraft\\advancements\\CriterionProgress.java\r\nnet\\minecraft\\advancements\\CriterionTrigger.java\r\nnet\\minecraft\\advancements\\CriterionTriggerInstance.java\r\nnet\\minecraft\\advancements\\DisplayInfo.java\r\nnet\\minecraft\\advancements\\package-info.java\r\nnet\\minecraft\\advancements\\TreeNodePosition.java\r\nnet\\minecraft\\advancements\\critereon\\BeeNestDestroyedTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\BlockPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\BredAnimalsTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\BrewedPotionTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\ChangeDimensionTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\ChanneledLightningTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\ConstructBeaconTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\ConsumeItemTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\ContextAwarePredicate.java\r\nnet\\minecraft\\advancements\\critereon\\CriterionValidator.java\r\nnet\\minecraft\\advancements\\critereon\\CuredZombieVillagerTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\DamagePredicate.java\r\nnet\\minecraft\\advancements\\critereon\\DamageSourcePredicate.java\r\nnet\\minecraft\\advancements\\critereon\\DistancePredicate.java\r\nnet\\minecraft\\advancements\\critereon\\DistanceTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\EffectsChangedTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\EnchantedItemTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\EnchantmentPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\EnterBlockTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\EntityEquipmentPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\EntityFlagsPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\EntityHurtPlayerTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\EntityPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\EntitySubPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\EntityTypePredicate.java\r\nnet\\minecraft\\advancements\\critereon\\EntityVariantPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\FilledBucketTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\FishingHookPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\FishingRodHookedTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\FluidPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\ImpossibleTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\InventoryChangeTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\ItemDurabilityTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\ItemPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\ItemUsedOnLocationTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\KilledByCrossbowTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\KilledTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\LevitationTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\LightningBoltPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\LightningStrikeTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\LightPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\LocationPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\LootTableTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\MinMaxBounds.java\r\nnet\\minecraft\\advancements\\critereon\\MobEffectsPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\NbtPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\package-info.java\r\nnet\\minecraft\\advancements\\critereon\\PickedUpItemTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\PlayerHurtEntityTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\PlayerInteractTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\PlayerPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\PlayerTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\RecipeCraftedTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\RecipeUnlockedTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\ShotCrossbowTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\SimpleCriterionTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\SlideDownBlockTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\SlimePredicate.java\r\nnet\\minecraft\\advancements\\critereon\\StartRidingTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\StatePropertiesPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\SummonedEntityTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\TagPredicate.java\r\nnet\\minecraft\\advancements\\critereon\\TameAnimalTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\TargetBlockTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\TradeTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\UsedEnderEyeTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\UsedTotemTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\UsingItemTrigger.java\r\nnet\\minecraft\\advancements\\critereon\\WrappedMinMaxBounds.java\r\nnet\\minecraft\\client\\animation\r\nnet\\minecraft\\client\\color\r\nnet\\minecraft\\client\\gui\r\nnet\\minecraft\\client\\main\r\nnet\\minecraft\\client\\model\r\nnet\\minecraft\\client\\multiplayer\r\nnet\\minecraft\\client\\particle\r\nnet\\minecraft\\client\\player\r\nnet\\minecraft\\client\\profiling\r\nnet\\minecraft\\client\\quickplay\r\nnet\\minecraft\\client\\renderer\r\nnet\\minecraft\\client\\resources\r\nnet\\minecraft\\client\\searchtree\r\nnet\\minecraft\\client\\server\r\nnet\\minecraft\\client\\sounds\r\nnet\\minecraft\\client\\telemetry\r\nnet\\minecraft\\client\\tutorial\r\nnet\\minecraft\\client\\AttackIndicatorStatus.java\r\nnet\\minecraft\\client\\Camera.java\r\nnet\\minecraft\\client\\CameraType.java\r\nnet\\minecraft\\client\\ClientBrandRetriever.java\r\nnet\\minecraft\\client\\ClientRecipeBook.java\r\nnet\\minecraft\\client\\CloudStatus.java\r\nnet\\minecraft\\client\\CommandHistory.java\r\nnet\\minecraft\\client\\ComponentCollector.java\r\nnet\\minecraft\\client\\DebugQueryHandler.java\r\nnet\\minecraft\\client\\GameNarrator.java\r\nnet\\minecraft\\client\\GraphicsStatus.java\r\nnet\\minecraft\\client\\GuiMessage.java\r\nnet\\minecraft\\client\\GuiMessageTag.java\r\nnet\\minecraft\\client\\HotbarManager.java\r\nnet\\minecraft\\client\\InputType.java\r\nnet\\minecraft\\client\\KeyboardHandler.java\r\nnet\\minecraft\\client\\KeyMapping.java\r\nnet\\minecraft\\client\\Minecraft.java\r\nnet\\minecraft\\client\\MouseHandler.java\r\nnet\\minecraft\\client\\NarratorStatus.java\r\nnet\\minecraft\\client\\OptionInstance.java\r\nnet\\minecraft\\client\\Options.java\r\nnet\\minecraft\\client\\package-info.java\r\nnet\\minecraft\\client\\ParticleStatus.java\r\nnet\\minecraft\\client\\PeriodicNotificationManager.java\r\nnet\\minecraft\\client\\PrioritizeChunkUpdates.java\r\nnet\\minecraft\\client\\Realms32BitWarningStatus.java\r\nnet\\minecraft\\client\\RecipeBookCategories.java\r\nnet\\minecraft\\client\\ResourceLoadStateTracker.java\r\nnet\\minecraft\\client\\Screenshot.java\r\nnet\\minecraft\\client\\StringSplitter.java\r\nnet\\minecraft\\client\\Timer.java\r\nnet\\minecraft\\client\\ToggleKeyMapping.java\r\nnet\\minecraft\\client\\User.java\r\nnet\\minecraft\\client\\animation\\definitions\r\nnet\\minecraft\\client\\animation\\AnimationChannel.java\r\nnet\\minecraft\\client\\animation\\AnimationDefinition.java\r\nnet\\minecraft\\client\\animation\\Keyframe.java\r\nnet\\minecraft\\client\\animation\\KeyframeAnimations.java\r\nnet\\minecraft\\client\\animation\\package-info.java\r\nnet\\minecraft\\client\\animation\\definitions\\BatAnimation.java\r\nnet\\minecraft\\client\\animation\\definitions\\BreezeAnimation.java\r\nnet\\minecraft\\client\\animation\\definitions\\CamelAnimation.java\r\nnet\\minecraft\\client\\animation\\definitions\\FrogAnimation.java\r\nnet\\minecraft\\client\\animation\\definitions\\package-info.java\r\nnet\\minecraft\\client\\animation\\definitions\\SnifferAnimation.java\r\nnet\\minecraft\\client\\animation\\definitions\\WardenAnimation.java\r\nnet\\minecraft\\client\\color\\block\r\nnet\\minecraft\\client\\color\\item\r\nnet\\minecraft\\client\\color\\block\\BlockColor.java\r\nnet\\minecraft\\client\\color\\block\\BlockColors.java\r\nnet\\minecraft\\client\\color\\block\\BlockTintCache.java\r\nnet\\minecraft\\client\\color\\block\\package-info.java\r\nnet\\minecraft\\client\\color\\item\\ItemColor.java\r\nnet\\minecraft\\client\\color\\item\\ItemColors.java\r\nnet\\minecraft\\client\\color\\item\\package-info.java\r\nnet\\minecraft\\client\\gui\\components\r\nnet\\minecraft\\client\\gui\\font\r\nnet\\minecraft\\client\\gui\\layouts\r\nnet\\minecraft\\client\\gui\\narration\r\nnet\\minecraft\\client\\gui\\navigation\r\nnet\\minecraft\\client\\gui\\screens\r\nnet\\minecraft\\client\\gui\\spectator\r\nnet\\minecraft\\client\\gui\\ComponentPath.java\r\nnet\\minecraft\\client\\gui\\Font.java\r\nnet\\minecraft\\client\\gui\\Gui.java\r\nnet\\minecraft\\client\\gui\\GuiGraphics.java\r\nnet\\minecraft\\client\\gui\\GuiSpriteManager.java\r\nnet\\minecraft\\client\\gui\\MapRenderer.java\r\nnet\\minecraft\\client\\gui\\package-info.java\r\nnet\\minecraft\\client\\gui\\components\\debugchart\r\nnet\\minecraft\\client\\gui\\components\\events\r\nnet\\minecraft\\client\\gui\\components\\spectator\r\nnet\\minecraft\\client\\gui\\components\\tabs\r\nnet\\minecraft\\client\\gui\\components\\toasts\r\nnet\\minecraft\\client\\gui\\components\\AbstractButton.java\r\nnet\\minecraft\\client\\gui\\components\\AbstractContainerWidget.java\r\nnet\\minecraft\\client\\gui\\components\\AbstractOptionSliderButton.java\r\nnet\\minecraft\\client\\gui\\components\\AbstractScrollWidget.java\r\nnet\\minecraft\\client\\gui\\components\\AbstractSelectionList.java\r\nnet\\minecraft\\client\\gui\\components\\AbstractSliderButton.java\r\nnet\\minecraft\\client\\gui\\components\\AbstractStringWidget.java\r\nnet\\minecraft\\client\\gui\\components\\AbstractWidget.java\r\nnet\\minecraft\\client\\gui\\components\\BossHealthOverlay.java\r\nnet\\minecraft\\client\\gui\\components\\Button.java\r\nnet\\minecraft\\client\\gui\\components\\ChatComponent.java\r\nnet\\minecraft\\client\\gui\\components\\Checkbox.java\r\nnet\\minecraft\\client\\gui\\components\\CommandSuggestions.java\r\nnet\\minecraft\\client\\gui\\components\\CommonButtons.java\r\nnet\\minecraft\\client\\gui\\components\\ComponentRenderUtils.java\r\nnet\\minecraft\\client\\gui\\components\\ContainerObjectSelectionList.java\r\nnet\\minecraft\\client\\gui\\components\\CycleButton.java\r\nnet\\minecraft\\client\\gui\\components\\DebugScreenOverlay.java\r\nnet\\minecraft\\client\\gui\\components\\EditBox.java\r\nnet\\minecraft\\client\\gui\\components\\FittingMultiLineTextWidget.java\r\nnet\\minecraft\\client\\gui\\components\\FocusableTextWidget.java\r\nnet\\minecraft\\client\\gui\\components\\ImageButton.java\r\nnet\\minecraft\\client\\gui\\components\\ImageWidget.java\r\nnet\\minecraft\\client\\gui\\components\\LerpingBossEvent.java\r\nnet\\minecraft\\client\\gui\\components\\LoadingDotsWidget.java\r\nnet\\minecraft\\client\\gui\\components\\LockIconButton.java\r\nnet\\minecraft\\client\\gui\\components\\LogoRenderer.java\r\nnet\\minecraft\\client\\gui\\components\\MultiLineEditBox.java\r\nnet\\minecraft\\client\\gui\\components\\MultiLineLabel.java\r\nnet\\minecraft\\client\\gui\\components\\MultilineTextField.java\r\nnet\\minecraft\\client\\gui\\components\\MultiLineTextWidget.java\r\nnet\\minecraft\\client\\gui\\components\\ObjectSelectionList.java\r\nnet\\minecraft\\client\\gui\\components\\OptionsList.java\r\nnet\\minecraft\\client\\gui\\components\\package-info.java\r\nnet\\minecraft\\client\\gui\\components\\PlainTextButton.java\r\nnet\\minecraft\\client\\gui\\components\\PlayerFaceRenderer.java\r\nnet\\minecraft\\client\\gui\\components\\PlayerSkinWidget.java\r\nnet\\minecraft\\client\\gui\\components\\PlayerTabOverlay.java\r\nnet\\minecraft\\client\\gui\\components\\PopupScreen.java\r\nnet\\minecraft\\client\\gui\\components\\Renderable.java\r\nnet\\minecraft\\client\\gui\\components\\SplashRenderer.java\r\nnet\\minecraft\\client\\gui\\components\\SpriteIconButton.java\r\nnet\\minecraft\\client\\gui\\components\\StateSwitchingButton.java\r\nnet\\minecraft\\client\\gui\\components\\StringWidget.java\r\nnet\\minecraft\\client\\gui\\components\\SubtitleOverlay.java\r\nnet\\minecraft\\client\\gui\\components\\TabButton.java\r\nnet\\minecraft\\client\\gui\\components\\TabOrderedElement.java\r\nnet\\minecraft\\client\\gui\\components\\Tooltip.java\r\nnet\\minecraft\\client\\gui\\components\\Whence.java\r\nnet\\minecraft\\client\\gui\\components\\WidgetSprites.java\r\nnet\\minecraft\\client\\gui\\components\\debugchart\\AbstractDebugChart.java\r\nnet\\minecraft\\client\\gui\\components\\debugchart\\BandwidthDebugChart.java\r\nnet\\minecraft\\client\\gui\\components\\debugchart\\FpsDebugChart.java\r\nnet\\minecraft\\client\\gui\\components\\debugchart\\PingDebugChart.java\r\nnet\\minecraft\\client\\gui\\components\\debugchart\\TpsDebugChart.java\r\nnet\\minecraft\\client\\gui\\components\\events\\AbstractContainerEventHandler.java\r\nnet\\minecraft\\client\\gui\\components\\events\\ContainerEventHandler.java\r\nnet\\minecraft\\client\\gui\\components\\events\\GuiEventListener.java\r\nnet\\minecraft\\client\\gui\\components\\events\\package-info.java\r\nnet\\minecraft\\client\\gui\\components\\spectator\\package-info.java\r\nnet\\minecraft\\client\\gui\\components\\spectator\\SpectatorGui.java\r\nnet\\minecraft\\client\\gui\\components\\tabs\\GridLayoutTab.java\r\nnet\\minecraft\\client\\gui\\components\\tabs\\package-info.java\r\nnet\\minecraft\\client\\gui\\components\\tabs\\Tab.java\r\nnet\\minecraft\\client\\gui\\components\\tabs\\TabManager.java\r\nnet\\minecraft\\client\\gui\\components\\tabs\\TabNavigationBar.java\r\nnet\\minecraft\\client\\gui\\components\\toasts\\AdvancementToast.java\r\nnet\\minecraft\\client\\gui\\components\\toasts\\package-info.java\r\nnet\\minecraft\\client\\gui\\components\\toasts\\RecipeToast.java\r\nnet\\minecraft\\client\\gui\\components\\toasts\\SystemToast.java\r\nnet\\minecraft\\client\\gui\\components\\toasts\\Toast.java\r\nnet\\minecraft\\client\\gui\\components\\toasts\\ToastComponent.java\r\nnet\\minecraft\\client\\gui\\components\\toasts\\TutorialToast.java\r\nnet\\minecraft\\client\\gui\\font\\glyphs\r\nnet\\minecraft\\client\\gui\\font\\providers\r\nnet\\minecraft\\client\\gui\\font\\AllMissingGlyphProvider.java\r\nnet\\minecraft\\client\\gui\\font\\CodepointMap.java\r\nnet\\minecraft\\client\\gui\\font\\FontManager.java\r\nnet\\minecraft\\client\\gui\\font\\FontSet.java\r\nnet\\minecraft\\client\\gui\\font\\FontTexture.java\r\nnet\\minecraft\\client\\gui\\font\\GlyphRenderTypes.java\r\nnet\\minecraft\\client\\gui\\font\\package-info.java\r\nnet\\minecraft\\client\\gui\\font\\TextFieldHelper.java\r\nnet\\minecraft\\client\\gui\\font\\glyphs\\BakedGlyph.java\r\nnet\\minecraft\\client\\gui\\font\\glyphs\\EmptyGlyph.java\r\nnet\\minecraft\\client\\gui\\font\\glyphs\\package-info.java\r\nnet\\minecraft\\client\\gui\\font\\glyphs\\SpecialGlyphs.java\r\nnet\\minecraft\\client\\gui\\font\\providers\\BitmapProvider.java\r\nnet\\minecraft\\client\\gui\\font\\providers\\GlyphProviderDefinition.java\r\nnet\\minecraft\\client\\gui\\font\\providers\\GlyphProviderType.java\r\nnet\\minecraft\\client\\gui\\font\\providers\\package-info.java\r\nnet\\minecraft\\client\\gui\\font\\providers\\ProviderReferenceDefinition.java\r\nnet\\minecraft\\client\\gui\\font\\providers\\TrueTypeGlyphProviderDefinition.java\r\nnet\\minecraft\\client\\gui\\font\\providers\\UnihexProvider.java\r\nnet\\minecraft\\client\\gui\\layouts\\AbstractLayout.java\r\nnet\\minecraft\\client\\gui\\layouts\\CommonLayouts.java\r\nnet\\minecraft\\client\\gui\\layouts\\EqualSpacingLayout.java\r\nnet\\minecraft\\client\\gui\\layouts\\FrameLayout.java\r\nnet\\minecraft\\client\\gui\\layouts\\GridLayout.java\r\nnet\\minecraft\\client\\gui\\layouts\\HeaderAndFooterLayout.java\r\nnet\\minecraft\\client\\gui\\layouts\\Layout.java\r\nnet\\minecraft\\client\\gui\\layouts\\LayoutElement.java\r\nnet\\minecraft\\client\\gui\\layouts\\LayoutSettings.java\r\nnet\\minecraft\\client\\gui\\layouts\\LinearLayout.java\r\nnet\\minecraft\\client\\gui\\layouts\\package-info.java\r\nnet\\minecraft\\client\\gui\\layouts\\SpacerElement.java\r\nnet\\minecraft\\client\\gui\\narration\\NarratableEntry.java\r\nnet\\minecraft\\client\\gui\\narration\\NarratedElementType.java\r\nnet\\minecraft\\client\\gui\\narration\\NarrationElementOutput.java\r\nnet\\minecraft\\client\\gui\\narration\\NarrationSupplier.java\r\nnet\\minecraft\\client\\gui\\narration\\NarrationThunk.java\r\nnet\\minecraft\\client\\gui\\narration\\package-info.java\r\nnet\\minecraft\\client\\gui\\narration\\ScreenNarrationCollector.java\r\nnet\\minecraft\\client\\gui\\navigation\\CommonInputs.java\r\nnet\\minecraft\\client\\gui\\navigation\\FocusNavigationEvent.java\r\nnet\\minecraft\\client\\gui\\navigation\\package-info.java\r\nnet\\minecraft\\client\\gui\\navigation\\ScreenAxis.java\r\nnet\\minecraft\\client\\gui\\navigation\\ScreenDirection.java\r\nnet\\minecraft\\client\\gui\\navigation\\ScreenPosition.java\r\nnet\\minecraft\\client\\gui\\navigation\\ScreenRectangle.java\r\nnet\\minecraft\\client\\gui\\screens\\achievement\r\nnet\\minecraft\\client\\gui\\screens\\advancements\r\nnet\\minecraft\\client\\gui\\screens\\controls\r\nnet\\minecraft\\client\\gui\\screens\\debug\r\nnet\\minecraft\\client\\gui\\screens\\inventory\r\nnet\\minecraft\\client\\gui\\screens\\multiplayer\r\nnet\\minecraft\\client\\gui\\screens\\packs\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\r\nnet\\minecraft\\client\\gui\\screens\\reporting\r\nnet\\minecraft\\client\\gui\\screens\\social\r\nnet\\minecraft\\client\\gui\\screens\\telemetry\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\r\nnet\\minecraft\\client\\gui\\screens\\AccessibilityOnboardingScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\AccessibilityOptionsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\AlertScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\BackupConfirmScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\BanNoticeScreens.java\r\nnet\\minecraft\\client\\gui\\screens\\ChatOptionsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\ChatScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\ConfirmLinkScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\ConfirmScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\ConnectScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\CreateBuffetWorldScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\CreateFlatWorldScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\CreditsAndAttributionScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\DatapackLoadFailureScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\DeathScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\DemoIntroScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\DirectJoinServerScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\DisconnectedScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\EditServerScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\ErrorScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\FaviconTexture.java\r\nnet\\minecraft\\client\\gui\\screens\\GenericDirtMessageScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\GenericWaitingScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\InBedChatScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\LanguageSelectScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\LevelLoadingScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\LoadingDotsText.java\r\nnet\\minecraft\\client\\gui\\screens\\LoadingOverlay.java\r\nnet\\minecraft\\client\\gui\\screens\\MenuScreens.java\r\nnet\\minecraft\\client\\gui\\screens\\MouseSettingsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\NoticeWithLinkScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\OnlineOptionsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\OptionsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\OptionsSubScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\OutOfMemoryScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\Overlay.java\r\nnet\\minecraft\\client\\gui\\screens\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\PauseScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\PresetFlatWorldScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\ProgressScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\ReceivingLevelScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\RecoverWorldDataScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\Screen.java\r\nnet\\minecraft\\client\\gui\\screens\\ShareToLanScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\SimpleOptionsSubScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\SkinCustomizationScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\SoundOptionsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\TitleScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\UnsupportedGraphicsWarningScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\VideoSettingsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\WinScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\achievement\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\achievement\\StatsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\achievement\\StatsUpdateListener.java\r\nnet\\minecraft\\client\\gui\\screens\\advancements\\AdvancementsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\advancements\\AdvancementTab.java\r\nnet\\minecraft\\client\\gui\\screens\\advancements\\AdvancementTabType.java\r\nnet\\minecraft\\client\\gui\\screens\\advancements\\AdvancementWidget.java\r\nnet\\minecraft\\client\\gui\\screens\\advancements\\AdvancementWidgetType.java\r\nnet\\minecraft\\client\\gui\\screens\\advancements\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\controls\\ControlsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\controls\\KeyBindsList.java\r\nnet\\minecraft\\client\\gui\\screens\\controls\\KeyBindsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\controls\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\debug\\GameModeSwitcherScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\debug\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\AbstractCommandBlockEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\AbstractContainerScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\AbstractFurnaceScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\AbstractSignEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\AnvilScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\BeaconScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\BlastFurnaceScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\BookEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\BookViewScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\BrewingStandScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\CartographyTableScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\CommandBlockEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\ContainerScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\CrafterScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\CraftingScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\CreativeInventoryListener.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\CreativeModeInventoryScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\CyclingSlotBackground.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\DispenserScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\EffectRenderingInventoryScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\EnchantmentNames.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\EnchantmentScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\FurnaceScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\GrindstoneScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\HangingSignEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\HopperScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\HorseInventoryScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\InventoryScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\ItemCombinerScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\JigsawBlockEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\LecternScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\LoomScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\MenuAccess.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\MerchantScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\MinecartCommandBlockEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\PageButton.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\ShulkerBoxScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\SignEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\SmithingScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\SmokerScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\StonecutterScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\StructureBlockEditScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\BelowOrAboveWidgetTooltipPositioner.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\ClientBundleTooltip.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\ClientTextTooltip.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\ClientTooltipComponent.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\ClientTooltipPositioner.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\DefaultTooltipPositioner.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\MenuTooltipPositioner.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\inventory\\tooltip\\TooltipRenderUtil.java\r\nnet\\minecraft\\client\\gui\\screens\\multiplayer\\JoinMultiplayerScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\multiplayer\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\multiplayer\\Realms32bitWarningScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\multiplayer\\SafetyScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\multiplayer\\ServerReconfigScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\multiplayer\\ServerSelectionList.java\r\nnet\\minecraft\\client\\gui\\screens\\multiplayer\\WarningScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\packs\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\packs\\PackSelectionModel.java\r\nnet\\minecraft\\client\\gui\\screens\\packs\\PackSelectionScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\packs\\TransferableSelectionList.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\AbstractFurnaceRecipeBookComponent.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\BlastingRecipeBookComponent.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\GhostRecipe.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\OverlayRecipeComponent.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\RecipeBookComponent.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\RecipeBookPage.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\RecipeBookTabButton.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\RecipeButton.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\RecipeCollection.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\RecipeShownListener.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\RecipeUpdateListener.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\SmeltingRecipeBookComponent.java\r\nnet\\minecraft\\client\\gui\\screens\\recipebook\\SmokingRecipeBookComponent.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\AbstractReportScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\ChatReportScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\ChatSelectionLogFiller.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\ChatSelectionScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\NameReportScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\ReportPlayerScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\ReportReasonSelectionScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\reporting\\SkinReportScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\social\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\social\\PlayerEntry.java\r\nnet\\minecraft\\client\\gui\\screens\\social\\PlayerSocialManager.java\r\nnet\\minecraft\\client\\gui\\screens\\social\\SocialInteractionsPlayerList.java\r\nnet\\minecraft\\client\\gui\\screens\\social\\SocialInteractionsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\telemetry\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\telemetry\\TelemetryEventWidget.java\r\nnet\\minecraft\\client\\gui\\screens\\telemetry\\TelemetryInfoScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\ConfirmExperimentalFeaturesScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\CreateWorldScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\EditGameRulesScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\EditWorldScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\ExperimentsScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\OptimizeWorldScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\package-info.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\PresetEditor.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\SelectWorldScreen.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\SwitchGrid.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\WorldCreationContext.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\WorldCreationUiState.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\WorldOpenFlows.java\r\nnet\\minecraft\\client\\gui\\screens\\worldselection\\WorldSelectionList.java\r\nnet\\minecraft\\client\\gui\\spectator\\categories\r\nnet\\minecraft\\client\\gui\\spectator\\package-info.java\r\nnet\\minecraft\\client\\gui\\spectator\\PlayerMenuItem.java\r\nnet\\minecraft\\client\\gui\\spectator\\RootSpectatorMenuCategory.java\r\nnet\\minecraft\\client\\gui\\spectator\\SpectatorMenu.java\r\nnet\\minecraft\\client\\gui\\spectator\\SpectatorMenuCategory.java\r\nnet\\minecraft\\client\\gui\\spectator\\SpectatorMenuItem.java\r\nnet\\minecraft\\client\\gui\\spectator\\SpectatorMenuListener.java\r\nnet\\minecraft\\client\\gui\\spectator\\categories\\package-info.java\r\nnet\\minecraft\\client\\gui\\spectator\\categories\\SpectatorPage.java\r\nnet\\minecraft\\client\\gui\\spectator\\categories\\TeleportToPlayerMenuCategory.java\r\nnet\\minecraft\\client\\gui\\spectator\\categories\\TeleportToTeamMenuCategory.java\r\nnet\\minecraft\\client\\main\\GameConfig.java\r\nnet\\minecraft\\client\\main\\Main.java\r\nnet\\minecraft\\client\\main\\package-info.java\r\nnet\\minecraft\\client\\main\\SilentInitException.java\r\nnet\\minecraft\\client\\model\\dragon\r\nnet\\minecraft\\client\\model\\geom\r\nnet\\minecraft\\client\\model\\AbstractZombieModel.java\r\nnet\\minecraft\\client\\model\\AgeableHierarchicalModel.java\r\nnet\\minecraft\\client\\model\\AgeableListModel.java\r\nnet\\minecraft\\client\\model\\AllayModel.java\r\nnet\\minecraft\\client\\model\\AnimationUtils.java\r\nnet\\minecraft\\client\\model\\ArmedModel.java\r\nnet\\minecraft\\client\\model\\ArmorStandArmorModel.java\r\nnet\\minecraft\\client\\model\\ArmorStandModel.java\r\nnet\\minecraft\\client\\model\\AxolotlModel.java\r\nnet\\minecraft\\client\\model\\BatModel.java\r\nnet\\minecraft\\client\\model\\BeeModel.java\r\nnet\\minecraft\\client\\model\\BlazeModel.java\r\nnet\\minecraft\\client\\model\\BoatModel.java\r\nnet\\minecraft\\client\\model\\BookModel.java\r\nnet\\minecraft\\client\\model\\BreezeModel.java\r\nnet\\minecraft\\client\\model\\CamelModel.java\r\nnet\\minecraft\\client\\model\\CatModel.java\r\nnet\\minecraft\\client\\model\\ChestBoatModel.java\r\nnet\\minecraft\\client\\model\\ChestedHorseModel.java\r\nnet\\minecraft\\client\\model\\ChestRaftModel.java\r\nnet\\minecraft\\client\\model\\ChickenModel.java\r\nnet\\minecraft\\client\\model\\CodModel.java\r\nnet\\minecraft\\client\\model\\ColorableAgeableListModel.java\r\nnet\\minecraft\\client\\model\\ColorableHierarchicalModel.java\r\nnet\\minecraft\\client\\model\\CowModel.java\r\nnet\\minecraft\\client\\model\\CreeperModel.java\r\nnet\\minecraft\\client\\model\\DolphinModel.java\r\nnet\\minecraft\\client\\model\\DrownedModel.java\r\nnet\\minecraft\\client\\model\\ElytraModel.java\r\nnet\\minecraft\\client\\model\\EndermanModel.java\r\nnet\\minecraft\\client\\model\\EndermiteModel.java\r\nnet\\minecraft\\client\\model\\EntityModel.java\r\nnet\\minecraft\\client\\model\\EvokerFangsModel.java\r\nnet\\minecraft\\client\\model\\FoxModel.java\r\nnet\\minecraft\\client\\model\\FrogModel.java\r\nnet\\minecraft\\client\\model\\GhastModel.java\r\nnet\\minecraft\\client\\model\\GiantZombieModel.java\r\nnet\\minecraft\\client\\model\\GoatModel.java\r\nnet\\minecraft\\client\\model\\GuardianModel.java\r\nnet\\minecraft\\client\\model\\HeadedModel.java\r\nnet\\minecraft\\client\\model\\HierarchicalModel.java\r\nnet\\minecraft\\client\\model\\HoglinModel.java\r\nnet\\minecraft\\client\\model\\HorseModel.java\r\nnet\\minecraft\\client\\model\\HumanoidArmorModel.java\r\nnet\\minecraft\\client\\model\\HumanoidModel.java\r\nnet\\minecraft\\client\\model\\IllagerModel.java\r\nnet\\minecraft\\client\\model\\IronGolemModel.java\r\nnet\\minecraft\\client\\model\\LavaSlimeModel.java\r\nnet\\minecraft\\client\\model\\LeashKnotModel.java\r\nnet\\minecraft\\client\\model\\ListModel.java\r\nnet\\minecraft\\client\\model\\LlamaModel.java\r\nnet\\minecraft\\client\\model\\LlamaSpitModel.java\r\nnet\\minecraft\\client\\model\\MinecartModel.java\r\nnet\\minecraft\\client\\model\\Model.java\r\nnet\\minecraft\\client\\model\\ModelUtils.java\r\nnet\\minecraft\\client\\model\\OcelotModel.java\r\nnet\\minecraft\\client\\model\\package-info.java\r\nnet\\minecraft\\client\\model\\PandaModel.java\r\nnet\\minecraft\\client\\model\\ParrotModel.java\r\nnet\\minecraft\\client\\model\\PhantomModel.java\r\nnet\\minecraft\\client\\model\\PiglinHeadModel.java\r\nnet\\minecraft\\client\\model\\PiglinModel.java\r\nnet\\minecraft\\client\\model\\PigModel.java\r\nnet\\minecraft\\client\\model\\PlayerModel.java\r\nnet\\minecraft\\client\\model\\PolarBearModel.java\r\nnet\\minecraft\\client\\model\\PufferfishBigModel.java\r\nnet\\minecraft\\client\\model\\PufferfishMidModel.java\r\nnet\\minecraft\\client\\model\\PufferfishSmallModel.java\r\nnet\\minecraft\\client\\model\\QuadrupedModel.java\r\nnet\\minecraft\\client\\model\\RabbitModel.java\r\nnet\\minecraft\\client\\model\\RaftModel.java\r\nnet\\minecraft\\client\\model\\RavagerModel.java\r\nnet\\minecraft\\client\\model\\SalmonModel.java\r\nnet\\minecraft\\client\\model\\SheepFurModel.java\r\nnet\\minecraft\\client\\model\\SheepModel.java\r\nnet\\minecraft\\client\\model\\ShieldModel.java\r\nnet\\minecraft\\client\\model\\ShulkerBulletModel.java\r\nnet\\minecraft\\client\\model\\ShulkerModel.java\r\nnet\\minecraft\\client\\model\\SilverfishModel.java\r\nnet\\minecraft\\client\\model\\SkeletonModel.java\r\nnet\\minecraft\\client\\model\\SkullModel.java\r\nnet\\minecraft\\client\\model\\SkullModelBase.java\r\nnet\\minecraft\\client\\model\\SlimeModel.java\r\nnet\\minecraft\\client\\model\\SnifferModel.java\r\nnet\\minecraft\\client\\model\\SnowGolemModel.java\r\nnet\\minecraft\\client\\model\\SpiderModel.java\r\nnet\\minecraft\\client\\model\\SquidModel.java\r\nnet\\minecraft\\client\\model\\StriderModel.java\r\nnet\\minecraft\\client\\model\\TadpoleModel.java\r\nnet\\minecraft\\client\\model\\TridentModel.java\r\nnet\\minecraft\\client\\model\\TropicalFishModelA.java\r\nnet\\minecraft\\client\\model\\TropicalFishModelB.java\r\nnet\\minecraft\\client\\model\\TurtleModel.java\r\nnet\\minecraft\\client\\model\\VexModel.java\r\nnet\\minecraft\\client\\model\\VillagerHeadModel.java\r\nnet\\minecraft\\client\\model\\VillagerModel.java\r\nnet\\minecraft\\client\\model\\WardenModel.java\r\nnet\\minecraft\\client\\model\\WaterPatchModel.java\r\nnet\\minecraft\\client\\model\\WindChargeModel.java\r\nnet\\minecraft\\client\\model\\WitchModel.java\r\nnet\\minecraft\\client\\model\\WitherBossModel.java\r\nnet\\minecraft\\client\\model\\WolfModel.java\r\nnet\\minecraft\\client\\model\\ZombieModel.java\r\nnet\\minecraft\\client\\model\\ZombieVillagerModel.java\r\nnet\\minecraft\\client\\model\\dragon\\DragonHeadModel.java\r\nnet\\minecraft\\client\\model\\dragon\\package-info.java\r\nnet\\minecraft\\client\\model\\geom\\builders\r\nnet\\minecraft\\client\\model\\geom\\EntityModelSet.java\r\nnet\\minecraft\\client\\model\\geom\\LayerDefinitions.java\r\nnet\\minecraft\\client\\model\\geom\\ModelLayerLocation.java\r\nnet\\minecraft\\client\\model\\geom\\ModelLayers.java\r\nnet\\minecraft\\client\\model\\geom\\ModelPart.java\r\nnet\\minecraft\\client\\model\\geom\\package-info.java\r\nnet\\minecraft\\client\\model\\geom\\PartNames.java\r\nnet\\minecraft\\client\\model\\geom\\PartPose.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\CubeDefinition.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\CubeDeformation.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\CubeListBuilder.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\LayerDefinition.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\MaterialDefinition.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\MeshDefinition.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\package-info.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\PartDefinition.java\r\nnet\\minecraft\\client\\model\\geom\\builders\\UVPair.java\r\nnet\\minecraft\\client\\multiplayer\\chat\r\nnet\\minecraft\\client\\multiplayer\\prediction\r\nnet\\minecraft\\client\\multiplayer\\resolver\r\nnet\\minecraft\\client\\multiplayer\\AccountProfileKeyPairManager.java\r\nnet\\minecraft\\client\\multiplayer\\ChunkBatchSizeCalculator.java\r\nnet\\minecraft\\client\\multiplayer\\ClientAdvancements.java\r\nnet\\minecraft\\client\\multiplayer\\ClientChunkCache.java\r\nnet\\minecraft\\client\\multiplayer\\ClientCommonPacketListenerImpl.java\r\nnet\\minecraft\\client\\multiplayer\\ClientConfigurationPacketListenerImpl.java\r\nnet\\minecraft\\client\\multiplayer\\ClientHandshakePacketListenerImpl.java\r\nnet\\minecraft\\client\\multiplayer\\ClientLevel.java\r\nnet\\minecraft\\client\\multiplayer\\ClientPacketListener.java\r\nnet\\minecraft\\client\\multiplayer\\ClientRegistryLayer.java\r\nnet\\minecraft\\client\\multiplayer\\ClientSuggestionProvider.java\r\nnet\\minecraft\\client\\multiplayer\\CommonListenerCookie.java\r\nnet\\minecraft\\client\\multiplayer\\LegacyServerPinger.java\r\nnet\\minecraft\\client\\multiplayer\\LevelLoadStatusManager.java\r\nnet\\minecraft\\client\\multiplayer\\MultiPlayerGameMode.java\r\nnet\\minecraft\\client\\multiplayer\\package-info.java\r\nnet\\minecraft\\client\\multiplayer\\PingDebugMonitor.java\r\nnet\\minecraft\\client\\multiplayer\\PlayerInfo.java\r\nnet\\minecraft\\client\\multiplayer\\ProfileKeyPairManager.java\r\nnet\\minecraft\\client\\multiplayer\\ServerData.java\r\nnet\\minecraft\\client\\multiplayer\\ServerList.java\r\nnet\\minecraft\\client\\multiplayer\\ServerStatusPinger.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\r\nnet\\minecraft\\client\\multiplayer\\chat\\ChatListener.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\ChatLog.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\ChatTrustLevel.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\LoggedChatEvent.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\LoggedChatMessage.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\package-info.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\AbuseReportSender.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\BanReason.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\ChatReport.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\ChatReportContextBuilder.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\NameReport.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\package-info.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\Report.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\ReportEnvironment.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\ReportingContext.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\ReportReason.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\ReportType.java\r\nnet\\minecraft\\client\\multiplayer\\chat\\report\\SkinReport.java\r\nnet\\minecraft\\client\\multiplayer\\prediction\\BlockStatePredictionHandler.java\r\nnet\\minecraft\\client\\multiplayer\\prediction\\package-info.java\r\nnet\\minecraft\\client\\multiplayer\\prediction\\PredictiveAction.java\r\nnet\\minecraft\\client\\multiplayer\\resolver\\AddressCheck.java\r\nnet\\minecraft\\client\\multiplayer\\resolver\\package-info.java\r\nnet\\minecraft\\client\\multiplayer\\resolver\\ResolvedServerAddress.java\r\nnet\\minecraft\\client\\multiplayer\\resolver\\ServerAddress.java\r\nnet\\minecraft\\client\\multiplayer\\resolver\\ServerAddressResolver.java\r\nnet\\minecraft\\client\\multiplayer\\resolver\\ServerNameResolver.java\r\nnet\\minecraft\\client\\multiplayer\\resolver\\ServerRedirectHandler.java\r\nnet\\minecraft\\client\\particle\\AshParticle.java\r\nnet\\minecraft\\client\\particle\\AttackSweepParticle.java\r\nnet\\minecraft\\client\\particle\\BaseAshSmokeParticle.java\r\nnet\\minecraft\\client\\particle\\BlockMarker.java\r\nnet\\minecraft\\client\\particle\\BreakingItemParticle.java\r\nnet\\minecraft\\client\\particle\\BubbleColumnUpParticle.java\r\nnet\\minecraft\\client\\particle\\BubbleParticle.java\r\nnet\\minecraft\\client\\particle\\BubblePopParticle.java\r\nnet\\minecraft\\client\\particle\\CampfireSmokeParticle.java\r\nnet\\minecraft\\client\\particle\\CherryParticle.java\r\nnet\\minecraft\\client\\particle\\CritParticle.java\r\nnet\\minecraft\\client\\particle\\DragonBreathParticle.java\r\nnet\\minecraft\\client\\particle\\DripParticle.java\r\nnet\\minecraft\\client\\particle\\DustColorTransitionParticle.java\r\nnet\\minecraft\\client\\particle\\DustParticle.java\r\nnet\\minecraft\\client\\particle\\DustParticleBase.java\r\nnet\\minecraft\\client\\particle\\DustPlumeParticle.java\r\nnet\\minecraft\\client\\particle\\EnchantmentTableParticle.java\r\nnet\\minecraft\\client\\particle\\EndRodParticle.java\r\nnet\\minecraft\\client\\particle\\ExplodeParticle.java\r\nnet\\minecraft\\client\\particle\\FallingDustParticle.java\r\nnet\\minecraft\\client\\particle\\FireworkParticles.java\r\nnet\\minecraft\\client\\particle\\FlameParticle.java\r\nnet\\minecraft\\client\\particle\\GlowParticle.java\r\nnet\\minecraft\\client\\particle\\GustDustParticle.java\r\nnet\\minecraft\\client\\particle\\GustParticle.java\r\nnet\\minecraft\\client\\particle\\GustSeedParticle.java\r\nnet\\minecraft\\client\\particle\\HeartParticle.java\r\nnet\\minecraft\\client\\particle\\HugeExplosionParticle.java\r\nnet\\minecraft\\client\\particle\\HugeExplosionSeedParticle.java\r\nnet\\minecraft\\client\\particle\\ItemPickupParticle.java\r\nnet\\minecraft\\client\\particle\\LargeSmokeParticle.java\r\nnet\\minecraft\\client\\particle\\LavaParticle.java\r\nnet\\minecraft\\client\\particle\\MobAppearanceParticle.java\r\nnet\\minecraft\\client\\particle\\NoRenderParticle.java\r\nnet\\minecraft\\client\\particle\\NoteParticle.java\r\nnet\\minecraft\\client\\particle\\package-info.java\r\nnet\\minecraft\\client\\particle\\Particle.java\r\nnet\\minecraft\\client\\particle\\ParticleDescription.java\r\nnet\\minecraft\\client\\particle\\ParticleEngine.java\r\nnet\\minecraft\\client\\particle\\ParticleProvider.java\r\nnet\\minecraft\\client\\particle\\ParticleRenderType.java\r\nnet\\minecraft\\client\\particle\\PlayerCloudParticle.java\r\nnet\\minecraft\\client\\particle\\PortalParticle.java\r\nnet\\minecraft\\client\\particle\\ReversePortalParticle.java\r\nnet\\minecraft\\client\\particle\\RisingParticle.java\r\nnet\\minecraft\\client\\particle\\SculkChargeParticle.java\r\nnet\\minecraft\\client\\particle\\SculkChargePopParticle.java\r\nnet\\minecraft\\client\\particle\\ShriekParticle.java\r\nnet\\minecraft\\client\\particle\\SimpleAnimatedParticle.java\r\nnet\\minecraft\\client\\particle\\SingleQuadParticle.java\r\nnet\\minecraft\\client\\particle\\SmokeParticle.java\r\nnet\\minecraft\\client\\particle\\SnowflakeParticle.java\r\nnet\\minecraft\\client\\particle\\SonicBoomParticle.java\r\nnet\\minecraft\\client\\particle\\SoulParticle.java\r\nnet\\minecraft\\client\\particle\\SpellParticle.java\r\nnet\\minecraft\\client\\particle\\SpitParticle.java\r\nnet\\minecraft\\client\\particle\\SplashParticle.java\r\nnet\\minecraft\\client\\particle\\SpriteSet.java\r\nnet\\minecraft\\client\\particle\\SquidInkParticle.java\r\nnet\\minecraft\\client\\particle\\SuspendedParticle.java\r\nnet\\minecraft\\client\\particle\\SuspendedTownParticle.java\r\nnet\\minecraft\\client\\particle\\TerrainParticle.java\r\nnet\\minecraft\\client\\particle\\TextureSheetParticle.java\r\nnet\\minecraft\\client\\particle\\TotemParticle.java\r\nnet\\minecraft\\client\\particle\\TrackingEmitter.java\r\nnet\\minecraft\\client\\particle\\TrialSpawnerDetectionParticle.java\r\nnet\\minecraft\\client\\particle\\VibrationSignalParticle.java\r\nnet\\minecraft\\client\\particle\\WakeParticle.java\r\nnet\\minecraft\\client\\particle\\WaterCurrentDownParticle.java\r\nnet\\minecraft\\client\\particle\\WaterDropParticle.java\r\nnet\\minecraft\\client\\particle\\WhiteAshParticle.java\r\nnet\\minecraft\\client\\particle\\WhiteSmokeParticle.java\r\nnet\\minecraft\\client\\player\\inventory\r\nnet\\minecraft\\client\\player\\AbstractClientPlayer.java\r\nnet\\minecraft\\client\\player\\Input.java\r\nnet\\minecraft\\client\\player\\KeyboardInput.java\r\nnet\\minecraft\\client\\player\\LocalPlayer.java\r\nnet\\minecraft\\client\\player\\package-info.java\r\nnet\\minecraft\\client\\player\\RemotePlayer.java\r\nnet\\minecraft\\client\\player\\inventory\\Hotbar.java\r\nnet\\minecraft\\client\\player\\inventory\\package-info.java\r\nnet\\minecraft\\client\\profiling\\ClientMetricsSamplersProvider.java\r\nnet\\minecraft\\client\\profiling\\package-info.java\r\nnet\\minecraft\\client\\quickplay\\package-info.java\r\nnet\\minecraft\\client\\quickplay\\QuickPlay.java\r\nnet\\minecraft\\client\\quickplay\\QuickPlayLog.java\r\nnet\\minecraft\\client\\renderer\\block\r\nnet\\minecraft\\client\\renderer\\blockentity\r\nnet\\minecraft\\client\\renderer\\chunk\r\nnet\\minecraft\\client\\renderer\\culling\r\nnet\\minecraft\\client\\renderer\\debug\r\nnet\\minecraft\\client\\renderer\\entity\r\nnet\\minecraft\\client\\renderer\\item\r\nnet\\minecraft\\client\\renderer\\texture\r\nnet\\minecraft\\client\\renderer\\BiomeColors.java\r\nnet\\minecraft\\client\\renderer\\BlockEntityWithoutLevelRenderer.java\r\nnet\\minecraft\\client\\renderer\\CubeMap.java\r\nnet\\minecraft\\client\\renderer\\DimensionSpecialEffects.java\r\nnet\\minecraft\\client\\renderer\\EffectInstance.java\r\nnet\\minecraft\\client\\renderer\\FaceInfo.java\r\nnet\\minecraft\\client\\renderer\\FogRenderer.java\r\nnet\\minecraft\\client\\renderer\\GameRenderer.java\r\nnet\\minecraft\\client\\renderer\\GpuWarnlistManager.java\r\nnet\\minecraft\\client\\renderer\\ItemBlockRenderTypes.java\r\nnet\\minecraft\\client\\renderer\\ItemInHandRenderer.java\r\nnet\\minecraft\\client\\renderer\\ItemModelShaper.java\r\nnet\\minecraft\\client\\renderer\\LevelRenderer.java\r\nnet\\minecraft\\client\\renderer\\LightTexture.java\r\nnet\\minecraft\\client\\renderer\\MultiBufferSource.java\r\nnet\\minecraft\\client\\renderer\\OutlineBufferSource.java\r\nnet\\minecraft\\client\\renderer\\package-info.java\r\nnet\\minecraft\\client\\renderer\\PanoramaRenderer.java\r\nnet\\minecraft\\client\\renderer\\PostChain.java\r\nnet\\minecraft\\client\\renderer\\PostPass.java\r\nnet\\minecraft\\client\\renderer\\Rect2i.java\r\nnet\\minecraft\\client\\renderer\\RenderBuffers.java\r\nnet\\minecraft\\client\\renderer\\RenderStateShard.java\r\nnet\\minecraft\\client\\renderer\\RenderType.java\r\nnet\\minecraft\\client\\renderer\\RunningTrimmedMean.java\r\nnet\\minecraft\\client\\renderer\\ScreenEffectRenderer.java\r\nnet\\minecraft\\client\\renderer\\SectionBufferBuilderPack.java\r\nnet\\minecraft\\client\\renderer\\SectionBufferBuilderPool.java\r\nnet\\minecraft\\client\\renderer\\SectionOcclusionGraph.java\r\nnet\\minecraft\\client\\renderer\\ShaderInstance.java\r\nnet\\minecraft\\client\\renderer\\Sheets.java\r\nnet\\minecraft\\client\\renderer\\SpriteCoordinateExpander.java\r\nnet\\minecraft\\client\\renderer\\ViewArea.java\r\nnet\\minecraft\\client\\renderer\\VirtualScreen.java\r\nnet\\minecraft\\client\\renderer\\block\\model\r\nnet\\minecraft\\client\\renderer\\block\\BlockModelShaper.java\r\nnet\\minecraft\\client\\renderer\\block\\BlockRenderDispatcher.java\r\nnet\\minecraft\\client\\renderer\\block\\LiquidBlockRenderer.java\r\nnet\\minecraft\\client\\renderer\\block\\ModelBlockRenderer.java\r\nnet\\minecraft\\client\\renderer\\block\\package-info.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\multipart\r\nnet\\minecraft\\client\\renderer\\block\\model\\BakedQuad.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\BlockElement.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\BlockElementFace.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\BlockElementRotation.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\BlockFaceUV.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\BlockModel.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\BlockModelDefinition.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\FaceBakery.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\ItemModelGenerator.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\ItemOverride.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\ItemOverrides.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\ItemTransform.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\ItemTransforms.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\MultiVariant.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\package-info.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\Variant.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\multipart\\AndCondition.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\multipart\\Condition.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\multipart\\KeyValueCondition.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\multipart\\MultiPart.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\multipart\\OrCondition.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\multipart\\package-info.java\r\nnet\\minecraft\\client\\renderer\\block\\model\\multipart\\Selector.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BannerRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BeaconRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BedRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BellRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BlockEntityRenderDispatcher.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BlockEntityRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BlockEntityRendererProvider.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BlockEntityRenderers.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BrightnessCombiner.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\BrushableBlockRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\CampfireRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\ChestRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\ConduitRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\DecoratedPotRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\EnchantTableRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\HangingSignRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\LecternRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\package-info.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\PistonHeadRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\ShulkerBoxRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\SignRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\SkullBlockRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\SpawnerRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\StructureBlockRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\TheEndGatewayRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\TheEndPortalRenderer.java\r\nnet\\minecraft\\client\\renderer\\blockentity\\TrialSpawnerRenderer.java\r\nnet\\minecraft\\client\\renderer\\chunk\\package-info.java\r\nnet\\minecraft\\client\\renderer\\chunk\\RenderChunk.java\r\nnet\\minecraft\\client\\renderer\\chunk\\RenderChunkRegion.java\r\nnet\\minecraft\\client\\renderer\\chunk\\RenderRegionCache.java\r\nnet\\minecraft\\client\\renderer\\chunk\\SectionRenderDispatcher.java\r\nnet\\minecraft\\client\\renderer\\chunk\\VisGraph.java\r\nnet\\minecraft\\client\\renderer\\chunk\\VisibilitySet.java\r\nnet\\minecraft\\client\\renderer\\culling\\Frustum.java\r\nnet\\minecraft\\client\\renderer\\culling\\package-info.java\r\nnet\\minecraft\\client\\renderer\\debug\\BeeDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\BrainDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\BreezeDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\ChunkBorderRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\ChunkDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\CollisionBoxRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\DebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\GameEventListenerRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\GameTestDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\GoalSelectorDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\HeightMapRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\LightDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\LightSectionDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\NeighborsUpdateRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\package-info.java\r\nnet\\minecraft\\client\\renderer\\debug\\PathfindingRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\RaidDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\SolidFaceRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\StructureRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\SupportBlockRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\VillageSectionsDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\WaterDebugRenderer.java\r\nnet\\minecraft\\client\\renderer\\debug\\WorldGenAttemptRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\r\nnet\\minecraft\\client\\renderer\\entity\\player\r\nnet\\minecraft\\client\\renderer\\entity\\AbstractHorseRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\AbstractZombieRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\AllayRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ArmorStandRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ArrowRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\AxolotlRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\BatRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\BeeRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\BlazeRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\BoatRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\BreezeRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\CamelRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\CatRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\CaveSpiderRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ChestedHorseRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ChickenRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\CodRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\CowRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\CreeperRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\DisplayRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\DolphinRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\DragonFireballRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\DrownedRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ElderGuardianRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\EndCrystalRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\EnderDragonRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\EndermanRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\EndermiteRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\EntityRenderDispatcher.java\r\nnet\\minecraft\\client\\renderer\\entity\\EntityRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\EntityRendererProvider.java\r\nnet\\minecraft\\client\\renderer\\entity\\EntityRenderers.java\r\nnet\\minecraft\\client\\renderer\\entity\\EvokerFangsRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\EvokerRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ExperienceOrbRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\FallingBlockRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\FireworkEntityRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\FishingHookRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\FoxRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\FrogRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\GhastRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\GiantMobRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\GlowSquidRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\GoatRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\GuardianRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\HoglinRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\HorseRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\HumanoidMobRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\HuskRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\IllagerRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\IllusionerRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\IronGolemRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ItemEntityRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ItemFrameRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ItemRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\LeashKnotRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\LightningBoltRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\LivingEntityRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\LlamaRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\LlamaSpitRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\MagmaCubeRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\MinecartRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\MobRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\MushroomCowRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\NoopRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\OcelotRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\package-info.java\r\nnet\\minecraft\\client\\renderer\\entity\\PaintingRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\PandaRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ParrotRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\PhantomRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\PiglinRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\PigRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\PillagerRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\PolarBearRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\PufferfishRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\RabbitRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\RavagerRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\RenderLayerParent.java\r\nnet\\minecraft\\client\\renderer\\entity\\SalmonRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SheepRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ShulkerBulletRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ShulkerRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SilverfishRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SkeletonRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SlimeRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SnifferRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SnowGolemRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SpectralArrowRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SpiderRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\SquidRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\StrayRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\StriderRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\TadpoleRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ThrownItemRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ThrownTridentRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\TippableArrowRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\TntMinecartRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\TntRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\TropicalFishRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\TurtleRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\UndeadHorseRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\VexRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\VillagerRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\VindicatorRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\WanderingTraderRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\WardenRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\WindChargeRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\WitchRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\WitherBossRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\WitherSkeletonRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\WitherSkullRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\WolfRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ZoglinRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ZombieRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\ZombieVillagerRenderer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\ArrowLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\BeeStingerLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\BreezeEyesLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\BreezeWindLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\CapeLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\CarriedBlockLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\CatCollarLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\CreeperPowerLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\CrossedArmsItemLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\CustomHeadLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\Deadmau5EarsLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\DolphinCarryingItemLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\DrownedOuterLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\ElytraLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\EnderEyesLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\EnergySwirlLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\EyesLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\FoxHeldItemLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\HorseArmorLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\HorseMarkingLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\HumanoidArmorLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\IronGolemCrackinessLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\IronGolemFlowerLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\ItemInHandLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\LlamaDecorLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\MushroomCowMushroomLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\package-info.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\PandaHoldsItemLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\ParrotOnShoulderLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\PhantomEyesLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\PlayerItemInHandLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\RenderLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\SaddleLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\SheepFurLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\ShulkerHeadLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\SlimeOuterLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\SnowGolemHeadLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\SpiderEyesLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\SpinAttackEffectLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\StrayClothingLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\StuckInBodyLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\TropicalFishPatternLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\VillagerProfessionLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\WardenEmissiveLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\WitchItemLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\WitherArmorLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\layers\\WolfCollarLayer.java\r\nnet\\minecraft\\client\\renderer\\entity\\player\\package-info.java\r\nnet\\minecraft\\client\\renderer\\entity\\player\\PlayerRenderer.java\r\nnet\\minecraft\\client\\renderer\\item\\ClampedItemPropertyFunction.java\r\nnet\\minecraft\\client\\renderer\\item\\CompassItemPropertyFunction.java\r\nnet\\minecraft\\client\\renderer\\item\\ItemProperties.java\r\nnet\\minecraft\\client\\renderer\\item\\ItemPropertyFunction.java\r\nnet\\minecraft\\client\\renderer\\item\\package-info.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\r\nnet\\minecraft\\client\\renderer\\texture\\AbstractTexture.java\r\nnet\\minecraft\\client\\renderer\\texture\\Dumpable.java\r\nnet\\minecraft\\client\\renderer\\texture\\DynamicTexture.java\r\nnet\\minecraft\\client\\renderer\\texture\\HttpTexture.java\r\nnet\\minecraft\\client\\renderer\\texture\\MipmapGenerator.java\r\nnet\\minecraft\\client\\renderer\\texture\\MissingTextureAtlasSprite.java\r\nnet\\minecraft\\client\\renderer\\texture\\OverlayTexture.java\r\nnet\\minecraft\\client\\renderer\\texture\\package-info.java\r\nnet\\minecraft\\client\\renderer\\texture\\PreloadedTexture.java\r\nnet\\minecraft\\client\\renderer\\texture\\SimpleTexture.java\r\nnet\\minecraft\\client\\renderer\\texture\\SpriteContents.java\r\nnet\\minecraft\\client\\renderer\\texture\\SpriteLoader.java\r\nnet\\minecraft\\client\\renderer\\texture\\SpriteTicker.java\r\nnet\\minecraft\\client\\renderer\\texture\\Stitcher.java\r\nnet\\minecraft\\client\\renderer\\texture\\StitcherException.java\r\nnet\\minecraft\\client\\renderer\\texture\\TextureAtlas.java\r\nnet\\minecraft\\client\\renderer\\texture\\TextureAtlasSprite.java\r\nnet\\minecraft\\client\\renderer\\texture\\TextureManager.java\r\nnet\\minecraft\\client\\renderer\\texture\\Tickable.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\sources\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\package-info.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\SpriteResourceLoader.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\SpriteSource.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\SpriteSourceList.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\SpriteSources.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\SpriteSourceType.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\sources\\DirectoryLister.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\sources\\LazyLoadedImage.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\sources\\package-info.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\sources\\PalettedPermutations.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\sources\\SingleFile.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\sources\\SourceFilter.java\r\nnet\\minecraft\\client\\renderer\\texture\\atlas\\sources\\Unstitcher.java\r\nnet\\minecraft\\client\\resources\\language\r\nnet\\minecraft\\client\\resources\\metadata\r\nnet\\minecraft\\client\\resources\\model\r\nnet\\minecraft\\client\\resources\\server\r\nnet\\minecraft\\client\\resources\\sounds\r\nnet\\minecraft\\client\\resources\\ClientPackSource.java\r\nnet\\minecraft\\client\\resources\\DefaultPlayerSkin.java\r\nnet\\minecraft\\client\\resources\\FoliageColorReloadListener.java\r\nnet\\minecraft\\client\\resources\\GrassColorReloadListener.java\r\nnet\\minecraft\\client\\resources\\IndexedAssetSource.java\r\nnet\\minecraft\\client\\resources\\LegacyStuffWrapper.java\r\nnet\\minecraft\\client\\resources\\MobEffectTextureManager.java\r\nnet\\minecraft\\client\\resources\\package-info.java\r\nnet\\minecraft\\client\\resources\\PaintingTextureManager.java\r\nnet\\minecraft\\client\\resources\\PlayerSkin.java\r\nnet\\minecraft\\client\\resources\\SkinManager.java\r\nnet\\minecraft\\client\\resources\\SplashManager.java\r\nnet\\minecraft\\client\\resources\\TextureAtlasHolder.java\r\nnet\\minecraft\\client\\resources\\language\\ClientLanguage.java\r\nnet\\minecraft\\client\\resources\\language\\FormattedBidiReorder.java\r\nnet\\minecraft\\client\\resources\\language\\I18n.java\r\nnet\\minecraft\\client\\resources\\language\\LanguageInfo.java\r\nnet\\minecraft\\client\\resources\\language\\LanguageManager.java\r\nnet\\minecraft\\client\\resources\\language\\package-info.java\r\nnet\\minecraft\\client\\resources\\metadata\\animation\r\nnet\\minecraft\\client\\resources\\metadata\\gui\r\nnet\\minecraft\\client\\resources\\metadata\\language\r\nnet\\minecraft\\client\\resources\\metadata\\texture\r\nnet\\minecraft\\client\\resources\\metadata\\package-info.java\r\nnet\\minecraft\\client\\resources\\metadata\\animation\\AnimationFrame.java\r\nnet\\minecraft\\client\\resources\\metadata\\animation\\AnimationMetadataSection.java\r\nnet\\minecraft\\client\\resources\\metadata\\animation\\AnimationMetadataSectionSerializer.java\r\nnet\\minecraft\\client\\resources\\metadata\\animation\\FrameSize.java\r\nnet\\minecraft\\client\\resources\\metadata\\animation\\package-info.java\r\nnet\\minecraft\\client\\resources\\metadata\\animation\\VillagerMetaDataSection.java\r\nnet\\minecraft\\client\\resources\\metadata\\animation\\VillagerMetadataSectionSerializer.java\r\nnet\\minecraft\\client\\resources\\metadata\\gui\\GuiMetadataSection.java\r\nnet\\minecraft\\client\\resources\\metadata\\gui\\GuiSpriteScaling.java\r\nnet\\minecraft\\client\\resources\\metadata\\gui\\package-info.java\r\nnet\\minecraft\\client\\resources\\metadata\\language\\LanguageMetadataSection.java\r\nnet\\minecraft\\client\\resources\\metadata\\language\\package-info.java\r\nnet\\minecraft\\client\\resources\\metadata\\texture\\package-info.java\r\nnet\\minecraft\\client\\resources\\metadata\\texture\\TextureMetadataSection.java\r\nnet\\minecraft\\client\\resources\\metadata\\texture\\TextureMetadataSectionSerializer.java\r\nnet\\minecraft\\client\\resources\\model\\AtlasSet.java\r\nnet\\minecraft\\client\\resources\\model\\BakedModel.java\r\nnet\\minecraft\\client\\resources\\model\\BlockModelRotation.java\r\nnet\\minecraft\\client\\resources\\model\\BuiltInModel.java\r\nnet\\minecraft\\client\\resources\\model\\Material.java\r\nnet\\minecraft\\client\\resources\\model\\ModelBaker.java\r\nnet\\minecraft\\client\\resources\\model\\ModelBakery.java\r\nnet\\minecraft\\client\\resources\\model\\ModelManager.java\r\nnet\\minecraft\\client\\resources\\model\\ModelResourceLocation.java\r\nnet\\minecraft\\client\\resources\\model\\ModelState.java\r\nnet\\minecraft\\client\\resources\\model\\MultiPartBakedModel.java\r\nnet\\minecraft\\client\\resources\\model\\package-info.java\r\nnet\\minecraft\\client\\resources\\model\\SimpleBakedModel.java\r\nnet\\minecraft\\client\\resources\\model\\UnbakedModel.java\r\nnet\\minecraft\\client\\resources\\model\\WeightedBakedModel.java\r\nnet\\minecraft\\client\\resources\\server\\DownloadedPackSource.java\r\nnet\\minecraft\\client\\resources\\server\\package-info.java\r\nnet\\minecraft\\client\\resources\\server\\PackDownloader.java\r\nnet\\minecraft\\client\\resources\\server\\PackLoadFeedback.java\r\nnet\\minecraft\\client\\resources\\server\\PackReloadConfig.java\r\nnet\\minecraft\\client\\resources\\server\\ServerPackManager.java\r\nnet\\minecraft\\client\\resources\\sounds\\AbstractSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\AbstractTickableSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\AmbientSoundHandler.java\r\nnet\\minecraft\\client\\resources\\sounds\\BeeAggressiveSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\BeeFlyingSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\BeeSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\BiomeAmbientSoundsHandler.java\r\nnet\\minecraft\\client\\resources\\sounds\\BubbleColumnAmbientSoundHandler.java\r\nnet\\minecraft\\client\\resources\\sounds\\ElytraOnPlayerSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\EntityBoundSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\GuardianAttackSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\MinecartSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\package-info.java\r\nnet\\minecraft\\client\\resources\\sounds\\RidingMinecartSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\SimpleSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\SnifferSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\Sound.java\r\nnet\\minecraft\\client\\resources\\sounds\\SoundEventRegistration.java\r\nnet\\minecraft\\client\\resources\\sounds\\SoundEventRegistrationSerializer.java\r\nnet\\minecraft\\client\\resources\\sounds\\SoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\TickableSoundInstance.java\r\nnet\\minecraft\\client\\resources\\sounds\\UnderwaterAmbientSoundHandler.java\r\nnet\\minecraft\\client\\resources\\sounds\\UnderwaterAmbientSoundInstances.java\r\nnet\\minecraft\\client\\searchtree\\FullTextSearchTree.java\r\nnet\\minecraft\\client\\searchtree\\IdSearchTree.java\r\nnet\\minecraft\\client\\searchtree\\IntersectionIterator.java\r\nnet\\minecraft\\client\\searchtree\\MergingUniqueIterator.java\r\nnet\\minecraft\\client\\searchtree\\package-info.java\r\nnet\\minecraft\\client\\searchtree\\PlainTextSearchTree.java\r\nnet\\minecraft\\client\\searchtree\\RefreshableSearchTree.java\r\nnet\\minecraft\\client\\searchtree\\ResourceLocationSearchTree.java\r\nnet\\minecraft\\client\\searchtree\\SearchRegistry.java\r\nnet\\minecraft\\client\\searchtree\\SearchTree.java\r\nnet\\minecraft\\client\\searchtree\\SuffixArray.java\r\nnet\\minecraft\\client\\server\\IntegratedPlayerList.java\r\nnet\\minecraft\\client\\server\\IntegratedServer.java\r\nnet\\minecraft\\client\\server\\LanServer.java\r\nnet\\minecraft\\client\\server\\LanServerDetection.java\r\nnet\\minecraft\\client\\server\\LanServerPinger.java\r\nnet\\minecraft\\client\\server\\package-info.java\r\nnet\\minecraft\\client\\sounds\\AudioStream.java\r\nnet\\minecraft\\client\\sounds\\ChannelAccess.java\r\nnet\\minecraft\\client\\sounds\\LoopingAudioStream.java\r\nnet\\minecraft\\client\\sounds\\MusicManager.java\r\nnet\\minecraft\\client\\sounds\\package-info.java\r\nnet\\minecraft\\client\\sounds\\SoundBufferLibrary.java\r\nnet\\minecraft\\client\\sounds\\SoundEngine.java\r\nnet\\minecraft\\client\\sounds\\SoundEngineExecutor.java\r\nnet\\minecraft\\client\\sounds\\SoundEventListener.java\r\nnet\\minecraft\\client\\sounds\\SoundManager.java\r\nnet\\minecraft\\client\\sounds\\WeighedSoundEvents.java\r\nnet\\minecraft\\client\\sounds\\Weighted.java\r\nnet\\minecraft\\client\\telemetry\\events\r\nnet\\minecraft\\client\\telemetry\\ClientTelemetryManager.java\r\nnet\\minecraft\\client\\telemetry\\package-info.java\r\nnet\\minecraft\\client\\telemetry\\TelemetryEventInstance.java\r\nnet\\minecraft\\client\\telemetry\\TelemetryEventLog.java\r\nnet\\minecraft\\client\\telemetry\\TelemetryEventLogger.java\r\nnet\\minecraft\\client\\telemetry\\TelemetryEventSender.java\r\nnet\\minecraft\\client\\telemetry\\TelemetryEventType.java\r\nnet\\minecraft\\client\\telemetry\\TelemetryLogManager.java\r\nnet\\minecraft\\client\\telemetry\\TelemetryProperty.java\r\nnet\\minecraft\\client\\telemetry\\TelemetryPropertyMap.java\r\nnet\\minecraft\\client\\telemetry\\WorldSessionTelemetryManager.java\r\nnet\\minecraft\\client\\telemetry\\events\\AggregatedTelemetryEvent.java\r\nnet\\minecraft\\client\\telemetry\\events\\GameLoadTimesEvent.java\r\nnet\\minecraft\\client\\telemetry\\events\\package-info.java\r\nnet\\minecraft\\client\\telemetry\\events\\PerformanceMetricsEvent.java\r\nnet\\minecraft\\client\\telemetry\\events\\WorldLoadEvent.java\r\nnet\\minecraft\\client\\telemetry\\events\\WorldLoadTimesEvent.java\r\nnet\\minecraft\\client\\telemetry\\events\\WorldUnloadEvent.java\r\nnet\\minecraft\\client\\tutorial\\BundleTutorial.java\r\nnet\\minecraft\\client\\tutorial\\CompletedTutorialStepInstance.java\r\nnet\\minecraft\\client\\tutorial\\CraftPlanksTutorialStep.java\r\nnet\\minecraft\\client\\tutorial\\FindTreeTutorialStepInstance.java\r\nnet\\minecraft\\client\\tutorial\\MovementTutorialStepInstance.java\r\nnet\\minecraft\\client\\tutorial\\OpenInventoryTutorialStep.java\r\nnet\\minecraft\\client\\tutorial\\package-info.java\r\nnet\\minecraft\\client\\tutorial\\PunchTreeTutorialStepInstance.java\r\nnet\\minecraft\\client\\tutorial\\Tutorial.java\r\nnet\\minecraft\\client\\tutorial\\TutorialStepInstance.java\r\nnet\\minecraft\\client\\tutorial\\TutorialSteps.java\r\nnet\\minecraft\\commands\\arguments\r\nnet\\minecraft\\commands\\execution\r\nnet\\minecraft\\commands\\functions\r\nnet\\minecraft\\commands\\synchronization\r\nnet\\minecraft\\commands\\BrigadierExceptions.java\r\nnet\\minecraft\\commands\\CacheableFunction.java\r\nnet\\minecraft\\commands\\CommandBuildContext.java\r\nnet\\minecraft\\commands\\CommandResultCallback.java\r\nnet\\minecraft\\commands\\Commands.java\r\nnet\\minecraft\\commands\\CommandSigningContext.java\r\nnet\\minecraft\\commands\\CommandSource.java\r\nnet\\minecraft\\commands\\CommandSourceStack.java\r\nnet\\minecraft\\commands\\ExecutionCommandSource.java\r\nnet\\minecraft\\commands\\FunctionInstantiationException.java\r\nnet\\minecraft\\commands\\package-info.java\r\nnet\\minecraft\\commands\\ParserUtils.java\r\nnet\\minecraft\\commands\\SharedSuggestionProvider.java\r\nnet\\minecraft\\commands\\arguments\\blocks\r\nnet\\minecraft\\commands\\arguments\\coordinates\r\nnet\\minecraft\\commands\\arguments\\item\r\nnet\\minecraft\\commands\\arguments\\selector\r\nnet\\minecraft\\commands\\arguments\\AngleArgument.java\r\nnet\\minecraft\\commands\\arguments\\ArgumentSignatures.java\r\nnet\\minecraft\\commands\\arguments\\ColorArgument.java\r\nnet\\minecraft\\commands\\arguments\\ComponentArgument.java\r\nnet\\minecraft\\commands\\arguments\\CompoundTagArgument.java\r\nnet\\minecraft\\commands\\arguments\\DimensionArgument.java\r\nnet\\minecraft\\commands\\arguments\\EntityAnchorArgument.java\r\nnet\\minecraft\\commands\\arguments\\EntityArgument.java\r\nnet\\minecraft\\commands\\arguments\\GameModeArgument.java\r\nnet\\minecraft\\commands\\arguments\\GameProfileArgument.java\r\nnet\\minecraft\\commands\\arguments\\HeightmapTypeArgument.java\r\nnet\\minecraft\\commands\\arguments\\MessageArgument.java\r\nnet\\minecraft\\commands\\arguments\\NbtPathArgument.java\r\nnet\\minecraft\\commands\\arguments\\NbtTagArgument.java\r\nnet\\minecraft\\commands\\arguments\\ObjectiveArgument.java\r\nnet\\minecraft\\commands\\arguments\\ObjectiveCriteriaArgument.java\r\nnet\\minecraft\\commands\\arguments\\OperationArgument.java\r\nnet\\minecraft\\commands\\arguments\\package-info.java\r\nnet\\minecraft\\commands\\arguments\\ParticleArgument.java\r\nnet\\minecraft\\commands\\arguments\\RangeArgument.java\r\nnet\\minecraft\\commands\\arguments\\ResourceArgument.java\r\nnet\\minecraft\\commands\\arguments\\ResourceKeyArgument.java\r\nnet\\minecraft\\commands\\arguments\\ResourceLocationArgument.java\r\nnet\\minecraft\\commands\\arguments\\ResourceOrTagArgument.java\r\nnet\\minecraft\\commands\\arguments\\ResourceOrTagKeyArgument.java\r\nnet\\minecraft\\commands\\arguments\\ScoreboardSlotArgument.java\r\nnet\\minecraft\\commands\\arguments\\ScoreHolderArgument.java\r\nnet\\minecraft\\commands\\arguments\\SignedArgument.java\r\nnet\\minecraft\\commands\\arguments\\SlotArgument.java\r\nnet\\minecraft\\commands\\arguments\\StringRepresentableArgument.java\r\nnet\\minecraft\\commands\\arguments\\StyleArgument.java\r\nnet\\minecraft\\commands\\arguments\\TeamArgument.java\r\nnet\\minecraft\\commands\\arguments\\TemplateMirrorArgument.java\r\nnet\\minecraft\\commands\\arguments\\TemplateRotationArgument.java\r\nnet\\minecraft\\commands\\arguments\\TimeArgument.java\r\nnet\\minecraft\\commands\\arguments\\UuidArgument.java\r\nnet\\minecraft\\commands\\arguments\\blocks\\BlockInput.java\r\nnet\\minecraft\\commands\\arguments\\blocks\\BlockPredicateArgument.java\r\nnet\\minecraft\\commands\\arguments\\blocks\\BlockStateArgument.java\r\nnet\\minecraft\\commands\\arguments\\blocks\\BlockStateParser.java\r\nnet\\minecraft\\commands\\arguments\\blocks\\package-info.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\BlockPosArgument.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\ColumnPosArgument.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\Coordinates.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\LocalCoordinates.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\package-info.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\RotationArgument.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\SwizzleArgument.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\Vec2Argument.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\Vec3Argument.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\WorldCoordinate.java\r\nnet\\minecraft\\commands\\arguments\\coordinates\\WorldCoordinates.java\r\nnet\\minecraft\\commands\\arguments\\item\\FunctionArgument.java\r\nnet\\minecraft\\commands\\arguments\\item\\ItemArgument.java\r\nnet\\minecraft\\commands\\arguments\\item\\ItemInput.java\r\nnet\\minecraft\\commands\\arguments\\item\\ItemParser.java\r\nnet\\minecraft\\commands\\arguments\\item\\ItemPredicateArgument.java\r\nnet\\minecraft\\commands\\arguments\\item\\package-info.java\r\nnet\\minecraft\\commands\\arguments\\selector\\options\r\nnet\\minecraft\\commands\\arguments\\selector\\EntitySelector.java\r\nnet\\minecraft\\commands\\arguments\\selector\\EntitySelectorParser.java\r\nnet\\minecraft\\commands\\arguments\\selector\\package-info.java\r\nnet\\minecraft\\commands\\arguments\\selector\\options\\EntitySelectorOptions.java\r\nnet\\minecraft\\commands\\arguments\\selector\\options\\package-info.java\r\nnet\\minecraft\\commands\\execution\\tasks\r\nnet\\minecraft\\commands\\execution\\ChainModifiers.java\r\nnet\\minecraft\\commands\\execution\\CommandQueueEntry.java\r\nnet\\minecraft\\commands\\execution\\CustomCommandExecutor.java\r\nnet\\minecraft\\commands\\execution\\CustomModifierExecutor.java\r\nnet\\minecraft\\commands\\execution\\EntryAction.java\r\nnet\\minecraft\\commands\\execution\\ExecutionContext.java\r\nnet\\minecraft\\commands\\execution\\ExecutionControl.java\r\nnet\\minecraft\\commands\\execution\\Frame.java\r\nnet\\minecraft\\commands\\execution\\package-info.java\r\nnet\\minecraft\\commands\\execution\\TraceCallbacks.java\r\nnet\\minecraft\\commands\\execution\\UnboundEntryAction.java\r\nnet\\minecraft\\commands\\execution\\tasks\\BuildContexts.java\r\nnet\\minecraft\\commands\\execution\\tasks\\CallFunction.java\r\nnet\\minecraft\\commands\\execution\\tasks\\ContinuationTask.java\r\nnet\\minecraft\\commands\\execution\\tasks\\ExecuteCommand.java\r\nnet\\minecraft\\commands\\execution\\tasks\\FallthroughTask.java\r\nnet\\minecraft\\commands\\execution\\tasks\\IsolatedCall.java\r\nnet\\minecraft\\commands\\execution\\tasks\\package-info.java\r\nnet\\minecraft\\commands\\functions\\CommandFunction.java\r\nnet\\minecraft\\commands\\functions\\FunctionBuilder.java\r\nnet\\minecraft\\commands\\functions\\InstantiatedFunction.java\r\nnet\\minecraft\\commands\\functions\\MacroFunction.java\r\nnet\\minecraft\\commands\\functions\\package-info.java\r\nnet\\minecraft\\commands\\functions\\PlainTextFunction.java\r\nnet\\minecraft\\commands\\functions\\StringTemplate.java\r\nnet\\minecraft\\commands\\synchronization\\brigadier\r\nnet\\minecraft\\commands\\synchronization\\ArgumentTypeInfo.java\r\nnet\\minecraft\\commands\\synchronization\\ArgumentTypeInfos.java\r\nnet\\minecraft\\commands\\synchronization\\ArgumentUtils.java\r\nnet\\minecraft\\commands\\synchronization\\package-info.java\r\nnet\\minecraft\\commands\\synchronization\\SingletonArgumentInfo.java\r\nnet\\minecraft\\commands\\synchronization\\SuggestionProviders.java\r\nnet\\minecraft\\commands\\synchronization\\brigadier\\DoubleArgumentInfo.java\r\nnet\\minecraft\\commands\\synchronization\\brigadier\\FloatArgumentInfo.java\r\nnet\\minecraft\\commands\\synchronization\\brigadier\\IntegerArgumentInfo.java\r\nnet\\minecraft\\commands\\synchronization\\brigadier\\LongArgumentInfo.java\r\nnet\\minecraft\\commands\\synchronization\\brigadier\\package-info.java\r\nnet\\minecraft\\commands\\synchronization\\brigadier\\StringArgumentSerializer.java\r\nnet\\minecraft\\core\\cauldron\r\nnet\\minecraft\\core\\dispenser\r\nnet\\minecraft\\core\\particles\r\nnet\\minecraft\\core\\registries\r\nnet\\minecraft\\core\\AxisCycle.java\r\nnet\\minecraft\\core\\BlockMath.java\r\nnet\\minecraft\\core\\BlockPos.java\r\nnet\\minecraft\\core\\Cloner.java\r\nnet\\minecraft\\core\\Cursor3D.java\r\nnet\\minecraft\\core\\DefaultedMappedRegistry.java\r\nnet\\minecraft\\core\\DefaultedRegistry.java\r\nnet\\minecraft\\core\\Direction.java\r\nnet\\minecraft\\core\\Direction8.java\r\nnet\\minecraft\\core\\FrontAndTop.java\r\nnet\\minecraft\\core\\GlobalPos.java\r\nnet\\minecraft\\core\\Holder.java\r\nnet\\minecraft\\core\\HolderGetter.java\r\nnet\\minecraft\\core\\HolderLookup.java\r\nnet\\minecraft\\core\\HolderOwner.java\r\nnet\\minecraft\\core\\HolderSet.java\r\nnet\\minecraft\\core\\IdMap.java\r\nnet\\minecraft\\core\\IdMapper.java\r\nnet\\minecraft\\core\\LayeredRegistryAccess.java\r\nnet\\minecraft\\core\\MappedRegistry.java\r\nnet\\minecraft\\core\\NonNullList.java\r\nnet\\minecraft\\core\\package-info.java\r\nnet\\minecraft\\core\\Position.java\r\nnet\\minecraft\\core\\QuartPos.java\r\nnet\\minecraft\\core\\Registry.java\r\nnet\\minecraft\\core\\RegistryAccess.java\r\nnet\\minecraft\\core\\RegistryCodecs.java\r\nnet\\minecraft\\core\\RegistrySetBuilder.java\r\nnet\\minecraft\\core\\RegistrySynchronization.java\r\nnet\\minecraft\\core\\Rotations.java\r\nnet\\minecraft\\core\\SectionPos.java\r\nnet\\minecraft\\core\\UUIDUtil.java\r\nnet\\minecraft\\core\\Vec3i.java\r\nnet\\minecraft\\core\\WritableRegistry.java\r\nnet\\minecraft\\core\\cauldron\\CauldronInteraction.java\r\nnet\\minecraft\\core\\cauldron\\package-info.java\r\nnet\\minecraft\\core\\dispenser\\AbstractProjectileDispenseBehavior.java\r\nnet\\minecraft\\core\\dispenser\\BlockSource.java\r\nnet\\minecraft\\core\\dispenser\\BoatDispenseItemBehavior.java\r\nnet\\minecraft\\core\\dispenser\\DefaultDispenseItemBehavior.java\r\nnet\\minecraft\\core\\dispenser\\DispenseItemBehavior.java\r\nnet\\minecraft\\core\\dispenser\\OptionalDispenseItemBehavior.java\r\nnet\\minecraft\\core\\dispenser\\package-info.java\r\nnet\\minecraft\\core\\dispenser\\ShearsDispenseItemBehavior.java\r\nnet\\minecraft\\core\\dispenser\\ShulkerBoxDispenseBehavior.java\r\nnet\\minecraft\\core\\particles\\BlockParticleOption.java\r\nnet\\minecraft\\core\\particles\\DustColorTransitionOptions.java\r\nnet\\minecraft\\core\\particles\\DustParticleOptions.java\r\nnet\\minecraft\\core\\particles\\DustParticleOptionsBase.java\r\nnet\\minecraft\\core\\particles\\ItemParticleOption.java\r\nnet\\minecraft\\core\\particles\\package-info.java\r\nnet\\minecraft\\core\\particles\\ParticleGroup.java\r\nnet\\minecraft\\core\\particles\\ParticleOptions.java\r\nnet\\minecraft\\core\\particles\\ParticleType.java\r\nnet\\minecraft\\core\\particles\\ParticleTypes.java\r\nnet\\minecraft\\core\\particles\\SculkChargeParticleOptions.java\r\nnet\\minecraft\\core\\particles\\ShriekParticleOption.java\r\nnet\\minecraft\\core\\particles\\SimpleParticleType.java\r\nnet\\minecraft\\core\\particles\\VibrationParticleOption.java\r\nnet\\minecraft\\core\\registries\\BuiltInRegistries.java\r\nnet\\minecraft\\core\\registries\\package-info.java\r\nnet\\minecraft\\core\\registries\\Registries.java\r\nnet\\minecraft\\data\\advancements\r\nnet\\minecraft\\data\\info\r\nnet\\minecraft\\data\\loot\r\nnet\\minecraft\\data\\metadata\r\nnet\\minecraft\\data\\models\r\nnet\\minecraft\\data\\recipes\r\nnet\\minecraft\\data\\registries\r\nnet\\minecraft\\data\\structures\r\nnet\\minecraft\\data\\tags\r\nnet\\minecraft\\data\\worldgen\r\nnet\\minecraft\\data\\BlockFamilies.java\r\nnet\\minecraft\\data\\BlockFamily.java\r\nnet\\minecraft\\data\\CachedOutput.java\r\nnet\\minecraft\\data\\DataGenerator.java\r\nnet\\minecraft\\data\\DataProvider.java\r\nnet\\minecraft\\data\\HashCache.java\r\nnet\\minecraft\\data\\Main.java\r\nnet\\minecraft\\data\\package-info.java\r\nnet\\minecraft\\data\\PackOutput.java\r\nnet\\minecraft\\data\\advancements\\packs\r\nnet\\minecraft\\data\\advancements\\AdvancementProvider.java\r\nnet\\minecraft\\data\\advancements\\AdvancementSubProvider.java\r\nnet\\minecraft\\data\\advancements\\package-info.java\r\nnet\\minecraft\\data\\advancements\\packs\\package-info.java\r\nnet\\minecraft\\data\\advancements\\packs\\UpdateOneTwentyOneAdvancementProvider.java\r\nnet\\minecraft\\data\\advancements\\packs\\UpdateOneTwentyOneAdventureAdvancements.java\r\nnet\\minecraft\\data\\advancements\\packs\\VanillaAdvancementProvider.java\r\nnet\\minecraft\\data\\advancements\\packs\\VanillaAdventureAdvancements.java\r\nnet\\minecraft\\data\\advancements\\packs\\VanillaHusbandryAdvancements.java\r\nnet\\minecraft\\data\\advancements\\packs\\VanillaNetherAdvancements.java\r\nnet\\minecraft\\data\\advancements\\packs\\VanillaStoryAdvancements.java\r\nnet\\minecraft\\data\\advancements\\packs\\VanillaTheEndAdvancements.java\r\nnet\\minecraft\\data\\info\\BiomeParametersDumpReport.java\r\nnet\\minecraft\\data\\info\\BlockListReport.java\r\nnet\\minecraft\\data\\info\\CommandsReport.java\r\nnet\\minecraft\\data\\info\\package-info.java\r\nnet\\minecraft\\data\\info\\RegistryDumpReport.java\r\nnet\\minecraft\\data\\loot\\packs\r\nnet\\minecraft\\data\\loot\\BlockLootSubProvider.java\r\nnet\\minecraft\\data\\loot\\EntityLootSubProvider.java\r\nnet\\minecraft\\data\\loot\\LootTableProvider.java\r\nnet\\minecraft\\data\\loot\\LootTableSubProvider.java\r\nnet\\minecraft\\data\\loot\\package-info.java\r\nnet\\minecraft\\data\\loot\\packs\\package-info.java\r\nnet\\minecraft\\data\\loot\\packs\\TradeRebalanceChestLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\TradeRebalanceLootTableProvider.java\r\nnet\\minecraft\\data\\loot\\packs\\UpdateOneTwentyOneBlockLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\UpdateOneTwentyOneChestLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\UpdateOneTwentyOneLootTableProvider.java\r\nnet\\minecraft\\data\\loot\\packs\\VanillaArchaeologyLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\VanillaBlockLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\VanillaChestLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\VanillaEntityLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\VanillaFishingLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\VanillaGiftLoot.java\r\nnet\\minecraft\\data\\loot\\packs\\VanillaLootTableProvider.java\r\nnet\\minecraft\\data\\loot\\packs\\VanillaPiglinBarterLoot.java\r\nnet\\minecraft\\data\\metadata\\package-info.java\r\nnet\\minecraft\\data\\metadata\\PackMetadataGenerator.java\r\nnet\\minecraft\\data\\models\\blockstates\r\nnet\\minecraft\\data\\models\\model\r\nnet\\minecraft\\data\\models\\BlockModelGenerators.java\r\nnet\\minecraft\\data\\models\\ItemModelGenerators.java\r\nnet\\minecraft\\data\\models\\ModelProvider.java\r\nnet\\minecraft\\data\\models\\package-info.java\r\nnet\\minecraft\\data\\models\\blockstates\\BlockStateGenerator.java\r\nnet\\minecraft\\data\\models\\blockstates\\Condition.java\r\nnet\\minecraft\\data\\models\\blockstates\\MultiPartGenerator.java\r\nnet\\minecraft\\data\\models\\blockstates\\MultiVariantGenerator.java\r\nnet\\minecraft\\data\\models\\blockstates\\package-info.java\r\nnet\\minecraft\\data\\models\\blockstates\\PropertyDispatch.java\r\nnet\\minecraft\\data\\models\\blockstates\\Selector.java\r\nnet\\minecraft\\data\\models\\blockstates\\Variant.java\r\nnet\\minecraft\\data\\models\\blockstates\\VariantProperties.java\r\nnet\\minecraft\\data\\models\\blockstates\\VariantProperty.java\r\nnet\\minecraft\\data\\models\\model\\DelegatedModel.java\r\nnet\\minecraft\\data\\models\\model\\ModelLocationUtils.java\r\nnet\\minecraft\\data\\models\\model\\ModelTemplate.java\r\nnet\\minecraft\\data\\models\\model\\ModelTemplates.java\r\nnet\\minecraft\\data\\models\\model\\package-info.java\r\nnet\\minecraft\\data\\models\\model\\TexturedModel.java\r\nnet\\minecraft\\data\\models\\model\\TextureMapping.java\r\nnet\\minecraft\\data\\models\\model\\TextureSlot.java\r\nnet\\minecraft\\data\\recipes\\packs\r\nnet\\minecraft\\data\\recipes\\package-info.java\r\nnet\\minecraft\\data\\recipes\\RecipeBuilder.java\r\nnet\\minecraft\\data\\recipes\\RecipeCategory.java\r\nnet\\minecraft\\data\\recipes\\RecipeOutput.java\r\nnet\\minecraft\\data\\recipes\\RecipeProvider.java\r\nnet\\minecraft\\data\\recipes\\ShapedRecipeBuilder.java\r\nnet\\minecraft\\data\\recipes\\ShapelessRecipeBuilder.java\r\nnet\\minecraft\\data\\recipes\\SimpleCookingRecipeBuilder.java\r\nnet\\minecraft\\data\\recipes\\SingleItemRecipeBuilder.java\r\nnet\\minecraft\\data\\recipes\\SmithingTransformRecipeBuilder.java\r\nnet\\minecraft\\data\\recipes\\SmithingTrimRecipeBuilder.java\r\nnet\\minecraft\\data\\recipes\\SpecialRecipeBuilder.java\r\nnet\\minecraft\\data\\recipes\\packs\\BundleRecipeProvider.java\r\nnet\\minecraft\\data\\recipes\\packs\\package-info.java\r\nnet\\minecraft\\data\\recipes\\packs\\UpdateOneTwentyOneRecipeProvider.java\r\nnet\\minecraft\\data\\recipes\\packs\\VanillaRecipeProvider.java\r\nnet\\minecraft\\data\\registries\\package-info.java\r\nnet\\minecraft\\data\\registries\\RegistriesDatapackGenerator.java\r\nnet\\minecraft\\data\\registries\\RegistryPatchGenerator.java\r\nnet\\minecraft\\data\\registries\\UpdateOneTwentyOneRegistries.java\r\nnet\\minecraft\\data\\registries\\VanillaRegistries.java\r\nnet\\minecraft\\data\\structures\\NbtToSnbt.java\r\nnet\\minecraft\\data\\structures\\package-info.java\r\nnet\\minecraft\\data\\structures\\SnbtDatafixer.java\r\nnet\\minecraft\\data\\structures\\SnbtToNbt.java\r\nnet\\minecraft\\data\\structures\\StructureUpdater.java\r\nnet\\minecraft\\data\\tags\\BannerPatternTagsProvider.java\r\nnet\\minecraft\\data\\tags\\BiomeTagsProvider.java\r\nnet\\minecraft\\data\\tags\\CatVariantTagsProvider.java\r\nnet\\minecraft\\data\\tags\\DamageTypeTagsProvider.java\r\nnet\\minecraft\\data\\tags\\EntityTypeTagsProvider.java\r\nnet\\minecraft\\data\\tags\\FlatLevelGeneratorPresetTagsProvider.java\r\nnet\\minecraft\\data\\tags\\FluidTagsProvider.java\r\nnet\\minecraft\\data\\tags\\GameEventTagsProvider.java\r\nnet\\minecraft\\data\\tags\\InstrumentTagsProvider.java\r\nnet\\minecraft\\data\\tags\\IntrinsicHolderTagsProvider.java\r\nnet\\minecraft\\data\\tags\\ItemTagsProvider.java\r\nnet\\minecraft\\data\\tags\\package-info.java\r\nnet\\minecraft\\data\\tags\\PaintingVariantTagsProvider.java\r\nnet\\minecraft\\data\\tags\\PoiTypeTagsProvider.java\r\nnet\\minecraft\\data\\tags\\StructureTagsProvider.java\r\nnet\\minecraft\\data\\tags\\TagsProvider.java\r\nnet\\minecraft\\data\\tags\\TradeRebalanceStructureTagsProvider.java\r\nnet\\minecraft\\data\\tags\\UpdateOneTwentyOneBiomeTagsProvider.java\r\nnet\\minecraft\\data\\tags\\UpdateOneTwentyOneBlockTagsProvider.java\r\nnet\\minecraft\\data\\tags\\UpdateOneTwentyOneDamageTypeTagsProvider.java\r\nnet\\minecraft\\data\\tags\\UpdateOneTwentyOneEntityTypeTagsProvider.java\r\nnet\\minecraft\\data\\tags\\UpdateOneTwentyOneItemTagsProvider.java\r\nnet\\minecraft\\data\\tags\\VanillaBlockTagsProvider.java\r\nnet\\minecraft\\data\\tags\\VanillaItemTagsProvider.java\r\nnet\\minecraft\\data\\tags\\WorldPresetTagsProvider.java\r\nnet\\minecraft\\data\\worldgen\\biome\r\nnet\\minecraft\\data\\worldgen\\features\r\nnet\\minecraft\\data\\worldgen\\placement\r\nnet\\minecraft\\data\\worldgen\\AncientCityStructurePieces.java\r\nnet\\minecraft\\data\\worldgen\\AncientCityStructurePools.java\r\nnet\\minecraft\\data\\worldgen\\BastionBridgePools.java\r\nnet\\minecraft\\data\\worldgen\\BastionHoglinStablePools.java\r\nnet\\minecraft\\data\\worldgen\\BastionHousingUnitsPools.java\r\nnet\\minecraft\\data\\worldgen\\BastionPieces.java\r\nnet\\minecraft\\data\\worldgen\\BastionSharedPools.java\r\nnet\\minecraft\\data\\worldgen\\BastionTreasureRoomPools.java\r\nnet\\minecraft\\data\\worldgen\\BiomeDefaultFeatures.java\r\nnet\\minecraft\\data\\worldgen\\BootstapContext.java\r\nnet\\minecraft\\data\\worldgen\\Carvers.java\r\nnet\\minecraft\\data\\worldgen\\DesertVillagePools.java\r\nnet\\minecraft\\data\\worldgen\\DimensionTypes.java\r\nnet\\minecraft\\data\\worldgen\\NoiseData.java\r\nnet\\minecraft\\data\\worldgen\\package-info.java\r\nnet\\minecraft\\data\\worldgen\\PillagerOutpostPools.java\r\nnet\\minecraft\\data\\worldgen\\PlainVillagePools.java\r\nnet\\minecraft\\data\\worldgen\\Pools.java\r\nnet\\minecraft\\data\\worldgen\\ProcessorLists.java\r\nnet\\minecraft\\data\\worldgen\\SavannaVillagePools.java\r\nnet\\minecraft\\data\\worldgen\\SnowyVillagePools.java\r\nnet\\minecraft\\data\\worldgen\\Structures.java\r\nnet\\minecraft\\data\\worldgen\\StructureSets.java\r\nnet\\minecraft\\data\\worldgen\\SurfaceRuleData.java\r\nnet\\minecraft\\data\\worldgen\\TaigaVillagePools.java\r\nnet\\minecraft\\data\\worldgen\\TerrainProvider.java\r\nnet\\minecraft\\data\\worldgen\\TrailRuinsStructurePools.java\r\nnet\\minecraft\\data\\worldgen\\TrialChambersStructurePools.java\r\nnet\\minecraft\\data\\worldgen\\UpdateOneTwentyOnePools.java\r\nnet\\minecraft\\data\\worldgen\\UpdateOneTwentyOneProcessorLists.java\r\nnet\\minecraft\\data\\worldgen\\UpdateOneTwentyOneStructures.java\r\nnet\\minecraft\\data\\worldgen\\UpdateOneTwentyOneStructureSets.java\r\nnet\\minecraft\\data\\worldgen\\VillagePools.java\r\nnet\\minecraft\\data\\worldgen\\biome\\BiomeData.java\r\nnet\\minecraft\\data\\worldgen\\biome\\EndBiomes.java\r\nnet\\minecraft\\data\\worldgen\\biome\\NetherBiomes.java\r\nnet\\minecraft\\data\\worldgen\\biome\\OverworldBiomes.java\r\nnet\\minecraft\\data\\worldgen\\biome\\package-info.java\r\nnet\\minecraft\\data\\worldgen\\features\\AquaticFeatures.java\r\nnet\\minecraft\\data\\worldgen\\features\\CaveFeatures.java\r\nnet\\minecraft\\data\\worldgen\\features\\EndFeatures.java\r\nnet\\minecraft\\data\\worldgen\\features\\FeatureUtils.java\r\nnet\\minecraft\\data\\worldgen\\features\\MiscOverworldFeatures.java\r\nnet\\minecraft\\data\\worldgen\\features\\NetherFeatures.java\r\nnet\\minecraft\\data\\worldgen\\features\\OreFeatures.java\r\nnet\\minecraft\\data\\worldgen\\features\\package-info.java\r\nnet\\minecraft\\data\\worldgen\\features\\PileFeatures.java\r\nnet\\minecraft\\data\\worldgen\\features\\TreeFeatures.java\r\nnet\\minecraft\\data\\worldgen\\features\\VegetationFeatures.java\r\nnet\\minecraft\\data\\worldgen\\placement\\AquaticPlacements.java\r\nnet\\minecraft\\data\\worldgen\\placement\\CavePlacements.java\r\nnet\\minecraft\\data\\worldgen\\placement\\EndPlacements.java\r\nnet\\minecraft\\data\\worldgen\\placement\\MiscOverworldPlacements.java\r\nnet\\minecraft\\data\\worldgen\\placement\\NetherPlacements.java\r\nnet\\minecraft\\data\\worldgen\\placement\\OrePlacements.java\r\nnet\\minecraft\\data\\worldgen\\placement\\package-info.java\r\nnet\\minecraft\\data\\worldgen\\placement\\PlacementUtils.java\r\nnet\\minecraft\\data\\worldgen\\placement\\TreePlacements.java\r\nnet\\minecraft\\data\\worldgen\\placement\\VegetationPlacements.java\r\nnet\\minecraft\\data\\worldgen\\placement\\VillagePlacements.java\r\nnet\\minecraft\\gametest\\framework\r\nnet\\minecraft\\gametest\\framework\\AfterBatch.java\r\nnet\\minecraft\\gametest\\framework\\BeforeBatch.java\r\nnet\\minecraft\\gametest\\framework\\ExhaustedAttemptsException.java\r\nnet\\minecraft\\gametest\\framework\\GameTest.java\r\nnet\\minecraft\\gametest\\framework\\GameTestAssertException.java\r\nnet\\minecraft\\gametest\\framework\\GameTestAssertPosException.java\r\nnet\\minecraft\\gametest\\framework\\GameTestBatch.java\r\nnet\\minecraft\\gametest\\framework\\GameTestBatchRunner.java\r\nnet\\minecraft\\gametest\\framework\\GameTestEvent.java\r\nnet\\minecraft\\gametest\\framework\\GameTestGenerator.java\r\nnet\\minecraft\\gametest\\framework\\GameTestHelper.java\r\nnet\\minecraft\\gametest\\framework\\GameTestInfo.java\r\nnet\\minecraft\\gametest\\framework\\GameTestListener.java\r\nnet\\minecraft\\gametest\\framework\\GameTestRegistry.java\r\nnet\\minecraft\\gametest\\framework\\GameTestRunner.java\r\nnet\\minecraft\\gametest\\framework\\GameTestSequence.java\r\nnet\\minecraft\\gametest\\framework\\GameTestServer.java\r\nnet\\minecraft\\gametest\\framework\\GameTestTicker.java\r\nnet\\minecraft\\gametest\\framework\\GameTestTimeoutException.java\r\nnet\\minecraft\\gametest\\framework\\GlobalTestReporter.java\r\nnet\\minecraft\\gametest\\framework\\JUnitLikeTestReporter.java\r\nnet\\minecraft\\gametest\\framework\\LogTestReporter.java\r\nnet\\minecraft\\gametest\\framework\\MultipleTestTracker.java\r\nnet\\minecraft\\gametest\\framework\\package-info.java\r\nnet\\minecraft\\gametest\\framework\\ReportGameListener.java\r\nnet\\minecraft\\gametest\\framework\\StructureUtils.java\r\nnet\\minecraft\\gametest\\framework\\TestClassNameArgument.java\r\nnet\\minecraft\\gametest\\framework\\TestCommand.java\r\nnet\\minecraft\\gametest\\framework\\TestFunction.java\r\nnet\\minecraft\\gametest\\framework\\TestFunctionArgument.java\r\nnet\\minecraft\\gametest\\framework\\TestReporter.java\r\nnet\\minecraft\\locale\\Language.java\r\nnet\\minecraft\\locale\\package-info.java\r\nnet\\minecraft\\nbt\\visitors\r\nnet\\minecraft\\nbt\\ByteArrayTag.java\r\nnet\\minecraft\\nbt\\ByteTag.java\r\nnet\\minecraft\\nbt\\CollectionTag.java\r\nnet\\minecraft\\nbt\\CompoundTag.java\r\nnet\\minecraft\\nbt\\DoubleTag.java\r\nnet\\minecraft\\nbt\\EndTag.java\r\nnet\\minecraft\\nbt\\FloatTag.java\r\nnet\\minecraft\\nbt\\IntArrayTag.java\r\nnet\\minecraft\\nbt\\IntTag.java\r\nnet\\minecraft\\nbt\\ListTag.java\r\nnet\\minecraft\\nbt\\LongArrayTag.java\r\nnet\\minecraft\\nbt\\LongTag.java\r\nnet\\minecraft\\nbt\\NbtAccounter.java\r\nnet\\minecraft\\nbt\\NbtAccounterException.java\r\nnet\\minecraft\\nbt\\NbtException.java\r\nnet\\minecraft\\nbt\\NbtFormatException.java\r\nnet\\minecraft\\nbt\\NbtIo.java\r\nnet\\minecraft\\nbt\\NbtOps.java\r\nnet\\minecraft\\nbt\\NbtUtils.java\r\nnet\\minecraft\\nbt\\NumericTag.java\r\nnet\\minecraft\\nbt\\package-info.java\r\nnet\\minecraft\\nbt\\ReportedNbtException.java\r\nnet\\minecraft\\nbt\\ShortTag.java\r\nnet\\minecraft\\nbt\\SnbtPrinterTagVisitor.java\r\nnet\\minecraft\\nbt\\StreamTagVisitor.java\r\nnet\\minecraft\\nbt\\StringTag.java\r\nnet\\minecraft\\nbt\\StringTagVisitor.java\r\nnet\\minecraft\\nbt\\Tag.java\r\nnet\\minecraft\\nbt\\TagParser.java\r\nnet\\minecraft\\nbt\\TagType.java\r\nnet\\minecraft\\nbt\\TagTypes.java\r\nnet\\minecraft\\nbt\\TagVisitor.java\r\nnet\\minecraft\\nbt\\TextComponentTagVisitor.java\r\nnet\\minecraft\\nbt\\visitors\\CollectFields.java\r\nnet\\minecraft\\nbt\\visitors\\CollectToTag.java\r\nnet\\minecraft\\nbt\\visitors\\FieldSelector.java\r\nnet\\minecraft\\nbt\\visitors\\FieldTree.java\r\nnet\\minecraft\\nbt\\visitors\\package-info.java\r\nnet\\minecraft\\nbt\\visitors\\SkipAll.java\r\nnet\\minecraft\\nbt\\visitors\\SkipFields.java\r\nnet\\minecraft\\network\\chat\r\nnet\\minecraft\\network\\protocol\r\nnet\\minecraft\\network\\syncher\r\nnet\\minecraft\\network\\BandwidthDebugMonitor.java\r\nnet\\minecraft\\network\\CipherBase.java\r\nnet\\minecraft\\network\\CipherDecoder.java\r\nnet\\minecraft\\network\\CipherEncoder.java\r\nnet\\minecraft\\network\\ClientboundPacketListener.java\r\nnet\\minecraft\\network\\ClientPongPacketListener.java\r\nnet\\minecraft\\network\\CompressionDecoder.java\r\nnet\\minecraft\\network\\CompressionEncoder.java\r\nnet\\minecraft\\network\\Connection.java\r\nnet\\minecraft\\network\\ConnectionProtocol.java\r\nnet\\minecraft\\network\\FriendlyByteBuf.java\r\nnet\\minecraft\\network\\package-info.java\r\nnet\\minecraft\\network\\PacketBundlePacker.java\r\nnet\\minecraft\\network\\PacketBundleUnpacker.java\r\nnet\\minecraft\\network\\PacketDecoder.java\r\nnet\\minecraft\\network\\PacketEncoder.java\r\nnet\\minecraft\\network\\PacketFlowValidator.java\r\nnet\\minecraft\\network\\PacketListener.java\r\nnet\\minecraft\\network\\PacketSendListener.java\r\nnet\\minecraft\\network\\ProtocolSwapHandler.java\r\nnet\\minecraft\\network\\RateKickingConnection.java\r\nnet\\minecraft\\network\\ServerboundPacketListener.java\r\nnet\\minecraft\\network\\SkipPacketException.java\r\nnet\\minecraft\\network\\TickablePacketListener.java\r\nnet\\minecraft\\network\\Utf8String.java\r\nnet\\minecraft\\network\\VarInt.java\r\nnet\\minecraft\\network\\Varint21FrameDecoder.java\r\nnet\\minecraft\\network\\Varint21LengthFieldPrepender.java\r\nnet\\minecraft\\network\\VarLong.java\r\nnet\\minecraft\\network\\chat\\contents\r\nnet\\minecraft\\network\\chat\\numbers\r\nnet\\minecraft\\network\\chat\\ChatDecorator.java\r\nnet\\minecraft\\network\\chat\\ChatType.java\r\nnet\\minecraft\\network\\chat\\ChatTypeDecoration.java\r\nnet\\minecraft\\network\\chat\\ClickEvent.java\r\nnet\\minecraft\\network\\chat\\CommonComponents.java\r\nnet\\minecraft\\network\\chat\\Component.java\r\nnet\\minecraft\\network\\chat\\ComponentContents.java\r\nnet\\minecraft\\network\\chat\\ComponentSerialization.java\r\nnet\\minecraft\\network\\chat\\ComponentUtils.java\r\nnet\\minecraft\\network\\chat\\FilterMask.java\r\nnet\\minecraft\\network\\chat\\FormattedText.java\r\nnet\\minecraft\\network\\chat\\HoverEvent.java\r\nnet\\minecraft\\network\\chat\\LastSeenMessages.java\r\nnet\\minecraft\\network\\chat\\LastSeenMessagesTracker.java\r\nnet\\minecraft\\network\\chat\\LastSeenMessagesValidator.java\r\nnet\\minecraft\\network\\chat\\LastSeenTrackedEntry.java\r\nnet\\minecraft\\network\\chat\\LocalChatSession.java\r\nnet\\minecraft\\network\\chat\\MessageSignature.java\r\nnet\\minecraft\\network\\chat\\MessageSignatureCache.java\r\nnet\\minecraft\\network\\chat\\MutableComponent.java\r\nnet\\minecraft\\network\\chat\\OutgoingChatMessage.java\r\nnet\\minecraft\\network\\chat\\package-info.java\r\nnet\\minecraft\\network\\chat\\PlayerChatMessage.java\r\nnet\\minecraft\\network\\chat\\RemoteChatSession.java\r\nnet\\minecraft\\network\\chat\\SignableCommand.java\r\nnet\\minecraft\\network\\chat\\SignedMessageBody.java\r\nnet\\minecraft\\network\\chat\\SignedMessageChain.java\r\nnet\\minecraft\\network\\chat\\SignedMessageLink.java\r\nnet\\minecraft\\network\\chat\\SignedMessageValidator.java\r\nnet\\minecraft\\network\\chat\\Style.java\r\nnet\\minecraft\\network\\chat\\SubStringSource.java\r\nnet\\minecraft\\network\\chat\\TextColor.java\r\nnet\\minecraft\\network\\chat\\ThrowingComponent.java\r\nnet\\minecraft\\network\\chat\\contents\\BlockDataSource.java\r\nnet\\minecraft\\network\\chat\\contents\\DataSource.java\r\nnet\\minecraft\\network\\chat\\contents\\EntityDataSource.java\r\nnet\\minecraft\\network\\chat\\contents\\KeybindContents.java\r\nnet\\minecraft\\network\\chat\\contents\\KeybindResolver.java\r\nnet\\minecraft\\network\\chat\\contents\\NbtContents.java\r\nnet\\minecraft\\network\\chat\\contents\\package-info.java\r\nnet\\minecraft\\network\\chat\\contents\\PlainTextContents.java\r\nnet\\minecraft\\network\\chat\\contents\\ScoreContents.java\r\nnet\\minecraft\\network\\chat\\contents\\SelectorContents.java\r\nnet\\minecraft\\network\\chat\\contents\\StorageDataSource.java\r\nnet\\minecraft\\network\\chat\\contents\\TranslatableContents.java\r\nnet\\minecraft\\network\\chat\\contents\\TranslatableFormatException.java\r\nnet\\minecraft\\network\\chat\\numbers\\BlankFormat.java\r\nnet\\minecraft\\network\\chat\\numbers\\FixedFormat.java\r\nnet\\minecraft\\network\\chat\\numbers\\NumberFormat.java\r\nnet\\minecraft\\network\\chat\\numbers\\NumberFormatType.java\r\nnet\\minecraft\\network\\chat\\numbers\\NumberFormatTypes.java\r\nnet\\minecraft\\network\\chat\\numbers\\package-info.java\r\nnet\\minecraft\\network\\chat\\numbers\\StyledFormat.java\r\nnet\\minecraft\\network\\protocol\\common\r\nnet\\minecraft\\network\\protocol\\configuration\r\nnet\\minecraft\\network\\protocol\\game\r\nnet\\minecraft\\network\\protocol\\handshake\r\nnet\\minecraft\\network\\protocol\\login\r\nnet\\minecraft\\network\\protocol\\status\r\nnet\\minecraft\\network\\protocol\\BundleDelimiterPacket.java\r\nnet\\minecraft\\network\\protocol\\BundlePacket.java\r\nnet\\minecraft\\network\\protocol\\BundlerInfo.java\r\nnet\\minecraft\\network\\protocol\\package-info.java\r\nnet\\minecraft\\network\\protocol\\Packet.java\r\nnet\\minecraft\\network\\protocol\\PacketFlow.java\r\nnet\\minecraft\\network\\protocol\\PacketUtils.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\r\nnet\\minecraft\\network\\protocol\\common\\ClientboundCustomPayloadPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ClientboundDisconnectPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ClientboundKeepAlivePacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ClientboundPingPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ClientboundResourcePackPopPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ClientboundResourcePackPushPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ClientboundUpdateTagsPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ClientCommonPacketListener.java\r\nnet\\minecraft\\network\\protocol\\common\\package-info.java\r\nnet\\minecraft\\network\\protocol\\common\\ServerboundClientInformationPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ServerboundCustomPayloadPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ServerboundKeepAlivePacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ServerboundPongPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ServerboundResourcePackPacket.java\r\nnet\\minecraft\\network\\protocol\\common\\ServerCommonPacketListener.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\BeeDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\BrainDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\BrandPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\BreezeDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\CustomPacketPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\DiscardedPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\GameEventDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\GameEventListenerDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\GameTestAddMarkerDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\GameTestClearMarkersDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\GoalDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\HiveDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\NeighborUpdatesDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\package-info.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\PathfindingDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\PoiAddedDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\PoiRemovedDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\PoiTicketCountDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\RaidsDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\StructuresDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\VillageSectionsDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\common\\custom\\WorldGenAttemptDebugPayload.java\r\nnet\\minecraft\\network\\protocol\\configuration\\ClientboundFinishConfigurationPacket.java\r\nnet\\minecraft\\network\\protocol\\configuration\\ClientboundRegistryDataPacket.java\r\nnet\\minecraft\\network\\protocol\\configuration\\ClientboundUpdateEnabledFeaturesPacket.java\r\nnet\\minecraft\\network\\protocol\\configuration\\ClientConfigurationPacketListener.java\r\nnet\\minecraft\\network\\protocol\\configuration\\package-info.java\r\nnet\\minecraft\\network\\protocol\\configuration\\ServerboundFinishConfigurationPacket.java\r\nnet\\minecraft\\network\\protocol\\configuration\\ServerConfigurationPacketListener.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundAddEntityPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundAddExperienceOrbPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundAnimatePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundAwardStatsPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundBlockChangedAckPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundBlockDestructionPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundBlockEntityDataPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundBlockEventPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundBlockUpdatePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundBossEventPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundBundlePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundChangeDifficultyPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundChunkBatchFinishedPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundChunkBatchStartPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundChunksBiomesPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundClearTitlesPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundCommandsPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundCommandSuggestionsPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundContainerClosePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundContainerSetContentPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundContainerSetDataPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundContainerSetSlotPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundCooldownPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundCustomChatCompletionsPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundDamageEventPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundDeleteChatPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundDisguisedChatPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundEntityEventPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundExplodePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundForgetLevelChunkPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundGameEventPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundHorseScreenOpenPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundHurtAnimationPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundInitializeBorderPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundLevelChunkPacketData.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundLevelChunkWithLightPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundLevelEventPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundLevelParticlesPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundLightUpdatePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundLightUpdatePacketData.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundLoginPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundMapItemDataPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundMerchantOffersPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundMoveEntityPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundMoveVehiclePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundOpenBookPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundOpenScreenPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundOpenSignEditorPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlaceGhostRecipePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerAbilitiesPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerChatPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerCombatEndPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerCombatEnterPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerCombatKillPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerInfoRemovePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerInfoUpdatePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerLookAtPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundPlayerPositionPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundRecipePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundRemoveEntitiesPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundRemoveMobEffectPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundResetScorePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundRespawnPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundRotateHeadPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSectionBlocksUpdatePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSelectAdvancementsTabPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundServerDataPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetActionBarTextPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetBorderCenterPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetBorderLerpSizePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetBorderSizePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetBorderWarningDelayPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetBorderWarningDistancePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetCameraPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetCarriedItemPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetChunkCacheCenterPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetChunkCacheRadiusPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetDefaultSpawnPositionPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetDisplayObjectivePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetEntityDataPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetEntityLinkPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetEntityMotionPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetEquipmentPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetExperiencePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetHealthPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetObjectivePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetPassengersPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetPlayerTeamPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetScorePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetSimulationDistancePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetSubtitleTextPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetTimePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetTitlesAnimationPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSetTitleTextPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSoundEntityPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSoundPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundStartConfigurationPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundStopSoundPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundSystemChatPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundTabListPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundTagQueryPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundTakeItemEntityPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundTeleportEntityPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundTickingStatePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundTickingStepPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundUpdateAdvancementsPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundUpdateAttributesPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundUpdateMobEffectPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientboundUpdateRecipesPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ClientGamePacketListener.java\r\nnet\\minecraft\\network\\protocol\\game\\CommonPlayerSpawnInfo.java\r\nnet\\minecraft\\network\\protocol\\game\\DebugEntityNameGenerator.java\r\nnet\\minecraft\\network\\protocol\\game\\DebugPackets.java\r\nnet\\minecraft\\network\\protocol\\game\\package-info.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundAcceptTeleportationPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundBlockEntityTagQuery.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundChangeDifficultyPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundChatAckPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundChatCommandPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundChatPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundChatSessionUpdatePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundChunkBatchReceivedPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundClientCommandPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundCommandSuggestionPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundConfigurationAcknowledgedPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundContainerButtonClickPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundContainerClickPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundContainerClosePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundContainerSlotStateChangedPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundEditBookPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundEntityTagQuery.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundInteractPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundJigsawGeneratePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundLockDifficultyPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundMovePlayerPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundMoveVehiclePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundPaddleBoatPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundPickItemPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundPlaceRecipePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundPlayerAbilitiesPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundPlayerActionPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundPlayerCommandPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundPlayerInputPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundRecipeBookChangeSettingsPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundRecipeBookSeenRecipePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundRenameItemPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSeenAdvancementsPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSelectTradePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSetBeaconPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSetCarriedItemPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSetCommandBlockPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSetCommandMinecartPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSetCreativeModeSlotPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSetJigsawBlockPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSetStructureBlockPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSignUpdatePacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundSwingPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundTeleportToEntityPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundUseItemOnPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerboundUseItemPacket.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerGamePacketListener.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerPacketListener.java\r\nnet\\minecraft\\network\\protocol\\game\\ServerPingPacketListener.java\r\nnet\\minecraft\\network\\protocol\\game\\VecDeltaCodec.java\r\nnet\\minecraft\\network\\protocol\\handshake\\ClientIntent.java\r\nnet\\minecraft\\network\\protocol\\handshake\\ClientIntentionPacket.java\r\nnet\\minecraft\\network\\protocol\\handshake\\package-info.java\r\nnet\\minecraft\\network\\protocol\\handshake\\ServerHandshakePacketListener.java\r\nnet\\minecraft\\network\\protocol\\login\\custom\r\nnet\\minecraft\\network\\protocol\\login\\ClientboundCustomQueryPacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ClientboundGameProfilePacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ClientboundHelloPacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ClientboundLoginCompressionPacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ClientboundLoginDisconnectPacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ClientLoginPacketListener.java\r\nnet\\minecraft\\network\\protocol\\login\\package-info.java\r\nnet\\minecraft\\network\\protocol\\login\\ServerboundCustomQueryAnswerPacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ServerboundHelloPacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ServerboundKeyPacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ServerboundLoginAcknowledgedPacket.java\r\nnet\\minecraft\\network\\protocol\\login\\ServerLoginPacketListener.java\r\nnet\\minecraft\\network\\protocol\\login\\custom\\CustomQueryAnswerPayload.java\r\nnet\\minecraft\\network\\protocol\\login\\custom\\CustomQueryPayload.java\r\nnet\\minecraft\\network\\protocol\\login\\custom\\DiscardedQueryAnswerPayload.java\r\nnet\\minecraft\\network\\protocol\\login\\custom\\DiscardedQueryPayload.java\r\nnet\\minecraft\\network\\protocol\\login\\custom\\package-info.java\r\nnet\\minecraft\\network\\protocol\\status\\ClientboundPongResponsePacket.java\r\nnet\\minecraft\\network\\protocol\\status\\ClientboundStatusResponsePacket.java\r\nnet\\minecraft\\network\\protocol\\status\\ClientStatusPacketListener.java\r\nnet\\minecraft\\network\\protocol\\status\\package-info.java\r\nnet\\minecraft\\network\\protocol\\status\\ServerboundPingRequestPacket.java\r\nnet\\minecraft\\network\\protocol\\status\\ServerboundStatusRequestPacket.java\r\nnet\\minecraft\\network\\protocol\\status\\ServerStatus.java\r\nnet\\minecraft\\network\\protocol\\status\\ServerStatusPacketListener.java\r\nnet\\minecraft\\network\\syncher\\EntityDataAccessor.java\r\nnet\\minecraft\\network\\syncher\\EntityDataSerializer.java\r\nnet\\minecraft\\network\\syncher\\EntityDataSerializers.java\r\nnet\\minecraft\\network\\syncher\\package-info.java\r\nnet\\minecraft\\network\\syncher\\SynchedEntityData.java\r\nnet\\minecraft\\obfuscate\\DontObfuscate.java\r\nnet\\minecraft\\obfuscate\\package-info.java\r\nnet\\minecraft\\realms\\DisconnectedRealmsScreen.java\r\nnet\\minecraft\\realms\\package-info.java\r\nnet\\minecraft\\realms\\RealmsConnect.java\r\nnet\\minecraft\\realms\\RealmsLabel.java\r\nnet\\minecraft\\realms\\RealmsObjectSelectionList.java\r\nnet\\minecraft\\realms\\RealmsScreen.java\r\nnet\\minecraft\\realms\\RepeatedNarrator.java\r\nnet\\minecraft\\recipebook\\package-info.java\r\nnet\\minecraft\\recipebook\\PlaceRecipe.java\r\nnet\\minecraft\\recipebook\\ServerPlaceRecipe.java\r\nnet\\minecraft\\references\\Blocks.java\r\nnet\\minecraft\\references\\Items.java\r\nnet\\minecraft\\resources\\DelegatingOps.java\r\nnet\\minecraft\\resources\\FileToIdConverter.java\r\nnet\\minecraft\\resources\\HolderSetCodec.java\r\nnet\\minecraft\\resources\\package-info.java\r\nnet\\minecraft\\resources\\RegistryDataLoader.java\r\nnet\\minecraft\\resources\\RegistryFileCodec.java\r\nnet\\minecraft\\resources\\RegistryFixedCodec.java\r\nnet\\minecraft\\resources\\RegistryOps.java\r\nnet\\minecraft\\resources\\ResourceKey.java\r\nnet\\minecraft\\resources\\ResourceLocation.java\r\nnet\\minecraft\\server\\advancements\r\nnet\\minecraft\\server\\bossevents\r\nnet\\minecraft\\server\\chase\r\nnet\\minecraft\\server\\commands\r\nnet\\minecraft\\server\\dedicated\r\nnet\\minecraft\\server\\gui\r\nnet\\minecraft\\server\\level\r\nnet\\minecraft\\server\\network\r\nnet\\minecraft\\server\\packs\r\nnet\\minecraft\\server\\players\r\nnet\\minecraft\\server\\rcon\r\nnet\\minecraft\\server\\Bootstrap.java\r\nnet\\minecraft\\server\\ChainedJsonException.java\r\nnet\\minecraft\\server\\ConsoleInput.java\r\nnet\\minecraft\\server\\DebugLoggedPrintStream.java\r\nnet\\minecraft\\server\\Eula.java\r\nnet\\minecraft\\server\\LoggedPrintStream.java\r\nnet\\minecraft\\server\\Main.java\r\nnet\\minecraft\\server\\MinecraftServer.java\r\nnet\\minecraft\\server\\package-info.java\r\nnet\\minecraft\\server\\PlayerAdvancements.java\r\nnet\\minecraft\\server\\RegistryLayer.java\r\nnet\\minecraft\\server\\ReloadableServerResources.java\r\nnet\\minecraft\\server\\RunningOnDifferentThreadException.java\r\nnet\\minecraft\\server\\ServerAdvancementManager.java\r\nnet\\minecraft\\server\\ServerFunctionLibrary.java\r\nnet\\minecraft\\server\\ServerFunctionManager.java\r\nnet\\minecraft\\server\\ServerInfo.java\r\nnet\\minecraft\\server\\ServerInterface.java\r\nnet\\minecraft\\server\\ServerScoreboard.java\r\nnet\\minecraft\\server\\ServerTickRateManager.java\r\nnet\\minecraft\\server\\Services.java\r\nnet\\minecraft\\server\\TickTask.java\r\nnet\\minecraft\\server\\WorldLoader.java\r\nnet\\minecraft\\server\\WorldStem.java\r\nnet\\minecraft\\server\\advancements\\AdvancementVisibilityEvaluator.java\r\nnet\\minecraft\\server\\advancements\\package-info.java\r\nnet\\minecraft\\server\\bossevents\\CustomBossEvent.java\r\nnet\\minecraft\\server\\bossevents\\CustomBossEvents.java\r\nnet\\minecraft\\server\\bossevents\\package-info.java\r\nnet\\minecraft\\server\\chase\\ChaseClient.java\r\nnet\\minecraft\\server\\chase\\ChaseServer.java\r\nnet\\minecraft\\server\\chase\\package-info.java\r\nnet\\minecraft\\server\\commands\\data\r\nnet\\minecraft\\server\\commands\\AdvancementCommands.java\r\nnet\\minecraft\\server\\commands\\AttributeCommand.java\r\nnet\\minecraft\\server\\commands\\BanIpCommands.java\r\nnet\\minecraft\\server\\commands\\BanListCommands.java\r\nnet\\minecraft\\server\\commands\\BanPlayerCommands.java\r\nnet\\minecraft\\server\\commands\\BossBarCommands.java\r\nnet\\minecraft\\server\\commands\\ChaseCommand.java\r\nnet\\minecraft\\server\\commands\\ClearInventoryCommands.java\r\nnet\\minecraft\\server\\commands\\CloneCommands.java\r\nnet\\minecraft\\server\\commands\\DamageCommand.java\r\nnet\\minecraft\\server\\commands\\DataPackCommand.java\r\nnet\\minecraft\\server\\commands\\DebugCommand.java\r\nnet\\minecraft\\server\\commands\\DebugConfigCommand.java\r\nnet\\minecraft\\server\\commands\\DebugMobSpawningCommand.java\r\nnet\\minecraft\\server\\commands\\DebugPathCommand.java\r\nnet\\minecraft\\server\\commands\\DefaultGameModeCommands.java\r\nnet\\minecraft\\server\\commands\\DeOpCommands.java\r\nnet\\minecraft\\server\\commands\\DifficultyCommand.java\r\nnet\\minecraft\\server\\commands\\EffectCommands.java\r\nnet\\minecraft\\server\\commands\\EmoteCommands.java\r\nnet\\minecraft\\server\\commands\\EnchantCommand.java\r\nnet\\minecraft\\server\\commands\\ExecuteCommand.java\r\nnet\\minecraft\\server\\commands\\ExperienceCommand.java\r\nnet\\minecraft\\server\\commands\\FillBiomeCommand.java\r\nnet\\minecraft\\server\\commands\\FillCommand.java\r\nnet\\minecraft\\server\\commands\\ForceLoadCommand.java\r\nnet\\minecraft\\server\\commands\\FunctionCommand.java\r\nnet\\minecraft\\server\\commands\\GameModeCommand.java\r\nnet\\minecraft\\server\\commands\\GameRuleCommand.java\r\nnet\\minecraft\\server\\commands\\GiveCommand.java\r\nnet\\minecraft\\server\\commands\\HelpCommand.java\r\nnet\\minecraft\\server\\commands\\ItemCommands.java\r\nnet\\minecraft\\server\\commands\\JfrCommand.java\r\nnet\\minecraft\\server\\commands\\KickCommand.java\r\nnet\\minecraft\\server\\commands\\KillCommand.java\r\nnet\\minecraft\\server\\commands\\ListPlayersCommand.java\r\nnet\\minecraft\\server\\commands\\LocateCommand.java\r\nnet\\minecraft\\server\\commands\\LootCommand.java\r\nnet\\minecraft\\server\\commands\\MsgCommand.java\r\nnet\\minecraft\\server\\commands\\OpCommand.java\r\nnet\\minecraft\\server\\commands\\package-info.java\r\nnet\\minecraft\\server\\commands\\PardonCommand.java\r\nnet\\minecraft\\server\\commands\\PardonIpCommand.java\r\nnet\\minecraft\\server\\commands\\ParticleCommand.java\r\nnet\\minecraft\\server\\commands\\PerfCommand.java\r\nnet\\minecraft\\server\\commands\\PlaceCommand.java\r\nnet\\minecraft\\server\\commands\\PlaySoundCommand.java\r\nnet\\minecraft\\server\\commands\\PublishCommand.java\r\nnet\\minecraft\\server\\commands\\RaidCommand.java\r\nnet\\minecraft\\server\\commands\\RandomCommand.java\r\nnet\\minecraft\\server\\commands\\RecipeCommand.java\r\nnet\\minecraft\\server\\commands\\ReloadCommand.java\r\nnet\\minecraft\\server\\commands\\ResetChunksCommand.java\r\nnet\\minecraft\\server\\commands\\ReturnCommand.java\r\nnet\\minecraft\\server\\commands\\RideCommand.java\r\nnet\\minecraft\\server\\commands\\SaveAllCommand.java\r\nnet\\minecraft\\server\\commands\\SaveOffCommand.java\r\nnet\\minecraft\\server\\commands\\SaveOnCommand.java\r\nnet\\minecraft\\server\\commands\\SayCommand.java\r\nnet\\minecraft\\server\\commands\\ScheduleCommand.java\r\nnet\\minecraft\\server\\commands\\ScoreboardCommand.java\r\nnet\\minecraft\\server\\commands\\SeedCommand.java\r\nnet\\minecraft\\server\\commands\\ServerPackCommand.java\r\nnet\\minecraft\\server\\commands\\SetBlockCommand.java\r\nnet\\minecraft\\server\\commands\\SetPlayerIdleTimeoutCommand.java\r\nnet\\minecraft\\server\\commands\\SetSpawnCommand.java\r\nnet\\minecraft\\server\\commands\\SetWorldSpawnCommand.java\r\nnet\\minecraft\\server\\commands\\SpawnArmorTrimsCommand.java\r\nnet\\minecraft\\server\\commands\\SpectateCommand.java\r\nnet\\minecraft\\server\\commands\\SpreadPlayersCommand.java\r\nnet\\minecraft\\server\\commands\\StopCommand.java\r\nnet\\minecraft\\server\\commands\\StopSoundCommand.java\r\nnet\\minecraft\\server\\commands\\SummonCommand.java\r\nnet\\minecraft\\server\\commands\\TagCommand.java\r\nnet\\minecraft\\server\\commands\\TeamCommand.java\r\nnet\\minecraft\\server\\commands\\TeamMsgCommand.java\r\nnet\\minecraft\\server\\commands\\TeleportCommand.java\r\nnet\\minecraft\\server\\commands\\TellRawCommand.java\r\nnet\\minecraft\\server\\commands\\TickCommand.java\r\nnet\\minecraft\\server\\commands\\TimeCommand.java\r\nnet\\minecraft\\server\\commands\\TitleCommand.java\r\nnet\\minecraft\\server\\commands\\TriggerCommand.java\r\nnet\\minecraft\\server\\commands\\WardenSpawnTrackerCommand.java\r\nnet\\minecraft\\server\\commands\\WeatherCommand.java\r\nnet\\minecraft\\server\\commands\\WhitelistCommand.java\r\nnet\\minecraft\\server\\commands\\WorldBorderCommand.java\r\nnet\\minecraft\\server\\commands\\data\\BlockDataAccessor.java\r\nnet\\minecraft\\server\\commands\\data\\DataAccessor.java\r\nnet\\minecraft\\server\\commands\\data\\DataCommands.java\r\nnet\\minecraft\\server\\commands\\data\\EntityDataAccessor.java\r\nnet\\minecraft\\server\\commands\\data\\package-info.java\r\nnet\\minecraft\\server\\commands\\data\\StorageDataAccessor.java\r\nnet\\minecraft\\server\\dedicated\\DedicatedPlayerList.java\r\nnet\\minecraft\\server\\dedicated\\DedicatedServer.java\r\nnet\\minecraft\\server\\dedicated\\DedicatedServerProperties.java\r\nnet\\minecraft\\server\\dedicated\\DedicatedServerSettings.java\r\nnet\\minecraft\\server\\dedicated\\package-info.java\r\nnet\\minecraft\\server\\dedicated\\ServerWatchdog.java\r\nnet\\minecraft\\server\\dedicated\\Settings.java\r\nnet\\minecraft\\server\\gui\\MinecraftServerGui.java\r\nnet\\minecraft\\server\\gui\\package-info.java\r\nnet\\minecraft\\server\\gui\\PlayerListComponent.java\r\nnet\\minecraft\\server\\gui\\StatsComponent.java\r\nnet\\minecraft\\server\\level\\progress\r\nnet\\minecraft\\server\\level\\BlockDestructionProgress.java\r\nnet\\minecraft\\server\\level\\ChunkHolder.java\r\nnet\\minecraft\\server\\level\\ChunkLevel.java\r\nnet\\minecraft\\server\\level\\ChunkMap.java\r\nnet\\minecraft\\server\\level\\ChunkTaskPriorityQueue.java\r\nnet\\minecraft\\server\\level\\ChunkTaskPriorityQueueSorter.java\r\nnet\\minecraft\\server\\level\\ChunkTracker.java\r\nnet\\minecraft\\server\\level\\ChunkTrackingView.java\r\nnet\\minecraft\\server\\level\\ClientInformation.java\r\nnet\\minecraft\\server\\level\\ColumnPos.java\r\nnet\\minecraft\\server\\level\\DemoMode.java\r\nnet\\minecraft\\server\\level\\DistanceManager.java\r\nnet\\minecraft\\server\\level\\FullChunkStatus.java\r\nnet\\minecraft\\server\\level\\package-info.java\r\nnet\\minecraft\\server\\level\\PlayerMap.java\r\nnet\\minecraft\\server\\level\\PlayerRespawnLogic.java\r\nnet\\minecraft\\server\\level\\SectionTracker.java\r\nnet\\minecraft\\server\\level\\ServerBossEvent.java\r\nnet\\minecraft\\server\\level\\ServerChunkCache.java\r\nnet\\minecraft\\server\\level\\ServerEntity.java\r\nnet\\minecraft\\server\\level\\ServerLevel.java\r\nnet\\minecraft\\server\\level\\ServerPlayer.java\r\nnet\\minecraft\\server\\level\\ServerPlayerGameMode.java\r\nnet\\minecraft\\server\\level\\ThreadedLevelLightEngine.java\r\nnet\\minecraft\\server\\level\\Ticket.java\r\nnet\\minecraft\\server\\level\\TicketType.java\r\nnet\\minecraft\\server\\level\\TickingTracker.java\r\nnet\\minecraft\\server\\level\\WorldGenRegion.java\r\nnet\\minecraft\\server\\level\\progress\\ChunkProgressListener.java\r\nnet\\minecraft\\server\\level\\progress\\ChunkProgressListenerFactory.java\r\nnet\\minecraft\\server\\level\\progress\\LoggerChunkProgressListener.java\r\nnet\\minecraft\\server\\level\\progress\\package-info.java\r\nnet\\minecraft\\server\\level\\progress\\ProcessorChunkProgressListener.java\r\nnet\\minecraft\\server\\level\\progress\\StoringChunkProgressListener.java\r\nnet\\minecraft\\server\\network\\config\r\nnet\\minecraft\\server\\network\\CommonListenerCookie.java\r\nnet\\minecraft\\server\\network\\ConfigurationTask.java\r\nnet\\minecraft\\server\\network\\FilteredText.java\r\nnet\\minecraft\\server\\network\\LegacyProtocolUtils.java\r\nnet\\minecraft\\server\\network\\LegacyQueryHandler.java\r\nnet\\minecraft\\server\\network\\MemoryServerHandshakePacketListenerImpl.java\r\nnet\\minecraft\\server\\network\\package-info.java\r\nnet\\minecraft\\server\\network\\PlayerChunkSender.java\r\nnet\\minecraft\\server\\network\\ServerCommonPacketListenerImpl.java\r\nnet\\minecraft\\server\\network\\ServerConfigurationPacketListenerImpl.java\r\nnet\\minecraft\\server\\network\\ServerConnectionListener.java\r\nnet\\minecraft\\server\\network\\ServerGamePacketListenerImpl.java\r\nnet\\minecraft\\server\\network\\ServerHandshakePacketListenerImpl.java\r\nnet\\minecraft\\server\\network\\ServerLoginPacketListenerImpl.java\r\nnet\\minecraft\\server\\network\\ServerPlayerConnection.java\r\nnet\\minecraft\\server\\network\\ServerStatusPacketListenerImpl.java\r\nnet\\minecraft\\server\\network\\TextFilter.java\r\nnet\\minecraft\\server\\network\\TextFilterClient.java\r\nnet\\minecraft\\server\\network\\config\\JoinWorldTask.java\r\nnet\\minecraft\\server\\network\\config\\package-info.java\r\nnet\\minecraft\\server\\network\\config\\ServerResourcePackConfigurationTask.java\r\nnet\\minecraft\\server\\packs\\linkfs\r\nnet\\minecraft\\server\\packs\\metadata\r\nnet\\minecraft\\server\\packs\\repository\r\nnet\\minecraft\\server\\packs\\resources\r\nnet\\minecraft\\server\\packs\\AbstractPackResources.java\r\nnet\\minecraft\\server\\packs\\BuiltInMetadata.java\r\nnet\\minecraft\\server\\packs\\CompositePackResources.java\r\nnet\\minecraft\\server\\packs\\DownloadCacheCleaner.java\r\nnet\\minecraft\\server\\packs\\DownloadQueue.java\r\nnet\\minecraft\\server\\packs\\FeatureFlagsMetadataSection.java\r\nnet\\minecraft\\server\\packs\\FilePackResources.java\r\nnet\\minecraft\\server\\packs\\OverlayMetadataSection.java\r\nnet\\minecraft\\server\\packs\\package-info.java\r\nnet\\minecraft\\server\\packs\\PackResources.java\r\nnet\\minecraft\\server\\packs\\PackType.java\r\nnet\\minecraft\\server\\packs\\PathPackResources.java\r\nnet\\minecraft\\server\\packs\\VanillaPackResources.java\r\nnet\\minecraft\\server\\packs\\VanillaPackResourcesBuilder.java\r\nnet\\minecraft\\server\\packs\\linkfs\\DummyFileAttributes.java\r\nnet\\minecraft\\server\\packs\\linkfs\\LinkFileSystem.java\r\nnet\\minecraft\\server\\packs\\linkfs\\LinkFSFileStore.java\r\nnet\\minecraft\\server\\packs\\linkfs\\LinkFSPath.java\r\nnet\\minecraft\\server\\packs\\linkfs\\LinkFSProvider.java\r\nnet\\minecraft\\server\\packs\\linkfs\\package-info.java\r\nnet\\minecraft\\server\\packs\\linkfs\\PathContents.java\r\nnet\\minecraft\\server\\packs\\metadata\\pack\r\nnet\\minecraft\\server\\packs\\metadata\\MetadataSectionSerializer.java\r\nnet\\minecraft\\server\\packs\\metadata\\MetadataSectionType.java\r\nnet\\minecraft\\server\\packs\\metadata\\package-info.java\r\nnet\\minecraft\\server\\packs\\metadata\\pack\\package-info.java\r\nnet\\minecraft\\server\\packs\\metadata\\pack\\PackMetadataSection.java\r\nnet\\minecraft\\server\\packs\\repository\\BuiltInPackSource.java\r\nnet\\minecraft\\server\\packs\\repository\\FolderRepositorySource.java\r\nnet\\minecraft\\server\\packs\\repository\\Pack.java\r\nnet\\minecraft\\server\\packs\\repository\\package-info.java\r\nnet\\minecraft\\server\\packs\\repository\\PackCompatibility.java\r\nnet\\minecraft\\server\\packs\\repository\\PackDetector.java\r\nnet\\minecraft\\server\\packs\\repository\\PackRepository.java\r\nnet\\minecraft\\server\\packs\\repository\\PackSource.java\r\nnet\\minecraft\\server\\packs\\repository\\RepositorySource.java\r\nnet\\minecraft\\server\\packs\\repository\\ServerPacksSource.java\r\nnet\\minecraft\\server\\packs\\resources\\CloseableResourceManager.java\r\nnet\\minecraft\\server\\packs\\resources\\FallbackResourceManager.java\r\nnet\\minecraft\\server\\packs\\resources\\IoSupplier.java\r\nnet\\minecraft\\server\\packs\\resources\\MultiPackResourceManager.java\r\nnet\\minecraft\\server\\packs\\resources\\package-info.java\r\nnet\\minecraft\\server\\packs\\resources\\PreparableReloadListener.java\r\nnet\\minecraft\\server\\packs\\resources\\ProfiledReloadInstance.java\r\nnet\\minecraft\\server\\packs\\resources\\ReloadableResourceManager.java\r\nnet\\minecraft\\server\\packs\\resources\\ReloadInstance.java\r\nnet\\minecraft\\server\\packs\\resources\\Resource.java\r\nnet\\minecraft\\server\\packs\\resources\\ResourceFilterSection.java\r\nnet\\minecraft\\server\\packs\\resources\\ResourceManager.java\r\nnet\\minecraft\\server\\packs\\resources\\ResourceManagerReloadListener.java\r\nnet\\minecraft\\server\\packs\\resources\\ResourceMetadata.java\r\nnet\\minecraft\\server\\packs\\resources\\ResourceProvider.java\r\nnet\\minecraft\\server\\packs\\resources\\SimpleJsonResourceReloadListener.java\r\nnet\\minecraft\\server\\packs\\resources\\SimplePreparableReloadListener.java\r\nnet\\minecraft\\server\\packs\\resources\\SimpleReloadInstance.java\r\nnet\\minecraft\\server\\players\\BanListEntry.java\r\nnet\\minecraft\\server\\players\\GameProfileCache.java\r\nnet\\minecraft\\server\\players\\IpBanList.java\r\nnet\\minecraft\\server\\players\\IpBanListEntry.java\r\nnet\\minecraft\\server\\players\\OldUsersConverter.java\r\nnet\\minecraft\\server\\players\\package-info.java\r\nnet\\minecraft\\server\\players\\PlayerList.java\r\nnet\\minecraft\\server\\players\\ServerOpList.java\r\nnet\\minecraft\\server\\players\\ServerOpListEntry.java\r\nnet\\minecraft\\server\\players\\SleepStatus.java\r\nnet\\minecraft\\server\\players\\StoredUserEntry.java\r\nnet\\minecraft\\server\\players\\StoredUserList.java\r\nnet\\minecraft\\server\\players\\UserBanList.java\r\nnet\\minecraft\\server\\players\\UserBanListEntry.java\r\nnet\\minecraft\\server\\players\\UserWhiteList.java\r\nnet\\minecraft\\server\\players\\UserWhiteListEntry.java\r\nnet\\minecraft\\server\\rcon\\thread\r\nnet\\minecraft\\server\\rcon\\NetworkDataOutputStream.java\r\nnet\\minecraft\\server\\rcon\\package-info.java\r\nnet\\minecraft\\server\\rcon\\PktUtils.java\r\nnet\\minecraft\\server\\rcon\\RconConsoleSource.java\r\nnet\\minecraft\\server\\rcon\\thread\\GenericThread.java\r\nnet\\minecraft\\server\\rcon\\thread\\package-info.java\r\nnet\\minecraft\\server\\rcon\\thread\\QueryThreadGs4.java\r\nnet\\minecraft\\server\\rcon\\thread\\RconClient.java\r\nnet\\minecraft\\server\\rcon\\thread\\RconThread.java\r\nnet\\minecraft\\sounds\\Music.java\r\nnet\\minecraft\\sounds\\Musics.java\r\nnet\\minecraft\\sounds\\package-info.java\r\nnet\\minecraft\\sounds\\SoundEvent.java\r\nnet\\minecraft\\sounds\\SoundEvents.java\r\nnet\\minecraft\\sounds\\SoundSource.java\r\nnet\\minecraft\\stats\\package-info.java\r\nnet\\minecraft\\stats\\RecipeBook.java\r\nnet\\minecraft\\stats\\RecipeBookSettings.java\r\nnet\\minecraft\\stats\\ServerRecipeBook.java\r\nnet\\minecraft\\stats\\ServerStatsCounter.java\r\nnet\\minecraft\\stats\\Stat.java\r\nnet\\minecraft\\stats\\StatFormatter.java\r\nnet\\minecraft\\stats\\Stats.java\r\nnet\\minecraft\\stats\\StatsCounter.java\r\nnet\\minecraft\\stats\\StatType.java\r\nnet\\minecraft\\tags\\BannerPatternTags.java\r\nnet\\minecraft\\tags\\BiomeTags.java\r\nnet\\minecraft\\tags\\BlockTags.java\r\nnet\\minecraft\\tags\\CatVariantTags.java\r\nnet\\minecraft\\tags\\DamageTypeTags.java\r\nnet\\minecraft\\tags\\EntityTypeTags.java\r\nnet\\minecraft\\tags\\FlatLevelGeneratorPresetTags.java\r\nnet\\minecraft\\tags\\FluidTags.java\r\nnet\\minecraft\\tags\\GameEventTags.java\r\nnet\\minecraft\\tags\\InstrumentTags.java\r\nnet\\minecraft\\tags\\ItemTags.java\r\nnet\\minecraft\\tags\\package-info.java\r\nnet\\minecraft\\tags\\PaintingVariantTags.java\r\nnet\\minecraft\\tags\\PoiTypeTags.java\r\nnet\\minecraft\\tags\\StructureTags.java\r\nnet\\minecraft\\tags\\TagBuilder.java\r\nnet\\minecraft\\tags\\TagEntry.java\r\nnet\\minecraft\\tags\\TagFile.java\r\nnet\\minecraft\\tags\\TagKey.java\r\nnet\\minecraft\\tags\\TagLoader.java\r\nnet\\minecraft\\tags\\TagManager.java\r\nnet\\minecraft\\tags\\TagNetworkSerialization.java\r\nnet\\minecraft\\tags\\WorldPresetTags.java\r\nnet\\minecraft\\util\\datafix\r\nnet\\minecraft\\util\\eventlog\r\nnet\\minecraft\\util\\monitoring\r\nnet\\minecraft\\util\\profiling\r\nnet\\minecraft\\util\\random\r\nnet\\minecraft\\util\\thread\r\nnet\\minecraft\\util\\valueproviders\r\nnet\\minecraft\\util\\worldupdate\r\nnet\\minecraft\\util\\AbortableIterationConsumer.java\r\nnet\\minecraft\\util\\ArrayListDeque.java\r\nnet\\minecraft\\util\\BitStorage.java\r\nnet\\minecraft\\util\\Brightness.java\r\nnet\\minecraft\\util\\ByIdMap.java\r\nnet\\minecraft\\util\\ClassInstanceMultiMap.java\r\nnet\\minecraft\\util\\ColorRGBA.java\r\nnet\\minecraft\\util\\CommonColors.java\r\nnet\\minecraft\\util\\CommonLinks.java\r\nnet\\minecraft\\util\\CrudeIncrementalIntIdentityHashBiMap.java\r\nnet\\minecraft\\util\\Crypt.java\r\nnet\\minecraft\\util\\CryptException.java\r\nnet\\minecraft\\util\\CsvOutput.java\r\nnet\\minecraft\\util\\CubicSampler.java\r\nnet\\minecraft\\util\\CubicSpline.java\r\nnet\\minecraft\\util\\DebugBuffer.java\r\nnet\\minecraft\\util\\DelegateDataOutput.java\r\nnet\\minecraft\\util\\DependencySorter.java\r\nnet\\minecraft\\util\\DirectoryLock.java\r\nnet\\minecraft\\util\\ExceptionCollector.java\r\nnet\\minecraft\\util\\ExtraCodecs.java\r\nnet\\minecraft\\util\\FastBufferedInputStream.java\r\nnet\\minecraft\\util\\FastColor.java\r\nnet\\minecraft\\util\\FileZipper.java\r\nnet\\minecraft\\util\\FormattedCharSequence.java\r\nnet\\minecraft\\util\\FormattedCharSink.java\r\nnet\\minecraft\\util\\FutureChain.java\r\nnet\\minecraft\\util\\Graph.java\r\nnet\\minecraft\\util\\GsonHelper.java\r\nnet\\minecraft\\util\\HttpUtil.java\r\nnet\\minecraft\\util\\InclusiveRange.java\r\nnet\\minecraft\\util\\JavaOps.java\r\nnet\\minecraft\\util\\KeyDispatchDataCodec.java\r\nnet\\minecraft\\util\\LazyLoadedValue.java\r\nnet\\minecraft\\util\\LinearCongruentialGenerator.java\r\nnet\\minecraft\\util\\LowerCaseEnumTypeAdapterFactory.java\r\nnet\\minecraft\\util\\MemoryReserve.java\r\nnet\\minecraft\\util\\ModCheck.java\r\nnet\\minecraft\\util\\Mth.java\r\nnet\\minecraft\\util\\NativeModuleLister.java\r\nnet\\minecraft\\util\\OptionEnum.java\r\nnet\\minecraft\\util\\package-info.java\r\nnet\\minecraft\\util\\ParticleUtils.java\r\nnet\\minecraft\\util\\PngInfo.java\r\nnet\\minecraft\\util\\ProblemReporter.java\r\nnet\\minecraft\\util\\ProgressListener.java\r\nnet\\minecraft\\util\\RandomSource.java\r\nnet\\minecraft\\util\\ResourceLocationPattern.java\r\nnet\\minecraft\\util\\SampleLogger.java\r\nnet\\minecraft\\util\\SegmentedAnglePrecision.java\r\nnet\\minecraft\\util\\SequencedPriorityIterator.java\r\nnet\\minecraft\\util\\SignatureUpdater.java\r\nnet\\minecraft\\util\\SignatureValidator.java\r\nnet\\minecraft\\util\\Signer.java\r\nnet\\minecraft\\util\\SimpleBitStorage.java\r\nnet\\minecraft\\util\\SingleKeyCache.java\r\nnet\\minecraft\\util\\SmoothDouble.java\r\nnet\\minecraft\\util\\SortedArraySet.java\r\nnet\\minecraft\\util\\SpawnUtil.java\r\nnet\\minecraft\\util\\StringDecomposer.java\r\nnet\\minecraft\\util\\StringRepresentable.java\r\nnet\\minecraft\\util\\StringUtil.java\r\nnet\\minecraft\\util\\TaskChainer.java\r\nnet\\minecraft\\util\\ThreadingDetector.java\r\nnet\\minecraft\\util\\TimeSource.java\r\nnet\\minecraft\\util\\TimeUtil.java\r\nnet\\minecraft\\util\\ToFloatFunction.java\r\nnet\\minecraft\\util\\Tuple.java\r\nnet\\minecraft\\util\\Unit.java\r\nnet\\minecraft\\util\\VisibleForDebug.java\r\nnet\\minecraft\\util\\ZeroBitStorage.java\r\nnet\\minecraft\\util\\datafix\\fixes\r\nnet\\minecraft\\util\\datafix\\schemas\r\nnet\\minecraft\\util\\datafix\\ComponentDataFixUtils.java\r\nnet\\minecraft\\util\\datafix\\DataFixers.java\r\nnet\\minecraft\\util\\datafix\\DataFixTypes.java\r\nnet\\minecraft\\util\\datafix\\package-info.java\r\nnet\\minecraft\\util\\datafix\\PackedBitStorage.java\r\nnet\\minecraft\\util\\datafix\\fixes\\AbstractArrowPickupFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\AbstractPoiSectionFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\AbstractUUIDFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\AddFlagIfNotPresentFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\AddNewChoices.java\r\nnet\\minecraft\\util\\datafix\\fixes\\AdvancementsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\AdvancementsRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\AttributesRename.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BedItemColorFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BiomeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BitStorageAlignFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlendingDataFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlendingDataRemoveFromNetherEndFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityBannerColorFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityBlockStateFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityCustomNameToComponentFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityIdFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityJukeboxFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityKeepPacked.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityShulkerBoxColorFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntitySignDoubleSidedEditableTextFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntitySignTextStrictJsonFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockEntityUUIDFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockNameFlatteningFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockRenameFixWithJigsaw.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockStateData.java\r\nnet\\minecraft\\util\\datafix\\fixes\\BlockStateStructureTemplateFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\CatTypeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\CauldronRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\CavesAndCliffsRenames.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkBedBlockEntityInjecterFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkBiomeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkDeleteIgnoredLightDataFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkDeleteLightFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkHeightAndBiomeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkLightRemoveFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkPalettedStorageFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkProtoTickListFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkRenamesFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkStatusFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkStatusFix2.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkStructuresTemplateRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ChunkToProtochunkFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ColorlessShulkerEntityFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\CriteriaRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\DecoratedPotFieldRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\DropInvalidSignDataFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\DyeItemRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EffectDurationFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityArmorStandSilentFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityBlockStateFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityBrushableBlockFieldsRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityCatSplitFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityCodSalmonFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityCustomNameToComponentFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityElderGuardianSplitFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityEquipmentToArmorAndHandFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityGoatMissingStateFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityHealthFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityHorseSaddleFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityHorseSplitFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityIdFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityItemFrameDirectionFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityMinecartIdentifiersFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityPaintingFieldsRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityPaintingItemFrameDirectionFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityPaintingMotiveFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityProjectileOwnerFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityPufferfishRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityRavagerRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityRedundantChanceTagsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityRidingToPassengersFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityShulkerColorFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityShulkerRotationFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntitySkeletonSplitFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityStringUuidFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityTheRenameningFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityTippedArrowFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityUUIDFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityVariantFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityWolfColorFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityZombieSplitFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityZombieVillagerTypeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\EntityZombifiedPiglinRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\FeatureFlagRemoveFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\FilteredBooksFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\FilteredSignsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\FixProjectileStoredItem.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ForcePoiRebuild.java\r\nnet\\minecraft\\util\\datafix\\fixes\\FurnaceRecipeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\GoatHornIdFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\GossipUUIDFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\HeightmapRenamingFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\IglooMetadataRemovalFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemBannerColorFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemCustomNameToComponentFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemIdFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemLoreFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemPotionFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemRemoveBlockEntityTagFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemShulkerBoxColorFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemSpawnEggFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemStackEnchantmentNamesFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemStackMapIdFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemStackSpawnEggFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemStackTagFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemStackTheFlatteningFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemStackUUIDFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemWaterPotionFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ItemWrittenBookPagesStrictJsonFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\JigsawPropertiesFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\JigsawRotationFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\LeavesFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\LegacyDragonFightFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\LevelDataGeneratorOptionsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\LevelFlatGeneratorInfoFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\LevelLegacyWorldGenSettingsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\LevelUUIDFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\MapIdFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\MemoryExpiryDataFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\MissingDimensionFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\MobEffectIdFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\MobSpawnerEntityIdentifiersFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\NamedEntityFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\NamedEntityWriteReadFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\NamespacedTypeRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\NewVillageFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ObjectiveDisplayNameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ObjectiveRenderTypeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OminousBannerBlockEntityRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OminousBannerRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsAccessibilityOnboardFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsAddTextBackgroundFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsAmbientOcclusionFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsForceVBOFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsKeyLwjgl3Fix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsKeyTranslationFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsLowerCaseLanguageFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsProgrammerArtFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OptionsRenameFieldFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\OverreachingTickFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\package-info.java\r\nnet\\minecraft\\util\\datafix\\fixes\\PlayerUUIDFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\PoiTypeRemoveFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\PoiTypeRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\PrimedTntBlockStateFixer.java\r\nnet\\minecraft\\util\\datafix\\fixes\\RandomSequenceSettingsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\RecipesFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\RecipesRenameningFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\RedstoneWireConnectionsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\References.java\r\nnet\\minecraft\\util\\datafix\\fixes\\RemapChunkStatusFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\RemoveGolemGossipFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\RenamedCoralFansFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\RenamedCoralFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ReorganizePoi.java\r\nnet\\minecraft\\util\\datafix\\fixes\\SavedDataFeaturePoolElementFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\SavedDataUUIDFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ScoreboardDisplaySlotFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\SimpleEntityRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\SimplestEntityRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\SpawnerDataFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\StatsCounterFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\StatsRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\StriderGravityFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\StructureReferenceCountFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\StructuresBecomeConfiguredFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\StructureSettingsFlattenFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\TeamDisplayNameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\TrappedChestBlockEntityFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\VariantRenameFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\VillagerDataFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\VillagerFollowRangeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\VillagerRebuildLevelAndXpFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\VillagerTradeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\WallPropertyFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\WeaponSmithChestLootTableFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\WorldGenSettingsDisallowOldCustomWorldsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\WorldGenSettingsFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\WorldGenSettingsHeightAndBiomeFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\WriteAndReadFix.java\r\nnet\\minecraft\\util\\datafix\\fixes\\ZombieVillagerRebuildXpFix.java\r\nnet\\minecraft\\util\\datafix\\schemas\\NamespacedSchema.java\r\nnet\\minecraft\\util\\datafix\\schemas\\package-info.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V100.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V102.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1022.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V106.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V107.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1125.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V135.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V143.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1451_1.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1451_2.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1451_3.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1451_4.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1451_5.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1451_6.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1451.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1460.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1466.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1470.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1481.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1483.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1486.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1510.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1800.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1801.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1904.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1906.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1909.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1920.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1928.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1929.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V1931.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2100.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2501.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2502.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2505.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2509.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2519.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2522.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2551.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2568.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2571.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2684.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2686.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2688.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2704.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2707.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2831.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2832.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V2842.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3076.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3078.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3081.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3082.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3083.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3202.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3203.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3204.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3325.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3326.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3327.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3328.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3438.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3448.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3682.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3683.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3685.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V3689.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V501.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V700.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V701.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V702.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V703.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V704.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V705.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V808.java\r\nnet\\minecraft\\util\\datafix\\schemas\\V99.java\r\nnet\\minecraft\\util\\eventlog\\EventLogDirectory.java\r\nnet\\minecraft\\util\\eventlog\\JsonEventLog.java\r\nnet\\minecraft\\util\\eventlog\\JsonEventLogReader.java\r\nnet\\minecraft\\util\\eventlog\\package-info.java\r\nnet\\minecraft\\util\\monitoring\\jmx\r\nnet\\minecraft\\util\\monitoring\\jmx\\MinecraftServerStatistics.java\r\nnet\\minecraft\\util\\monitoring\\jmx\\package-info.java\r\nnet\\minecraft\\util\\profiling\\jfr\r\nnet\\minecraft\\util\\profiling\\metrics\r\nnet\\minecraft\\util\\profiling\\ActiveProfiler.java\r\nnet\\minecraft\\util\\profiling\\ContinuousProfiler.java\r\nnet\\minecraft\\util\\profiling\\EmptyProfileResults.java\r\nnet\\minecraft\\util\\profiling\\FilledProfileResults.java\r\nnet\\minecraft\\util\\profiling\\InactiveProfiler.java\r\nnet\\minecraft\\util\\profiling\\package-info.java\r\nnet\\minecraft\\util\\profiling\\ProfileCollector.java\r\nnet\\minecraft\\util\\profiling\\ProfileResults.java\r\nnet\\minecraft\\util\\profiling\\ProfilerFiller.java\r\nnet\\minecraft\\util\\profiling\\ProfilerPathEntry.java\r\nnet\\minecraft\\util\\profiling\\ResultField.java\r\nnet\\minecraft\\util\\profiling\\SingleTickProfiler.java\r\nnet\\minecraft\\util\\profiling\\jfr\\callback\r\nnet\\minecraft\\util\\profiling\\jfr\\event\r\nnet\\minecraft\\util\\profiling\\jfr\\parse\r\nnet\\minecraft\\util\\profiling\\jfr\\serialize\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\r\nnet\\minecraft\\util\\profiling\\jfr\\Environment.java\r\nnet\\minecraft\\util\\profiling\\jfr\\JfrProfiler.java\r\nnet\\minecraft\\util\\profiling\\jfr\\JvmProfiler.java\r\nnet\\minecraft\\util\\profiling\\jfr\\package-info.java\r\nnet\\minecraft\\util\\profiling\\jfr\\Percentiles.java\r\nnet\\minecraft\\util\\profiling\\jfr\\SummaryReporter.java\r\nnet\\minecraft\\util\\profiling\\jfr\\callback\\package-info.java\r\nnet\\minecraft\\util\\profiling\\jfr\\callback\\ProfiledDuration.java\r\nnet\\minecraft\\util\\profiling\\jfr\\event\\ChunkGenerationEvent.java\r\nnet\\minecraft\\util\\profiling\\jfr\\event\\NetworkSummaryEvent.java\r\nnet\\minecraft\\util\\profiling\\jfr\\event\\package-info.java\r\nnet\\minecraft\\util\\profiling\\jfr\\event\\PacketEvent.java\r\nnet\\minecraft\\util\\profiling\\jfr\\event\\PacketReceivedEvent.java\r\nnet\\minecraft\\util\\profiling\\jfr\\event\\PacketSentEvent.java\r\nnet\\minecraft\\util\\profiling\\jfr\\event\\ServerTickTimeEvent.java\r\nnet\\minecraft\\util\\profiling\\jfr\\event\\WorldLoadFinishedEvent.java\r\nnet\\minecraft\\util\\profiling\\jfr\\parse\\JfrStatsParser.java\r\nnet\\minecraft\\util\\profiling\\jfr\\parse\\JfrStatsResult.java\r\nnet\\minecraft\\util\\profiling\\jfr\\parse\\package-info.java\r\nnet\\minecraft\\util\\profiling\\jfr\\serialize\\JfrResultJsonSerializer.java\r\nnet\\minecraft\\util\\profiling\\jfr\\serialize\\package-info.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\ChunkGenStat.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\CpuLoadStat.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\FileIOStat.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\GcHeapStat.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\NetworkPacketSummary.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\package-info.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\ThreadAllocationStat.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\TickTimeStat.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\TimedStat.java\r\nnet\\minecraft\\util\\profiling\\jfr\\stats\\TimedStatSummary.java\r\nnet\\minecraft\\util\\profiling\\metrics\\profiling\r\nnet\\minecraft\\util\\profiling\\metrics\\storage\r\nnet\\minecraft\\util\\profiling\\metrics\\MetricCategory.java\r\nnet\\minecraft\\util\\profiling\\metrics\\MetricSampler.java\r\nnet\\minecraft\\util\\profiling\\metrics\\MetricsRegistry.java\r\nnet\\minecraft\\util\\profiling\\metrics\\MetricsSamplerProvider.java\r\nnet\\minecraft\\util\\profiling\\metrics\\package-info.java\r\nnet\\minecraft\\util\\profiling\\metrics\\ProfilerMeasured.java\r\nnet\\minecraft\\util\\profiling\\metrics\\profiling\\ActiveMetricsRecorder.java\r\nnet\\minecraft\\util\\profiling\\metrics\\profiling\\InactiveMetricsRecorder.java\r\nnet\\minecraft\\util\\profiling\\metrics\\profiling\\MetricsRecorder.java\r\nnet\\minecraft\\util\\profiling\\metrics\\profiling\\package-info.java\r\nnet\\minecraft\\util\\profiling\\metrics\\profiling\\ProfilerSamplerAdapter.java\r\nnet\\minecraft\\util\\profiling\\metrics\\profiling\\ServerMetricsSamplersProvider.java\r\nnet\\minecraft\\util\\profiling\\metrics\\storage\\MetricsPersister.java\r\nnet\\minecraft\\util\\profiling\\metrics\\storage\\package-info.java\r\nnet\\minecraft\\util\\profiling\\metrics\\storage\\RecordedDeviation.java\r\nnet\\minecraft\\util\\random\\package-info.java\r\nnet\\minecraft\\util\\random\\SimpleWeightedRandomList.java\r\nnet\\minecraft\\util\\random\\Weight.java\r\nnet\\minecraft\\util\\random\\WeightedEntry.java\r\nnet\\minecraft\\util\\random\\WeightedRandom.java\r\nnet\\minecraft\\util\\random\\WeightedRandomList.java\r\nnet\\minecraft\\util\\thread\\BlockableEventLoop.java\r\nnet\\minecraft\\util\\thread\\NamedThreadFactory.java\r\nnet\\minecraft\\util\\thread\\package-info.java\r\nnet\\minecraft\\util\\thread\\ProcessorHandle.java\r\nnet\\minecraft\\util\\thread\\ProcessorMailbox.java\r\nnet\\minecraft\\util\\thread\\ReentrantBlockableEventLoop.java\r\nnet\\minecraft\\util\\thread\\StrictQueue.java\r\nnet\\minecraft\\util\\valueproviders\\BiasedToBottomInt.java\r\nnet\\minecraft\\util\\valueproviders\\ClampedInt.java\r\nnet\\minecraft\\util\\valueproviders\\ClampedNormalFloat.java\r\nnet\\minecraft\\util\\valueproviders\\ClampedNormalInt.java\r\nnet\\minecraft\\util\\valueproviders\\ConstantFloat.java\r\nnet\\minecraft\\util\\valueproviders\\ConstantInt.java\r\nnet\\minecraft\\util\\valueproviders\\FloatProvider.java\r\nnet\\minecraft\\util\\valueproviders\\FloatProviderType.java\r\nnet\\minecraft\\util\\valueproviders\\IntProvider.java\r\nnet\\minecraft\\util\\valueproviders\\IntProviderType.java\r\nnet\\minecraft\\util\\valueproviders\\MultipliedFloats.java\r\nnet\\minecraft\\util\\valueproviders\\package-info.java\r\nnet\\minecraft\\util\\valueproviders\\SampledFloat.java\r\nnet\\minecraft\\util\\valueproviders\\TrapezoidFloat.java\r\nnet\\minecraft\\util\\valueproviders\\UniformFloat.java\r\nnet\\minecraft\\util\\valueproviders\\UniformInt.java\r\nnet\\minecraft\\util\\valueproviders\\WeightedListInt.java\r\nnet\\minecraft\\util\\worldupdate\\package-info.java\r\nnet\\minecraft\\util\\worldupdate\\WorldUpgrader.java\r\nnet\\minecraft\\world\\damagesource\r\nnet\\minecraft\\world\\effect\r\nnet\\minecraft\\world\\entity\r\nnet\\minecraft\\world\\flag\r\nnet\\minecraft\\world\\food\r\nnet\\minecraft\\world\\inventory\r\nnet\\minecraft\\world\\item\r\nnet\\minecraft\\world\\level\r\nnet\\minecraft\\world\\phys\r\nnet\\minecraft\\world\\scores\r\nnet\\minecraft\\world\\ticks\r\nnet\\minecraft\\world\\BossEvent.java\r\nnet\\minecraft\\world\\Clearable.java\r\nnet\\minecraft\\world\\CompoundContainer.java\r\nnet\\minecraft\\world\\Container.java\r\nnet\\minecraft\\world\\ContainerHelper.java\r\nnet\\minecraft\\world\\ContainerListener.java\r\nnet\\minecraft\\world\\Containers.java\r\nnet\\minecraft\\world\\Difficulty.java\r\nnet\\minecraft\\world\\DifficultyInstance.java\r\nnet\\minecraft\\world\\InteractionHand.java\r\nnet\\minecraft\\world\\InteractionResult.java\r\nnet\\minecraft\\world\\InteractionResultHolder.java\r\nnet\\minecraft\\world\\LockCode.java\r\nnet\\minecraft\\world\\MenuProvider.java\r\nnet\\minecraft\\world\\Nameable.java\r\nnet\\minecraft\\world\\package-info.java\r\nnet\\minecraft\\world\\RandomizableContainer.java\r\nnet\\minecraft\\world\\RandomSequence.java\r\nnet\\minecraft\\world\\RandomSequences.java\r\nnet\\minecraft\\world\\SimpleContainer.java\r\nnet\\minecraft\\world\\SimpleMenuProvider.java\r\nnet\\minecraft\\world\\TickRateManager.java\r\nnet\\minecraft\\world\\WorldlyContainer.java\r\nnet\\minecraft\\world\\WorldlyContainerHolder.java\r\nnet\\minecraft\\world\\damagesource\\CombatEntry.java\r\nnet\\minecraft\\world\\damagesource\\CombatRules.java\r\nnet\\minecraft\\world\\damagesource\\CombatTracker.java\r\nnet\\minecraft\\world\\damagesource\\DamageEffects.java\r\nnet\\minecraft\\world\\damagesource\\DamageScaling.java\r\nnet\\minecraft\\world\\damagesource\\DamageSource.java\r\nnet\\minecraft\\world\\damagesource\\DamageSources.java\r\nnet\\minecraft\\world\\damagesource\\DamageType.java\r\nnet\\minecraft\\world\\damagesource\\DamageTypes.java\r\nnet\\minecraft\\world\\damagesource\\DeathMessageType.java\r\nnet\\minecraft\\world\\damagesource\\FallLocation.java\r\nnet\\minecraft\\world\\damagesource\\package-info.java\r\nnet\\minecraft\\world\\effect\\AbsorptionMobEffect.java\r\nnet\\minecraft\\world\\effect\\AttributeModifierTemplate.java\r\nnet\\minecraft\\world\\effect\\BadOmenMobEffect.java\r\nnet\\minecraft\\world\\effect\\HealOrHarmMobEffect.java\r\nnet\\minecraft\\world\\effect\\HungerMobEffect.java\r\nnet\\minecraft\\world\\effect\\InstantenousMobEffect.java\r\nnet\\minecraft\\world\\effect\\MobEffect.java\r\nnet\\minecraft\\world\\effect\\MobEffectCategory.java\r\nnet\\minecraft\\world\\effect\\MobEffectInstance.java\r\nnet\\minecraft\\world\\effect\\MobEffects.java\r\nnet\\minecraft\\world\\effect\\MobEffectUtil.java\r\nnet\\minecraft\\world\\effect\\package-info.java\r\nnet\\minecraft\\world\\effect\\PoisonMobEffect.java\r\nnet\\minecraft\\world\\effect\\RegenerationMobEffect.java\r\nnet\\minecraft\\world\\effect\\SaturationMobEffect.java\r\nnet\\minecraft\\world\\effect\\WitherMobEffect.java\r\nnet\\minecraft\\world\\entity\\ai\r\nnet\\minecraft\\world\\entity\\ambient\r\nnet\\minecraft\\world\\entity\\animal\r\nnet\\minecraft\\world\\entity\\boss\r\nnet\\minecraft\\world\\entity\\decoration\r\nnet\\minecraft\\world\\entity\\item\r\nnet\\minecraft\\world\\entity\\monster\r\nnet\\minecraft\\world\\entity\\npc\r\nnet\\minecraft\\world\\entity\\player\r\nnet\\minecraft\\world\\entity\\projectile\r\nnet\\minecraft\\world\\entity\\raid\r\nnet\\minecraft\\world\\entity\\schedule\r\nnet\\minecraft\\world\\entity\\vehicle\r\nnet\\minecraft\\world\\entity\\AgeableMob.java\r\nnet\\minecraft\\world\\entity\\AnimationState.java\r\nnet\\minecraft\\world\\entity\\AreaEffectCloud.java\r\nnet\\minecraft\\world\\entity\\Attackable.java\r\nnet\\minecraft\\world\\entity\\Display.java\r\nnet\\minecraft\\world\\entity\\Entity.java\r\nnet\\minecraft\\world\\entity\\EntityDimensions.java\r\nnet\\minecraft\\world\\entity\\EntityEvent.java\r\nnet\\minecraft\\world\\entity\\EntitySelector.java\r\nnet\\minecraft\\world\\entity\\EntityType.java\r\nnet\\minecraft\\world\\entity\\EquipmentSlot.java\r\nnet\\minecraft\\world\\entity\\ExperienceOrb.java\r\nnet\\minecraft\\world\\entity\\FlyingMob.java\r\nnet\\minecraft\\world\\entity\\GlowSquid.java\r\nnet\\minecraft\\world\\entity\\HasCustomInventoryScreen.java\r\nnet\\minecraft\\world\\entity\\HumanoidArm.java\r\nnet\\minecraft\\world\\entity\\Interaction.java\r\nnet\\minecraft\\world\\entity\\ItemBasedSteering.java\r\nnet\\minecraft\\world\\entity\\ItemSteerable.java\r\nnet\\minecraft\\world\\entity\\LerpingModel.java\r\nnet\\minecraft\\world\\entity\\LightningBolt.java\r\nnet\\minecraft\\world\\entity\\LivingEntity.java\r\nnet\\minecraft\\world\\entity\\Marker.java\r\nnet\\minecraft\\world\\entity\\Mob.java\r\nnet\\minecraft\\world\\entity\\MobCategory.java\r\nnet\\minecraft\\world\\entity\\MobSpawnType.java\r\nnet\\minecraft\\world\\entity\\MobType.java\r\nnet\\minecraft\\world\\entity\\MoverType.java\r\nnet\\minecraft\\world\\entity\\NeutralMob.java\r\nnet\\minecraft\\world\\entity\\OwnableEntity.java\r\nnet\\minecraft\\world\\entity\\package-info.java\r\nnet\\minecraft\\world\\entity\\PathfinderMob.java\r\nnet\\minecraft\\world\\entity\\PlayerRideable.java\r\nnet\\minecraft\\world\\entity\\PlayerRideableJumping.java\r\nnet\\minecraft\\world\\entity\\Pose.java\r\nnet\\minecraft\\world\\entity\\PowerableMob.java\r\nnet\\minecraft\\world\\entity\\RelativeMovement.java\r\nnet\\minecraft\\world\\entity\\ReputationEventHandler.java\r\nnet\\minecraft\\world\\entity\\Saddleable.java\r\nnet\\minecraft\\world\\entity\\Shearable.java\r\nnet\\minecraft\\world\\entity\\SlotAccess.java\r\nnet\\minecraft\\world\\entity\\SpawnGroupData.java\r\nnet\\minecraft\\world\\entity\\SpawnPlacements.java\r\nnet\\minecraft\\world\\entity\\TamableAnimal.java\r\nnet\\minecraft\\world\\entity\\Targeting.java\r\nnet\\minecraft\\world\\entity\\TraceableEntity.java\r\nnet\\minecraft\\world\\entity\\VariantHolder.java\r\nnet\\minecraft\\world\\entity\\WalkAnimationState.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\r\nnet\\minecraft\\world\\entity\\ai\\behavior\r\nnet\\minecraft\\world\\entity\\ai\\control\r\nnet\\minecraft\\world\\entity\\ai\\goal\r\nnet\\minecraft\\world\\entity\\ai\\gossip\r\nnet\\minecraft\\world\\entity\\ai\\memory\r\nnet\\minecraft\\world\\entity\\ai\\navigation\r\nnet\\minecraft\\world\\entity\\ai\\sensing\r\nnet\\minecraft\\world\\entity\\ai\\targeting\r\nnet\\minecraft\\world\\entity\\ai\\util\r\nnet\\minecraft\\world\\entity\\ai\\village\r\nnet\\minecraft\\world\\entity\\ai\\Brain.java\r\nnet\\minecraft\\world\\entity\\ai\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\Attribute.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\AttributeInstance.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\AttributeMap.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\AttributeModifier.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\Attributes.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\AttributeSupplier.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\DefaultAttributes.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\attributes\\RangedAttribute.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\declarative\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\AcquirePoi.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\AnimalMakeLove.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\AnimalPanic.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\AssignProfessionFromJobSite.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\BabyFollowAdult.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\BackUpIfTooClose.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\BecomePassiveIfMemoryPresent.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\Behavior.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\BehaviorControl.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\BehaviorUtils.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\BlockPosTracker.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\CelebrateVillagersSurvivedRaid.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\CopyMemoryWithExpiry.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\CountDownCooldownTicks.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\Croak.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\CrossbowAttack.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\DismountOrSkipMounting.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\DoNothing.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\EntityTracker.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\EraseMemoryIf.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\FollowTemptation.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\GateBehavior.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\GiveGiftToHero.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\GoAndGiveItemsToTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\GoToClosestVillage.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\GoToPotentialJobSite.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\GoToTargetLocation.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\GoToWantedItem.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\HarvestFarmland.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\InsideBrownianWalk.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\InteractWith.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\InteractWithDoor.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\JumpOnBed.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\LocateHidingPlace.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\LongJumpMidJump.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\LongJumpToPreferredBlock.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\LongJumpToRandomPos.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\LongJumpUtil.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\LookAndFollowTradingPlayerSink.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\LookAtTargetSink.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\MeleeAttack.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\Mount.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\MoveToSkySeeingSpot.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\MoveToTargetSink.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\OneShot.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\PlayTagWithOtherKids.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\PoiCompetitorScan.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\PositionTracker.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\PrepareRamNearestTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\RamTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\RandomLookAround.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\RandomStroll.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\ReactToBell.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\ResetProfession.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\ResetRaidStatus.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\RingBell.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\RunOne.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetClosestHomeAsWalkTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetEntityLookTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetEntityLookTargetSometimes.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetHiddenState.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetLookAndInteract.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetRaidStatus.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetWalkTargetAwayFrom.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetWalkTargetFromAttackTargetIfTargetOutOfReach.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetWalkTargetFromBlockMemory.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SetWalkTargetFromLookTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\ShowTradesToPlayer.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\ShufflingList.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SleepInBed.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\SocializeAtBell.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\StartAttacking.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\StartCelebratingIfTargetDead.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\StayCloseToTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\StopAttackingIfTargetInvalid.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\StopBeingAngryIfTargetDead.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\StrollAroundPoi.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\StrollToPoi.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\StrollToPoiList.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\Swim.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\TradeWithVillager.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\TriggerGate.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\TryFindLand.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\TryFindLandNearWater.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\TryFindWater.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\TryLaySpawnOnWaterNearLand.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\UpdateActivityFromSchedule.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\UseBonemeal.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\ValidateNearbyPoi.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\VillageBoundRandomStroll.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\VillagerCalmDown.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\VillagerGoalPackages.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\VillagerMakeLove.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\VillagerPanicTrigger.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\WakeUp.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\WorkAtComposter.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\WorkAtPoi.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\YieldJobSite.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\declarative\\BehaviorBuilder.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\declarative\\MemoryAccessor.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\declarative\\MemoryCondition.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\declarative\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\declarative\\Trigger.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\Digging.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\Emerging.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\ForceUnmount.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\Roar.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\SetRoarTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\SetWardenLookTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\Sniffing.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\SonicBoom.java\r\nnet\\minecraft\\world\\entity\\ai\\behavior\\warden\\TryToSniff.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\BodyRotationControl.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\Control.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\FlyingMoveControl.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\JumpControl.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\LookControl.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\MoveControl.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\SmoothSwimmingLookControl.java\r\nnet\\minecraft\\world\\entity\\ai\\control\\SmoothSwimmingMoveControl.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\r\nnet\\minecraft\\world\\entity\\ai\\goal\\AvoidEntityGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\BegGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\BoatGoals.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\BreakDoorGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\BreathAirGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\BreedGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\CatLieOnBedGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\CatSitOnBlockGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\ClimbOnTopOfPowderSnowGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\DolphinJumpGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\DoorInteractGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\EatBlockGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\FleeSunGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\FloatGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\FollowBoatGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\FollowFlockLeaderGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\FollowMobGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\FollowOwnerGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\FollowParentGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\Goal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\GoalSelector.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\GolemRandomStrollInVillageGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\InteractGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\JumpGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\LandOnOwnersShoulderGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\LeapAtTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\LlamaFollowCaravanGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\LookAtPlayerGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\LookAtTradingPlayerGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\MeleeAttackGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\MoveBackToVillageGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\MoveThroughVillageGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\MoveToBlockGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\MoveTowardsRestrictionGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\MoveTowardsTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\OcelotAttackGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\OfferFlowerGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\OpenDoorGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\PanicGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\PathfindToRaidGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RandomLookAroundGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RandomStandGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RandomStrollGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RandomSwimmingGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RangedAttackGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RangedBowAttackGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RangedCrossbowAttackGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RemoveBlockGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RestrictSunGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\RunAroundLikeCrazyGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\SitWhenOrderedToGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\StrollThroughVillageGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\SwellGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\TemptGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\TradeWithPlayerGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\TryFindWaterGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\UseItemGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\WaterAvoidingRandomFlyingGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\WaterAvoidingRandomStrollGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\WrappedGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\ZombieAttackGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\DefendVillageTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\HurtByTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\NearestAttackableTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\NearestAttackableWitchTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\NearestHealableRaiderTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\NonTameRandomTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\OwnerHurtByTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\OwnerHurtTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\ResetUniversalAngerTargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\goal\\target\\TargetGoal.java\r\nnet\\minecraft\\world\\entity\\ai\\gossip\\GossipContainer.java\r\nnet\\minecraft\\world\\entity\\ai\\gossip\\GossipType.java\r\nnet\\minecraft\\world\\entity\\ai\\gossip\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\memory\\ExpirableValue.java\r\nnet\\minecraft\\world\\entity\\ai\\memory\\MemoryModuleType.java\r\nnet\\minecraft\\world\\entity\\ai\\memory\\MemoryStatus.java\r\nnet\\minecraft\\world\\entity\\ai\\memory\\NearestVisibleLivingEntities.java\r\nnet\\minecraft\\world\\entity\\ai\\memory\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\memory\\WalkTarget.java\r\nnet\\minecraft\\world\\entity\\ai\\navigation\\AmphibiousPathNavigation.java\r\nnet\\minecraft\\world\\entity\\ai\\navigation\\FlyingPathNavigation.java\r\nnet\\minecraft\\world\\entity\\ai\\navigation\\GroundPathNavigation.java\r\nnet\\minecraft\\world\\entity\\ai\\navigation\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\navigation\\PathNavigation.java\r\nnet\\minecraft\\world\\entity\\ai\\navigation\\WallClimberNavigation.java\r\nnet\\minecraft\\world\\entity\\ai\\navigation\\WaterBoundPathNavigation.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\AdultSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\AxolotlAttackablesSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\BreezeAttackEntitySensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\DummySensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\FrogAttackablesSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\GolemSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\HoglinSpecificSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\HurtBySensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\IsInWaterSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\NearestBedSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\NearestItemSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\NearestLivingEntitySensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\NearestVisibleLivingEntitySensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\PiglinBruteSpecificSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\PiglinSpecificSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\PlayerSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\SecondaryPoiSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\Sensing.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\Sensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\SensorType.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\TemptingSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\VillagerBabiesSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\VillagerHostilesSensor.java\r\nnet\\minecraft\\world\\entity\\ai\\sensing\\WardenEntitySensor.java\r\nnet\\minecraft\\world\\entity\\ai\\targeting\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\targeting\\TargetingConditions.java\r\nnet\\minecraft\\world\\entity\\ai\\util\\AirAndWaterRandomPos.java\r\nnet\\minecraft\\world\\entity\\ai\\util\\AirRandomPos.java\r\nnet\\minecraft\\world\\entity\\ai\\util\\DefaultRandomPos.java\r\nnet\\minecraft\\world\\entity\\ai\\util\\GoalUtils.java\r\nnet\\minecraft\\world\\entity\\ai\\util\\HoverRandomPos.java\r\nnet\\minecraft\\world\\entity\\ai\\util\\LandRandomPos.java\r\nnet\\minecraft\\world\\entity\\ai\\util\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\util\\RandomPos.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\poi\r\nnet\\minecraft\\world\\entity\\ai\\village\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\ReputationEventType.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\VillageSiege.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\poi\\package-info.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\poi\\PoiManager.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\poi\\PoiRecord.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\poi\\PoiSection.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\poi\\PoiType.java\r\nnet\\minecraft\\world\\entity\\ai\\village\\poi\\PoiTypes.java\r\nnet\\minecraft\\world\\entity\\ambient\\AmbientCreature.java\r\nnet\\minecraft\\world\\entity\\ambient\\Bat.java\r\nnet\\minecraft\\world\\entity\\ambient\\package-info.java\r\nnet\\minecraft\\world\\entity\\animal\\allay\r\nnet\\minecraft\\world\\entity\\animal\\axolotl\r\nnet\\minecraft\\world\\entity\\animal\\camel\r\nnet\\minecraft\\world\\entity\\animal\\frog\r\nnet\\minecraft\\world\\entity\\animal\\goat\r\nnet\\minecraft\\world\\entity\\animal\\horse\r\nnet\\minecraft\\world\\entity\\animal\\sniffer\r\nnet\\minecraft\\world\\entity\\animal\\AbstractFish.java\r\nnet\\minecraft\\world\\entity\\animal\\AbstractGolem.java\r\nnet\\minecraft\\world\\entity\\animal\\AbstractSchoolingFish.java\r\nnet\\minecraft\\world\\entity\\animal\\Animal.java\r\nnet\\minecraft\\world\\entity\\animal\\Bee.java\r\nnet\\minecraft\\world\\entity\\animal\\Bucketable.java\r\nnet\\minecraft\\world\\entity\\animal\\Cat.java\r\nnet\\minecraft\\world\\entity\\animal\\CatVariant.java\r\nnet\\minecraft\\world\\entity\\animal\\Chicken.java\r\nnet\\minecraft\\world\\entity\\animal\\Cod.java\r\nnet\\minecraft\\world\\entity\\animal\\Cow.java\r\nnet\\minecraft\\world\\entity\\animal\\Dolphin.java\r\nnet\\minecraft\\world\\entity\\animal\\FlyingAnimal.java\r\nnet\\minecraft\\world\\entity\\animal\\Fox.java\r\nnet\\minecraft\\world\\entity\\animal\\FrogVariant.java\r\nnet\\minecraft\\world\\entity\\animal\\IronGolem.java\r\nnet\\minecraft\\world\\entity\\animal\\MushroomCow.java\r\nnet\\minecraft\\world\\entity\\animal\\Ocelot.java\r\nnet\\minecraft\\world\\entity\\animal\\package-info.java\r\nnet\\minecraft\\world\\entity\\animal\\Panda.java\r\nnet\\minecraft\\world\\entity\\animal\\Parrot.java\r\nnet\\minecraft\\world\\entity\\animal\\Pig.java\r\nnet\\minecraft\\world\\entity\\animal\\PolarBear.java\r\nnet\\minecraft\\world\\entity\\animal\\Pufferfish.java\r\nnet\\minecraft\\world\\entity\\animal\\Rabbit.java\r\nnet\\minecraft\\world\\entity\\animal\\Salmon.java\r\nnet\\minecraft\\world\\entity\\animal\\Sheep.java\r\nnet\\minecraft\\world\\entity\\animal\\ShoulderRidingEntity.java\r\nnet\\minecraft\\world\\entity\\animal\\SnowGolem.java\r\nnet\\minecraft\\world\\entity\\animal\\Squid.java\r\nnet\\minecraft\\world\\entity\\animal\\TropicalFish.java\r\nnet\\minecraft\\world\\entity\\animal\\Turtle.java\r\nnet\\minecraft\\world\\entity\\animal\\WaterAnimal.java\r\nnet\\minecraft\\world\\entity\\animal\\Wolf.java\r\nnet\\minecraft\\world\\entity\\animal\\allay\\Allay.java\r\nnet\\minecraft\\world\\entity\\animal\\allay\\AllayAi.java\r\nnet\\minecraft\\world\\entity\\animal\\allay\\package-info.java\r\nnet\\minecraft\\world\\entity\\animal\\axolotl\\Axolotl.java\r\nnet\\minecraft\\world\\entity\\animal\\axolotl\\AxolotlAi.java\r\nnet\\minecraft\\world\\entity\\animal\\axolotl\\package-info.java\r\nnet\\minecraft\\world\\entity\\animal\\axolotl\\PlayDead.java\r\nnet\\minecraft\\world\\entity\\animal\\axolotl\\ValidatePlayDead.java\r\nnet\\minecraft\\world\\entity\\animal\\camel\\Camel.java\r\nnet\\minecraft\\world\\entity\\animal\\camel\\CamelAi.java\r\nnet\\minecraft\\world\\entity\\animal\\camel\\package-info.java\r\nnet\\minecraft\\world\\entity\\animal\\frog\\Frog.java\r\nnet\\minecraft\\world\\entity\\animal\\frog\\FrogAi.java\r\nnet\\minecraft\\world\\entity\\animal\\frog\\package-info.java\r\nnet\\minecraft\\world\\entity\\animal\\frog\\ShootTongue.java\r\nnet\\minecraft\\world\\entity\\animal\\frog\\Tadpole.java\r\nnet\\minecraft\\world\\entity\\animal\\frog\\TadpoleAi.java\r\nnet\\minecraft\\world\\entity\\animal\\goat\\Goat.java\r\nnet\\minecraft\\world\\entity\\animal\\goat\\GoatAi.java\r\nnet\\minecraft\\world\\entity\\animal\\goat\\package-info.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\AbstractChestedHorse.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\AbstractHorse.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\Donkey.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\Horse.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\Llama.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\Markings.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\Mule.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\package-info.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\SkeletonHorse.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\SkeletonTrapGoal.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\TraderLlama.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\Variant.java\r\nnet\\minecraft\\world\\entity\\animal\\horse\\ZombieHorse.java\r\nnet\\minecraft\\world\\entity\\animal\\sniffer\\Sniffer.java\r\nnet\\minecraft\\world\\entity\\animal\\sniffer\\SnifferAi.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\r\nnet\\minecraft\\world\\entity\\boss\\wither\r\nnet\\minecraft\\world\\entity\\boss\\EnderDragonPart.java\r\nnet\\minecraft\\world\\entity\\boss\\package-info.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\EndCrystal.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\EnderDragon.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\package-info.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\AbstractDragonPhaseInstance.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\AbstractDragonSittingPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonChargePlayerPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonDeathPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonHoldingPatternPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonHoverPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonLandingApproachPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonLandingPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonPhaseInstance.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonSittingAttackingPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonSittingFlamingPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonSittingScanningPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonStrafePlayerPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\DragonTakeoffPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\EnderDragonPhase.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\EnderDragonPhaseManager.java\r\nnet\\minecraft\\world\\entity\\boss\\enderdragon\\phases\\package-info.java\r\nnet\\minecraft\\world\\entity\\boss\\wither\\package-info.java\r\nnet\\minecraft\\world\\entity\\boss\\wither\\WitherBoss.java\r\nnet\\minecraft\\world\\entity\\decoration\\ArmorStand.java\r\nnet\\minecraft\\world\\entity\\decoration\\GlowItemFrame.java\r\nnet\\minecraft\\world\\entity\\decoration\\HangingEntity.java\r\nnet\\minecraft\\world\\entity\\decoration\\ItemFrame.java\r\nnet\\minecraft\\world\\entity\\decoration\\LeashFenceKnotEntity.java\r\nnet\\minecraft\\world\\entity\\decoration\\package-info.java\r\nnet\\minecraft\\world\\entity\\decoration\\Painting.java\r\nnet\\minecraft\\world\\entity\\decoration\\PaintingVariant.java\r\nnet\\minecraft\\world\\entity\\decoration\\PaintingVariants.java\r\nnet\\minecraft\\world\\entity\\item\\FallingBlockEntity.java\r\nnet\\minecraft\\world\\entity\\item\\ItemEntity.java\r\nnet\\minecraft\\world\\entity\\item\\package-info.java\r\nnet\\minecraft\\world\\entity\\item\\PrimedTnt.java\r\nnet\\minecraft\\world\\entity\\monster\\breeze\r\nnet\\minecraft\\world\\entity\\monster\\hoglin\r\nnet\\minecraft\\world\\entity\\monster\\piglin\r\nnet\\minecraft\\world\\entity\\monster\\warden\r\nnet\\minecraft\\world\\entity\\monster\\AbstractIllager.java\r\nnet\\minecraft\\world\\entity\\monster\\AbstractSkeleton.java\r\nnet\\minecraft\\world\\entity\\monster\\Blaze.java\r\nnet\\minecraft\\world\\entity\\monster\\CaveSpider.java\r\nnet\\minecraft\\world\\entity\\monster\\Creeper.java\r\nnet\\minecraft\\world\\entity\\monster\\CrossbowAttackMob.java\r\nnet\\minecraft\\world\\entity\\monster\\Drowned.java\r\nnet\\minecraft\\world\\entity\\monster\\ElderGuardian.java\r\nnet\\minecraft\\world\\entity\\monster\\EnderMan.java\r\nnet\\minecraft\\world\\entity\\monster\\Endermite.java\r\nnet\\minecraft\\world\\entity\\monster\\Enemy.java\r\nnet\\minecraft\\world\\entity\\monster\\Evoker.java\r\nnet\\minecraft\\world\\entity\\monster\\Ghast.java\r\nnet\\minecraft\\world\\entity\\monster\\Giant.java\r\nnet\\minecraft\\world\\entity\\monster\\Guardian.java\r\nnet\\minecraft\\world\\entity\\monster\\Husk.java\r\nnet\\minecraft\\world\\entity\\monster\\Illusioner.java\r\nnet\\minecraft\\world\\entity\\monster\\MagmaCube.java\r\nnet\\minecraft\\world\\entity\\monster\\Monster.java\r\nnet\\minecraft\\world\\entity\\monster\\package-info.java\r\nnet\\minecraft\\world\\entity\\monster\\PatrollingMonster.java\r\nnet\\minecraft\\world\\entity\\monster\\Phantom.java\r\nnet\\minecraft\\world\\entity\\monster\\Pillager.java\r\nnet\\minecraft\\world\\entity\\monster\\RangedAttackMob.java\r\nnet\\minecraft\\world\\entity\\monster\\Ravager.java\r\nnet\\minecraft\\world\\entity\\monster\\Shulker.java\r\nnet\\minecraft\\world\\entity\\monster\\Silverfish.java\r\nnet\\minecraft\\world\\entity\\monster\\Skeleton.java\r\nnet\\minecraft\\world\\entity\\monster\\Slime.java\r\nnet\\minecraft\\world\\entity\\monster\\SpellcasterIllager.java\r\nnet\\minecraft\\world\\entity\\monster\\Spider.java\r\nnet\\minecraft\\world\\entity\\monster\\Stray.java\r\nnet\\minecraft\\world\\entity\\monster\\Strider.java\r\nnet\\minecraft\\world\\entity\\monster\\Vex.java\r\nnet\\minecraft\\world\\entity\\monster\\Vindicator.java\r\nnet\\minecraft\\world\\entity\\monster\\Witch.java\r\nnet\\minecraft\\world\\entity\\monster\\WitherSkeleton.java\r\nnet\\minecraft\\world\\entity\\monster\\Zoglin.java\r\nnet\\minecraft\\world\\entity\\monster\\Zombie.java\r\nnet\\minecraft\\world\\entity\\monster\\ZombieVillager.java\r\nnet\\minecraft\\world\\entity\\monster\\ZombifiedPiglin.java\r\nnet\\minecraft\\world\\entity\\monster\\breeze\\Breeze.java\r\nnet\\minecraft\\world\\entity\\monster\\breeze\\BreezeAi.java\r\nnet\\minecraft\\world\\entity\\monster\\breeze\\LongJump.java\r\nnet\\minecraft\\world\\entity\\monster\\breeze\\package-info.java\r\nnet\\minecraft\\world\\entity\\monster\\breeze\\Shoot.java\r\nnet\\minecraft\\world\\entity\\monster\\breeze\\ShootWhenStuck.java\r\nnet\\minecraft\\world\\entity\\monster\\breeze\\Slide.java\r\nnet\\minecraft\\world\\entity\\monster\\hoglin\\Hoglin.java\r\nnet\\minecraft\\world\\entity\\monster\\hoglin\\HoglinAi.java\r\nnet\\minecraft\\world\\entity\\monster\\hoglin\\HoglinBase.java\r\nnet\\minecraft\\world\\entity\\monster\\hoglin\\package-info.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\AbstractPiglin.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\package-info.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\Piglin.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\PiglinAi.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\PiglinArmPose.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\PiglinBrute.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\PiglinBruteAi.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\RememberIfHoglinWasKilled.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\StartAdmiringItemIfSeen.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\StartHuntingHoglin.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\StopAdmiringIfItemTooFarAway.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\StopAdmiringIfTiredOfTryingToReachItem.java\r\nnet\\minecraft\\world\\entity\\monster\\piglin\\StopHoldingItemIfNoLongerAdmiring.java\r\nnet\\minecraft\\world\\entity\\monster\\warden\\AngerLevel.java\r\nnet\\minecraft\\world\\entity\\monster\\warden\\AngerManagement.java\r\nnet\\minecraft\\world\\entity\\monster\\warden\\package-info.java\r\nnet\\minecraft\\world\\entity\\monster\\warden\\Warden.java\r\nnet\\minecraft\\world\\entity\\monster\\warden\\WardenAi.java\r\nnet\\minecraft\\world\\entity\\monster\\warden\\WardenSpawnTracker.java\r\nnet\\minecraft\\world\\entity\\npc\\AbstractVillager.java\r\nnet\\minecraft\\world\\entity\\npc\\CatSpawner.java\r\nnet\\minecraft\\world\\entity\\npc\\ClientSideMerchant.java\r\nnet\\minecraft\\world\\entity\\npc\\InventoryCarrier.java\r\nnet\\minecraft\\world\\entity\\npc\\Npc.java\r\nnet\\minecraft\\world\\entity\\npc\\package-info.java\r\nnet\\minecraft\\world\\entity\\npc\\Villager.java\r\nnet\\minecraft\\world\\entity\\npc\\VillagerData.java\r\nnet\\minecraft\\world\\entity\\npc\\VillagerDataHolder.java\r\nnet\\minecraft\\world\\entity\\npc\\VillagerProfession.java\r\nnet\\minecraft\\world\\entity\\npc\\VillagerTrades.java\r\nnet\\minecraft\\world\\entity\\npc\\VillagerType.java\r\nnet\\minecraft\\world\\entity\\npc\\WanderingTrader.java\r\nnet\\minecraft\\world\\entity\\npc\\WanderingTraderSpawner.java\r\nnet\\minecraft\\world\\entity\\player\\Abilities.java\r\nnet\\minecraft\\world\\entity\\player\\ChatVisiblity.java\r\nnet\\minecraft\\world\\entity\\player\\Inventory.java\r\nnet\\minecraft\\world\\entity\\player\\package-info.java\r\nnet\\minecraft\\world\\entity\\player\\Player.java\r\nnet\\minecraft\\world\\entity\\player\\PlayerModelPart.java\r\nnet\\minecraft\\world\\entity\\player\\ProfileKeyPair.java\r\nnet\\minecraft\\world\\entity\\player\\ProfilePublicKey.java\r\nnet\\minecraft\\world\\entity\\player\\StackedContents.java\r\nnet\\minecraft\\world\\entity\\projectile\\AbstractArrow.java\r\nnet\\minecraft\\world\\entity\\projectile\\AbstractHurtingProjectile.java\r\nnet\\minecraft\\world\\entity\\projectile\\Arrow.java\r\nnet\\minecraft\\world\\entity\\projectile\\DragonFireball.java\r\nnet\\minecraft\\world\\entity\\projectile\\EvokerFangs.java\r\nnet\\minecraft\\world\\entity\\projectile\\EyeOfEnder.java\r\nnet\\minecraft\\world\\entity\\projectile\\Fireball.java\r\nnet\\minecraft\\world\\entity\\projectile\\FireworkRocketEntity.java\r\nnet\\minecraft\\world\\entity\\projectile\\FishingHook.java\r\nnet\\minecraft\\world\\entity\\projectile\\ItemSupplier.java\r\nnet\\minecraft\\world\\entity\\projectile\\LargeFireball.java\r\nnet\\minecraft\\world\\entity\\projectile\\LlamaSpit.java\r\nnet\\minecraft\\world\\entity\\projectile\\package-info.java\r\nnet\\minecraft\\world\\entity\\projectile\\Projectile.java\r\nnet\\minecraft\\world\\entity\\projectile\\ProjectileUtil.java\r\nnet\\minecraft\\world\\entity\\projectile\\ShulkerBullet.java\r\nnet\\minecraft\\world\\entity\\projectile\\SmallFireball.java\r\nnet\\minecraft\\world\\entity\\projectile\\Snowball.java\r\nnet\\minecraft\\world\\entity\\projectile\\SpectralArrow.java\r\nnet\\minecraft\\world\\entity\\projectile\\ThrowableItemProjectile.java\r\nnet\\minecraft\\world\\entity\\projectile\\ThrowableProjectile.java\r\nnet\\minecraft\\world\\entity\\projectile\\ThrownEgg.java\r\nnet\\minecraft\\world\\entity\\projectile\\ThrownEnderpearl.java\r\nnet\\minecraft\\world\\entity\\projectile\\ThrownExperienceBottle.java\r\nnet\\minecraft\\world\\entity\\projectile\\ThrownPotion.java\r\nnet\\minecraft\\world\\entity\\projectile\\ThrownTrident.java\r\nnet\\minecraft\\world\\entity\\projectile\\WindCharge.java\r\nnet\\minecraft\\world\\entity\\projectile\\WitherSkull.java\r\nnet\\minecraft\\world\\entity\\raid\\package-info.java\r\nnet\\minecraft\\world\\entity\\raid\\Raid.java\r\nnet\\minecraft\\world\\entity\\raid\\Raider.java\r\nnet\\minecraft\\world\\entity\\raid\\Raids.java\r\nnet\\minecraft\\world\\entity\\schedule\\Activity.java\r\nnet\\minecraft\\world\\entity\\schedule\\Keyframe.java\r\nnet\\minecraft\\world\\entity\\schedule\\package-info.java\r\nnet\\minecraft\\world\\entity\\schedule\\Schedule.java\r\nnet\\minecraft\\world\\entity\\schedule\\ScheduleBuilder.java\r\nnet\\minecraft\\world\\entity\\schedule\\Timeline.java\r\nnet\\minecraft\\world\\entity\\vehicle\\AbstractMinecart.java\r\nnet\\minecraft\\world\\entity\\vehicle\\AbstractMinecartContainer.java\r\nnet\\minecraft\\world\\entity\\vehicle\\Boat.java\r\nnet\\minecraft\\world\\entity\\vehicle\\ChestBoat.java\r\nnet\\minecraft\\world\\entity\\vehicle\\ContainerEntity.java\r\nnet\\minecraft\\world\\entity\\vehicle\\DismountHelper.java\r\nnet\\minecraft\\world\\entity\\vehicle\\Minecart.java\r\nnet\\minecraft\\world\\entity\\vehicle\\MinecartChest.java\r\nnet\\minecraft\\world\\entity\\vehicle\\MinecartCommandBlock.java\r\nnet\\minecraft\\world\\entity\\vehicle\\MinecartFurnace.java\r\nnet\\minecraft\\world\\entity\\vehicle\\MinecartHopper.java\r\nnet\\minecraft\\world\\entity\\vehicle\\MinecartSpawner.java\r\nnet\\minecraft\\world\\entity\\vehicle\\MinecartTNT.java\r\nnet\\minecraft\\world\\entity\\vehicle\\package-info.java\r\nnet\\minecraft\\world\\entity\\vehicle\\VehicleEntity.java\r\nnet\\minecraft\\world\\flag\\FeatureElement.java\r\nnet\\minecraft\\world\\flag\\FeatureFlag.java\r\nnet\\minecraft\\world\\flag\\FeatureFlagRegistry.java\r\nnet\\minecraft\\world\\flag\\FeatureFlags.java\r\nnet\\minecraft\\world\\flag\\FeatureFlagSet.java\r\nnet\\minecraft\\world\\flag\\FeatureFlagUniverse.java\r\nnet\\minecraft\\world\\flag\\package-info.java\r\nnet\\minecraft\\world\\food\\FoodConstants.java\r\nnet\\minecraft\\world\\food\\FoodData.java\r\nnet\\minecraft\\world\\food\\FoodProperties.java\r\nnet\\minecraft\\world\\food\\Foods.java\r\nnet\\minecraft\\world\\food\\package-info.java\r\nnet\\minecraft\\world\\inventory\\tooltip\r\nnet\\minecraft\\world\\inventory\\AbstractContainerMenu.java\r\nnet\\minecraft\\world\\inventory\\AbstractFurnaceMenu.java\r\nnet\\minecraft\\world\\inventory\\AnvilMenu.java\r\nnet\\minecraft\\world\\inventory\\BeaconMenu.java\r\nnet\\minecraft\\world\\inventory\\BlastFurnaceMenu.java\r\nnet\\minecraft\\world\\inventory\\BrewingStandMenu.java\r\nnet\\minecraft\\world\\inventory\\CartographyTableMenu.java\r\nnet\\minecraft\\world\\inventory\\ChestMenu.java\r\nnet\\minecraft\\world\\inventory\\ClickAction.java\r\nnet\\minecraft\\world\\inventory\\ClickType.java\r\nnet\\minecraft\\world\\inventory\\ContainerData.java\r\nnet\\minecraft\\world\\inventory\\ContainerLevelAccess.java\r\nnet\\minecraft\\world\\inventory\\ContainerListener.java\r\nnet\\minecraft\\world\\inventory\\ContainerSynchronizer.java\r\nnet\\minecraft\\world\\inventory\\CrafterMenu.java\r\nnet\\minecraft\\world\\inventory\\CrafterSlot.java\r\nnet\\minecraft\\world\\inventory\\CraftingContainer.java\r\nnet\\minecraft\\world\\inventory\\CraftingMenu.java\r\nnet\\minecraft\\world\\inventory\\DataSlot.java\r\nnet\\minecraft\\world\\inventory\\DispenserMenu.java\r\nnet\\minecraft\\world\\inventory\\EnchantmentMenu.java\r\nnet\\minecraft\\world\\inventory\\FurnaceFuelSlot.java\r\nnet\\minecraft\\world\\inventory\\FurnaceMenu.java\r\nnet\\minecraft\\world\\inventory\\FurnaceResultSlot.java\r\nnet\\minecraft\\world\\inventory\\GrindstoneMenu.java\r\nnet\\minecraft\\world\\inventory\\HopperMenu.java\r\nnet\\minecraft\\world\\inventory\\HorseInventoryMenu.java\r\nnet\\minecraft\\world\\inventory\\InventoryMenu.java\r\nnet\\minecraft\\world\\inventory\\ItemCombinerMenu.java\r\nnet\\minecraft\\world\\inventory\\ItemCombinerMenuSlotDefinition.java\r\nnet\\minecraft\\world\\inventory\\LecternMenu.java\r\nnet\\minecraft\\world\\inventory\\LoomMenu.java\r\nnet\\minecraft\\world\\inventory\\MenuConstructor.java\r\nnet\\minecraft\\world\\inventory\\MenuType.java\r\nnet\\minecraft\\world\\inventory\\MerchantContainer.java\r\nnet\\minecraft\\world\\inventory\\MerchantMenu.java\r\nnet\\minecraft\\world\\inventory\\MerchantResultSlot.java\r\nnet\\minecraft\\world\\inventory\\NonInteractiveResultSlot.java\r\nnet\\minecraft\\world\\inventory\\package-info.java\r\nnet\\minecraft\\world\\inventory\\PlayerEnderChestContainer.java\r\nnet\\minecraft\\world\\inventory\\RecipeBookMenu.java\r\nnet\\minecraft\\world\\inventory\\RecipeBookType.java\r\nnet\\minecraft\\world\\inventory\\RecipeCraftingHolder.java\r\nnet\\minecraft\\world\\inventory\\ResultContainer.java\r\nnet\\minecraft\\world\\inventory\\ResultSlot.java\r\nnet\\minecraft\\world\\inventory\\ShulkerBoxMenu.java\r\nnet\\minecraft\\world\\inventory\\ShulkerBoxSlot.java\r\nnet\\minecraft\\world\\inventory\\SimpleContainerData.java\r\nnet\\minecraft\\world\\inventory\\Slot.java\r\nnet\\minecraft\\world\\inventory\\SmithingMenu.java\r\nnet\\minecraft\\world\\inventory\\SmokerMenu.java\r\nnet\\minecraft\\world\\inventory\\StackedContentsCompatible.java\r\nnet\\minecraft\\world\\inventory\\StonecutterMenu.java\r\nnet\\minecraft\\world\\inventory\\TransientCraftingContainer.java\r\nnet\\minecraft\\world\\inventory\\tooltip\\BundleTooltip.java\r\nnet\\minecraft\\world\\inventory\\tooltip\\package-info.java\r\nnet\\minecraft\\world\\inventory\\tooltip\\TooltipComponent.java\r\nnet\\minecraft\\world\\item\\alchemy\r\nnet\\minecraft\\world\\item\\armortrim\r\nnet\\minecraft\\world\\item\\context\r\nnet\\minecraft\\world\\item\\crafting\r\nnet\\minecraft\\world\\item\\enchantment\r\nnet\\minecraft\\world\\item\\trading\r\nnet\\minecraft\\world\\item\\AdventureModeCheck.java\r\nnet\\minecraft\\world\\item\\AirItem.java\r\nnet\\minecraft\\world\\item\\ArmorItem.java\r\nnet\\minecraft\\world\\item\\ArmorMaterial.java\r\nnet\\minecraft\\world\\item\\ArmorMaterials.java\r\nnet\\minecraft\\world\\item\\ArmorStandItem.java\r\nnet\\minecraft\\world\\item\\ArrowItem.java\r\nnet\\minecraft\\world\\item\\AxeItem.java\r\nnet\\minecraft\\world\\item\\BannerItem.java\r\nnet\\minecraft\\world\\item\\BannerPatternItem.java\r\nnet\\minecraft\\world\\item\\BedItem.java\r\nnet\\minecraft\\world\\item\\BlockItem.java\r\nnet\\minecraft\\world\\item\\BoatItem.java\r\nnet\\minecraft\\world\\item\\BoneMealItem.java\r\nnet\\minecraft\\world\\item\\BookItem.java\r\nnet\\minecraft\\world\\item\\BottleItem.java\r\nnet\\minecraft\\world\\item\\BowItem.java\r\nnet\\minecraft\\world\\item\\BowlFoodItem.java\r\nnet\\minecraft\\world\\item\\BrushItem.java\r\nnet\\minecraft\\world\\item\\BucketItem.java\r\nnet\\minecraft\\world\\item\\BundleItem.java\r\nnet\\minecraft\\world\\item\\ChorusFruitItem.java\r\nnet\\minecraft\\world\\item\\CompassItem.java\r\nnet\\minecraft\\world\\item\\ComplexItem.java\r\nnet\\minecraft\\world\\item\\CreativeModeTab.java\r\nnet\\minecraft\\world\\item\\CreativeModeTabs.java\r\nnet\\minecraft\\world\\item\\CrossbowItem.java\r\nnet\\minecraft\\world\\item\\DebugStickItem.java\r\nnet\\minecraft\\world\\item\\DiggerItem.java\r\nnet\\minecraft\\world\\item\\DiscFragmentItem.java\r\nnet\\minecraft\\world\\item\\DispensibleContainerItem.java\r\nnet\\minecraft\\world\\item\\DoubleHighBlockItem.java\r\nnet\\minecraft\\world\\item\\DyeableArmorItem.java\r\nnet\\minecraft\\world\\item\\DyeableHorseArmorItem.java\r\nnet\\minecraft\\world\\item\\DyeableLeatherItem.java\r\nnet\\minecraft\\world\\item\\DyeColor.java\r\nnet\\minecraft\\world\\item\\DyeItem.java\r\nnet\\minecraft\\world\\item\\EggItem.java\r\nnet\\minecraft\\world\\item\\ElytraItem.java\r\nnet\\minecraft\\world\\item\\EmptyMapItem.java\r\nnet\\minecraft\\world\\item\\EnchantedBookItem.java\r\nnet\\minecraft\\world\\item\\EnchantedGoldenAppleItem.java\r\nnet\\minecraft\\world\\item\\EndCrystalItem.java\r\nnet\\minecraft\\world\\item\\EnderEyeItem.java\r\nnet\\minecraft\\world\\item\\EnderpearlItem.java\r\nnet\\minecraft\\world\\item\\Equipable.java\r\nnet\\minecraft\\world\\item\\ExperienceBottleItem.java\r\nnet\\minecraft\\world\\item\\FireChargeItem.java\r\nnet\\minecraft\\world\\item\\FireworkRocketItem.java\r\nnet\\minecraft\\world\\item\\FireworkStarItem.java\r\nnet\\minecraft\\world\\item\\FishingRodItem.java\r\nnet\\minecraft\\world\\item\\FlintAndSteelItem.java\r\nnet\\minecraft\\world\\item\\FoodOnAStickItem.java\r\nnet\\minecraft\\world\\item\\GameMasterBlockItem.java\r\nnet\\minecraft\\world\\item\\GlowInkSacItem.java\r\nnet\\minecraft\\world\\item\\HangingEntityItem.java\r\nnet\\minecraft\\world\\item\\HangingSignItem.java\r\nnet\\minecraft\\world\\item\\HoeItem.java\r\nnet\\minecraft\\world\\item\\HoneyBottleItem.java\r\nnet\\minecraft\\world\\item\\HoneycombItem.java\r\nnet\\minecraft\\world\\item\\HorseArmorItem.java\r\nnet\\minecraft\\world\\item\\InkSacItem.java\r\nnet\\minecraft\\world\\item\\Instrument.java\r\nnet\\minecraft\\world\\item\\InstrumentItem.java\r\nnet\\minecraft\\world\\item\\Instruments.java\r\nnet\\minecraft\\world\\item\\Item.java\r\nnet\\minecraft\\world\\item\\ItemCooldowns.java\r\nnet\\minecraft\\world\\item\\ItemDisplayContext.java\r\nnet\\minecraft\\world\\item\\ItemFrameItem.java\r\nnet\\minecraft\\world\\item\\ItemNameBlockItem.java\r\nnet\\minecraft\\world\\item\\Items.java\r\nnet\\minecraft\\world\\item\\ItemStack.java\r\nnet\\minecraft\\world\\item\\ItemStackLinkedSet.java\r\nnet\\minecraft\\world\\item\\ItemUtils.java\r\nnet\\minecraft\\world\\item\\KnowledgeBookItem.java\r\nnet\\minecraft\\world\\item\\LeadItem.java\r\nnet\\minecraft\\world\\item\\LingeringPotionItem.java\r\nnet\\minecraft\\world\\item\\MapItem.java\r\nnet\\minecraft\\world\\item\\MilkBucketItem.java\r\nnet\\minecraft\\world\\item\\MinecartItem.java\r\nnet\\minecraft\\world\\item\\MobBucketItem.java\r\nnet\\minecraft\\world\\item\\NameTagItem.java\r\nnet\\minecraft\\world\\item\\package-info.java\r\nnet\\minecraft\\world\\item\\PickaxeItem.java\r\nnet\\minecraft\\world\\item\\PlaceOnWaterBlockItem.java\r\nnet\\minecraft\\world\\item\\PlayerHeadItem.java\r\nnet\\minecraft\\world\\item\\PotionItem.java\r\nnet\\minecraft\\world\\item\\ProjectileWeaponItem.java\r\nnet\\minecraft\\world\\item\\Rarity.java\r\nnet\\minecraft\\world\\item\\RecordItem.java\r\nnet\\minecraft\\world\\item\\SaddleItem.java\r\nnet\\minecraft\\world\\item\\ScaffoldingBlockItem.java\r\nnet\\minecraft\\world\\item\\ServerItemCooldowns.java\r\nnet\\minecraft\\world\\item\\ShearsItem.java\r\nnet\\minecraft\\world\\item\\ShieldItem.java\r\nnet\\minecraft\\world\\item\\ShovelItem.java\r\nnet\\minecraft\\world\\item\\SignApplicator.java\r\nnet\\minecraft\\world\\item\\SignItem.java\r\nnet\\minecraft\\world\\item\\SimpleFoiledItem.java\r\nnet\\minecraft\\world\\item\\SmithingTemplateItem.java\r\nnet\\minecraft\\world\\item\\SnowballItem.java\r\nnet\\minecraft\\world\\item\\SolidBucketItem.java\r\nnet\\minecraft\\world\\item\\SpawnEggItem.java\r\nnet\\minecraft\\world\\item\\SpectralArrowItem.java\r\nnet\\minecraft\\world\\item\\SplashPotionItem.java\r\nnet\\minecraft\\world\\item\\SpyglassItem.java\r\nnet\\minecraft\\world\\item\\StandingAndWallBlockItem.java\r\nnet\\minecraft\\world\\item\\SuspiciousStewItem.java\r\nnet\\minecraft\\world\\item\\SwordItem.java\r\nnet\\minecraft\\world\\item\\ThrowablePotionItem.java\r\nnet\\minecraft\\world\\item\\Tier.java\r\nnet\\minecraft\\world\\item\\TieredItem.java\r\nnet\\minecraft\\world\\item\\Tiers.java\r\nnet\\minecraft\\world\\item\\TippedArrowItem.java\r\nnet\\minecraft\\world\\item\\TooltipFlag.java\r\nnet\\minecraft\\world\\item\\TridentItem.java\r\nnet\\minecraft\\world\\item\\UseAnim.java\r\nnet\\minecraft\\world\\item\\Vanishable.java\r\nnet\\minecraft\\world\\item\\WritableBookItem.java\r\nnet\\minecraft\\world\\item\\WrittenBookItem.java\r\nnet\\minecraft\\world\\item\\alchemy\\package-info.java\r\nnet\\minecraft\\world\\item\\alchemy\\Potion.java\r\nnet\\minecraft\\world\\item\\alchemy\\PotionBrewing.java\r\nnet\\minecraft\\world\\item\\alchemy\\Potions.java\r\nnet\\minecraft\\world\\item\\alchemy\\PotionUtils.java\r\nnet\\minecraft\\world\\item\\armortrim\\ArmorTrim.java\r\nnet\\minecraft\\world\\item\\armortrim\\package-info.java\r\nnet\\minecraft\\world\\item\\armortrim\\TrimMaterial.java\r\nnet\\minecraft\\world\\item\\armortrim\\TrimMaterials.java\r\nnet\\minecraft\\world\\item\\armortrim\\TrimPattern.java\r\nnet\\minecraft\\world\\item\\armortrim\\TrimPatterns.java\r\nnet\\minecraft\\world\\item\\context\\BlockPlaceContext.java\r\nnet\\minecraft\\world\\item\\context\\DirectionalPlaceContext.java\r\nnet\\minecraft\\world\\item\\context\\package-info.java\r\nnet\\minecraft\\world\\item\\context\\UseOnContext.java\r\nnet\\minecraft\\world\\item\\crafting\\AbstractCookingRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\ArmorDyeRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\BannerDuplicateRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\BlastingRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\BookCloningRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\CampfireCookingRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\CookingBookCategory.java\r\nnet\\minecraft\\world\\item\\crafting\\CraftingBookCategory.java\r\nnet\\minecraft\\world\\item\\crafting\\CraftingRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\CustomRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\DecoratedPotRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\FireworkRocketRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\FireworkStarFadeRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\FireworkStarRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\Ingredient.java\r\nnet\\minecraft\\world\\item\\crafting\\MapCloningRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\MapExtendingRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\package-info.java\r\nnet\\minecraft\\world\\item\\crafting\\Recipe.java\r\nnet\\minecraft\\world\\item\\crafting\\RecipeCache.java\r\nnet\\minecraft\\world\\item\\crafting\\RecipeHolder.java\r\nnet\\minecraft\\world\\item\\crafting\\RecipeManager.java\r\nnet\\minecraft\\world\\item\\crafting\\RecipeSerializer.java\r\nnet\\minecraft\\world\\item\\crafting\\RecipeType.java\r\nnet\\minecraft\\world\\item\\crafting\\RepairItemRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\ShapedRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\ShapedRecipePattern.java\r\nnet\\minecraft\\world\\item\\crafting\\ShapelessRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\ShieldDecorationRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\ShulkerBoxColoring.java\r\nnet\\minecraft\\world\\item\\crafting\\SimpleCookingSerializer.java\r\nnet\\minecraft\\world\\item\\crafting\\SimpleCraftingRecipeSerializer.java\r\nnet\\minecraft\\world\\item\\crafting\\SingleItemRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\SmeltingRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\SmithingRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\SmithingTransformRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\SmithingTrimRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\SmokingRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\StonecutterRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\SuspiciousStewRecipe.java\r\nnet\\minecraft\\world\\item\\crafting\\TippedArrowRecipe.java\r\nnet\\minecraft\\world\\item\\enchantment\\ArrowDamageEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\ArrowFireEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\ArrowInfiniteEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\ArrowKnockbackEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\ArrowPiercingEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\BindingCurseEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\DamageEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\DigDurabilityEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\DiggingEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\Enchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\EnchantmentCategory.java\r\nnet\\minecraft\\world\\item\\enchantment\\EnchantmentHelper.java\r\nnet\\minecraft\\world\\item\\enchantment\\EnchantmentInstance.java\r\nnet\\minecraft\\world\\item\\enchantment\\Enchantments.java\r\nnet\\minecraft\\world\\item\\enchantment\\FireAspectEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\FishingSpeedEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\FrostWalkerEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\KnockbackEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\LootBonusEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\MendingEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\MultiShotEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\OxygenEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\package-info.java\r\nnet\\minecraft\\world\\item\\enchantment\\ProtectionEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\QuickChargeEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\SoulSpeedEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\SweepingEdgeEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\SwiftSneakEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\ThornsEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\TridentChannelingEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\TridentImpalerEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\TridentLoyaltyEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\TridentRiptideEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\UntouchingEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\VanishingCurseEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\WaterWalkerEnchantment.java\r\nnet\\minecraft\\world\\item\\enchantment\\WaterWorkerEnchantment.java\r\nnet\\minecraft\\world\\item\\trading\\Merchant.java\r\nnet\\minecraft\\world\\item\\trading\\MerchantOffer.java\r\nnet\\minecraft\\world\\item\\trading\\MerchantOffers.java\r\nnet\\minecraft\\world\\item\\trading\\package-info.java\r\nnet\\minecraft\\world\\level\\biome\r\nnet\\minecraft\\world\\level\\block\r\nnet\\minecraft\\world\\level\\border\r\nnet\\minecraft\\world\\level\\chunk\r\nnet\\minecraft\\world\\level\\dimension\r\nnet\\minecraft\\world\\level\\entity\r\nnet\\minecraft\\world\\level\\gameevent\r\nnet\\minecraft\\world\\level\\levelgen\r\nnet\\minecraft\\world\\level\\lighting\r\nnet\\minecraft\\world\\level\\material\r\nnet\\minecraft\\world\\level\\pathfinder\r\nnet\\minecraft\\world\\level\\portal\r\nnet\\minecraft\\world\\level\\redstone\r\nnet\\minecraft\\world\\level\\saveddata\r\nnet\\minecraft\\world\\level\\storage\r\nnet\\minecraft\\world\\level\\timers\r\nnet\\minecraft\\world\\level\\validation\r\nnet\\minecraft\\world\\level\\BaseCommandBlock.java\r\nnet\\minecraft\\world\\level\\BaseSpawner.java\r\nnet\\minecraft\\world\\level\\BlockAndTintGetter.java\r\nnet\\minecraft\\world\\level\\BlockCollisions.java\r\nnet\\minecraft\\world\\level\\BlockEventData.java\r\nnet\\minecraft\\world\\level\\BlockGetter.java\r\nnet\\minecraft\\world\\level\\ChunkPos.java\r\nnet\\minecraft\\world\\level\\ClipBlockStateContext.java\r\nnet\\minecraft\\world\\level\\ClipContext.java\r\nnet\\minecraft\\world\\level\\CollisionGetter.java\r\nnet\\minecraft\\world\\level\\ColorResolver.java\r\nnet\\minecraft\\world\\level\\CommonLevelAccessor.java\r\nnet\\minecraft\\world\\level\\CustomSpawner.java\r\nnet\\minecraft\\world\\level\\DataPackConfig.java\r\nnet\\minecraft\\world\\level\\EmptyBlockGetter.java\r\nnet\\minecraft\\world\\level\\EntityBasedExplosionDamageCalculator.java\r\nnet\\minecraft\\world\\level\\EntityGetter.java\r\nnet\\minecraft\\world\\level\\Explosion.java\r\nnet\\minecraft\\world\\level\\ExplosionDamageCalculator.java\r\nnet\\minecraft\\world\\level\\FoliageColor.java\r\nnet\\minecraft\\world\\level\\ForcedChunksSavedData.java\r\nnet\\minecraft\\world\\level\\GameRules.java\r\nnet\\minecraft\\world\\level\\GameType.java\r\nnet\\minecraft\\world\\level\\GrassColor.java\r\nnet\\minecraft\\world\\level\\ItemLike.java\r\nnet\\minecraft\\world\\level\\Level.java\r\nnet\\minecraft\\world\\level\\LevelAccessor.java\r\nnet\\minecraft\\world\\level\\LevelHeightAccessor.java\r\nnet\\minecraft\\world\\level\\LevelReader.java\r\nnet\\minecraft\\world\\level\\LevelSettings.java\r\nnet\\minecraft\\world\\level\\LevelSimulatedReader.java\r\nnet\\minecraft\\world\\level\\LevelSimulatedRW.java\r\nnet\\minecraft\\world\\level\\LevelTimeAccess.java\r\nnet\\minecraft\\world\\level\\LevelWriter.java\r\nnet\\minecraft\\world\\level\\LightLayer.java\r\nnet\\minecraft\\world\\level\\LocalMobCapCalculator.java\r\nnet\\minecraft\\world\\level\\NaturalSpawner.java\r\nnet\\minecraft\\world\\level\\NoiseColumn.java\r\nnet\\minecraft\\world\\level\\package-info.java\r\nnet\\minecraft\\world\\level\\PathNavigationRegion.java\r\nnet\\minecraft\\world\\level\\PotentialCalculator.java\r\nnet\\minecraft\\world\\level\\ServerLevelAccessor.java\r\nnet\\minecraft\\world\\level\\SignalGetter.java\r\nnet\\minecraft\\world\\level\\SpawnData.java\r\nnet\\minecraft\\world\\level\\Spawner.java\r\nnet\\minecraft\\world\\level\\StructureManager.java\r\nnet\\minecraft\\world\\level\\WorldDataConfiguration.java\r\nnet\\minecraft\\world\\level\\WorldGenLevel.java\r\nnet\\minecraft\\world\\level\\biome\\AmbientAdditionsSettings.java\r\nnet\\minecraft\\world\\level\\biome\\AmbientMoodSettings.java\r\nnet\\minecraft\\world\\level\\biome\\AmbientParticleSettings.java\r\nnet\\minecraft\\world\\level\\biome\\Biome.java\r\nnet\\minecraft\\world\\level\\biome\\BiomeGenerationSettings.java\r\nnet\\minecraft\\world\\level\\biome\\BiomeManager.java\r\nnet\\minecraft\\world\\level\\biome\\BiomeResolver.java\r\nnet\\minecraft\\world\\level\\biome\\Biomes.java\r\nnet\\minecraft\\world\\level\\biome\\BiomeSource.java\r\nnet\\minecraft\\world\\level\\biome\\BiomeSources.java\r\nnet\\minecraft\\world\\level\\biome\\BiomeSpecialEffects.java\r\nnet\\minecraft\\world\\level\\biome\\CheckerboardColumnBiomeSource.java\r\nnet\\minecraft\\world\\level\\biome\\Climate.java\r\nnet\\minecraft\\world\\level\\biome\\FeatureSorter.java\r\nnet\\minecraft\\world\\level\\biome\\FixedBiomeSource.java\r\nnet\\minecraft\\world\\level\\biome\\MobSpawnSettings.java\r\nnet\\minecraft\\world\\level\\biome\\MultiNoiseBiomeSource.java\r\nnet\\minecraft\\world\\level\\biome\\MultiNoiseBiomeSourceParameterList.java\r\nnet\\minecraft\\world\\level\\biome\\MultiNoiseBiomeSourceParameterLists.java\r\nnet\\minecraft\\world\\level\\biome\\OverworldBiomeBuilder.java\r\nnet\\minecraft\\world\\level\\biome\\package-info.java\r\nnet\\minecraft\\world\\level\\biome\\TheEndBiomeSource.java\r\nnet\\minecraft\\world\\level\\block\\entity\r\nnet\\minecraft\\world\\level\\block\\grower\r\nnet\\minecraft\\world\\level\\block\\piston\r\nnet\\minecraft\\world\\level\\block\\state\r\nnet\\minecraft\\world\\level\\block\\AbstractBannerBlock.java\r\nnet\\minecraft\\world\\level\\block\\AbstractCandleBlock.java\r\nnet\\minecraft\\world\\level\\block\\AbstractCauldronBlock.java\r\nnet\\minecraft\\world\\level\\block\\AbstractChestBlock.java\r\nnet\\minecraft\\world\\level\\block\\AbstractFurnaceBlock.java\r\nnet\\minecraft\\world\\level\\block\\AbstractSkullBlock.java\r\nnet\\minecraft\\world\\level\\block\\AirBlock.java\r\nnet\\minecraft\\world\\level\\block\\AmethystBlock.java\r\nnet\\minecraft\\world\\level\\block\\AmethystClusterBlock.java\r\nnet\\minecraft\\world\\level\\block\\AnvilBlock.java\r\nnet\\minecraft\\world\\level\\block\\AttachedStemBlock.java\r\nnet\\minecraft\\world\\level\\block\\AzaleaBlock.java\r\nnet\\minecraft\\world\\level\\block\\BambooSaplingBlock.java\r\nnet\\minecraft\\world\\level\\block\\BambooStalkBlock.java\r\nnet\\minecraft\\world\\level\\block\\BannerBlock.java\r\nnet\\minecraft\\world\\level\\block\\BarrelBlock.java\r\nnet\\minecraft\\world\\level\\block\\BarrierBlock.java\r\nnet\\minecraft\\world\\level\\block\\BaseCoralFanBlock.java\r\nnet\\minecraft\\world\\level\\block\\BaseCoralPlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\BaseCoralPlantTypeBlock.java\r\nnet\\minecraft\\world\\level\\block\\BaseCoralWallFanBlock.java\r\nnet\\minecraft\\world\\level\\block\\BaseEntityBlock.java\r\nnet\\minecraft\\world\\level\\block\\BaseFireBlock.java\r\nnet\\minecraft\\world\\level\\block\\BasePressurePlateBlock.java\r\nnet\\minecraft\\world\\level\\block\\BaseRailBlock.java\r\nnet\\minecraft\\world\\level\\block\\BaseTorchBlock.java\r\nnet\\minecraft\\world\\level\\block\\BeaconBeamBlock.java\r\nnet\\minecraft\\world\\level\\block\\BeaconBlock.java\r\nnet\\minecraft\\world\\level\\block\\BedBlock.java\r\nnet\\minecraft\\world\\level\\block\\BeehiveBlock.java\r\nnet\\minecraft\\world\\level\\block\\BeetrootBlock.java\r\nnet\\minecraft\\world\\level\\block\\BellBlock.java\r\nnet\\minecraft\\world\\level\\block\\BigDripleafBlock.java\r\nnet\\minecraft\\world\\level\\block\\BigDripleafStemBlock.java\r\nnet\\minecraft\\world\\level\\block\\BlastFurnaceBlock.java\r\nnet\\minecraft\\world\\level\\block\\Block.java\r\nnet\\minecraft\\world\\level\\block\\Blocks.java\r\nnet\\minecraft\\world\\level\\block\\BlockTypes.java\r\nnet\\minecraft\\world\\level\\block\\BonemealableBlock.java\r\nnet\\minecraft\\world\\level\\block\\BrewingStandBlock.java\r\nnet\\minecraft\\world\\level\\block\\BrushableBlock.java\r\nnet\\minecraft\\world\\level\\block\\BubbleColumnBlock.java\r\nnet\\minecraft\\world\\level\\block\\BucketPickup.java\r\nnet\\minecraft\\world\\level\\block\\BuddingAmethystBlock.java\r\nnet\\minecraft\\world\\level\\block\\BushBlock.java\r\nnet\\minecraft\\world\\level\\block\\ButtonBlock.java\r\nnet\\minecraft\\world\\level\\block\\CactusBlock.java\r\nnet\\minecraft\\world\\level\\block\\CakeBlock.java\r\nnet\\minecraft\\world\\level\\block\\CalibratedSculkSensorBlock.java\r\nnet\\minecraft\\world\\level\\block\\CampfireBlock.java\r\nnet\\minecraft\\world\\level\\block\\CandleBlock.java\r\nnet\\minecraft\\world\\level\\block\\CandleCakeBlock.java\r\nnet\\minecraft\\world\\level\\block\\CarpetBlock.java\r\nnet\\minecraft\\world\\level\\block\\CarrotBlock.java\r\nnet\\minecraft\\world\\level\\block\\CartographyTableBlock.java\r\nnet\\minecraft\\world\\level\\block\\CarvedPumpkinBlock.java\r\nnet\\minecraft\\world\\level\\block\\CauldronBlock.java\r\nnet\\minecraft\\world\\level\\block\\CaveVines.java\r\nnet\\minecraft\\world\\level\\block\\CaveVinesBlock.java\r\nnet\\minecraft\\world\\level\\block\\CaveVinesPlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\CeilingHangingSignBlock.java\r\nnet\\minecraft\\world\\level\\block\\ChainBlock.java\r\nnet\\minecraft\\world\\level\\block\\ChangeOverTimeBlock.java\r\nnet\\minecraft\\world\\level\\block\\CherryLeavesBlock.java\r\nnet\\minecraft\\world\\level\\block\\ChestBlock.java\r\nnet\\minecraft\\world\\level\\block\\ChiseledBookShelfBlock.java\r\nnet\\minecraft\\world\\level\\block\\ChorusFlowerBlock.java\r\nnet\\minecraft\\world\\level\\block\\ChorusPlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\CocoaBlock.java\r\nnet\\minecraft\\world\\level\\block\\ColoredFallingBlock.java\r\nnet\\minecraft\\world\\level\\block\\CommandBlock.java\r\nnet\\minecraft\\world\\level\\block\\ComparatorBlock.java\r\nnet\\minecraft\\world\\level\\block\\ComposterBlock.java\r\nnet\\minecraft\\world\\level\\block\\ConcretePowderBlock.java\r\nnet\\minecraft\\world\\level\\block\\ConduitBlock.java\r\nnet\\minecraft\\world\\level\\block\\CopperBulbBlock.java\r\nnet\\minecraft\\world\\level\\block\\CoralBlock.java\r\nnet\\minecraft\\world\\level\\block\\CoralFanBlock.java\r\nnet\\minecraft\\world\\level\\block\\CoralPlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\CoralWallFanBlock.java\r\nnet\\minecraft\\world\\level\\block\\CrafterBlock.java\r\nnet\\minecraft\\world\\level\\block\\CraftingTableBlock.java\r\nnet\\minecraft\\world\\level\\block\\CropBlock.java\r\nnet\\minecraft\\world\\level\\block\\CrossCollisionBlock.java\r\nnet\\minecraft\\world\\level\\block\\CryingObsidianBlock.java\r\nnet\\minecraft\\world\\level\\block\\DaylightDetectorBlock.java\r\nnet\\minecraft\\world\\level\\block\\DeadBushBlock.java\r\nnet\\minecraft\\world\\level\\block\\DecoratedPotBlock.java\r\nnet\\minecraft\\world\\level\\block\\DetectorRailBlock.java\r\nnet\\minecraft\\world\\level\\block\\DiodeBlock.java\r\nnet\\minecraft\\world\\level\\block\\DirectionalBlock.java\r\nnet\\minecraft\\world\\level\\block\\DirtPathBlock.java\r\nnet\\minecraft\\world\\level\\block\\DispenserBlock.java\r\nnet\\minecraft\\world\\level\\block\\DoorBlock.java\r\nnet\\minecraft\\world\\level\\block\\DoubleBlockCombiner.java\r\nnet\\minecraft\\world\\level\\block\\DoublePlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\DragonEggBlock.java\r\nnet\\minecraft\\world\\level\\block\\DropExperienceBlock.java\r\nnet\\minecraft\\world\\level\\block\\DropperBlock.java\r\nnet\\minecraft\\world\\level\\block\\EnchantmentTableBlock.java\r\nnet\\minecraft\\world\\level\\block\\EnderChestBlock.java\r\nnet\\minecraft\\world\\level\\block\\EndGatewayBlock.java\r\nnet\\minecraft\\world\\level\\block\\EndPortalBlock.java\r\nnet\\minecraft\\world\\level\\block\\EndPortalFrameBlock.java\r\nnet\\minecraft\\world\\level\\block\\EndRodBlock.java\r\nnet\\minecraft\\world\\level\\block\\EntityBlock.java\r\nnet\\minecraft\\world\\level\\block\\EquipableCarvedPumpkinBlock.java\r\nnet\\minecraft\\world\\level\\block\\FaceAttachedHorizontalDirectionalBlock.java\r\nnet\\minecraft\\world\\level\\block\\Fallable.java\r\nnet\\minecraft\\world\\level\\block\\FallingBlock.java\r\nnet\\minecraft\\world\\level\\block\\FarmBlock.java\r\nnet\\minecraft\\world\\level\\block\\FenceBlock.java\r\nnet\\minecraft\\world\\level\\block\\FenceGateBlock.java\r\nnet\\minecraft\\world\\level\\block\\FireBlock.java\r\nnet\\minecraft\\world\\level\\block\\FletchingTableBlock.java\r\nnet\\minecraft\\world\\level\\block\\FlowerBlock.java\r\nnet\\minecraft\\world\\level\\block\\FlowerPotBlock.java\r\nnet\\minecraft\\world\\level\\block\\FrogspawnBlock.java\r\nnet\\minecraft\\world\\level\\block\\FrostedIceBlock.java\r\nnet\\minecraft\\world\\level\\block\\FungusBlock.java\r\nnet\\minecraft\\world\\level\\block\\FurnaceBlock.java\r\nnet\\minecraft\\world\\level\\block\\GameMasterBlock.java\r\nnet\\minecraft\\world\\level\\block\\GlazedTerracottaBlock.java\r\nnet\\minecraft\\world\\level\\block\\GlowLichenBlock.java\r\nnet\\minecraft\\world\\level\\block\\GrassBlock.java\r\nnet\\minecraft\\world\\level\\block\\GrindstoneBlock.java\r\nnet\\minecraft\\world\\level\\block\\GrowingPlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\GrowingPlantBodyBlock.java\r\nnet\\minecraft\\world\\level\\block\\GrowingPlantHeadBlock.java\r\nnet\\minecraft\\world\\level\\block\\HalfTransparentBlock.java\r\nnet\\minecraft\\world\\level\\block\\HangingRootsBlock.java\r\nnet\\minecraft\\world\\level\\block\\HayBlock.java\r\nnet\\minecraft\\world\\level\\block\\HoneyBlock.java\r\nnet\\minecraft\\world\\level\\block\\HopperBlock.java\r\nnet\\minecraft\\world\\level\\block\\HorizontalDirectionalBlock.java\r\nnet\\minecraft\\world\\level\\block\\HugeMushroomBlock.java\r\nnet\\minecraft\\world\\level\\block\\IceBlock.java\r\nnet\\minecraft\\world\\level\\block\\InfestedBlock.java\r\nnet\\minecraft\\world\\level\\block\\InfestedRotatedPillarBlock.java\r\nnet\\minecraft\\world\\level\\block\\IronBarsBlock.java\r\nnet\\minecraft\\world\\level\\block\\JigsawBlock.java\r\nnet\\minecraft\\world\\level\\block\\JukeboxBlock.java\r\nnet\\minecraft\\world\\level\\block\\KelpBlock.java\r\nnet\\minecraft\\world\\level\\block\\KelpPlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\LadderBlock.java\r\nnet\\minecraft\\world\\level\\block\\LanternBlock.java\r\nnet\\minecraft\\world\\level\\block\\LavaCauldronBlock.java\r\nnet\\minecraft\\world\\level\\block\\LayeredCauldronBlock.java\r\nnet\\minecraft\\world\\level\\block\\LeavesBlock.java\r\nnet\\minecraft\\world\\level\\block\\LecternBlock.java\r\nnet\\minecraft\\world\\level\\block\\LevelEvent.java\r\nnet\\minecraft\\world\\level\\block\\LeverBlock.java\r\nnet\\minecraft\\world\\level\\block\\LightBlock.java\r\nnet\\minecraft\\world\\level\\block\\LightningRodBlock.java\r\nnet\\minecraft\\world\\level\\block\\LiquidBlock.java\r\nnet\\minecraft\\world\\level\\block\\LiquidBlockContainer.java\r\nnet\\minecraft\\world\\level\\block\\LoomBlock.java\r\nnet\\minecraft\\world\\level\\block\\MagmaBlock.java\r\nnet\\minecraft\\world\\level\\block\\MangroveLeavesBlock.java\r\nnet\\minecraft\\world\\level\\block\\MangrovePropaguleBlock.java\r\nnet\\minecraft\\world\\level\\block\\MangroveRootsBlock.java\r\nnet\\minecraft\\world\\level\\block\\Mirror.java\r\nnet\\minecraft\\world\\level\\block\\MossBlock.java\r\nnet\\minecraft\\world\\level\\block\\MudBlock.java\r\nnet\\minecraft\\world\\level\\block\\MultifaceBlock.java\r\nnet\\minecraft\\world\\level\\block\\MultifaceSpreader.java\r\nnet\\minecraft\\world\\level\\block\\MushroomBlock.java\r\nnet\\minecraft\\world\\level\\block\\MyceliumBlock.java\r\nnet\\minecraft\\world\\level\\block\\NetherPortalBlock.java\r\nnet\\minecraft\\world\\level\\block\\NetherrackBlock.java\r\nnet\\minecraft\\world\\level\\block\\NetherSproutsBlock.java\r\nnet\\minecraft\\world\\level\\block\\NetherVines.java\r\nnet\\minecraft\\world\\level\\block\\NetherWartBlock.java\r\nnet\\minecraft\\world\\level\\block\\NoteBlock.java\r\nnet\\minecraft\\world\\level\\block\\NyliumBlock.java\r\nnet\\minecraft\\world\\level\\block\\ObserverBlock.java\r\nnet\\minecraft\\world\\level\\block\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\PiglinWallSkullBlock.java\r\nnet\\minecraft\\world\\level\\block\\PinkPetalsBlock.java\r\nnet\\minecraft\\world\\level\\block\\PipeBlock.java\r\nnet\\minecraft\\world\\level\\block\\PitcherCropBlock.java\r\nnet\\minecraft\\world\\level\\block\\PlayerHeadBlock.java\r\nnet\\minecraft\\world\\level\\block\\PlayerWallHeadBlock.java\r\nnet\\minecraft\\world\\level\\block\\PointedDripstoneBlock.java\r\nnet\\minecraft\\world\\level\\block\\PotatoBlock.java\r\nnet\\minecraft\\world\\level\\block\\PowderSnowBlock.java\r\nnet\\minecraft\\world\\level\\block\\PoweredBlock.java\r\nnet\\minecraft\\world\\level\\block\\PoweredRailBlock.java\r\nnet\\minecraft\\world\\level\\block\\PressurePlateBlock.java\r\nnet\\minecraft\\world\\level\\block\\PumpkinBlock.java\r\nnet\\minecraft\\world\\level\\block\\RailBlock.java\r\nnet\\minecraft\\world\\level\\block\\RailState.java\r\nnet\\minecraft\\world\\level\\block\\RedstoneLampBlock.java\r\nnet\\minecraft\\world\\level\\block\\RedStoneOreBlock.java\r\nnet\\minecraft\\world\\level\\block\\RedstoneTorchBlock.java\r\nnet\\minecraft\\world\\level\\block\\RedstoneWallTorchBlock.java\r\nnet\\minecraft\\world\\level\\block\\RedStoneWireBlock.java\r\nnet\\minecraft\\world\\level\\block\\RenderShape.java\r\nnet\\minecraft\\world\\level\\block\\RepeaterBlock.java\r\nnet\\minecraft\\world\\level\\block\\RespawnAnchorBlock.java\r\nnet\\minecraft\\world\\level\\block\\RodBlock.java\r\nnet\\minecraft\\world\\level\\block\\RootedDirtBlock.java\r\nnet\\minecraft\\world\\level\\block\\RootsBlock.java\r\nnet\\minecraft\\world\\level\\block\\RotatedPillarBlock.java\r\nnet\\minecraft\\world\\level\\block\\Rotation.java\r\nnet\\minecraft\\world\\level\\block\\SaplingBlock.java\r\nnet\\minecraft\\world\\level\\block\\ScaffoldingBlock.java\r\nnet\\minecraft\\world\\level\\block\\SculkBehaviour.java\r\nnet\\minecraft\\world\\level\\block\\SculkBlock.java\r\nnet\\minecraft\\world\\level\\block\\SculkCatalystBlock.java\r\nnet\\minecraft\\world\\level\\block\\SculkSensorBlock.java\r\nnet\\minecraft\\world\\level\\block\\SculkShriekerBlock.java\r\nnet\\minecraft\\world\\level\\block\\SculkSpreader.java\r\nnet\\minecraft\\world\\level\\block\\SculkVeinBlock.java\r\nnet\\minecraft\\world\\level\\block\\SeagrassBlock.java\r\nnet\\minecraft\\world\\level\\block\\SeaPickleBlock.java\r\nnet\\minecraft\\world\\level\\block\\ShulkerBoxBlock.java\r\nnet\\minecraft\\world\\level\\block\\SignBlock.java\r\nnet\\minecraft\\world\\level\\block\\SimpleWaterloggedBlock.java\r\nnet\\minecraft\\world\\level\\block\\SkullBlock.java\r\nnet\\minecraft\\world\\level\\block\\SlabBlock.java\r\nnet\\minecraft\\world\\level\\block\\SlimeBlock.java\r\nnet\\minecraft\\world\\level\\block\\SmallDripleafBlock.java\r\nnet\\minecraft\\world\\level\\block\\SmithingTableBlock.java\r\nnet\\minecraft\\world\\level\\block\\SmokerBlock.java\r\nnet\\minecraft\\world\\level\\block\\SnifferEggBlock.java\r\nnet\\minecraft\\world\\level\\block\\SnowLayerBlock.java\r\nnet\\minecraft\\world\\level\\block\\SnowyDirtBlock.java\r\nnet\\minecraft\\world\\level\\block\\SoulFireBlock.java\r\nnet\\minecraft\\world\\level\\block\\SoulSandBlock.java\r\nnet\\minecraft\\world\\level\\block\\SoundType.java\r\nnet\\minecraft\\world\\level\\block\\SpawnerBlock.java\r\nnet\\minecraft\\world\\level\\block\\SpongeBlock.java\r\nnet\\minecraft\\world\\level\\block\\SporeBlossomBlock.java\r\nnet\\minecraft\\world\\level\\block\\SpreadingSnowyDirtBlock.java\r\nnet\\minecraft\\world\\level\\block\\StainedGlassBlock.java\r\nnet\\minecraft\\world\\level\\block\\StainedGlassPaneBlock.java\r\nnet\\minecraft\\world\\level\\block\\StairBlock.java\r\nnet\\minecraft\\world\\level\\block\\StandingSignBlock.java\r\nnet\\minecraft\\world\\level\\block\\StemBlock.java\r\nnet\\minecraft\\world\\level\\block\\StonecutterBlock.java\r\nnet\\minecraft\\world\\level\\block\\StructureBlock.java\r\nnet\\minecraft\\world\\level\\block\\StructureVoidBlock.java\r\nnet\\minecraft\\world\\level\\block\\SugarCaneBlock.java\r\nnet\\minecraft\\world\\level\\block\\SupportType.java\r\nnet\\minecraft\\world\\level\\block\\SuspiciousEffectHolder.java\r\nnet\\minecraft\\world\\level\\block\\SweetBerryBushBlock.java\r\nnet\\minecraft\\world\\level\\block\\TallFlowerBlock.java\r\nnet\\minecraft\\world\\level\\block\\TallGrassBlock.java\r\nnet\\minecraft\\world\\level\\block\\TallSeagrassBlock.java\r\nnet\\minecraft\\world\\level\\block\\TargetBlock.java\r\nnet\\minecraft\\world\\level\\block\\TintedGlassBlock.java\r\nnet\\minecraft\\world\\level\\block\\TntBlock.java\r\nnet\\minecraft\\world\\level\\block\\TorchBlock.java\r\nnet\\minecraft\\world\\level\\block\\TorchflowerCropBlock.java\r\nnet\\minecraft\\world\\level\\block\\TransparentBlock.java\r\nnet\\minecraft\\world\\level\\block\\TrapDoorBlock.java\r\nnet\\minecraft\\world\\level\\block\\TrappedChestBlock.java\r\nnet\\minecraft\\world\\level\\block\\TrialSpawnerBlock.java\r\nnet\\minecraft\\world\\level\\block\\TripWireBlock.java\r\nnet\\minecraft\\world\\level\\block\\TripWireHookBlock.java\r\nnet\\minecraft\\world\\level\\block\\TurtleEggBlock.java\r\nnet\\minecraft\\world\\level\\block\\TwistingVinesBlock.java\r\nnet\\minecraft\\world\\level\\block\\TwistingVinesPlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\VineBlock.java\r\nnet\\minecraft\\world\\level\\block\\WallBannerBlock.java\r\nnet\\minecraft\\world\\level\\block\\WallBlock.java\r\nnet\\minecraft\\world\\level\\block\\WallHangingSignBlock.java\r\nnet\\minecraft\\world\\level\\block\\WallSignBlock.java\r\nnet\\minecraft\\world\\level\\block\\WallSkullBlock.java\r\nnet\\minecraft\\world\\level\\block\\WallTorchBlock.java\r\nnet\\minecraft\\world\\level\\block\\WaterlilyBlock.java\r\nnet\\minecraft\\world\\level\\block\\WaterloggedTransparentBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeatheringCopper.java\r\nnet\\minecraft\\world\\level\\block\\WeatheringCopperBulbBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeatheringCopperDoorBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeatheringCopperFullBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeatheringCopperGrateBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeatheringCopperSlabBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeatheringCopperStairBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeatheringCopperTrapDoorBlock.java\r\nnet\\minecraft\\world\\level\\block\\WebBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeepingVinesBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeepingVinesPlantBlock.java\r\nnet\\minecraft\\world\\level\\block\\WeightedPressurePlateBlock.java\r\nnet\\minecraft\\world\\level\\block\\WetSpongeBlock.java\r\nnet\\minecraft\\world\\level\\block\\WitherRoseBlock.java\r\nnet\\minecraft\\world\\level\\block\\WitherSkullBlock.java\r\nnet\\minecraft\\world\\level\\block\\WitherWallSkullBlock.java\r\nnet\\minecraft\\world\\level\\block\\WoolCarpetBlock.java\r\nnet\\minecraft\\world\\level\\block\\entity\\trialspawner\r\nnet\\minecraft\\world\\level\\block\\entity\\AbstractFurnaceBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BannerBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BannerPattern.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BannerPatterns.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BarrelBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BaseContainerBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BeaconBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BedBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BeehiveBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BellBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BlastFurnaceBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BlockEntityTicker.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BlockEntityType.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BrewingStandBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\BrushableBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\CalibratedSculkSensorBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\CampfireBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\ChestBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\ChestLidController.java\r\nnet\\minecraft\\world\\level\\block\\entity\\ChiseledBookShelfBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\CommandBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\ComparatorBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\ConduitBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\ContainerOpenersCounter.java\r\nnet\\minecraft\\world\\level\\block\\entity\\CrafterBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\DaylightDetectorBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\DecoratedPotBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\DecoratedPotPatterns.java\r\nnet\\minecraft\\world\\level\\block\\entity\\DispenserBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\DropperBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\EnchantmentTableBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\EnderChestBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\FurnaceBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\HangingSignBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\Hopper.java\r\nnet\\minecraft\\world\\level\\block\\entity\\HopperBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\JigsawBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\JukeboxBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\LecternBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\LidBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\entity\\RandomizableContainerBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\SculkCatalystBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\SculkSensorBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\SculkShriekerBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\ShulkerBoxBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\SignBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\SignText.java\r\nnet\\minecraft\\world\\level\\block\\entity\\SkullBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\SmokerBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\SpawnerBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\StructureBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\TheEndGatewayBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\TheEndPortalBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\TickingBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\TrappedChestBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\TrialSpawnerBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\entity\\trialspawner\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\entity\\trialspawner\\PlayerDetector.java\r\nnet\\minecraft\\world\\level\\block\\entity\\trialspawner\\TrialSpawner.java\r\nnet\\minecraft\\world\\level\\block\\entity\\trialspawner\\TrialSpawnerConfig.java\r\nnet\\minecraft\\world\\level\\block\\entity\\trialspawner\\TrialSpawnerData.java\r\nnet\\minecraft\\world\\level\\block\\entity\\trialspawner\\TrialSpawnerState.java\r\nnet\\minecraft\\world\\level\\block\\grower\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\grower\\TreeGrower.java\r\nnet\\minecraft\\world\\level\\block\\piston\\MovingPistonBlock.java\r\nnet\\minecraft\\world\\level\\block\\piston\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\piston\\PistonBaseBlock.java\r\nnet\\minecraft\\world\\level\\block\\piston\\PistonHeadBlock.java\r\nnet\\minecraft\\world\\level\\block\\piston\\PistonMath.java\r\nnet\\minecraft\\world\\level\\block\\piston\\PistonMovingBlockEntity.java\r\nnet\\minecraft\\world\\level\\block\\piston\\PistonStructureResolver.java\r\nnet\\minecraft\\world\\level\\block\\state\\pattern\r\nnet\\minecraft\\world\\level\\block\\state\\predicate\r\nnet\\minecraft\\world\\level\\block\\state\\properties\r\nnet\\minecraft\\world\\level\\block\\state\\BlockBehaviour.java\r\nnet\\minecraft\\world\\level\\block\\state\\BlockState.java\r\nnet\\minecraft\\world\\level\\block\\state\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\state\\StateDefinition.java\r\nnet\\minecraft\\world\\level\\block\\state\\StateHolder.java\r\nnet\\minecraft\\world\\level\\block\\state\\pattern\\BlockInWorld.java\r\nnet\\minecraft\\world\\level\\block\\state\\pattern\\BlockPattern.java\r\nnet\\minecraft\\world\\level\\block\\state\\pattern\\BlockPatternBuilder.java\r\nnet\\minecraft\\world\\level\\block\\state\\pattern\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\state\\predicate\\BlockPredicate.java\r\nnet\\minecraft\\world\\level\\block\\state\\predicate\\BlockStatePredicate.java\r\nnet\\minecraft\\world\\level\\block\\state\\predicate\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\AttachFace.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\BambooLeaves.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\BedPart.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\BellAttachType.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\BlockSetType.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\BlockStateProperties.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\BooleanProperty.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\ChestType.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\ComparatorMode.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\DirectionProperty.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\DoorHingeSide.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\DoubleBlockHalf.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\DripstoneThickness.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\EnumProperty.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\Half.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\IntegerProperty.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\NoteBlockInstrument.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\package-info.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\PistonType.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\Property.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\RailShape.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\RedstoneSide.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\RotationSegment.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\SculkSensorPhase.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\SlabType.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\StairsShape.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\StructureMode.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\Tilt.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\WallSide.java\r\nnet\\minecraft\\world\\level\\block\\state\\properties\\WoodType.java\r\nnet\\minecraft\\world\\level\\border\\BorderChangeListener.java\r\nnet\\minecraft\\world\\level\\border\\BorderStatus.java\r\nnet\\minecraft\\world\\level\\border\\package-info.java\r\nnet\\minecraft\\world\\level\\border\\WorldBorder.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\r\nnet\\minecraft\\world\\level\\chunk\\BlockColumn.java\r\nnet\\minecraft\\world\\level\\chunk\\BulkSectionAccess.java\r\nnet\\minecraft\\world\\level\\chunk\\CarvingMask.java\r\nnet\\minecraft\\world\\level\\chunk\\ChunkAccess.java\r\nnet\\minecraft\\world\\level\\chunk\\ChunkGenerator.java\r\nnet\\minecraft\\world\\level\\chunk\\ChunkGenerators.java\r\nnet\\minecraft\\world\\level\\chunk\\ChunkGeneratorStructureState.java\r\nnet\\minecraft\\world\\level\\chunk\\ChunkSource.java\r\nnet\\minecraft\\world\\level\\chunk\\ChunkStatus.java\r\nnet\\minecraft\\world\\level\\chunk\\DataLayer.java\r\nnet\\minecraft\\world\\level\\chunk\\EmptyLevelChunk.java\r\nnet\\minecraft\\world\\level\\chunk\\GlobalPalette.java\r\nnet\\minecraft\\world\\level\\chunk\\HashMapPalette.java\r\nnet\\minecraft\\world\\level\\chunk\\ImposterProtoChunk.java\r\nnet\\minecraft\\world\\level\\chunk\\LevelChunk.java\r\nnet\\minecraft\\world\\level\\chunk\\LevelChunkSection.java\r\nnet\\minecraft\\world\\level\\chunk\\LightChunk.java\r\nnet\\minecraft\\world\\level\\chunk\\LightChunkGetter.java\r\nnet\\minecraft\\world\\level\\chunk\\LinearPalette.java\r\nnet\\minecraft\\world\\level\\chunk\\MissingPaletteEntryException.java\r\nnet\\minecraft\\world\\level\\chunk\\package-info.java\r\nnet\\minecraft\\world\\level\\chunk\\Palette.java\r\nnet\\minecraft\\world\\level\\chunk\\PalettedContainer.java\r\nnet\\minecraft\\world\\level\\chunk\\PalettedContainerRO.java\r\nnet\\minecraft\\world\\level\\chunk\\PaletteResize.java\r\nnet\\minecraft\\world\\level\\chunk\\ProtoChunk.java\r\nnet\\minecraft\\world\\level\\chunk\\SingleValuePalette.java\r\nnet\\minecraft\\world\\level\\chunk\\StructureAccess.java\r\nnet\\minecraft\\world\\level\\chunk\\UpgradeData.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\ChunkScanAccess.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\ChunkSerializer.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\ChunkStorage.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\EntityStorage.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\IOWorker.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\package-info.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\RegionBitmap.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\RegionFile.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\RegionFileStorage.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\RegionFileVersion.java\r\nnet\\minecraft\\world\\level\\chunk\\storage\\SectionStorage.java\r\nnet\\minecraft\\world\\level\\dimension\\end\r\nnet\\minecraft\\world\\level\\dimension\\BuiltinDimensionTypes.java\r\nnet\\minecraft\\world\\level\\dimension\\DimensionDefaults.java\r\nnet\\minecraft\\world\\level\\dimension\\DimensionType.java\r\nnet\\minecraft\\world\\level\\dimension\\LevelStem.java\r\nnet\\minecraft\\world\\level\\dimension\\package-info.java\r\nnet\\minecraft\\world\\level\\dimension\\end\\DragonRespawnAnimation.java\r\nnet\\minecraft\\world\\level\\dimension\\end\\EndDragonFight.java\r\nnet\\minecraft\\world\\level\\dimension\\end\\package-info.java\r\nnet\\minecraft\\world\\level\\entity\\ChunkEntities.java\r\nnet\\minecraft\\world\\level\\entity\\ChunkStatusUpdateListener.java\r\nnet\\minecraft\\world\\level\\entity\\EntityAccess.java\r\nnet\\minecraft\\world\\level\\entity\\EntityInLevelCallback.java\r\nnet\\minecraft\\world\\level\\entity\\EntityLookup.java\r\nnet\\minecraft\\world\\level\\entity\\EntityPersistentStorage.java\r\nnet\\minecraft\\world\\level\\entity\\EntitySection.java\r\nnet\\minecraft\\world\\level\\entity\\EntitySectionStorage.java\r\nnet\\minecraft\\world\\level\\entity\\EntityTickList.java\r\nnet\\minecraft\\world\\level\\entity\\EntityTypeTest.java\r\nnet\\minecraft\\world\\level\\entity\\LevelCallback.java\r\nnet\\minecraft\\world\\level\\entity\\LevelEntityGetter.java\r\nnet\\minecraft\\world\\level\\entity\\LevelEntityGetterAdapter.java\r\nnet\\minecraft\\world\\level\\entity\\package-info.java\r\nnet\\minecraft\\world\\level\\entity\\PersistentEntitySectionManager.java\r\nnet\\minecraft\\world\\level\\entity\\TransientEntitySectionManager.java\r\nnet\\minecraft\\world\\level\\entity\\Visibility.java\r\nnet\\minecraft\\world\\level\\gameevent\\vibrations\r\nnet\\minecraft\\world\\level\\gameevent\\BlockPositionSource.java\r\nnet\\minecraft\\world\\level\\gameevent\\DynamicGameEventListener.java\r\nnet\\minecraft\\world\\level\\gameevent\\EntityPositionSource.java\r\nnet\\minecraft\\world\\level\\gameevent\\EuclideanGameEventListenerRegistry.java\r\nnet\\minecraft\\world\\level\\gameevent\\GameEvent.java\r\nnet\\minecraft\\world\\level\\gameevent\\GameEventDispatcher.java\r\nnet\\minecraft\\world\\level\\gameevent\\GameEventListener.java\r\nnet\\minecraft\\world\\level\\gameevent\\GameEventListenerRegistry.java\r\nnet\\minecraft\\world\\level\\gameevent\\package-info.java\r\nnet\\minecraft\\world\\level\\gameevent\\PositionSource.java\r\nnet\\minecraft\\world\\level\\gameevent\\PositionSourceType.java\r\nnet\\minecraft\\world\\level\\gameevent\\vibrations\\package-info.java\r\nnet\\minecraft\\world\\level\\gameevent\\vibrations\\VibrationInfo.java\r\nnet\\minecraft\\world\\level\\gameevent\\vibrations\\VibrationSelector.java\r\nnet\\minecraft\\world\\level\\gameevent\\vibrations\\VibrationSystem.java\r\nnet\\minecraft\\world\\level\\levelgen\\blending\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\r\nnet\\minecraft\\world\\level\\levelgen\\carver\r\nnet\\minecraft\\world\\level\\levelgen\\feature\r\nnet\\minecraft\\world\\level\\levelgen\\flat\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\r\nnet\\minecraft\\world\\level\\levelgen\\material\r\nnet\\minecraft\\world\\level\\levelgen\\placement\r\nnet\\minecraft\\world\\level\\levelgen\\presets\r\nnet\\minecraft\\world\\level\\levelgen\\structure\r\nnet\\minecraft\\world\\level\\levelgen\\synth\r\nnet\\minecraft\\world\\level\\levelgen\\Aquifer.java\r\nnet\\minecraft\\world\\level\\levelgen\\Beardifier.java\r\nnet\\minecraft\\world\\level\\levelgen\\BelowZeroRetrogen.java\r\nnet\\minecraft\\world\\level\\levelgen\\BitRandomSource.java\r\nnet\\minecraft\\world\\level\\levelgen\\Column.java\r\nnet\\minecraft\\world\\level\\levelgen\\DebugLevelSource.java\r\nnet\\minecraft\\world\\level\\levelgen\\Density.java\r\nnet\\minecraft\\world\\level\\levelgen\\DensityFunction.java\r\nnet\\minecraft\\world\\level\\levelgen\\DensityFunctions.java\r\nnet\\minecraft\\world\\level\\levelgen\\FlatLevelSource.java\r\nnet\\minecraft\\world\\level\\levelgen\\GenerationStep.java\r\nnet\\minecraft\\world\\level\\levelgen\\GeodeBlockSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\GeodeCrackSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\GeodeLayerSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\Heightmap.java\r\nnet\\minecraft\\world\\level\\levelgen\\LegacyRandomSource.java\r\nnet\\minecraft\\world\\level\\levelgen\\MarsagliaPolarGaussian.java\r\nnet\\minecraft\\world\\level\\levelgen\\NoiseBasedChunkGenerator.java\r\nnet\\minecraft\\world\\level\\levelgen\\NoiseChunk.java\r\nnet\\minecraft\\world\\level\\levelgen\\NoiseGeneratorSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\NoiseRouter.java\r\nnet\\minecraft\\world\\level\\levelgen\\NoiseRouterData.java\r\nnet\\minecraft\\world\\level\\levelgen\\Noises.java\r\nnet\\minecraft\\world\\level\\levelgen\\NoiseSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\OreVeinifier.java\r\nnet\\minecraft\\world\\level\\levelgen\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\PatrolSpawner.java\r\nnet\\minecraft\\world\\level\\levelgen\\PhantomSpawner.java\r\nnet\\minecraft\\world\\level\\levelgen\\PositionalRandomFactory.java\r\nnet\\minecraft\\world\\level\\levelgen\\RandomState.java\r\nnet\\minecraft\\world\\level\\levelgen\\RandomSupport.java\r\nnet\\minecraft\\world\\level\\levelgen\\SingleThreadedRandomSource.java\r\nnet\\minecraft\\world\\level\\levelgen\\SurfaceRules.java\r\nnet\\minecraft\\world\\level\\levelgen\\SurfaceSystem.java\r\nnet\\minecraft\\world\\level\\levelgen\\ThreadSafeLegacyRandomSource.java\r\nnet\\minecraft\\world\\level\\levelgen\\VerticalAnchor.java\r\nnet\\minecraft\\world\\level\\levelgen\\WorldDimensions.java\r\nnet\\minecraft\\world\\level\\levelgen\\WorldGenerationContext.java\r\nnet\\minecraft\\world\\level\\levelgen\\WorldgenRandom.java\r\nnet\\minecraft\\world\\level\\levelgen\\WorldGenSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\WorldOptions.java\r\nnet\\minecraft\\world\\level\\levelgen\\Xoroshiro128PlusPlus.java\r\nnet\\minecraft\\world\\level\\levelgen\\XoroshiroRandomSource.java\r\nnet\\minecraft\\world\\level\\levelgen\\blending\\Blender.java\r\nnet\\minecraft\\world\\level\\levelgen\\blending\\BlendingData.java\r\nnet\\minecraft\\world\\level\\levelgen\\blending\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\AllOfPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\AnyOfPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\BlockPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\BlockPredicateType.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\CombiningPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\HasSturdyFacePredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\InsideWorldBoundsPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\MatchingBlocksPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\MatchingBlockTagPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\MatchingFluidsPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\NotPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\ReplaceablePredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\SolidPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\StateTestingPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\TrueBlockPredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\blockpredicates\\WouldSurvivePredicate.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\CanyonCarverConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\CanyonWorldCarver.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\CarverConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\CarverDebugSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\CarvingContext.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\CaveCarverConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\CaveWorldCarver.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\ConfiguredWorldCarver.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\NetherWorldCarver.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\carver\\WorldCarver.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\featuresize\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\rootplacers\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\AbstractHugeMushroomFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\BambooFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\BasaltColumnsFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\BasaltPillarFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\BlockBlobFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\BlockColumnFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\BlockPileFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\BlueIceFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\BonusChestFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\ChorusPlantFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\ConfiguredFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\CoralClawFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\CoralFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\CoralMushroomFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\CoralTreeFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\DeltaFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\DesertWellFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\DiskFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\DripstoneClusterFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\DripstoneUtils.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\EndGatewayFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\EndIslandFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\EndPodiumFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\Feature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\FeatureCountTracker.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\FeaturePlaceContext.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\FillLayerFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\FossilFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\FossilFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\GeodeFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\GlowstoneFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\HugeBrownMushroomFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\HugeFungusConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\HugeFungusFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\HugeRedMushroomFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\IcebergFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\IceSpikeFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\KelpFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\LakeFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\LargeDripstoneFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\MonsterRoomFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\MultifaceGrowthFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\NetherForestVegetationFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\NoOpFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\OreFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\PointedDripstoneFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\RandomBooleanSelectorFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\RandomPatchFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\RandomSelectorFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\ReplaceBlobsFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\ReplaceBlockFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\RootSystemFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\ScatteredOreFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\SculkPatchFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\SeagrassFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\SeaPickleFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\SimpleBlockFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\SimpleRandomSelectorFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\SnowAndFreezeFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\SpikeFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\SpringFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\TreeFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\TwistingVinesFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\UnderwaterMagmaFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\VegetationPatchFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\VinesFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\VoidStartPlatformFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\WaterloggedVegetationPatchFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\WeepingVinesFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\WeightedPlacedFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\BlockColumnConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\BlockPileConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\BlockStateConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\ColumnFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\CountConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\DeltaFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\DiskConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\DripstoneClusterConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\EndGatewayConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\FeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\GeodeConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\HugeMushroomFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\LargeDripstoneConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\LayerConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\MultifaceGrowthConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\NetherForestVegetationConfig.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\NoneFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\OreConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\PointedDripstoneConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\ProbabilityFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\RandomBooleanFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\RandomFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\RandomPatchConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\ReplaceBlockConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\ReplaceSphereConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\RootSystemConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\SculkPatchConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\SimpleBlockConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\SimpleRandomFeatureConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\SpikeConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\SpringConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\TreeConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\TwistingVinesConfig.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\UnderwaterMagmaConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\configurations\\VegetationPatchConfiguration.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\featuresize\\FeatureSize.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\featuresize\\FeatureSizeType.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\featuresize\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\featuresize\\ThreeLayersFeatureSize.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\featuresize\\TwoLayersFeatureSize.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\AcaciaFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\BlobFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\BushFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\CherryFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\DarkOakFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\FancyFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\FoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\FoliagePlacerType.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\MegaJungleFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\MegaPineFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\PineFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\RandomSpreadFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\foliageplacers\\SpruceFoliagePlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\rootplacers\\AboveRootPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\rootplacers\\MangroveRootPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\rootplacers\\MangroveRootPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\rootplacers\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\rootplacers\\RootPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\rootplacers\\RootPlacerType.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\BlockStateProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\BlockStateProviderType.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\DualNoiseProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\NoiseBasedStateProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\NoiseProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\NoiseThresholdProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\RandomizedIntStateProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\RotatedBlockProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\RuleBasedBlockStateProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\SimpleStateProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\stateproviders\\WeightedStateProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\AlterGroundDecorator.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\AttachedToLeavesDecorator.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\BeehiveDecorator.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\CocoaDecorator.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\LeaveVineDecorator.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\TreeDecorator.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\TreeDecoratorType.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\treedecorators\\TrunkVineDecorator.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\BendingTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\CherryTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\DarkOakTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\FancyTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\ForkingTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\GiantTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\MegaJungleTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\StraightTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\TrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\TrunkPlacerType.java\r\nnet\\minecraft\\world\\level\\levelgen\\feature\\trunkplacers\\UpwardsBranchingTrunkPlacer.java\r\nnet\\minecraft\\world\\level\\levelgen\\flat\\FlatLayerInfo.java\r\nnet\\minecraft\\world\\level\\levelgen\\flat\\FlatLevelGeneratorPreset.java\r\nnet\\minecraft\\world\\level\\levelgen\\flat\\FlatLevelGeneratorPresets.java\r\nnet\\minecraft\\world\\level\\levelgen\\flat\\FlatLevelGeneratorSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\flat\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\BiasedToBottomHeight.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\ConstantHeight.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\HeightProvider.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\HeightProviderType.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\TrapezoidHeight.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\UniformHeight.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\VeryBiasedToBottomHeight.java\r\nnet\\minecraft\\world\\level\\levelgen\\heightproviders\\WeightedListHeight.java\r\nnet\\minecraft\\world\\level\\levelgen\\material\\MaterialRuleList.java\r\nnet\\minecraft\\world\\level\\levelgen\\material\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\material\\WorldGenMaterialRule.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\BiomeFilter.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\BlockPredicateFilter.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\CarvingMaskPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\CaveSurface.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\CountOnEveryLayerPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\CountPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\EnvironmentScanPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\HeightmapPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\HeightRangePlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\InSquarePlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\NoiseBasedCountPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\NoiseThresholdCountPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\PlacedFeature.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\PlacementContext.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\PlacementFilter.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\PlacementModifier.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\PlacementModifierType.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\RandomOffsetPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\RarityFilter.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\RepeatingPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\SurfaceRelativeThresholdFilter.java\r\nnet\\minecraft\\world\\level\\levelgen\\placement\\SurfaceWaterDepthFilter.java\r\nnet\\minecraft\\world\\level\\levelgen\\presets\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\presets\\WorldPreset.java\r\nnet\\minecraft\\world\\level\\levelgen\\presets\\WorldPresets.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pieces\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\placement\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\BoundingBox.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\BuiltinStructures.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\BuiltinStructureSets.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\LegacyStructureDataHandler.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\PoolElementStructurePiece.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\PostPlacementProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\ScatteredFeaturePiece.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\SinglePieceStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\Structure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructureCheck.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructureCheckResult.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructureFeatureIndexSavedData.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructurePiece.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructurePieceAccessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructureSet.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructureSpawnOverride.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructureStart.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\StructureType.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\TemplateStructurePiece.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\TerrainAdjustment.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pieces\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pieces\\PieceGenerator.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pieces\\PieceGeneratorSupplier.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pieces\\PiecesContainer.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pieces\\StructurePiecesBuilder.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pieces\\StructurePieceSerializationContext.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pieces\\StructurePieceType.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\placement\\ConcentricRingsStructurePlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\placement\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\placement\\RandomSpreadStructurePlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\placement\\RandomSpreadType.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\placement\\StructurePlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\placement\\StructurePlacementType.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\alias\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\EmptyPoolElement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\FeaturePoolElement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\JigsawJunction.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\JigsawPlacement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\LegacySinglePoolElement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\ListPoolElement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\SinglePoolElement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\StructurePoolElement.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\StructurePoolElementType.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\StructureTemplatePool.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\alias\\Direct.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\alias\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\alias\\PoolAliasBinding.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\alias\\PoolAliasBindings.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\alias\\PoolAliasLookup.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\alias\\Random.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\pools\\alias\\RandomGroup.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\BuriedTreasurePieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\BuriedTreasureStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\DesertPyramidPiece.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\DesertPyramidStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\EndCityPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\EndCityStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\IglooPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\IglooStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\JigsawStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\JungleTemplePiece.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\JungleTempleStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\MineshaftPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\MineshaftStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\NetherFortressPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\NetherFortressStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\NetherFossilPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\NetherFossilStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\OceanMonumentPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\OceanMonumentStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\OceanRuinPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\OceanRuinStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\RuinedPortalPiece.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\RuinedPortalStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\ShipwreckPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\ShipwreckStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\StrongholdPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\StrongholdStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\SwampHutPiece.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\SwampHutStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\WoodlandMansionPieces.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\structures\\WoodlandMansionStructure.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\AlwaysTrueTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\AxisAlignedLinearPosTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\BlackstoneReplaceProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\BlockAgeProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\BlockIgnoreProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\BlockMatchTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\BlockRotProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\BlockStateMatchTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\CappedProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\GravityProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\JigsawReplacementProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\LavaSubmergedBlockProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\LinearPosTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\NopProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\PosAlwaysTrueTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\PosRuleTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\PosRuleTestType.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\ProcessorRule.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\ProtectedBlockProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\RandomBlockMatchTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\RandomBlockStateMatchTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\RuleProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\RuleTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\RuleTestType.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\StructurePlaceSettings.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\StructureProcessor.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\StructureProcessorList.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\StructureProcessorType.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\StructureTemplate.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\StructureTemplateManager.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\TagMatchTest.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\\blockentity\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\\blockentity\\AppendLoot.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\\blockentity\\AppendStatic.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\\blockentity\\Clear.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\\blockentity\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\\blockentity\\Passthrough.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\\blockentity\\RuleBlockEntityModifier.java\r\nnet\\minecraft\\world\\level\\levelgen\\structure\\templatesystem\\rule\\blockentity\\RuleBlockEntityModifierType.java\r\nnet\\minecraft\\world\\level\\levelgen\\synth\\BlendedNoise.java\r\nnet\\minecraft\\world\\level\\levelgen\\synth\\ImprovedNoise.java\r\nnet\\minecraft\\world\\level\\levelgen\\synth\\NoiseUtils.java\r\nnet\\minecraft\\world\\level\\levelgen\\synth\\NormalNoise.java\r\nnet\\minecraft\\world\\level\\levelgen\\synth\\package-info.java\r\nnet\\minecraft\\world\\level\\levelgen\\synth\\PerlinNoise.java\r\nnet\\minecraft\\world\\level\\levelgen\\synth\\PerlinSimplexNoise.java\r\nnet\\minecraft\\world\\level\\levelgen\\synth\\SimplexNoise.java\r\nnet\\minecraft\\world\\level\\lighting\\BlockLightEngine.java\r\nnet\\minecraft\\world\\level\\lighting\\BlockLightSectionStorage.java\r\nnet\\minecraft\\world\\level\\lighting\\ChunkSkyLightSources.java\r\nnet\\minecraft\\world\\level\\lighting\\DataLayerStorageMap.java\r\nnet\\minecraft\\world\\level\\lighting\\DynamicGraphMinFixedPoint.java\r\nnet\\minecraft\\world\\level\\lighting\\LayerLightEventListener.java\r\nnet\\minecraft\\world\\level\\lighting\\LayerLightSectionStorage.java\r\nnet\\minecraft\\world\\level\\lighting\\LeveledPriorityQueue.java\r\nnet\\minecraft\\world\\level\\lighting\\LevelLightEngine.java\r\nnet\\minecraft\\world\\level\\lighting\\LightEngine.java\r\nnet\\minecraft\\world\\level\\lighting\\LightEventListener.java\r\nnet\\minecraft\\world\\level\\lighting\\package-info.java\r\nnet\\minecraft\\world\\level\\lighting\\SkyLightEngine.java\r\nnet\\minecraft\\world\\level\\lighting\\SkyLightSectionStorage.java\r\nnet\\minecraft\\world\\level\\lighting\\SpatialLongSet.java\r\nnet\\minecraft\\world\\level\\material\\EmptyFluid.java\r\nnet\\minecraft\\world\\level\\material\\FlowingFluid.java\r\nnet\\minecraft\\world\\level\\material\\Fluid.java\r\nnet\\minecraft\\world\\level\\material\\Fluids.java\r\nnet\\minecraft\\world\\level\\material\\FluidState.java\r\nnet\\minecraft\\world\\level\\material\\FogType.java\r\nnet\\minecraft\\world\\level\\material\\LavaFluid.java\r\nnet\\minecraft\\world\\level\\material\\MapColor.java\r\nnet\\minecraft\\world\\level\\material\\package-info.java\r\nnet\\minecraft\\world\\level\\material\\PushReaction.java\r\nnet\\minecraft\\world\\level\\material\\WaterFluid.java\r\nnet\\minecraft\\world\\level\\pathfinder\\AmphibiousNodeEvaluator.java\r\nnet\\minecraft\\world\\level\\pathfinder\\BinaryHeap.java\r\nnet\\minecraft\\world\\level\\pathfinder\\BlockPathTypes.java\r\nnet\\minecraft\\world\\level\\pathfinder\\FlyNodeEvaluator.java\r\nnet\\minecraft\\world\\level\\pathfinder\\Node.java\r\nnet\\minecraft\\world\\level\\pathfinder\\NodeEvaluator.java\r\nnet\\minecraft\\world\\level\\pathfinder\\package-info.java\r\nnet\\minecraft\\world\\level\\pathfinder\\Path.java\r\nnet\\minecraft\\world\\level\\pathfinder\\PathComputationType.java\r\nnet\\minecraft\\world\\level\\pathfinder\\PathFinder.java\r\nnet\\minecraft\\world\\level\\pathfinder\\SwimNodeEvaluator.java\r\nnet\\minecraft\\world\\level\\pathfinder\\Target.java\r\nnet\\minecraft\\world\\level\\pathfinder\\WalkNodeEvaluator.java\r\nnet\\minecraft\\world\\level\\portal\\package-info.java\r\nnet\\minecraft\\world\\level\\portal\\PortalForcer.java\r\nnet\\minecraft\\world\\level\\portal\\PortalInfo.java\r\nnet\\minecraft\\world\\level\\portal\\PortalShape.java\r\nnet\\minecraft\\world\\level\\redstone\\CollectingNeighborUpdater.java\r\nnet\\minecraft\\world\\level\\redstone\\InstantNeighborUpdater.java\r\nnet\\minecraft\\world\\level\\redstone\\NeighborUpdater.java\r\nnet\\minecraft\\world\\level\\redstone\\package-info.java\r\nnet\\minecraft\\world\\level\\redstone\\Redstone.java\r\nnet\\minecraft\\world\\level\\saveddata\\maps\r\nnet\\minecraft\\world\\level\\saveddata\\package-info.java\r\nnet\\minecraft\\world\\level\\saveddata\\SavedData.java\r\nnet\\minecraft\\world\\level\\saveddata\\maps\\MapBanner.java\r\nnet\\minecraft\\world\\level\\saveddata\\maps\\MapDecoration.java\r\nnet\\minecraft\\world\\level\\saveddata\\maps\\MapFrame.java\r\nnet\\minecraft\\world\\level\\saveddata\\maps\\MapIndex.java\r\nnet\\minecraft\\world\\level\\saveddata\\maps\\MapItemSavedData.java\r\nnet\\minecraft\\world\\level\\saveddata\\maps\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\r\nnet\\minecraft\\world\\level\\storage\\CommandStorage.java\r\nnet\\minecraft\\world\\level\\storage\\DataVersion.java\r\nnet\\minecraft\\world\\level\\storage\\DerivedLevelData.java\r\nnet\\minecraft\\world\\level\\storage\\DimensionDataStorage.java\r\nnet\\minecraft\\world\\level\\storage\\LevelData.java\r\nnet\\minecraft\\world\\level\\storage\\LevelDataAndDimensions.java\r\nnet\\minecraft\\world\\level\\storage\\LevelResource.java\r\nnet\\minecraft\\world\\level\\storage\\LevelStorageException.java\r\nnet\\minecraft\\world\\level\\storage\\LevelStorageSource.java\r\nnet\\minecraft\\world\\level\\storage\\LevelSummary.java\r\nnet\\minecraft\\world\\level\\storage\\LevelVersion.java\r\nnet\\minecraft\\world\\level\\storage\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\PlayerDataStorage.java\r\nnet\\minecraft\\world\\level\\storage\\PrimaryLevelData.java\r\nnet\\minecraft\\world\\level\\storage\\ServerLevelData.java\r\nnet\\minecraft\\world\\level\\storage\\WorldData.java\r\nnet\\minecraft\\world\\level\\storage\\WritableLevelData.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\r\nnet\\minecraft\\world\\level\\storage\\loot\\parameters\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\r\nnet\\minecraft\\world\\level\\storage\\loot\\BuiltInLootTables.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\IntRange.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootContext.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootContextUser.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootDataId.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootDataManager.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootDataResolver.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootDataType.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootParams.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootPool.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\LootTable.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\ValidationContext.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\AlternativesEntry.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\ComposableEntryContainer.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\CompositeEntryBase.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\DynamicLoot.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\EmptyLootItem.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\EntryGroup.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\LootItem.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\LootPoolEntries.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\LootPoolEntry.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\LootPoolEntryContainer.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\LootPoolEntryType.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\LootPoolSingletonContainer.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\LootTableReference.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\SequentialEntry.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\entries\\TagEntry.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\ApplyBonusCount.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\ApplyExplosionDecay.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\CopyBlockState.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\CopyNameFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\CopyNbtFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\EnchantRandomlyFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\EnchantWithLevelsFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\ExplorationMapFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\FillPlayerHead.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\FunctionReference.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\FunctionUserBuilder.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\LimitCount.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\LootingEnchantFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\LootItemConditionalFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\LootItemFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\LootItemFunctions.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\LootItemFunctionType.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SequenceFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetAttributesFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetBannerPatternFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetContainerContents.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetContainerLootTable.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetEnchantmentsFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetInstrumentFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetItemCountFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetItemDamageFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetLoreFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetNameFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetNbtFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetPotionFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SetStewEffectFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\functions\\SmeltItemFunction.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\parameters\\LootContextParam.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\parameters\\LootContextParams.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\parameters\\LootContextParamSet.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\parameters\\LootContextParamSets.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\parameters\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\AllOfCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\AnyOfCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\BonusLevelTableCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\CompositeLootItemCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\ConditionReference.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\ConditionUserBuilder.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\DamageSourceCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\EntityHasScoreCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\ExplosionCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\InvertedLootItemCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LocationCheck.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LootItemBlockStatePropertyCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LootItemCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LootItemConditions.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LootItemConditionType.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LootItemEntityPropertyCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LootItemKilledByPlayerCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LootItemRandomChanceCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\LootItemRandomChanceWithLootingCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\MatchTool.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\TimeCheck.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\ValueCheckCondition.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\predicates\\WeatherCheck.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\nbt\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\score\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\nbt\\ContextNbtProvider.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\nbt\\LootNbtProviderType.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\nbt\\NbtProvider.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\nbt\\NbtProviders.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\nbt\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\nbt\\StorageNbtProvider.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\\BinomialDistributionGenerator.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\\ConstantValue.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\\LootNumberProviderType.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\\NumberProvider.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\\NumberProviders.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\\ScoreboardValue.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\number\\UniformGenerator.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\score\\ContextScoreboardNameProvider.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\score\\FixedScoreboardNameProvider.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\score\\LootScoreProviderType.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\score\\package-info.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\score\\ScoreboardNameProvider.java\r\nnet\\minecraft\\world\\level\\storage\\loot\\providers\\score\\ScoreboardNameProviders.java\r\nnet\\minecraft\\world\\level\\timers\\FunctionCallback.java\r\nnet\\minecraft\\world\\level\\timers\\FunctionTagCallback.java\r\nnet\\minecraft\\world\\level\\timers\\package-info.java\r\nnet\\minecraft\\world\\level\\timers\\TimerCallback.java\r\nnet\\minecraft\\world\\level\\timers\\TimerCallbacks.java\r\nnet\\minecraft\\world\\level\\timers\\TimerQueue.java\r\nnet\\minecraft\\world\\level\\validation\\ContentValidationException.java\r\nnet\\minecraft\\world\\level\\validation\\DirectoryValidator.java\r\nnet\\minecraft\\world\\level\\validation\\ForbiddenSymlinkInfo.java\r\nnet\\minecraft\\world\\level\\validation\\package-info.java\r\nnet\\minecraft\\world\\level\\validation\\PathAllowList.java\r\nnet\\minecraft\\world\\phys\\shapes\r\nnet\\minecraft\\world\\phys\\AABB.java\r\nnet\\minecraft\\world\\phys\\BlockHitResult.java\r\nnet\\minecraft\\world\\phys\\EntityHitResult.java\r\nnet\\minecraft\\world\\phys\\HitResult.java\r\nnet\\minecraft\\world\\phys\\package-info.java\r\nnet\\minecraft\\world\\phys\\Vec2.java\r\nnet\\minecraft\\world\\phys\\Vec3.java\r\nnet\\minecraft\\world\\phys\\shapes\\ArrayVoxelShape.java\r\nnet\\minecraft\\world\\phys\\shapes\\BitSetDiscreteVoxelShape.java\r\nnet\\minecraft\\world\\phys\\shapes\\BooleanOp.java\r\nnet\\minecraft\\world\\phys\\shapes\\CollisionContext.java\r\nnet\\minecraft\\world\\phys\\shapes\\CubePointRange.java\r\nnet\\minecraft\\world\\phys\\shapes\\CubeVoxelShape.java\r\nnet\\minecraft\\world\\phys\\shapes\\DiscreteCubeMerger.java\r\nnet\\minecraft\\world\\phys\\shapes\\DiscreteVoxelShape.java\r\nnet\\minecraft\\world\\phys\\shapes\\EntityCollisionContext.java\r\nnet\\minecraft\\world\\phys\\shapes\\IdenticalMerger.java\r\nnet\\minecraft\\world\\phys\\shapes\\IndexMerger.java\r\nnet\\minecraft\\world\\phys\\shapes\\IndirectMerger.java\r\nnet\\minecraft\\world\\phys\\shapes\\NonOverlappingMerger.java\r\nnet\\minecraft\\world\\phys\\shapes\\OffsetDoubleList.java\r\nnet\\minecraft\\world\\phys\\shapes\\package-info.java\r\nnet\\minecraft\\world\\phys\\shapes\\Shapes.java\r\nnet\\minecraft\\world\\phys\\shapes\\SliceShape.java\r\nnet\\minecraft\\world\\phys\\shapes\\SubShape.java\r\nnet\\minecraft\\world\\phys\\shapes\\VoxelShape.java\r\nnet\\minecraft\\world\\scores\\criteria\r\nnet\\minecraft\\world\\scores\\DisplaySlot.java\r\nnet\\minecraft\\world\\scores\\Objective.java\r\nnet\\minecraft\\world\\scores\\package-info.java\r\nnet\\minecraft\\world\\scores\\PlayerScoreEntry.java\r\nnet\\minecraft\\world\\scores\\PlayerScores.java\r\nnet\\minecraft\\world\\scores\\PlayerTeam.java\r\nnet\\minecraft\\world\\scores\\ReadOnlyScoreInfo.java\r\nnet\\minecraft\\world\\scores\\Score.java\r\nnet\\minecraft\\world\\scores\\ScoreAccess.java\r\nnet\\minecraft\\world\\scores\\Scoreboard.java\r\nnet\\minecraft\\world\\scores\\ScoreboardSaveData.java\r\nnet\\minecraft\\world\\scores\\ScoreHolder.java\r\nnet\\minecraft\\world\\scores\\Team.java\r\nnet\\minecraft\\world\\scores\\criteria\\ObjectiveCriteria.java\r\nnet\\minecraft\\world\\scores\\criteria\\package-info.java\r\nnet\\minecraft\\world\\ticks\\BlackholeTickAccess.java\r\nnet\\minecraft\\world\\ticks\\ContainerSingleItem.java\r\nnet\\minecraft\\world\\ticks\\LevelChunkTicks.java\r\nnet\\minecraft\\world\\ticks\\LevelTickAccess.java\r\nnet\\minecraft\\world\\ticks\\LevelTicks.java\r\nnet\\minecraft\\world\\ticks\\package-info.java\r\nnet\\minecraft\\world\\ticks\\ProtoChunkTicks.java\r\nnet\\minecraft\\world\\ticks\\SavedTick.java\r\nnet\\minecraft\\world\\ticks\\ScheduledTick.java\r\nnet\\minecraft\\world\\ticks\\SerializableTickContainer.java\r\nnet\\minecraft\\world\\ticks\\TickAccess.java\r\nnet\\minecraft\\world\\ticks\\TickContainerAccess.java\r\nnet\\minecraft\\world\\ticks\\TickPriority.java\r\nnet\\minecraft\\world\\ticks\\WorldGenTickAccess.java\r\nnet\\neoforged\\neoforge\r\nnet\\neoforged\\neoforge\\attachment\r\nnet\\neoforged\\neoforge\\capabilities\r\nnet\\neoforged\\neoforge\\client\r\nnet\\neoforged\\neoforge\\common\r\nnet\\neoforged\\neoforge\\data\r\nnet\\neoforged\\neoforge\\energy\r\nnet\\neoforged\\neoforge\\entity\r\nnet\\neoforged\\neoforge\\event\r\nnet\\neoforged\\neoforge\\fluids\r\nnet\\neoforged\\neoforge\\forge\r\nnet\\neoforged\\neoforge\\gametest\r\nnet\\neoforged\\neoforge\\internal\r\nnet\\neoforged\\neoforge\\items\r\nnet\\neoforged\\neoforge\\logging\r\nnet\\neoforged\\neoforge\\network\r\nnet\\neoforged\\neoforge\\registries\r\nnet\\neoforged\\neoforge\\resource\r\nnet\\neoforged\\neoforge\\server\r\nnet\\neoforged\\neoforge\\attachment\\AttachmentHolder.java\r\nnet\\neoforged\\neoforge\\attachment\\AttachmentInternals.java\r\nnet\\neoforged\\neoforge\\attachment\\AttachmentType.java\r\nnet\\neoforged\\neoforge\\attachment\\IAttachmentComparator.java\r\nnet\\neoforged\\neoforge\\attachment\\IAttachmentHolder.java\r\nnet\\neoforged\\neoforge\\attachment\\IAttachmentSerializer.java\r\nnet\\neoforged\\neoforge\\capabilities\\BaseCapability.java\r\nnet\\neoforged\\neoforge\\capabilities\\BlockCapability.java\r\nnet\\neoforged\\neoforge\\capabilities\\BlockCapabilityCache.java\r\nnet\\neoforged\\neoforge\\capabilities\\Capabilities.java\r\nnet\\neoforged\\neoforge\\capabilities\\CapabilityHooks.java\r\nnet\\neoforged\\neoforge\\capabilities\\CapabilityListenerHolder.java\r\nnet\\neoforged\\neoforge\\capabilities\\CapabilityRegistry.java\r\nnet\\neoforged\\neoforge\\capabilities\\EntityCapability.java\r\nnet\\neoforged\\neoforge\\capabilities\\IBlockCapabilityProvider.java\r\nnet\\neoforged\\neoforge\\capabilities\\ICapabilityInvalidationListener.java\r\nnet\\neoforged\\neoforge\\capabilities\\ICapabilityProvider.java\r\nnet\\neoforged\\neoforge\\capabilities\\ItemCapability.java\r\nnet\\neoforged\\neoforge\\capabilities\\RegisterCapabilitiesEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\r\nnet\\neoforged\\neoforge\\client\\extensions\r\nnet\\neoforged\\neoforge\\client\\gui\r\nnet\\neoforged\\neoforge\\client\\loading\r\nnet\\neoforged\\neoforge\\client\\model\r\nnet\\neoforged\\neoforge\\client\\settings\r\nnet\\neoforged\\neoforge\\client\\textures\r\nnet\\neoforged\\neoforge\\client\\BlockEntityRenderBoundsDebugRenderer.java\r\nnet\\neoforged\\neoforge\\client\\ChunkRenderTypeSet.java\r\nnet\\neoforged\\neoforge\\client\\ClientCommandHandler.java\r\nnet\\neoforged\\neoforge\\client\\ClientCommandSourceStack.java\r\nnet\\neoforged\\neoforge\\client\\ClientHooks.java\r\nnet\\neoforged\\neoforge\\client\\ClientNeoForgeMod.java\r\nnet\\neoforged\\neoforge\\client\\ColorResolverManager.java\r\nnet\\neoforged\\neoforge\\client\\ConfigScreenHandler.java\r\nnet\\neoforged\\neoforge\\client\\CreativeModeTabSearchRegistry.java\r\nnet\\neoforged\\neoforge\\client\\DimensionSpecialEffectsManager.java\r\nnet\\neoforged\\neoforge\\client\\EntitySpectatorShaderManager.java\r\nnet\\neoforged\\neoforge\\client\\ExtendedServerListData.java\r\nnet\\neoforged\\neoforge\\client\\FireworkShapeFactoryRegistry.java\r\nnet\\neoforged\\neoforge\\client\\GlStateBackup.java\r\nnet\\neoforged\\neoforge\\client\\IArmPoseTransformer.java\r\nnet\\neoforged\\neoforge\\client\\IItemDecorator.java\r\nnet\\neoforged\\neoforge\\client\\ItemDecoratorHandler.java\r\nnet\\neoforged\\neoforge\\client\\NamedRenderTypeManager.java\r\nnet\\neoforged\\neoforge\\client\\NeoForgeRenderTypes.java\r\nnet\\neoforged\\neoforge\\client\\PresetEditorManager.java\r\nnet\\neoforged\\neoforge\\client\\RecipeBookManager.java\r\nnet\\neoforged\\neoforge\\client\\RenderTypeGroup.java\r\nnet\\neoforged\\neoforge\\client\\RenderTypeHelper.java\r\nnet\\neoforged\\neoforge\\client\\StencilManager.java\r\nnet\\neoforged\\neoforge\\client\\event\\sound\r\nnet\\neoforged\\neoforge\\client\\event\\ClientChatEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ClientChatReceivedEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ClientPlayerChangeGameTypeEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ClientPlayerNetworkEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ComputeFovModifierEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ContainerScreenEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\CustomizeGuiOverlayEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\EntityRenderersEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\InputEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ModelEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\MovementInputUpdateEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\package-info.java\r\nnet\\neoforged\\neoforge\\client\\event\\RecipesUpdatedEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterClientCommandsEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterClientReloadListenersEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterClientTooltipComponentFactoriesEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterColorHandlersEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterDimensionSpecialEffectsEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterEntitySpectatorShadersEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterGuiOverlaysEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterItemDecorationsEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterKeyMappingsEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterNamedRenderTypesEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterParticleProvidersEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterPresetEditorsEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterRecipeBookCategoriesEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterShadersEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RegisterSpriteSourceTypesEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderArmEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderBlockScreenEffectEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderGuiEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderGuiOverlayEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderHandEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderHighlightEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderItemInFrameEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderLevelStageEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderLivingEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderNameTagEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderPlayerEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\RenderTooltipEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ScreenEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ScreenshotEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\TextureAtlasStitchedEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ToastAddEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\ViewportEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\sound\\package-info.java\r\nnet\\neoforged\\neoforge\\client\\event\\sound\\PlaySoundEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\sound\\PlaySoundSourceEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\sound\\PlayStreamingSourceEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\sound\\SoundEngineLoadEvent.java\r\nnet\\neoforged\\neoforge\\client\\event\\sound\\SoundEvent.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\common\r\nnet\\neoforged\\neoforge\\client\\extensions\\IAbstractWidgetExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IBakedModelExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IBlockEntityRendererExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IDimensionSpecialEffectsExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IFontExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IGuiGraphicsExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IKeyMappingExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IMinecraftExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IModelBakerExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IPoseStackExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\IVertexConsumerExtension.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\package-info.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\common\\IClientBlockExtensions.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\common\\IClientFluidTypeExtensions.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\common\\IClientItemExtensions.java\r\nnet\\neoforged\\neoforge\\client\\extensions\\common\\IClientMobEffectExtensions.java\r\nnet\\neoforged\\neoforge\\client\\gui\\overlay\r\nnet\\neoforged\\neoforge\\client\\gui\\widget\r\nnet\\neoforged\\neoforge\\client\\gui\\ClientTooltipComponentManager.java\r\nnet\\neoforged\\neoforge\\client\\gui\\CreativeTabsScreenPage.java\r\nnet\\neoforged\\neoforge\\client\\gui\\LoadingErrorScreen.java\r\nnet\\neoforged\\neoforge\\client\\gui\\ModListScreen.java\r\nnet\\neoforged\\neoforge\\client\\gui\\ModMismatchDisconnectedScreen.java\r\nnet\\neoforged\\neoforge\\client\\gui\\ScreenUtils.java\r\nnet\\neoforged\\neoforge\\client\\gui\\TitleScreenModUpdateIndicator.java\r\nnet\\neoforged\\neoforge\\client\\gui\\overlay\\ExtendedGui.java\r\nnet\\neoforged\\neoforge\\client\\gui\\overlay\\GuiOverlayManager.java\r\nnet\\neoforged\\neoforge\\client\\gui\\overlay\\IGuiOverlay.java\r\nnet\\neoforged\\neoforge\\client\\gui\\overlay\\NamedGuiOverlay.java\r\nnet\\neoforged\\neoforge\\client\\gui\\overlay\\VanillaGuiOverlay.java\r\nnet\\neoforged\\neoforge\\client\\gui\\widget\\ExtendedButton.java\r\nnet\\neoforged\\neoforge\\client\\gui\\widget\\ExtendedSlider.java\r\nnet\\neoforged\\neoforge\\client\\gui\\widget\\ModListWidget.java\r\nnet\\neoforged\\neoforge\\client\\gui\\widget\\ScrollPanel.java\r\nnet\\neoforged\\neoforge\\client\\gui\\widget\\UnicodeGlyphButton.java\r\nnet\\neoforged\\neoforge\\client\\loading\\ClientModLoader.java\r\nnet\\neoforged\\neoforge\\client\\loading\\NeoForgeLoadingOverlay.java\r\nnet\\neoforged\\neoforge\\client\\loading\\NoVizFallback.java\r\nnet\\neoforged\\neoforge\\client\\model\\data\r\nnet\\neoforged\\neoforge\\client\\model\\generators\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\r\nnet\\neoforged\\neoforge\\client\\model\\lighting\r\nnet\\neoforged\\neoforge\\client\\model\\obj\r\nnet\\neoforged\\neoforge\\client\\model\\pipeline\r\nnet\\neoforged\\neoforge\\client\\model\\renderable\r\nnet\\neoforged\\neoforge\\client\\model\\BakedModelWrapper.java\r\nnet\\neoforged\\neoforge\\client\\model\\CompositeModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\DynamicFluidContainerModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\ElementsModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\EmptyModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\ExtendedBlockModelDeserializer.java\r\nnet\\neoforged\\neoforge\\client\\model\\ExtraFaceData.java\r\nnet\\neoforged\\neoforge\\client\\model\\IDynamicBakedModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\IModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\IQuadTransformer.java\r\nnet\\neoforged\\neoforge\\client\\model\\ItemLayerModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\package-info.java\r\nnet\\neoforged\\neoforge\\client\\model\\QuadTransformers.java\r\nnet\\neoforged\\neoforge\\client\\model\\RegistryAwareItemModelShaper.java\r\nnet\\neoforged\\neoforge\\client\\model\\SeparateTransformsModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\SimpleModelState.java\r\nnet\\neoforged\\neoforge\\client\\model\\data\\ModelData.java\r\nnet\\neoforged\\neoforge\\client\\model\\data\\ModelDataManager.java\r\nnet\\neoforged\\neoforge\\client\\model\\data\\ModelProperty.java\r\nnet\\neoforged\\neoforge\\client\\model\\data\\MultipartModelData.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\loaders\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\BlockModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\BlockModelProvider.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\BlockStateProvider.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\ConfiguredModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\CustomLoaderBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\IGeneratedBlockState.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\ItemModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\ItemModelProvider.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\ModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\ModelFile.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\ModelProvider.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\MultiPartBlockStateBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\VariantBlockStateBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\loaders\\CompositeModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\loaders\\DynamicFluidContainerModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\loaders\\ItemLayerModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\loaders\\ObjModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\generators\\loaders\\SeparateTransformsModelBuilder.java\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\\BlockGeometryBakingContext.java\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\\GeometryLoaderManager.java\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\\IGeometryBakingContext.java\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\\IGeometryLoader.java\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\\IUnbakedGeometry.java\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\\SimpleUnbakedGeometry.java\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\\StandaloneGeometryBakingContext.java\r\nnet\\neoforged\\neoforge\\client\\model\\geometry\\UnbakedGeometryHelper.java\r\nnet\\neoforged\\neoforge\\client\\model\\lighting\\FlatQuadLighter.java\r\nnet\\neoforged\\neoforge\\client\\model\\lighting\\LightPipelineAwareModelBlockRenderer.java\r\nnet\\neoforged\\neoforge\\client\\model\\lighting\\QuadLighter.java\r\nnet\\neoforged\\neoforge\\client\\model\\lighting\\SmoothQuadLighter.java\r\nnet\\neoforged\\neoforge\\client\\model\\obj\\ObjLoader.java\r\nnet\\neoforged\\neoforge\\client\\model\\obj\\ObjMaterialLibrary.java\r\nnet\\neoforged\\neoforge\\client\\model\\obj\\ObjModel.java\r\nnet\\neoforged\\neoforge\\client\\model\\obj\\ObjTokenizer.java\r\nnet\\neoforged\\neoforge\\client\\model\\obj\\package-info.java\r\nnet\\neoforged\\neoforge\\client\\model\\pipeline\\package-info.java\r\nnet\\neoforged\\neoforge\\client\\model\\pipeline\\QuadBakingVertexConsumer.java\r\nnet\\neoforged\\neoforge\\client\\model\\pipeline\\RemappingVertexPipeline.java\r\nnet\\neoforged\\neoforge\\client\\model\\pipeline\\TransformingVertexPipeline.java\r\nnet\\neoforged\\neoforge\\client\\model\\pipeline\\VertexConsumerWrapper.java\r\nnet\\neoforged\\neoforge\\client\\model\\renderable\\BakedModelRenderable.java\r\nnet\\neoforged\\neoforge\\client\\model\\renderable\\CompositeRenderable.java\r\nnet\\neoforged\\neoforge\\client\\model\\renderable\\IRenderable.java\r\nnet\\neoforged\\neoforge\\client\\model\\renderable\\ITextureRenderTypeLookup.java\r\nnet\\neoforged\\neoforge\\client\\settings\\IKeyConflictContext.java\r\nnet\\neoforged\\neoforge\\client\\settings\\KeyConflictContext.java\r\nnet\\neoforged\\neoforge\\client\\settings\\KeyMappingLookup.java\r\nnet\\neoforged\\neoforge\\client\\settings\\KeyModifier.java\r\nnet\\neoforged\\neoforge\\client\\textures\\FluidSpriteCache.java\r\nnet\\neoforged\\neoforge\\client\\textures\\SpriteContentsConstructor.java\r\nnet\\neoforged\\neoforge\\client\\textures\\UnitTextureAtlasSprite.java\r\nnet\\neoforged\\neoforge\\common\\advancements\r\nnet\\neoforged\\neoforge\\common\\brewing\r\nnet\\neoforged\\neoforge\\common\\command\r\nnet\\neoforged\\neoforge\\common\\conditions\r\nnet\\neoforged\\neoforge\\common\\crafting\r\nnet\\neoforged\\neoforge\\common\\data\r\nnet\\neoforged\\neoforge\\common\\extensions\r\nnet\\neoforged\\neoforge\\common\\loot\r\nnet\\neoforged\\neoforge\\common\\property\r\nnet\\neoforged\\neoforge\\common\\ticket\r\nnet\\neoforged\\neoforge\\common\\util\r\nnet\\neoforged\\neoforge\\common\\world\r\nnet\\neoforged\\neoforge\\common\\BasicItemListing.java\r\nnet\\neoforged\\neoforge\\common\\BiomeManager.java\r\nnet\\neoforged\\neoforge\\common\\CommonHooks.java\r\nnet\\neoforged\\neoforge\\common\\CreativeModeTabRegistry.java\r\nnet\\neoforged\\neoforge\\common\\DeferredSpawnEggItem.java\r\nnet\\neoforged\\neoforge\\common\\DungeonHooks.java\r\nnet\\neoforged\\neoforge\\common\\FarmlandWaterManager.java\r\nnet\\neoforged\\neoforge\\common\\I18nExtension.java\r\nnet\\neoforged\\neoforge\\common\\IExtensibleEnum.java\r\nnet\\neoforged\\neoforge\\common\\IMinecartCollisionHandler.java\r\nnet\\neoforged\\neoforge\\common\\IPlantable.java\r\nnet\\neoforged\\neoforge\\common\\IShearable.java\r\nnet\\neoforged\\neoforge\\common\\LenientUnboundedMapCodec.java\r\nnet\\neoforged\\neoforge\\common\\ModConfigSpec.java\r\nnet\\neoforged\\neoforge\\common\\NeoForge.java\r\nnet\\neoforged\\neoforge\\common\\NeoForgeConfig.java\r\nnet\\neoforged\\neoforge\\common\\NeoForgeEventHandler.java\r\nnet\\neoforged\\neoforge\\common\\NeoForgeMod.java\r\nnet\\neoforged\\neoforge\\common\\PlantType.java\r\nnet\\neoforged\\neoforge\\common\\SimpleTier.java\r\nnet\\neoforged\\neoforge\\common\\SoundAction.java\r\nnet\\neoforged\\neoforge\\common\\SoundActions.java\r\nnet\\neoforged\\neoforge\\common\\Tags.java\r\nnet\\neoforged\\neoforge\\common\\TierSortingRegistry.java\r\nnet\\neoforged\\neoforge\\common\\ToolAction.java\r\nnet\\neoforged\\neoforge\\common\\ToolActions.java\r\nnet\\neoforged\\neoforge\\common\\UsernameCache.java\r\nnet\\neoforged\\neoforge\\common\\VillagerTradingManager.java\r\nnet\\neoforged\\neoforge\\common\\WorldWorkerManager.java\r\nnet\\neoforged\\neoforge\\common\\advancements\\critereon\r\nnet\\neoforged\\neoforge\\common\\advancements\\critereon\\ICustomItemPredicate.java\r\nnet\\neoforged\\neoforge\\common\\brewing\\BrewingRecipe.java\r\nnet\\neoforged\\neoforge\\common\\brewing\\BrewingRecipeRegistry.java\r\nnet\\neoforged\\neoforge\\common\\brewing\\IBrewingRecipe.java\r\nnet\\neoforged\\neoforge\\common\\brewing\\package-info.java\r\nnet\\neoforged\\neoforge\\common\\brewing\\VanillaBrewingRecipe.java\r\nnet\\neoforged\\neoforge\\common\\command\\EntitySelectorManager.java\r\nnet\\neoforged\\neoforge\\common\\command\\IEntitySelectorType.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\AndCondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\ConditionalOps.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\ConditionContext.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\FalseCondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\ICondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\IConditionBuilder.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\ItemExistsCondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\ModLoadedCondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\NotCondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\OrCondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\TagEmptyCondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\TrueCondition.java\r\nnet\\neoforged\\neoforge\\common\\conditions\\WithConditions.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\CompoundIngredient.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\ConditionalRecipe.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\ConditionalRecipeOutput.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\CraftingHelper.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\DifferenceIngredient.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\IngredientType.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\IntersectionIngredient.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\IRecipeContainer.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\IShapedRecipe.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\package-info.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\PartialNBTIngredient.java\r\nnet\\neoforged\\neoforge\\common\\crafting\\StrictNBTIngredient.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\r\nnet\\neoforged\\neoforge\\common\\data\\AdvancementProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\BlockTagsProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\DatapackBuiltinEntriesProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\ExistingFileHelper.java\r\nnet\\neoforged\\neoforge\\common\\data\\GlobalLootModifierProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\JsonCodecProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\LanguageProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\package-info.java\r\nnet\\neoforged\\neoforge\\common\\data\\ParticleDescriptionProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\SoundDefinition.java\r\nnet\\neoforged\\neoforge\\common\\data\\SoundDefinitionsProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\SpriteSourceProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\NeoForgeBiomeTagsProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\NeoForgeBlockTagsProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\NeoForgeEntityTypeTagsProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\NeoForgeFluidTagsProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\NeoForgeItemTagsProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\NeoForgeLootTableProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\NeoForgeRecipeProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\NeoForgeSpriteSourceProvider.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\package-info.java\r\nnet\\neoforged\\neoforge\\common\\data\\internal\\VanillaSoundDefinitionsProvider.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IAbstractMinecartExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IAdvancementBuilderExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IBaseRailBlockExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IBlockAndTintGetterExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IBlockEntityExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IBlockExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IBlockGetterExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IBlockStateExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IBoatExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IBucketPickupExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\ICommandSourceStackExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IDispensibleContainerItemExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IEnchantmentExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IEntityExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IFluidExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IFluidStateExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IFriendlyByteBufExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IHolderSetExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IIntrinsicHolderTagAppenderExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IItemExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IItemStackExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\ILevelExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\ILivingEntityExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IMenuTypeExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IMobEffectExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IMobEffectInstanceExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IPackResourcesExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IPlayerExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\IRecipeOutputExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\ITagAppenderExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\ITagBuilderExtension.java\r\nnet\\neoforged\\neoforge\\common\\extensions\\ITransformationExtension.java\r\nnet\\neoforged\\neoforge\\common\\loot\\CanToolPerformAction.java\r\nnet\\neoforged\\neoforge\\common\\loot\\IGlobalLootModifier.java\r\nnet\\neoforged\\neoforge\\common\\loot\\LootModifier.java\r\nnet\\neoforged\\neoforge\\common\\loot\\LootModifierManager.java\r\nnet\\neoforged\\neoforge\\common\\loot\\LootTableIdCondition.java\r\nnet\\neoforged\\neoforge\\common\\property\\Properties.java\r\nnet\\neoforged\\neoforge\\common\\ticket\\AABBTicket.java\r\nnet\\neoforged\\neoforge\\common\\ticket\\ChunkTicketManager.java\r\nnet\\neoforged\\neoforge\\common\\ticket\\ITicketGetter.java\r\nnet\\neoforged\\neoforge\\common\\ticket\\ITicketManager.java\r\nnet\\neoforged\\neoforge\\common\\ticket\\SimpleTicket.java\r\nnet\\neoforged\\neoforge\\common\\util\\BlockSnapshot.java\r\nnet\\neoforged\\neoforge\\common\\util\\CenterChunkPosComparator.java\r\nnet\\neoforged\\neoforge\\common\\util\\ConcatenatedListView.java\r\nnet\\neoforged\\neoforge\\common\\util\\DeferredSoundType.java\r\nnet\\neoforged\\neoforge\\common\\util\\DummySavedData.java\r\nnet\\neoforged\\neoforge\\common\\util\\FakePlayer.java\r\nnet\\neoforged\\neoforge\\common\\util\\FakePlayerFactory.java\r\nnet\\neoforged\\neoforge\\common\\util\\HexDumper.java\r\nnet\\neoforged\\neoforge\\common\\util\\INBTSerializable.java\r\nnet\\neoforged\\neoforge\\common\\util\\ITeleporter.java\r\nnet\\neoforged\\neoforge\\common\\util\\ItemStackMap.java\r\nnet\\neoforged\\neoforge\\common\\util\\JsonUtils.java\r\nnet\\neoforged\\neoforge\\common\\util\\Lazy.java\r\nnet\\neoforged\\neoforge\\common\\util\\LogicalSidedProvider.java\r\nnet\\neoforged\\neoforge\\common\\util\\LogMessageAdapter.java\r\nnet\\neoforged\\neoforge\\common\\util\\MavenVersionStringHelper.java\r\nnet\\neoforged\\neoforge\\common\\util\\MutableHashedLinkedMap.java\r\nnet\\neoforged\\neoforge\\common\\util\\NeoForgeExtraCodecs.java\r\nnet\\neoforged\\neoforge\\common\\util\\NonNullConsumer.java\r\nnet\\neoforged\\neoforge\\common\\util\\NonNullFunction.java\r\nnet\\neoforged\\neoforge\\common\\util\\NonNullLazy.java\r\nnet\\neoforged\\neoforge\\common\\util\\NonNullPredicate.java\r\nnet\\neoforged\\neoforge\\common\\util\\NonNullSupplier.java\r\nnet\\neoforged\\neoforge\\common\\util\\RecipeMatcher.java\r\nnet\\neoforged\\neoforge\\common\\util\\Size2i.java\r\nnet\\neoforged\\neoforge\\common\\util\\SortedProperties.java\r\nnet\\neoforged\\neoforge\\common\\util\\TablePrinter.java\r\nnet\\neoforged\\neoforge\\common\\util\\TextTable.java\r\nnet\\neoforged\\neoforge\\common\\util\\TransformationHelper.java\r\nnet\\neoforged\\neoforge\\common\\util\\TriPredicate.java\r\nnet\\neoforged\\neoforge\\common\\world\\chunk\r\nnet\\neoforged\\neoforge\\common\\world\\BiomeGenerationSettingsBuilder.java\r\nnet\\neoforged\\neoforge\\common\\world\\BiomeModifier.java\r\nnet\\neoforged\\neoforge\\common\\world\\BiomeModifiers.java\r\nnet\\neoforged\\neoforge\\common\\world\\BiomeSpecialEffectsBuilder.java\r\nnet\\neoforged\\neoforge\\common\\world\\ClimateSettingsBuilder.java\r\nnet\\neoforged\\neoforge\\common\\world\\MobSpawnSettingsBuilder.java\r\nnet\\neoforged\\neoforge\\common\\world\\ModifiableBiomeInfo.java\r\nnet\\neoforged\\neoforge\\common\\world\\ModifiableStructureInfo.java\r\nnet\\neoforged\\neoforge\\common\\world\\NoneBiomeModifier.java\r\nnet\\neoforged\\neoforge\\common\\world\\NoneStructureModifier.java\r\nnet\\neoforged\\neoforge\\common\\world\\PieceBeardifierModifier.java\r\nnet\\neoforged\\neoforge\\common\\world\\StructureModifier.java\r\nnet\\neoforged\\neoforge\\common\\world\\StructureSettingsBuilder.java\r\nnet\\neoforged\\neoforge\\common\\world\\chunk\\ForcedChunkManager.java\r\nnet\\neoforged\\neoforge\\common\\world\\chunk\\LoadingValidationCallback.java\r\nnet\\neoforged\\neoforge\\common\\world\\chunk\\RegisterTicketControllersEvent.java\r\nnet\\neoforged\\neoforge\\common\\world\\chunk\\TicketController.java\r\nnet\\neoforged\\neoforge\\common\\world\\chunk\\TicketHelper.java\r\nnet\\neoforged\\neoforge\\common\\world\\chunk\\TicketSet.java\r\nnet\\neoforged\\neoforge\\data\\event\r\nnet\\neoforged\\neoforge\\data\\loading\r\nnet\\neoforged\\neoforge\\data\\event\\GatherDataEvent.java\r\nnet\\neoforged\\neoforge\\data\\loading\\DatagenModLoader.java\r\nnet\\neoforged\\neoforge\\energy\\EmptyEnergyStorage.java\r\nnet\\neoforged\\neoforge\\energy\\EnergyStorage.java\r\nnet\\neoforged\\neoforge\\energy\\IEnergyStorage.java\r\nnet\\neoforged\\neoforge\\entity\\IEntityAdditionalSpawnData.java\r\nnet\\neoforged\\neoforge\\entity\\PartEntity.java\r\nnet\\neoforged\\neoforge\\event\\brewing\r\nnet\\neoforged\\neoforge\\event\\enchanting\r\nnet\\neoforged\\neoforge\\event\\entity\r\nnet\\neoforged\\neoforge\\event\\furnace\r\nnet\\neoforged\\neoforge\\event\\level\r\nnet\\neoforged\\neoforge\\event\\server\r\nnet\\neoforged\\neoforge\\event\\village\r\nnet\\neoforged\\neoforge\\event\\AddPackFindersEvent.java\r\nnet\\neoforged\\neoforge\\event\\AddReloadListenerEvent.java\r\nnet\\neoforged\\neoforge\\event\\AnvilUpdateEvent.java\r\nnet\\neoforged\\neoforge\\event\\BuildCreativeModeTabContentsEvent.java\r\nnet\\neoforged\\neoforge\\event\\CommandEvent.java\r\nnet\\neoforged\\neoforge\\event\\DifficultyChangeEvent.java\r\nnet\\neoforged\\neoforge\\event\\EventHooks.java\r\nnet\\neoforged\\neoforge\\event\\GameShuttingDownEvent.java\r\nnet\\neoforged\\neoforge\\event\\GrindstoneEvent.java\r\nnet\\neoforged\\neoforge\\event\\ItemAttributeModifierEvent.java\r\nnet\\neoforged\\neoforge\\event\\ItemStackedOnOtherEvent.java\r\nnet\\neoforged\\neoforge\\event\\LootTableLoadEvent.java\r\nnet\\neoforged\\neoforge\\event\\ModMismatchEvent.java\r\nnet\\neoforged\\neoforge\\event\\OnDatapackSyncEvent.java\r\nnet\\neoforged\\neoforge\\event\\PlayLevelSoundEvent.java\r\nnet\\neoforged\\neoforge\\event\\RegisterCommandsEvent.java\r\nnet\\neoforged\\neoforge\\event\\RegisterGameTestsEvent.java\r\nnet\\neoforged\\neoforge\\event\\RegisterStructureConversionsEvent.java\r\nnet\\neoforged\\neoforge\\event\\ServerChatEvent.java\r\nnet\\neoforged\\neoforge\\event\\TagsUpdatedEvent.java\r\nnet\\neoforged\\neoforge\\event\\TickEvent.java\r\nnet\\neoforged\\neoforge\\event\\VanillaGameEvent.java\r\nnet\\neoforged\\neoforge\\event\\brewing\\PlayerBrewedPotionEvent.java\r\nnet\\neoforged\\neoforge\\event\\brewing\\PotionBrewEvent.java\r\nnet\\neoforged\\neoforge\\event\\enchanting\\EnchantmentLevelSetEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\item\r\nnet\\neoforged\\neoforge\\event\\entity\\living\r\nnet\\neoforged\\neoforge\\event\\entity\\player\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityAttributeCreationEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityAttributeModificationEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityJoinLevelEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityLeaveLevelEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityMobGriefingEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityMountEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityStruckByLightningEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityTeleportEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\EntityTravelToDimensionEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\ProjectileImpactEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\SpawnPlacementRegisterEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\item\\ItemEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\item\\ItemExpireEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\item\\ItemTossEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\AnimalTameEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\BabyEntitySpawnEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\EnderManAngerEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingAttackEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingBreatheEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingChangeTargetEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingConversionEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingDamageEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingDeathEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingDestroyBlockEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingDropsEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingDrownEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingEntityUseItemEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingEquipmentChangeEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingExperienceDropEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingFallEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingGetProjectileEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingHealEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingHurtEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingKnockBackEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingPackSizeEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingSwapItemsEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LivingUseTotemEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\LootingLevelEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\MobEffectEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\MobSpawnEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\PotionColorCalculationEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\ShieldBlockEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\living\\ZombieEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\AdvancementEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\AnvilRepairEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\ArrowLooseEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\ArrowNockEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\AttackEntityEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\BonemealEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\CriticalHitEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\EntityItemPickupEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\FillBucketEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\ItemFishedEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\ItemTooltipEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PermissionsChangedEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerContainerEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerDestroyItemEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerFlyableFallEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerInteractEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerNegotiationEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerSetSpawnEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerSleepInBedEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerSpawnPhantomsEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerWakeUpEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\PlayerXpEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\SleepingLocationCheckEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\SleepingTimeCheckEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\TradeWithVillagerEvent.java\r\nnet\\neoforged\\neoforge\\event\\entity\\player\\UseItemOnBlockEvent.java\r\nnet\\neoforged\\neoforge\\event\\furnace\\FurnaceFuelBurnTimeEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\AlterGroundEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\BlockEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\ChunkDataEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\ChunkEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\ChunkTicketLevelUpdatedEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\ChunkWatchEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\ExplosionEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\LevelEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\NoteBlockEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\PistonEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\SaplingGrowTreeEvent.java\r\nnet\\neoforged\\neoforge\\event\\level\\SleepFinishedTimeEvent.java\r\nnet\\neoforged\\neoforge\\event\\server\\ServerAboutToStartEvent.java\r\nnet\\neoforged\\neoforge\\event\\server\\ServerLifecycleEvent.java\r\nnet\\neoforged\\neoforge\\event\\server\\ServerStartedEvent.java\r\nnet\\neoforged\\neoforge\\event\\server\\ServerStartingEvent.java\r\nnet\\neoforged\\neoforge\\event\\server\\ServerStoppedEvent.java\r\nnet\\neoforged\\neoforge\\event\\server\\ServerStoppingEvent.java\r\nnet\\neoforged\\neoforge\\event\\village\\VillagerTradesEvent.java\r\nnet\\neoforged\\neoforge\\event\\village\\VillageSiegeEvent.java\r\nnet\\neoforged\\neoforge\\event\\village\\WandererTradesEvent.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\r\nnet\\neoforged\\neoforge\\fluids\\BaseFlowingFluid.java\r\nnet\\neoforged\\neoforge\\fluids\\DispenseFluidContainer.java\r\nnet\\neoforged\\neoforge\\fluids\\FluidActionResult.java\r\nnet\\neoforged\\neoforge\\fluids\\FluidInteractionRegistry.java\r\nnet\\neoforged\\neoforge\\fluids\\FluidStack.java\r\nnet\\neoforged\\neoforge\\fluids\\FluidType.java\r\nnet\\neoforged\\neoforge\\fluids\\FluidUtil.java\r\nnet\\neoforged\\neoforge\\fluids\\IFluidBlock.java\r\nnet\\neoforged\\neoforge\\fluids\\IFluidTank.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\templates\r\nnet\\neoforged\\neoforge\\fluids\\capability\\wrappers\r\nnet\\neoforged\\neoforge\\fluids\\capability\\IFluidHandler.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\IFluidHandlerItem.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\templates\\EmptyFluidHandler.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\templates\\FluidHandlerItemStack.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\templates\\FluidHandlerItemStackSimple.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\templates\\FluidTank.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\templates\\VoidFluidHandler.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\wrappers\\BlockWrapper.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\wrappers\\BucketPickupHandlerWrapper.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\wrappers\\FluidBlockWrapper.java\r\nnet\\neoforged\\neoforge\\fluids\\capability\\wrappers\\FluidBucketWrapper.java\r\nnet\\neoforged\\neoforge\\forge\\snapshots\r\nnet\\neoforged\\neoforge\\forge\\snapshots\\ForgeSnapshotsMod.java\r\nnet\\neoforged\\neoforge\\forge\\snapshots\\ForgeSnapshotsModClient.java\r\nnet\\neoforged\\neoforge\\gametest\\BlockPosValueConverter.java\r\nnet\\neoforged\\neoforge\\gametest\\GameTestHolder.java\r\nnet\\neoforged\\neoforge\\gametest\\GameTestHooks.java\r\nnet\\neoforged\\neoforge\\gametest\\PrefixGameTestTemplate.java\r\nnet\\neoforged\\neoforge\\internal\\versions\r\nnet\\neoforged\\neoforge\\internal\\BrandingControl.java\r\nnet\\neoforged\\neoforge\\internal\\NeoForgeBindings.java\r\nnet\\neoforged\\neoforge\\internal\\NeoForgeStatesProvider.java\r\nnet\\neoforged\\neoforge\\internal\\RegistrationEvents.java\r\nnet\\neoforged\\neoforge\\internal\\TextComponentMessageFormatHandler.java\r\nnet\\neoforged\\neoforge\\internal\\versions\\neoforge\r\nnet\\neoforged\\neoforge\\internal\\versions\\neoform\r\nnet\\neoforged\\neoforge\\internal\\versions\\neoforge\\NeoForgeVersion.java\r\nnet\\neoforged\\neoforge\\internal\\versions\\neoform\\NeoFormVersion.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\r\nnet\\neoforged\\neoforge\\items\\IItemHandler.java\r\nnet\\neoforged\\neoforge\\items\\IItemHandlerModifiable.java\r\nnet\\neoforged\\neoforge\\items\\ItemHandlerHelper.java\r\nnet\\neoforged\\neoforge\\items\\ItemStackHandler.java\r\nnet\\neoforged\\neoforge\\items\\SlotItemHandler.java\r\nnet\\neoforged\\neoforge\\items\\VanillaHopperItemHandler.java\r\nnet\\neoforged\\neoforge\\items\\VanillaInventoryCodeHooks.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\CombinedInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\EmptyHandler.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\EntityArmorInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\EntityEquipmentInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\EntityHandsInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\ForwardingItemHandler.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\InvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\PlayerArmorInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\PlayerInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\PlayerMainInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\PlayerOffhandInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\RangedWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\RecipeWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\ShulkerItemStackInvWrapper.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\SidedInvWrapper.java\r\nnet\\neoforged\\neoforge\\logging\\CrashReportExtender.java\r\nnet\\neoforged\\neoforge\\logging\\PacketDump.java\r\nnet\\neoforged\\neoforge\\network\\custom\r\nnet\\neoforged\\neoforge\\network\\event\r\nnet\\neoforged\\neoforge\\network\\filters\r\nnet\\neoforged\\neoforge\\network\\simple\r\nnet\\neoforged\\neoforge\\network\\ConfigSync.java\r\nnet\\neoforged\\neoforge\\network\\ConnectionData.java\r\nnet\\neoforged\\neoforge\\network\\ConnectionType.java\r\nnet\\neoforged\\neoforge\\network\\DualStackUtils.java\r\nnet\\neoforged\\neoforge\\network\\HandshakeHandler.java\r\nnet\\neoforged\\neoforge\\network\\HandshakeMessages.java\r\nnet\\neoforged\\neoforge\\network\\IContainerFactory.java\r\nnet\\neoforged\\neoforge\\network\\ICustomPacketPayloadWithBuffer.java\r\nnet\\neoforged\\neoforge\\network\\ICustomQueryPayloadWithBuffer.java\r\nnet\\neoforged\\neoforge\\network\\INetworkDirection.java\r\nnet\\neoforged\\neoforge\\network\\LoginNetworkDirection.java\r\nnet\\neoforged\\neoforge\\network\\LoginWrapper.java\r\nnet\\neoforged\\neoforge\\network\\MCRegisterPacketHandler.java\r\nnet\\neoforged\\neoforge\\network\\NetworkConstants.java\r\nnet\\neoforged\\neoforge\\network\\NetworkEvent.java\r\nnet\\neoforged\\neoforge\\network\\NetworkHooks.java\r\nnet\\neoforged\\neoforge\\network\\NetworkInitialization.java\r\nnet\\neoforged\\neoforge\\network\\NetworkInstance.java\r\nnet\\neoforged\\neoforge\\network\\NetworkRegistry.java\r\nnet\\neoforged\\neoforge\\network\\PacketDistributor.java\r\nnet\\neoforged\\neoforge\\network\\PlayMessages.java\r\nnet\\neoforged\\neoforge\\network\\PlayNetworkDirection.java\r\nnet\\neoforged\\neoforge\\network\\ServerStatusPing.java\r\nnet\\neoforged\\neoforge\\network\\custom\\payload\r\nnet\\neoforged\\neoforge\\network\\custom\\payload\\SimplePayload.java\r\nnet\\neoforged\\neoforge\\network\\custom\\payload\\SimpleQueryPayload.java\r\nnet\\neoforged\\neoforge\\network\\event\\EventNetworkChannel.java\r\nnet\\neoforged\\neoforge\\network\\filters\\CommandTreeCleaner.java\r\nnet\\neoforged\\neoforge\\network\\filters\\NeoForgeConnectionNetworkFilter.java\r\nnet\\neoforged\\neoforge\\network\\filters\\NetworkFilters.java\r\nnet\\neoforged\\neoforge\\network\\filters\\VanillaConnectionNetworkFilter.java\r\nnet\\neoforged\\neoforge\\network\\filters\\VanillaPacketFilter.java\r\nnet\\neoforged\\neoforge\\network\\filters\\VanillaPacketSplitter.java\r\nnet\\neoforged\\neoforge\\network\\simple\\IndexedMessageCodec.java\r\nnet\\neoforged\\neoforge\\network\\simple\\MessageFunctions.java\r\nnet\\neoforged\\neoforge\\network\\simple\\SimpleChannel.java\r\nnet\\neoforged\\neoforge\\network\\simple\\SimpleLoginMessage.java\r\nnet\\neoforged\\neoforge\\network\\simple\\SimpleMessage.java\r\nnet\\neoforged\\neoforge\\registries\\callback\r\nnet\\neoforged\\neoforge\\registries\\holdersets\r\nnet\\neoforged\\neoforge\\registries\\BaseMappedRegistry.java\r\nnet\\neoforged\\neoforge\\registries\\DataPackRegistriesHooks.java\r\nnet\\neoforged\\neoforge\\registries\\DataPackRegistryEvent.java\r\nnet\\neoforged\\neoforge\\registries\\DeferredBlock.java\r\nnet\\neoforged\\neoforge\\registries\\DeferredHolder.java\r\nnet\\neoforged\\neoforge\\registries\\DeferredItem.java\r\nnet\\neoforged\\neoforge\\registries\\DeferredRegister.java\r\nnet\\neoforged\\neoforge\\registries\\GameData.java\r\nnet\\neoforged\\neoforge\\registries\\IdMappingEvent.java\r\nnet\\neoforged\\neoforge\\registries\\IRegistryExtension.java\r\nnet\\neoforged\\neoforge\\registries\\ModifyRegistriesEvent.java\r\nnet\\neoforged\\neoforge\\registries\\NeoForgeRegistries.java\r\nnet\\neoforged\\neoforge\\registries\\NeoForgeRegistriesSetup.java\r\nnet\\neoforged\\neoforge\\registries\\NeoForgeRegistryCallbacks.java\r\nnet\\neoforged\\neoforge\\registries\\NewRegistryEvent.java\r\nnet\\neoforged\\neoforge\\registries\\package-info.java\r\nnet\\neoforged\\neoforge\\registries\\RegisterEvent.java\r\nnet\\neoforged\\neoforge\\registries\\RegistryBuilder.java\r\nnet\\neoforged\\neoforge\\registries\\RegistryManager.java\r\nnet\\neoforged\\neoforge\\registries\\RegistrySnapshot.java\r\nnet\\neoforged\\neoforge\\registries\\callback\\AddCallback.java\r\nnet\\neoforged\\neoforge\\registries\\callback\\BakeCallback.java\r\nnet\\neoforged\\neoforge\\registries\\callback\\ClearCallback.java\r\nnet\\neoforged\\neoforge\\registries\\callback\\RegistryCallback.java\r\nnet\\neoforged\\neoforge\\registries\\holdersets\\AndHolderSet.java\r\nnet\\neoforged\\neoforge\\registries\\holdersets\\AnyHolderSet.java\r\nnet\\neoforged\\neoforge\\registries\\holdersets\\CompositeHolderSet.java\r\nnet\\neoforged\\neoforge\\registries\\holdersets\\HolderSetType.java\r\nnet\\neoforged\\neoforge\\registries\\holdersets\\ICustomHolderSet.java\r\nnet\\neoforged\\neoforge\\registries\\holdersets\\NotHolderSet.java\r\nnet\\neoforged\\neoforge\\registries\\holdersets\\OrHolderSet.java\r\nnet\\neoforged\\neoforge\\resource\\ContextAwareReloadListener.java\r\nnet\\neoforged\\neoforge\\resource\\DelegatingPackResources.java\r\nnet\\neoforged\\neoforge\\resource\\package-info.java\r\nnet\\neoforged\\neoforge\\resource\\ResourcePackLoader.java\r\nnet\\neoforged\\neoforge\\server\\command\r\nnet\\neoforged\\neoforge\\server\\console\r\nnet\\neoforged\\neoforge\\server\\loading\r\nnet\\neoforged\\neoforge\\server\\permission\r\nnet\\neoforged\\neoforge\\server\\timings\r\nnet\\neoforged\\neoforge\\server\\LanguageHook.java\r\nnet\\neoforged\\neoforge\\server\\ServerLifecycleHooks.java\r\nnet\\neoforged\\neoforge\\server\\command\\ChunkGenWorker.java\r\nnet\\neoforged\\neoforge\\server\\command\\CommandHelper.java\r\nnet\\neoforged\\neoforge\\server\\command\\ConfigCommand.java\r\nnet\\neoforged\\neoforge\\server\\command\\DimensionsCommand.java\r\nnet\\neoforged\\neoforge\\server\\command\\EntityCommand.java\r\nnet\\neoforged\\neoforge\\server\\command\\EnumArgument.java\r\nnet\\neoforged\\neoforge\\server\\command\\GenerateCommand.java\r\nnet\\neoforged\\neoforge\\server\\command\\ModIdArgument.java\r\nnet\\neoforged\\neoforge\\server\\command\\ModListCommand.java\r\nnet\\neoforged\\neoforge\\server\\command\\NeoForgeCommand.java\r\nnet\\neoforged\\neoforge\\server\\command\\package-info.java\r\nnet\\neoforged\\neoforge\\server\\command\\TagsCommand.java\r\nnet\\neoforged\\neoforge\\server\\command\\TextComponentHelper.java\r\nnet\\neoforged\\neoforge\\server\\command\\TPSCommand.java\r\nnet\\neoforged\\neoforge\\server\\command\\TrackCommand.java\r\nnet\\neoforged\\neoforge\\server\\console\\ConsoleCommandCompleter.java\r\nnet\\neoforged\\neoforge\\server\\console\\TerminalHandler.java\r\nnet\\neoforged\\neoforge\\server\\loading\\ServerModLoader.java\r\nnet\\neoforged\\neoforge\\server\\permission\\events\r\nnet\\neoforged\\neoforge\\server\\permission\\exceptions\r\nnet\\neoforged\\neoforge\\server\\permission\\handler\r\nnet\\neoforged\\neoforge\\server\\permission\\nodes\r\nnet\\neoforged\\neoforge\\server\\permission\\package-info.java\r\nnet\\neoforged\\neoforge\\server\\permission\\PermissionAPI.java\r\nnet\\neoforged\\neoforge\\server\\permission\\events\\PermissionGatherEvent.java\r\nnet\\neoforged\\neoforge\\server\\permission\\exceptions\\UnregisteredPermissionException.java\r\nnet\\neoforged\\neoforge\\server\\permission\\handler\\DefaultPermissionHandler.java\r\nnet\\neoforged\\neoforge\\server\\permission\\handler\\IPermissionHandler.java\r\nnet\\neoforged\\neoforge\\server\\permission\\handler\\IPermissionHandlerFactory.java\r\nnet\\neoforged\\neoforge\\server\\permission\\nodes\\PermissionDynamicContext.java\r\nnet\\neoforged\\neoforge\\server\\permission\\nodes\\PermissionDynamicContextKey.java\r\nnet\\neoforged\\neoforge\\server\\permission\\nodes\\PermissionNode.java\r\nnet\\neoforged\\neoforge\\server\\permission\\nodes\\PermissionType.java\r\nnet\\neoforged\\neoforge\\server\\permission\\nodes\\PermissionTypes.java\r\nnet\\neoforged\\neoforge\\server\\timings\\ObjectTimings.java\r\nnet\\neoforged\\neoforge\\server\\timings\\TimeTracker.java\r\n```\r\n\r\n===\r\n\r\nWe are in the process of migrating the Super Factory Manager (SFM) mod from Minecraft 1.20.2 to 1.20.3.\r\nSome migration steps have been performed manually, but much work remains to be done.\r\nWe are in an information gathering stage.\r\nIdentify the subset of library files presented above that seem relevant to updating the SFM mod to accommodate the changes between Minecraft versions. \r\n\r\nYour response should be formatted as a markdown document.\r\n\r\nHere is a sample of what your response should look like:\r\n\r\n===\r\n# Migration Overview\r\n\r\n## Capabilities\r\n\r\nCapabilities have been reworked. \r\n\r\n```\r\nnet\\neoforged\\neoforge\\capabilities\\BaseCapability.java\r\nnet\\neoforged\\neoforge\\capabilities\\BlockCapability.java\r\nnet\\neoforged\\neoforge\\capabilities\\BlockCapabilityCache.java\r\nnet\\neoforged\\neoforge\\capabilities\\Capabilities.java\r\nnet\\neoforged\\neoforge\\capabilities\\CapabilityHooks.java\r\nnet\\neoforged\\neoforge\\capabilities\\CapabilityListenerHolder.java\r\nnet\\neoforged\\neoforge\\capabilities\\CapabilityRegistry.java\r\nnet\\neoforged\\neoforge\\capabilities\\EntityCapability.java\r\nnet\\neoforged\\neoforge\\capabilities\\IBlockCapabilityProvider.java\r\nnet\\neoforged\\neoforge\\capabilities\\ICapabilityInvalidationListener.java\r\nnet\\neoforged\\neoforge\\capabilities\\ICapabilityProvider.java\r\nnet\\neoforged\\neoforge\\capabilities\\ItemCapability.java\r\nnet\\neoforged\\neoforge\\capabilities\\RegisterCapabilitiesEvent.java\r\n```\r\n\r\n## Recipes\r\n\r\nFinishedRecipe no longer exists. Instead, a RecipeProvider with a buildRecipes method must be provided\r\n\r\n```\r\nnet\\neoforged\\neoforge\\common\\util\\RecipeMatcher.java\r\nnet\\neoforged\\neoforge\\items\\wrapper\\RecipeWrapper.java\r\n```\r\n\r\n## Some other heading\r\n\r\nSome explanation\r\n\r\n```\r\nsome file\r\nanother file\r\n```\r\n\r\n===\r\n\r\nYou are expected to provide more sections and more detailed explanations compared to the example.",
        "files": []
    },
    "response": {
        "candidates": [
            {
                "content": {
                    "parts": [
                        {
                            "text": "===\n# Migration Overview\n\n## Capabilities\n\nThe `net.neoforged.neoforge.common.capabilities` package and its associated classes like `Capability` and `LazyOptional` no longer exist. This implies a significant change in the capability system, and the SFM mod will need to adapt to the new way of handling capabilities.\n\nRelevant files:\n\n```\nnet\\neoforged\\neoforge\\capabilities\\BaseCapability.java\nnet\\neoforged\\neoforge\\capabilities\\BlockCapability.java\nnet\\neoforged\\neoforge\\capabilities\\BlockCapabilityCache.java\nnet\\neoforged\\neoforge\\capabilities\\Capabilities.java\nnet\\neoforged\\neoforge\\capabilities\\CapabilityHooks.java\nnet\\neoforged\\neoforge\\capabilities\\CapabilityListenerHolder.java\nnet\\neoforged\\neoforge\\capabilities\\CapabilityRegistry.java\nnet\\neoforged\\neoforge\\capabilities\\EntityCapability.java\nnet\\neoforged\\neoforge\\capabilities\\IBlockCapabilityProvider.java\nnet\\neoforged\\neoforge\\capabilities\\ICapabilityInvalidationListener.java\nnet\\neoforged\\neoforge\\capabilities\\ICapabilityProvider.java\nnet\\neoforged\\neoforge\\capabilities\\ItemCapability.java\nnet\\neoforged\\neoforge\\capabilities\\RegisterCapabilitiesEvent.java\n```\n\n\n\n## Recipes\n\nThe `FinishedRecipe` class is no longer available, indicating a change in how recipes are handled. The SFM mod's `PrintingPressFinishedRecipe` class will need to be updated to align with the new recipe system. This might involve creating a RecipeProvider and implementing the `buildRecipes` method.\n\nRelevant files:\n\n```\nnet\\neoforged\\neoforge\\common\\util\\RecipeMatcher.java\nnet\\neoforged\\neoforge\\items\\wrapper\\RecipeWrapper.java\n```\n\n\n\n## Item Serialization\n\nThe `serializeNBT()` method on `ItemStack` appears to be missing. The SFM mod's `FormItem` class utilizes this method, and an alternative method or approach will need to be found to achieve the desired functionality.\n\nRelevant files:\n\n```\nnet\\minecraft\\world\\item\\ItemStack.java\n```\n\n\n\n## Events\n\nThe provided library tree mentions several event classes within the `net.neoforged.neoforge.event` package. This suggests that there might be changes or additions to the event system. Reviewing these classes and comparing them to the events used in the SFM mod will be necessary to ensure compatibility.\n\nRelevant files:\n\n```\nnet\\neoforged\\neoforge\\event\\... \n```\n\n\n\n## Network and Utilities\n\nThe library tree includes various classes related to networking and utilities within the `net.neoforged.neoforge.network` and `net.neoforged.neoforge.common.util` packages. These changes might impact how the SFM mod handles network communication and utilizes utility functions.\n\nRelevant files:\n\n```\nnet\\neoforged\\neoforge\\network\\...\nnet\\neoforged\\neoforge\\common\\util\\...\n```\n\n=== \n"
                        }
                    ],
                    "role": "model"
                },
                "finishReason": "STOP",
                "index": 0,
                "safetyRatings": [
                    {
                        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                        "probability": "NEGLIGIBLE"
                    },
                    {
                        "category": "HARM_CATEGORY_HATE_SPEECH",
                        "probability": "NEGLIGIBLE"
                    },
                    {
                        "category": "HARM_CATEGORY_HARASSMENT",
                        "probability": "NEGLIGIBLE"
                    },
                    {
                        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                        "probability": "NEGLIGIBLE"
                    }
                ]
            }
        ]
    }
}